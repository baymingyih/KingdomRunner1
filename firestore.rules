rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.resource.data.uid == userId; // Allow initial creation
      allow update: if isOwner(userId) || isAdmin(); // Owner or admin can modify
      allow delete: if isAdmin(); // Only admin can delete users
    }
    
    // Activities - allow public read for social wall
    match /activities/{activityId} {
      allow read: if true; // Public read access
      
      // Validate activity data
      function isValidActivity() {
        let data = request.resource.data;
        return data.userId is string &&
               data.eventId is string &&
               (data.distance is number || data.distance is string) &&
               (data.duration is number || data.duration is string) &&
               data.location is string &&
               (!('imageUrl' in data) || data.imageUrl is string) &&
               (!('notes' in data) || data.notes is string || data.notes == null);
      }
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                            (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Events
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // Strava tokens
    match /stravaTokens/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Activity social features (likes, comments)
    match /activitySocial/{activityId} {
      allow read: if isAuthenticated();
      
      // Validate social data
      function isValidSocialData() {
        let data = request.resource.data;
        return (!('likes' in data) || data.likes is list) &&
               (!('comments' in data) || data.comments is list) &&
               (!('praises' in data) || data.praises is list);
      }
      
      // Allow creation and updates for all authenticated users
      allow create, update: if isAuthenticated();
    }
  }
}
