/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/undici";
exports.ids = ["vendor-chunks/undici"];
exports.modules = {

/***/ "(ssr)/./node_modules/undici/index.js":
/*!**************************************!*\
  !*** ./node_modules/undici/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst Client = __webpack_require__(/*! ./lib/dispatcher/client */ \"(ssr)/./node_modules/undici/lib/dispatcher/client.js\");\nconst Dispatcher = __webpack_require__(/*! ./lib/dispatcher/dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\");\nconst Pool = __webpack_require__(/*! ./lib/dispatcher/pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst BalancedPool = __webpack_require__(/*! ./lib/dispatcher/balanced-pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/balanced-pool.js\");\nconst Agent = __webpack_require__(/*! ./lib/dispatcher/agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nconst ProxyAgent = __webpack_require__(/*! ./lib/dispatcher/proxy-agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/proxy-agent.js\");\nconst EnvHttpProxyAgent = __webpack_require__(/*! ./lib/dispatcher/env-http-proxy-agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/env-http-proxy-agent.js\");\nconst RetryAgent = __webpack_require__(/*! ./lib/dispatcher/retry-agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/retry-agent.js\");\nconst errors = __webpack_require__(/*! ./lib/core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ./lib/core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  InvalidArgumentError\n} = errors;\nconst api = __webpack_require__(/*! ./lib/api */ \"(ssr)/./node_modules/undici/lib/api/index.js\");\nconst buildConnector = __webpack_require__(/*! ./lib/core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst MockClient = __webpack_require__(/*! ./lib/mock/mock-client */ \"(ssr)/./node_modules/undici/lib/mock/mock-client.js\");\nconst MockAgent = __webpack_require__(/*! ./lib/mock/mock-agent */ \"(ssr)/./node_modules/undici/lib/mock/mock-agent.js\");\nconst MockPool = __webpack_require__(/*! ./lib/mock/mock-pool */ \"(ssr)/./node_modules/undici/lib/mock/mock-pool.js\");\nconst mockErrors = __webpack_require__(/*! ./lib/mock/mock-errors */ \"(ssr)/./node_modules/undici/lib/mock/mock-errors.js\");\nconst RetryHandler = __webpack_require__(/*! ./lib/handler/retry-handler */ \"(ssr)/./node_modules/undici/lib/handler/retry-handler.js\");\nconst {\n  getGlobalDispatcher,\n  setGlobalDispatcher\n} = __webpack_require__(/*! ./lib/global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst DecoratorHandler = __webpack_require__(/*! ./lib/handler/decorator-handler */ \"(ssr)/./node_modules/undici/lib/handler/decorator-handler.js\");\nconst RedirectHandler = __webpack_require__(/*! ./lib/handler/redirect-handler */ \"(ssr)/./node_modules/undici/lib/handler/redirect-handler.js\");\nconst createRedirectInterceptor = __webpack_require__(/*! ./lib/interceptor/redirect-interceptor */ \"(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js\");\nObject.assign(Dispatcher.prototype, api);\nmodule.exports.Dispatcher = Dispatcher;\nmodule.exports.Client = Client;\nmodule.exports.Pool = Pool;\nmodule.exports.BalancedPool = BalancedPool;\nmodule.exports.Agent = Agent;\nmodule.exports.ProxyAgent = ProxyAgent;\nmodule.exports.EnvHttpProxyAgent = EnvHttpProxyAgent;\nmodule.exports.RetryAgent = RetryAgent;\nmodule.exports.RetryHandler = RetryHandler;\nmodule.exports.DecoratorHandler = DecoratorHandler;\nmodule.exports.RedirectHandler = RedirectHandler;\nmodule.exports.createRedirectInterceptor = createRedirectInterceptor;\nmodule.exports.interceptors = {\n  redirect: __webpack_require__(/*! ./lib/interceptor/redirect */ \"(ssr)/./node_modules/undici/lib/interceptor/redirect.js\"),\n  retry: __webpack_require__(/*! ./lib/interceptor/retry */ \"(ssr)/./node_modules/undici/lib/interceptor/retry.js\"),\n  dump: __webpack_require__(/*! ./lib/interceptor/dump */ \"(ssr)/./node_modules/undici/lib/interceptor/dump.js\")\n};\nmodule.exports.buildConnector = buildConnector;\nmodule.exports.errors = errors;\nmodule.exports.util = {\n  parseHeaders: util.parseHeaders,\n  headerNameToString: util.headerNameToString\n};\nfunction makeDispatcher(fn) {\n  return (url, opts, handler) => {\n    if (typeof opts === 'function') {\n      handler = opts;\n      opts = null;\n    }\n    if (!url || typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL)) {\n      throw new InvalidArgumentError('invalid url');\n    }\n    if (opts != null && typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts');\n    }\n    if (opts && opts.path != null) {\n      if (typeof opts.path !== 'string') {\n        throw new InvalidArgumentError('invalid opts.path');\n      }\n      let path = opts.path;\n      if (!opts.path.startsWith('/')) {\n        path = `/${path}`;\n      }\n      url = new URL(util.parseOrigin(url).origin + path);\n    } else {\n      if (!opts) {\n        opts = typeof url === 'object' ? url : {};\n      }\n      url = util.parseURL(url);\n    }\n    const {\n      agent,\n      dispatcher = getGlobalDispatcher()\n    } = opts;\n    if (agent) {\n      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?');\n    }\n    return fn.call(dispatcher, {\n      ...opts,\n      origin: url.origin,\n      path: url.search ? `${url.pathname}${url.search}` : url.pathname,\n      method: opts.method || (opts.body ? 'PUT' : 'GET')\n    }, handler);\n  };\n}\nmodule.exports.setGlobalDispatcher = setGlobalDispatcher;\nmodule.exports.getGlobalDispatcher = getGlobalDispatcher;\nconst fetchImpl = (__webpack_require__(/*! ./lib/web/fetch */ \"(ssr)/./node_modules/undici/lib/web/fetch/index.js\").fetch);\nmodule.exports.fetch = async function fetch(init) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  try {\n    return await fetchImpl(init, options);\n  } catch (err) {\n    if (err && typeof err === 'object') {\n      Error.captureStackTrace(err);\n    }\n    throw err;\n  }\n};\nmodule.exports.Headers = __webpack_require__(/*! ./lib/web/fetch/headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\").Headers;\nmodule.exports.Response = __webpack_require__(/*! ./lib/web/fetch/response */ \"(ssr)/./node_modules/undici/lib/web/fetch/response.js\").Response;\nmodule.exports.Request = __webpack_require__(/*! ./lib/web/fetch/request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\").Request;\nmodule.exports.FormData = __webpack_require__(/*! ./lib/web/fetch/formdata */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\").FormData;\nmodule.exports.File = globalThis.File ?? (__webpack_require__(/*! node:buffer */ \"node:buffer\").File);\nmodule.exports.FileReader = __webpack_require__(/*! ./lib/web/fileapi/filereader */ \"(ssr)/./node_modules/undici/lib/web/fileapi/filereader.js\").FileReader;\nconst {\n  setGlobalOrigin,\n  getGlobalOrigin\n} = __webpack_require__(/*! ./lib/web/fetch/global */ \"(ssr)/./node_modules/undici/lib/web/fetch/global.js\");\nmodule.exports.setGlobalOrigin = setGlobalOrigin;\nmodule.exports.getGlobalOrigin = getGlobalOrigin;\nconst {\n  CacheStorage\n} = __webpack_require__(/*! ./lib/web/cache/cachestorage */ \"(ssr)/./node_modules/undici/lib/web/cache/cachestorage.js\");\nconst {\n  kConstruct\n} = __webpack_require__(/*! ./lib/web/cache/symbols */ \"(ssr)/./node_modules/undici/lib/web/cache/symbols.js\");\n\n// Cache & CacheStorage are tightly coupled with fetch. Even if it may run\n// in an older version of Node, it doesn't have any use without fetch.\nmodule.exports.caches = new CacheStorage(kConstruct);\nconst {\n  deleteCookie,\n  getCookies,\n  getSetCookies,\n  setCookie\n} = __webpack_require__(/*! ./lib/web/cookies */ \"(ssr)/./node_modules/undici/lib/web/cookies/index.js\");\nmodule.exports.deleteCookie = deleteCookie;\nmodule.exports.getCookies = getCookies;\nmodule.exports.getSetCookies = getSetCookies;\nmodule.exports.setCookie = setCookie;\nconst {\n  parseMIMEType,\n  serializeAMimeType\n} = __webpack_require__(/*! ./lib/web/fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nmodule.exports.parseMIMEType = parseMIMEType;\nmodule.exports.serializeAMimeType = serializeAMimeType;\nconst {\n  CloseEvent,\n  ErrorEvent,\n  MessageEvent\n} = __webpack_require__(/*! ./lib/web/websocket/events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nmodule.exports.WebSocket = __webpack_require__(/*! ./lib/web/websocket/websocket */ \"(ssr)/./node_modules/undici/lib/web/websocket/websocket.js\").WebSocket;\nmodule.exports.CloseEvent = CloseEvent;\nmodule.exports.ErrorEvent = ErrorEvent;\nmodule.exports.MessageEvent = MessageEvent;\nmodule.exports.request = makeDispatcher(api.request);\nmodule.exports.stream = makeDispatcher(api.stream);\nmodule.exports.pipeline = makeDispatcher(api.pipeline);\nmodule.exports.connect = makeDispatcher(api.connect);\nmodule.exports.upgrade = makeDispatcher(api.upgrade);\nmodule.exports.MockClient = MockClient;\nmodule.exports.MockPool = MockPool;\nmodule.exports.MockAgent = MockAgent;\nmodule.exports.mockErrors = mockErrors;\nconst {\n  EventSource\n} = __webpack_require__(/*! ./lib/web/eventsource/eventsource */ \"(ssr)/./node_modules/undici/lib/web/eventsource/eventsource.js\");\nmodule.exports.EventSource = EventSource;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/abort-signal.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/api/abort-signal.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  addAbortListener\n} = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  RequestAbortedError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst kListener = Symbol('kListener');\nconst kSignal = Symbol('kSignal');\nfunction abort(self) {\n  if (self.abort) {\n    self.abort(self[kSignal]?.reason);\n  } else {\n    self.reason = self[kSignal]?.reason ?? new RequestAbortedError();\n  }\n  removeSignal(self);\n}\nfunction addSignal(self, signal) {\n  self.reason = null;\n  self[kSignal] = null;\n  self[kListener] = null;\n  if (!signal) {\n    return;\n  }\n  if (signal.aborted) {\n    abort(self);\n    return;\n  }\n  self[kSignal] = signal;\n  self[kListener] = () => {\n    abort(self);\n  };\n  addAbortListener(self[kSignal], self[kListener]);\n}\nfunction removeSignal(self) {\n  if (!self[kSignal]) {\n    return;\n  }\n  if ('removeEventListener' in self[kSignal]) {\n    self[kSignal].removeEventListener('abort', self[kListener]);\n  } else {\n    self[kSignal].removeListener('abort', self[kListener]);\n  }\n  self[kSignal] = null;\n  self[kListener] = null;\n}\nmodule.exports = {\n  addSignal,\n  removeSignal\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvYWJvcnQtc2lnbmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU07RUFBRUE7QUFBaUIsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLGtFQUFjLENBQUM7QUFDcEQsTUFBTTtFQUFFQztBQUFvQixDQUFDLEdBQUdELG1CQUFPLENBQUMsc0VBQWdCLENBQUM7QUFFekQsTUFBTUUsU0FBUyxHQUFHQyxNQUFNLENBQUMsV0FBVyxDQUFDO0FBQ3JDLE1BQU1DLE9BQU8sR0FBR0QsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUVqQyxTQUFTRSxLQUFLQSxDQUFFQyxJQUFJLEVBQUU7RUFDcEIsSUFBSUEsSUFBSSxDQUFDRCxLQUFLLEVBQUU7SUFDZEMsSUFBSSxDQUFDRCxLQUFLLENBQUNDLElBQUksQ0FBQ0YsT0FBTyxDQUFDLEVBQUVHLE1BQU0sQ0FBQztFQUNuQyxDQUFDLE1BQU07SUFDTEQsSUFBSSxDQUFDQyxNQUFNLEdBQUdELElBQUksQ0FBQ0YsT0FBTyxDQUFDLEVBQUVHLE1BQU0sSUFBSSxJQUFJTixtQkFBbUIsQ0FBQyxDQUFDO0VBQ2xFO0VBQ0FPLFlBQVksQ0FBQ0YsSUFBSSxDQUFDO0FBQ3BCO0FBRUEsU0FBU0csU0FBU0EsQ0FBRUgsSUFBSSxFQUFFSSxNQUFNLEVBQUU7RUFDaENKLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUk7RUFFbEJELElBQUksQ0FBQ0YsT0FBTyxDQUFDLEdBQUcsSUFBSTtFQUNwQkUsSUFBSSxDQUFDSixTQUFTLENBQUMsR0FBRyxJQUFJO0VBRXRCLElBQUksQ0FBQ1EsTUFBTSxFQUFFO0lBQ1g7RUFDRjtFQUVBLElBQUlBLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFO0lBQ2xCTixLQUFLLENBQUNDLElBQUksQ0FBQztJQUNYO0VBQ0Y7RUFFQUEsSUFBSSxDQUFDRixPQUFPLENBQUMsR0FBR00sTUFBTTtFQUN0QkosSUFBSSxDQUFDSixTQUFTLENBQUMsR0FBRyxNQUFNO0lBQ3RCRyxLQUFLLENBQUNDLElBQUksQ0FBQztFQUNiLENBQUM7RUFFRFAsZ0JBQWdCLENBQUNPLElBQUksQ0FBQ0YsT0FBTyxDQUFDLEVBQUVFLElBQUksQ0FBQ0osU0FBUyxDQUFDLENBQUM7QUFDbEQ7QUFFQSxTQUFTTSxZQUFZQSxDQUFFRixJQUFJLEVBQUU7RUFDM0IsSUFBSSxDQUFDQSxJQUFJLENBQUNGLE9BQU8sQ0FBQyxFQUFFO0lBQ2xCO0VBQ0Y7RUFFQSxJQUFJLHFCQUFxQixJQUFJRSxJQUFJLENBQUNGLE9BQU8sQ0FBQyxFQUFFO0lBQzFDRSxJQUFJLENBQUNGLE9BQU8sQ0FBQyxDQUFDUSxtQkFBbUIsQ0FBQyxPQUFPLEVBQUVOLElBQUksQ0FBQ0osU0FBUyxDQUFDLENBQUM7RUFDN0QsQ0FBQyxNQUFNO0lBQ0xJLElBQUksQ0FBQ0YsT0FBTyxDQUFDLENBQUNTLGNBQWMsQ0FBQyxPQUFPLEVBQUVQLElBQUksQ0FBQ0osU0FBUyxDQUFDLENBQUM7RUFDeEQ7RUFFQUksSUFBSSxDQUFDRixPQUFPLENBQUMsR0FBRyxJQUFJO0VBQ3BCRSxJQUFJLENBQUNKLFNBQVMsQ0FBQyxHQUFHLElBQUk7QUFDeEI7QUFFQVksTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZk4sU0FBUztFQUNURDtBQUNGLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvYWJvcnQtc2lnbmFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgYWRkQWJvcnRMaXN0ZW5lciB9ID0gcmVxdWlyZSgnLi4vY29yZS91dGlsJylcbmNvbnN0IHsgUmVxdWVzdEFib3J0ZWRFcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuXG5jb25zdCBrTGlzdGVuZXIgPSBTeW1ib2woJ2tMaXN0ZW5lcicpXG5jb25zdCBrU2lnbmFsID0gU3ltYm9sKCdrU2lnbmFsJylcblxuZnVuY3Rpb24gYWJvcnQgKHNlbGYpIHtcbiAgaWYgKHNlbGYuYWJvcnQpIHtcbiAgICBzZWxmLmFib3J0KHNlbGZba1NpZ25hbF0/LnJlYXNvbilcbiAgfSBlbHNlIHtcbiAgICBzZWxmLnJlYXNvbiA9IHNlbGZba1NpZ25hbF0/LnJlYXNvbiA/PyBuZXcgUmVxdWVzdEFib3J0ZWRFcnJvcigpXG4gIH1cbiAgcmVtb3ZlU2lnbmFsKHNlbGYpXG59XG5cbmZ1bmN0aW9uIGFkZFNpZ25hbCAoc2VsZiwgc2lnbmFsKSB7XG4gIHNlbGYucmVhc29uID0gbnVsbFxuXG4gIHNlbGZba1NpZ25hbF0gPSBudWxsXG4gIHNlbGZba0xpc3RlbmVyXSA9IG51bGxcblxuICBpZiAoIXNpZ25hbCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XG4gICAgYWJvcnQoc2VsZilcbiAgICByZXR1cm5cbiAgfVxuXG4gIHNlbGZba1NpZ25hbF0gPSBzaWduYWxcbiAgc2VsZltrTGlzdGVuZXJdID0gKCkgPT4ge1xuICAgIGFib3J0KHNlbGYpXG4gIH1cblxuICBhZGRBYm9ydExpc3RlbmVyKHNlbGZba1NpZ25hbF0sIHNlbGZba0xpc3RlbmVyXSlcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU2lnbmFsIChzZWxmKSB7XG4gIGlmICghc2VsZltrU2lnbmFsXSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKCdyZW1vdmVFdmVudExpc3RlbmVyJyBpbiBzZWxmW2tTaWduYWxdKSB7XG4gICAgc2VsZltrU2lnbmFsXS5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIHNlbGZba0xpc3RlbmVyXSlcbiAgfSBlbHNlIHtcbiAgICBzZWxmW2tTaWduYWxdLnJlbW92ZUxpc3RlbmVyKCdhYm9ydCcsIHNlbGZba0xpc3RlbmVyXSlcbiAgfVxuXG4gIHNlbGZba1NpZ25hbF0gPSBudWxsXG4gIHNlbGZba0xpc3RlbmVyXSA9IG51bGxcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFkZFNpZ25hbCxcbiAgcmVtb3ZlU2lnbmFsXG59XG4iXSwibmFtZXMiOlsiYWRkQWJvcnRMaXN0ZW5lciIsInJlcXVpcmUiLCJSZXF1ZXN0QWJvcnRlZEVycm9yIiwia0xpc3RlbmVyIiwiU3ltYm9sIiwia1NpZ25hbCIsImFib3J0Iiwic2VsZiIsInJlYXNvbiIsInJlbW92ZVNpZ25hbCIsImFkZFNpZ25hbCIsInNpZ25hbCIsImFib3J0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/abort-signal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-connect.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-connect.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  AsyncResource\n} = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nconst {\n  InvalidArgumentError,\n  SocketError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  addSignal,\n  removeSignal\n} = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nclass ConnectHandler extends AsyncResource {\n  constructor(opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts');\n    }\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback');\n    }\n    const {\n      signal,\n      opaque,\n      responseHeaders\n    } = opts;\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n    }\n    super('UNDICI_CONNECT');\n    this.opaque = opaque || null;\n    this.responseHeaders = responseHeaders || null;\n    this.callback = callback;\n    this.abort = null;\n    addSignal(this, signal);\n  }\n  onConnect(abort, context) {\n    if (this.reason) {\n      abort(this.reason);\n      return;\n    }\n    assert(this.callback);\n    this.abort = abort;\n    this.context = context;\n  }\n  onHeaders() {\n    throw new SocketError('bad connect', null);\n  }\n  onUpgrade(statusCode, rawHeaders, socket) {\n    const {\n      callback,\n      opaque,\n      context\n    } = this;\n    removeSignal(this);\n    this.callback = null;\n    let headers = rawHeaders;\n    // Indicates is an HTTP2Session\n    if (headers != null) {\n      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n    }\n    this.runInAsyncScope(callback, null, null, {\n      statusCode,\n      headers,\n      socket,\n      opaque,\n      context\n    });\n  }\n  onError(err) {\n    const {\n      callback,\n      opaque\n    } = this;\n    removeSignal(this);\n    if (callback) {\n      this.callback = null;\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, {\n          opaque\n        });\n      });\n    }\n  }\n}\nfunction connect(opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      connect.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data);\n      });\n    });\n  }\n  try {\n    const connectHandler = new ConnectHandler(opts, callback);\n    this.dispatch({\n      ...opts,\n      method: 'CONNECT'\n    }, connectHandler);\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err;\n    }\n    const opaque = opts?.opaque;\n    queueMicrotask(() => callback(err, {\n      opaque\n    }));\n  }\n}\nmodule.exports = connect;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-pipeline.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-pipeline.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  Readable,\n  Duplex,\n  PassThrough\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst {\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  AsyncResource\n} = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nconst {\n  addSignal,\n  removeSignal\n} = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst kResume = Symbol('resume');\nclass PipelineRequest extends Readable {\n  constructor() {\n    super({\n      autoDestroy: true\n    });\n    this[kResume] = null;\n  }\n  _read() {\n    const {\n      [kResume]: resume\n    } = this;\n    if (resume) {\n      this[kResume] = null;\n      resume();\n    }\n  }\n  _destroy(err, callback) {\n    this._read();\n    callback(err);\n  }\n}\nclass PipelineResponse extends Readable {\n  constructor(resume) {\n    super({\n      autoDestroy: true\n    });\n    this[kResume] = resume;\n  }\n  _read() {\n    this[kResume]();\n  }\n  _destroy(err, callback) {\n    if (!err && !this._readableState.endEmitted) {\n      err = new RequestAbortedError();\n    }\n    callback(err);\n  }\n}\nclass PipelineHandler extends AsyncResource {\n  constructor(opts, handler) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts');\n    }\n    if (typeof handler !== 'function') {\n      throw new InvalidArgumentError('invalid handler');\n    }\n    const {\n      signal,\n      method,\n      opaque,\n      onInfo,\n      responseHeaders\n    } = opts;\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n    }\n    if (method === 'CONNECT') {\n      throw new InvalidArgumentError('invalid method');\n    }\n    if (onInfo && typeof onInfo !== 'function') {\n      throw new InvalidArgumentError('invalid onInfo callback');\n    }\n    super('UNDICI_PIPELINE');\n    this.opaque = opaque || null;\n    this.responseHeaders = responseHeaders || null;\n    this.handler = handler;\n    this.abort = null;\n    this.context = null;\n    this.onInfo = onInfo || null;\n    this.req = new PipelineRequest().on('error', util.nop);\n    this.ret = new Duplex({\n      readableObjectMode: opts.objectMode,\n      autoDestroy: true,\n      read: () => {\n        const {\n          body\n        } = this;\n        if (body?.resume) {\n          body.resume();\n        }\n      },\n      write: (chunk, encoding, callback) => {\n        const {\n          req\n        } = this;\n        if (req.push(chunk, encoding) || req._readableState.destroyed) {\n          callback();\n        } else {\n          req[kResume] = callback;\n        }\n      },\n      destroy: (err, callback) => {\n        const {\n          body,\n          req,\n          res,\n          ret,\n          abort\n        } = this;\n        if (!err && !ret._readableState.endEmitted) {\n          err = new RequestAbortedError();\n        }\n        if (abort && err) {\n          abort();\n        }\n        util.destroy(body, err);\n        util.destroy(req, err);\n        util.destroy(res, err);\n        removeSignal(this);\n        callback(err);\n      }\n    }).on('prefinish', () => {\n      const {\n        req\n      } = this;\n\n      // Node < 15 does not call _final in same tick.\n      req.push(null);\n    });\n    this.res = null;\n    addSignal(this, signal);\n  }\n  onConnect(abort, context) {\n    const {\n      ret,\n      res\n    } = this;\n    if (this.reason) {\n      abort(this.reason);\n      return;\n    }\n    assert(!res, 'pipeline cannot be retried');\n    assert(!ret.destroyed);\n    this.abort = abort;\n    this.context = context;\n  }\n  onHeaders(statusCode, rawHeaders, resume) {\n    const {\n      opaque,\n      handler,\n      context\n    } = this;\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        this.onInfo({\n          statusCode,\n          headers\n        });\n      }\n      return;\n    }\n    this.res = new PipelineResponse(resume);\n    let body;\n    try {\n      this.handler = null;\n      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n      body = this.runInAsyncScope(handler, null, {\n        statusCode,\n        headers,\n        opaque,\n        body: this.res,\n        context\n      });\n    } catch (err) {\n      this.res.on('error', util.nop);\n      throw err;\n    }\n    if (!body || typeof body.on !== 'function') {\n      throw new InvalidReturnValueError('expected Readable');\n    }\n    body.on('data', chunk => {\n      const {\n        ret,\n        body\n      } = this;\n      if (!ret.push(chunk) && body.pause) {\n        body.pause();\n      }\n    }).on('error', err => {\n      const {\n        ret\n      } = this;\n      util.destroy(ret, err);\n    }).on('end', () => {\n      const {\n        ret\n      } = this;\n      ret.push(null);\n    }).on('close', () => {\n      const {\n        ret\n      } = this;\n      if (!ret._readableState.ended) {\n        util.destroy(ret, new RequestAbortedError());\n      }\n    });\n    this.body = body;\n  }\n  onData(chunk) {\n    const {\n      res\n    } = this;\n    return res.push(chunk);\n  }\n  onComplete(trailers) {\n    const {\n      res\n    } = this;\n    res.push(null);\n  }\n  onError(err) {\n    const {\n      ret\n    } = this;\n    this.handler = null;\n    util.destroy(ret, err);\n  }\n}\nfunction pipeline(opts, handler) {\n  try {\n    const pipelineHandler = new PipelineHandler(opts, handler);\n    this.dispatch({\n      ...opts,\n      body: pipelineHandler.req\n    }, pipelineHandler);\n    return pipelineHandler.ret;\n  } catch (err) {\n    return new PassThrough().destroy(err);\n  }\n}\nmodule.exports = pipeline;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-pipeline.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-request.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-request.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  Readable\n} = __webpack_require__(/*! ./readable */ \"(ssr)/./node_modules/undici/lib/api/readable.js\");\nconst {\n  InvalidArgumentError,\n  RequestAbortedError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  getResolveErrorBodyCallback\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/api/util.js\");\nconst {\n  AsyncResource\n} = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nclass RequestHandler extends AsyncResource {\n  constructor(opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts');\n    }\n    const {\n      signal,\n      method,\n      opaque,\n      body,\n      onInfo,\n      responseHeaders,\n      throwOnError,\n      highWaterMark\n    } = opts;\n    try {\n      if (typeof callback !== 'function') {\n        throw new InvalidArgumentError('invalid callback');\n      }\n      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {\n        throw new InvalidArgumentError('invalid highWaterMark');\n      }\n      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n      }\n      if (method === 'CONNECT') {\n        throw new InvalidArgumentError('invalid method');\n      }\n      if (onInfo && typeof onInfo !== 'function') {\n        throw new InvalidArgumentError('invalid onInfo callback');\n      }\n      super('UNDICI_REQUEST');\n    } catch (err) {\n      if (util.isStream(body)) {\n        util.destroy(body.on('error', util.nop), err);\n      }\n      throw err;\n    }\n    this.method = method;\n    this.responseHeaders = responseHeaders || null;\n    this.opaque = opaque || null;\n    this.callback = callback;\n    this.res = null;\n    this.abort = null;\n    this.body = body;\n    this.trailers = {};\n    this.context = null;\n    this.onInfo = onInfo || null;\n    this.throwOnError = throwOnError;\n    this.highWaterMark = highWaterMark;\n    this.signal = signal;\n    this.reason = null;\n    this.removeAbortListener = null;\n    if (util.isStream(body)) {\n      body.on('error', err => {\n        this.onError(err);\n      });\n    }\n    if (this.signal) {\n      if (this.signal.aborted) {\n        this.reason = this.signal.reason ?? new RequestAbortedError();\n      } else {\n        this.removeAbortListener = util.addAbortListener(this.signal, () => {\n          this.reason = this.signal.reason ?? new RequestAbortedError();\n          if (this.res) {\n            util.destroy(this.res, this.reason);\n          } else if (this.abort) {\n            this.abort(this.reason);\n          }\n          if (this.removeAbortListener) {\n            this.res?.off('close', this.removeAbortListener);\n            this.removeAbortListener();\n            this.removeAbortListener = null;\n          }\n        });\n      }\n    }\n  }\n  onConnect(abort, context) {\n    if (this.reason) {\n      abort(this.reason);\n      return;\n    }\n    assert(this.callback);\n    this.abort = abort;\n    this.context = context;\n  }\n  onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n    const {\n      callback,\n      opaque,\n      abort,\n      context,\n      responseHeaders,\n      highWaterMark\n    } = this;\n    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        this.onInfo({\n          statusCode,\n          headers\n        });\n      }\n      return;\n    }\n    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers;\n    const contentType = parsedHeaders['content-type'];\n    const contentLength = parsedHeaders['content-length'];\n    const res = new Readable({\n      resume,\n      abort,\n      contentType,\n      contentLength: this.method !== 'HEAD' && contentLength ? Number(contentLength) : null,\n      highWaterMark\n    });\n    if (this.removeAbortListener) {\n      res.on('close', this.removeAbortListener);\n    }\n    this.callback = null;\n    this.res = res;\n    if (callback !== null) {\n      if (this.throwOnError && statusCode >= 400) {\n        this.runInAsyncScope(getResolveErrorBodyCallback, null, {\n          callback,\n          body: res,\n          contentType,\n          statusCode,\n          statusMessage,\n          headers\n        });\n      } else {\n        this.runInAsyncScope(callback, null, null, {\n          statusCode,\n          headers,\n          trailers: this.trailers,\n          opaque,\n          body: res,\n          context\n        });\n      }\n    }\n  }\n  onData(chunk) {\n    return this.res.push(chunk);\n  }\n  onComplete(trailers) {\n    util.parseHeaders(trailers, this.trailers);\n    this.res.push(null);\n  }\n  onError(err) {\n    const {\n      res,\n      callback,\n      body,\n      opaque\n    } = this;\n    if (callback) {\n      // TODO: Does this need queueMicrotask?\n      this.callback = null;\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, {\n          opaque\n        });\n      });\n    }\n    if (res) {\n      this.res = null;\n      // Ensure all queued handlers are invoked before destroying res.\n      queueMicrotask(() => {\n        util.destroy(res, err);\n      });\n    }\n    if (body) {\n      this.body = null;\n      util.destroy(body, err);\n    }\n    if (this.removeAbortListener) {\n      res?.off('close', this.removeAbortListener);\n      this.removeAbortListener();\n      this.removeAbortListener = null;\n    }\n  }\n}\nfunction request(opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      request.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data);\n      });\n    });\n  }\n  try {\n    this.dispatch(opts, new RequestHandler(opts, callback));\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err;\n    }\n    const opaque = opts?.opaque;\n    queueMicrotask(() => callback(err, {\n      opaque\n    }));\n  }\n}\nmodule.exports = request;\nmodule.exports.RequestHandler = RequestHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-stream.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/api/api-stream.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  finished,\n  PassThrough\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst {\n  InvalidArgumentError,\n  InvalidReturnValueError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  getResolveErrorBodyCallback\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/api/util.js\");\nconst {\n  AsyncResource\n} = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nconst {\n  addSignal,\n  removeSignal\n} = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nclass StreamHandler extends AsyncResource {\n  constructor(opts, factory, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts');\n    }\n    const {\n      signal,\n      method,\n      opaque,\n      body,\n      onInfo,\n      responseHeaders,\n      throwOnError\n    } = opts;\n    try {\n      if (typeof callback !== 'function') {\n        throw new InvalidArgumentError('invalid callback');\n      }\n      if (typeof factory !== 'function') {\n        throw new InvalidArgumentError('invalid factory');\n      }\n      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n      }\n      if (method === 'CONNECT') {\n        throw new InvalidArgumentError('invalid method');\n      }\n      if (onInfo && typeof onInfo !== 'function') {\n        throw new InvalidArgumentError('invalid onInfo callback');\n      }\n      super('UNDICI_STREAM');\n    } catch (err) {\n      if (util.isStream(body)) {\n        util.destroy(body.on('error', util.nop), err);\n      }\n      throw err;\n    }\n    this.responseHeaders = responseHeaders || null;\n    this.opaque = opaque || null;\n    this.factory = factory;\n    this.callback = callback;\n    this.res = null;\n    this.abort = null;\n    this.context = null;\n    this.trailers = null;\n    this.body = body;\n    this.onInfo = onInfo || null;\n    this.throwOnError = throwOnError || false;\n    if (util.isStream(body)) {\n      body.on('error', err => {\n        this.onError(err);\n      });\n    }\n    addSignal(this, signal);\n  }\n  onConnect(abort, context) {\n    if (this.reason) {\n      abort(this.reason);\n      return;\n    }\n    assert(this.callback);\n    this.abort = abort;\n    this.context = context;\n  }\n  onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n    const {\n      factory,\n      opaque,\n      context,\n      callback,\n      responseHeaders\n    } = this;\n    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        this.onInfo({\n          statusCode,\n          headers\n        });\n      }\n      return;\n    }\n    this.factory = null;\n    let res;\n    if (this.throwOnError && statusCode >= 400) {\n      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers;\n      const contentType = parsedHeaders['content-type'];\n      res = new PassThrough();\n      this.callback = null;\n      this.runInAsyncScope(getResolveErrorBodyCallback, null, {\n        callback,\n        body: res,\n        contentType,\n        statusCode,\n        statusMessage,\n        headers\n      });\n    } else {\n      if (factory === null) {\n        return;\n      }\n      res = this.runInAsyncScope(factory, null, {\n        statusCode,\n        headers,\n        opaque,\n        context\n      });\n      if (!res || typeof res.write !== 'function' || typeof res.end !== 'function' || typeof res.on !== 'function') {\n        throw new InvalidReturnValueError('expected Writable');\n      }\n\n      // TODO: Avoid finished. It registers an unnecessary amount of listeners.\n      finished(res, {\n        readable: false\n      }, err => {\n        const {\n          callback,\n          res,\n          opaque,\n          trailers,\n          abort\n        } = this;\n        this.res = null;\n        if (err || !res.readable) {\n          util.destroy(res, err);\n        }\n        this.callback = null;\n        this.runInAsyncScope(callback, null, err || null, {\n          opaque,\n          trailers\n        });\n        if (err) {\n          abort();\n        }\n      });\n    }\n    res.on('drain', resume);\n    this.res = res;\n    const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState?.needDrain;\n    return needDrain !== true;\n  }\n  onData(chunk) {\n    const {\n      res\n    } = this;\n    return res ? res.write(chunk) : true;\n  }\n  onComplete(trailers) {\n    const {\n      res\n    } = this;\n    removeSignal(this);\n    if (!res) {\n      return;\n    }\n    this.trailers = util.parseHeaders(trailers);\n    res.end();\n  }\n  onError(err) {\n    const {\n      res,\n      callback,\n      opaque,\n      body\n    } = this;\n    removeSignal(this);\n    this.factory = null;\n    if (res) {\n      this.res = null;\n      util.destroy(res, err);\n    } else if (callback) {\n      this.callback = null;\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, {\n          opaque\n        });\n      });\n    }\n    if (body) {\n      this.body = null;\n      util.destroy(body, err);\n    }\n  }\n}\nfunction stream(opts, factory, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      stream.call(this, opts, factory, (err, data) => {\n        return err ? reject(err) : resolve(data);\n      });\n    });\n  }\n  try {\n    this.dispatch(opts, new StreamHandler(opts, factory, callback));\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err;\n    }\n    const opaque = opts?.opaque;\n    queueMicrotask(() => callback(err, {\n      opaque\n    }));\n  }\n}\nmodule.exports = stream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-upgrade.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-upgrade.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  InvalidArgumentError,\n  SocketError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  AsyncResource\n} = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  addSignal,\n  removeSignal\n} = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nclass UpgradeHandler extends AsyncResource {\n  constructor(opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts');\n    }\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback');\n    }\n    const {\n      signal,\n      opaque,\n      responseHeaders\n    } = opts;\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget');\n    }\n    super('UNDICI_UPGRADE');\n    this.responseHeaders = responseHeaders || null;\n    this.opaque = opaque || null;\n    this.callback = callback;\n    this.abort = null;\n    this.context = null;\n    addSignal(this, signal);\n  }\n  onConnect(abort, context) {\n    if (this.reason) {\n      abort(this.reason);\n      return;\n    }\n    assert(this.callback);\n    this.abort = abort;\n    this.context = null;\n  }\n  onHeaders() {\n    throw new SocketError('bad upgrade', null);\n  }\n  onUpgrade(statusCode, rawHeaders, socket) {\n    const {\n      callback,\n      opaque,\n      context\n    } = this;\n    assert.strictEqual(statusCode, 101);\n    removeSignal(this);\n    this.callback = null;\n    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n    this.runInAsyncScope(callback, null, null, {\n      headers,\n      socket,\n      opaque,\n      context\n    });\n  }\n  onError(err) {\n    const {\n      callback,\n      opaque\n    } = this;\n    removeSignal(this);\n    if (callback) {\n      this.callback = null;\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, {\n          opaque\n        });\n      });\n    }\n  }\n}\nfunction upgrade(opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      upgrade.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data);\n      });\n    });\n  }\n  try {\n    const upgradeHandler = new UpgradeHandler(opts, callback);\n    this.dispatch({\n      ...opts,\n      method: opts.method || 'GET',\n      upgrade: opts.protocol || 'Websocket'\n    }, upgradeHandler);\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err;\n    }\n    const opaque = opts?.opaque;\n    queueMicrotask(() => callback(err, {\n      opaque\n    }));\n  }\n}\nmodule.exports = upgrade;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-upgrade.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/index.js":
/*!**********************************************!*\
  !*** ./node_modules/undici/lib/api/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports.request = __webpack_require__(/*! ./api-request */ \"(ssr)/./node_modules/undici/lib/api/api-request.js\");\nmodule.exports.stream = __webpack_require__(/*! ./api-stream */ \"(ssr)/./node_modules/undici/lib/api/api-stream.js\");\nmodule.exports.pipeline = __webpack_require__(/*! ./api-pipeline */ \"(ssr)/./node_modules/undici/lib/api/api-pipeline.js\");\nmodule.exports.upgrade = __webpack_require__(/*! ./api-upgrade */ \"(ssr)/./node_modules/undici/lib/api/api-upgrade.js\");\nmodule.exports.connect = __webpack_require__(/*! ./api-connect */ \"(ssr)/./node_modules/undici/lib/api/api-connect.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLHVIQUFpRDtBQUNqREEsb0hBQStDO0FBQy9DQSwwSEFBbUQ7QUFDbkRBLHVIQUFpRDtBQUNqREEsdUhBQWlEIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvYXBpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cy5yZXF1ZXN0ID0gcmVxdWlyZSgnLi9hcGktcmVxdWVzdCcpXG5tb2R1bGUuZXhwb3J0cy5zdHJlYW0gPSByZXF1aXJlKCcuL2FwaS1zdHJlYW0nKVxubW9kdWxlLmV4cG9ydHMucGlwZWxpbmUgPSByZXF1aXJlKCcuL2FwaS1waXBlbGluZScpXG5tb2R1bGUuZXhwb3J0cy51cGdyYWRlID0gcmVxdWlyZSgnLi9hcGktdXBncmFkZScpXG5tb2R1bGUuZXhwb3J0cy5jb25uZWN0ID0gcmVxdWlyZSgnLi9hcGktY29ubmVjdCcpXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVlc3QiLCJyZXF1aXJlIiwic3RyZWFtIiwicGlwZWxpbmUiLCJ1cGdyYWRlIiwiY29ubmVjdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/readable.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/api/readable.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Ported from https://github.com/nodejs/undici/pull/907\n\n\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  Readable\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst {\n  RequestAbortedError,\n  NotSupportedError,\n  InvalidArgumentError,\n  AbortError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  ReadableStreamFrom\n} = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst kConsume = Symbol('kConsume');\nconst kReading = Symbol('kReading');\nconst kBody = Symbol('kBody');\nconst kAbort = Symbol('kAbort');\nconst kContentType = Symbol('kContentType');\nconst kContentLength = Symbol('kContentLength');\nconst noop = () => {};\nclass BodyReadable extends Readable {\n  constructor(_ref) {\n    let {\n      resume,\n      abort,\n      contentType = '',\n      contentLength,\n      highWaterMark = 64 * 1024 // Same as nodejs fs streams.\n    } = _ref;\n    super({\n      autoDestroy: true,\n      read: resume,\n      highWaterMark\n    });\n    this._readableState.dataEmitted = false;\n    this[kAbort] = abort;\n    this[kConsume] = null;\n    this[kBody] = null;\n    this[kContentType] = contentType;\n    this[kContentLength] = contentLength;\n\n    // Is stream being consumed through Readable API?\n    // This is an optimization so that we avoid checking\n    // for 'data' and 'readable' listeners in the hot path\n    // inside push().\n    this[kReading] = false;\n  }\n  destroy(err) {\n    if (!err && !this._readableState.endEmitted) {\n      err = new RequestAbortedError();\n    }\n    if (err) {\n      this[kAbort]();\n    }\n    return super.destroy(err);\n  }\n  _destroy(err, callback) {\n    // Workaround for Node \"bug\". If the stream is destroyed in same\n    // tick as it is created, then a user who is waiting for a\n    // promise (i.e micro tick) for installing a 'error' listener will\n    // never get a chance and will always encounter an unhandled exception.\n    if (!this[kReading]) {\n      setImmediate(() => {\n        callback(err);\n      });\n    } else {\n      callback(err);\n    }\n  }\n  on(ev) {\n    if (ev === 'data' || ev === 'readable') {\n      this[kReading] = true;\n    }\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return super.on(ev, ...args);\n  }\n  addListener(ev) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    return this.on(ev, ...args);\n  }\n  off(ev) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    const ret = super.off(ev, ...args);\n    if (ev === 'data' || ev === 'readable') {\n      this[kReading] = this.listenerCount('data') > 0 || this.listenerCount('readable') > 0;\n    }\n    return ret;\n  }\n  removeListener(ev) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n    return this.off(ev, ...args);\n  }\n  push(chunk) {\n    if (this[kConsume] && chunk !== null) {\n      consumePush(this[kConsume], chunk);\n      return this[kReading] ? super.push(chunk) : true;\n    }\n    return super.push(chunk);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-text\n  async text() {\n    return consume(this, 'text');\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-json\n  async json() {\n    return consume(this, 'json');\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-blob\n  async blob() {\n    return consume(this, 'blob');\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer\n  async arrayBuffer() {\n    return consume(this, 'arrayBuffer');\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-formdata\n  async formData() {\n    // TODO: Implement.\n    throw new NotSupportedError();\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-bodyused\n  get bodyUsed() {\n    return util.isDisturbed(this);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-body\n  get body() {\n    if (!this[kBody]) {\n      this[kBody] = ReadableStreamFrom(this);\n      if (this[kConsume]) {\n        // TODO: Is this the best way to force a lock?\n        this[kBody].getReader(); // Ensure stream is locked.\n        assert(this[kBody].locked);\n      }\n    }\n    return this[kBody];\n  }\n  async dump(opts) {\n    let limit = Number.isFinite(opts?.limit) ? opts.limit : 128 * 1024;\n    const signal = opts?.signal;\n    if (signal != null && (typeof signal !== 'object' || !('aborted' in signal))) {\n      throw new InvalidArgumentError('signal must be an AbortSignal');\n    }\n    signal?.throwIfAborted();\n    if (this._readableState.closeEmitted) {\n      return null;\n    }\n    return await new Promise((resolve, reject) => {\n      if (this[kContentLength] > limit) {\n        this.destroy(new AbortError());\n      }\n      const onAbort = () => {\n        this.destroy(signal.reason ?? new AbortError());\n      };\n      signal?.addEventListener('abort', onAbort);\n      this.on('close', function () {\n        signal?.removeEventListener('abort', onAbort);\n        if (signal?.aborted) {\n          reject(signal.reason ?? new AbortError());\n        } else {\n          resolve(null);\n        }\n      }).on('error', noop).on('data', function (chunk) {\n        limit -= chunk.length;\n        if (limit <= 0) {\n          this.destroy();\n        }\n      }).resume();\n    });\n  }\n}\n\n// https://streams.spec.whatwg.org/#readablestream-locked\nfunction isLocked(self) {\n  // Consume is an implicit lock.\n  return self[kBody] && self[kBody].locked === true || self[kConsume];\n}\n\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction isUnusable(self) {\n  return util.isDisturbed(self) || isLocked(self);\n}\nasync function consume(stream, type) {\n  assert(!stream[kConsume]);\n  return new Promise((resolve, reject) => {\n    if (isUnusable(stream)) {\n      const rState = stream._readableState;\n      if (rState.destroyed && rState.closeEmitted === false) {\n        stream.on('error', err => {\n          reject(err);\n        }).on('close', () => {\n          reject(new TypeError('unusable'));\n        });\n      } else {\n        reject(rState.errored ?? new TypeError('unusable'));\n      }\n    } else {\n      queueMicrotask(() => {\n        stream[kConsume] = {\n          type,\n          stream,\n          resolve,\n          reject,\n          length: 0,\n          body: []\n        };\n        stream.on('error', function (err) {\n          consumeFinish(this[kConsume], err);\n        }).on('close', function () {\n          if (this[kConsume].body !== null) {\n            consumeFinish(this[kConsume], new RequestAbortedError());\n          }\n        });\n        consumeStart(stream[kConsume]);\n      });\n    }\n  });\n}\nfunction consumeStart(consume) {\n  if (consume.body === null) {\n    return;\n  }\n  const {\n    _readableState: state\n  } = consume.stream;\n  if (state.bufferIndex) {\n    const start = state.bufferIndex;\n    const end = state.buffer.length;\n    for (let n = start; n < end; n++) {\n      consumePush(consume, state.buffer[n]);\n    }\n  } else {\n    for (const chunk of state.buffer) {\n      consumePush(consume, chunk);\n    }\n  }\n  if (state.endEmitted) {\n    consumeEnd(this[kConsume]);\n  } else {\n    consume.stream.on('end', function () {\n      consumeEnd(this[kConsume]);\n    });\n  }\n  consume.stream.resume();\n  while (consume.stream.read() != null) {\n    // Loop\n  }\n}\n\n/**\n * @param {Buffer[]} chunks\n * @param {number} length\n */\nfunction chunksDecode(chunks, length) {\n  if (chunks.length === 0 || length === 0) {\n    return '';\n  }\n  const buffer = chunks.length === 1 ? chunks[0] : Buffer.concat(chunks, length);\n  const bufferLength = buffer.length;\n\n  // Skip BOM.\n  const start = bufferLength > 2 && buffer[0] === 0xef && buffer[1] === 0xbb && buffer[2] === 0xbf ? 3 : 0;\n  return buffer.utf8Slice(start, bufferLength);\n}\nfunction consumeEnd(consume) {\n  const {\n    type,\n    body,\n    resolve,\n    stream,\n    length\n  } = consume;\n  try {\n    if (type === 'text') {\n      resolve(chunksDecode(body, length));\n    } else if (type === 'json') {\n      resolve(JSON.parse(chunksDecode(body, length)));\n    } else if (type === 'arrayBuffer') {\n      const dst = new Uint8Array(length);\n      let pos = 0;\n      for (const buf of body) {\n        dst.set(buf, pos);\n        pos += buf.byteLength;\n      }\n      resolve(dst.buffer);\n    } else if (type === 'blob') {\n      resolve(new Blob(body, {\n        type: stream[kContentType]\n      }));\n    }\n    consumeFinish(consume);\n  } catch (err) {\n    stream.destroy(err);\n  }\n}\nfunction consumePush(consume, chunk) {\n  consume.length += chunk.length;\n  consume.body.push(chunk);\n}\nfunction consumeFinish(consume, err) {\n  if (consume.body === null) {\n    return;\n  }\n  if (err) {\n    consume.reject(err);\n  } else {\n    consume.resolve();\n  }\n  consume.type = null;\n  consume.stream = null;\n  consume.resolve = null;\n  consume.reject = null;\n  consume.length = 0;\n  consume.body = null;\n}\nmodule.exports = {\n  Readable: BodyReadable,\n  chunksDecode\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/util.js":
/*!*********************************************!*\
  !*** ./node_modules/undici/lib/api/util.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  ResponseStatusCodeError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  chunksDecode\n} = __webpack_require__(/*! ./readable */ \"(ssr)/./node_modules/undici/lib/api/readable.js\");\nconst CHUNK_LIMIT = 128 * 1024;\nasync function getResolveErrorBodyCallback(_ref) {\n  let {\n    callback,\n    body,\n    contentType,\n    statusCode,\n    statusMessage,\n    headers\n  } = _ref;\n  assert(body);\n  let chunks = [];\n  let length = 0;\n  try {\n    for await (const chunk of body) {\n      chunks.push(chunk);\n      length += chunk.length;\n      if (length > CHUNK_LIMIT) {\n        chunks = [];\n        length = 0;\n        break;\n      }\n    }\n  } catch {\n    chunks = [];\n    length = 0;\n    // Do nothing....\n  }\n  const message = `Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`;\n  if (statusCode === 204 || !contentType || !length) {\n    queueMicrotask(() => callback(new ResponseStatusCodeError(message, statusCode, headers)));\n    return;\n  }\n  const stackTraceLimit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 0;\n  let payload;\n  try {\n    if (isContentTypeApplicationJson(contentType)) {\n      payload = JSON.parse(chunksDecode(chunks, length));\n    } else if (isContentTypeText(contentType)) {\n      payload = chunksDecode(chunks, length);\n    }\n  } catch {\n    // process in a callback to avoid throwing in the microtask queue\n  } finally {\n    Error.stackTraceLimit = stackTraceLimit;\n  }\n  queueMicrotask(() => callback(new ResponseStatusCodeError(message, statusCode, headers, payload)));\n}\nconst isContentTypeApplicationJson = contentType => {\n  return contentType.length > 15 && contentType[11] === '/' && contentType[0] === 'a' && contentType[1] === 'p' && contentType[2] === 'p' && contentType[3] === 'l' && contentType[4] === 'i' && contentType[5] === 'c' && contentType[6] === 'a' && contentType[7] === 't' && contentType[8] === 'i' && contentType[9] === 'o' && contentType[10] === 'n' && contentType[12] === 'j' && contentType[13] === 's' && contentType[14] === 'o' && contentType[15] === 'n';\n};\nconst isContentTypeText = contentType => {\n  return contentType.length > 4 && contentType[4] === '/' && contentType[0] === 't' && contentType[1] === 'e' && contentType[2] === 'x' && contentType[3] === 't';\n};\nmodule.exports = {\n  getResolveErrorBodyCallback,\n  isContentTypeApplicationJson,\n  isContentTypeText\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsZ0NBQWEsQ0FBQztBQUNyQyxNQUFNO0VBQ0pDO0FBQ0YsQ0FBQyxHQUFHRCxtQkFBTyxDQUFDLHNFQUFnQixDQUFDO0FBRTdCLE1BQU07RUFBRUU7QUFBYSxDQUFDLEdBQUdGLG1CQUFPLENBQUMsbUVBQVksQ0FBQztBQUM5QyxNQUFNRyxXQUFXLEdBQUcsR0FBRyxHQUFHLElBQUk7QUFFOUIsZUFBZUMsMkJBQTJCQSxDQUFBQyxJQUFBLEVBQXVFO0VBQUEsSUFBckU7SUFBRUMsUUFBUTtJQUFFQyxJQUFJO0lBQUVDLFdBQVc7SUFBRUMsVUFBVTtJQUFFQyxhQUFhO0lBQUVDO0VBQVEsQ0FBQyxHQUFBTixJQUFBO0VBQzdHTixNQUFNLENBQUNRLElBQUksQ0FBQztFQUVaLElBQUlLLE1BQU0sR0FBRyxFQUFFO0VBQ2YsSUFBSUMsTUFBTSxHQUFHLENBQUM7RUFFZCxJQUFJO0lBQ0YsV0FBVyxNQUFNQyxLQUFLLElBQUlQLElBQUksRUFBRTtNQUM5QkssTUFBTSxDQUFDRyxJQUFJLENBQUNELEtBQUssQ0FBQztNQUNsQkQsTUFBTSxJQUFJQyxLQUFLLENBQUNELE1BQU07TUFDdEIsSUFBSUEsTUFBTSxHQUFHVixXQUFXLEVBQUU7UUFDeEJTLE1BQU0sR0FBRyxFQUFFO1FBQ1hDLE1BQU0sR0FBRyxDQUFDO1FBQ1Y7TUFDRjtJQUNGO0VBQ0YsQ0FBQyxDQUFDLE1BQU07SUFDTkQsTUFBTSxHQUFHLEVBQUU7SUFDWEMsTUFBTSxHQUFHLENBQUM7SUFDVjtFQUNGO0VBRUEsTUFBTUcsT0FBTyxHQUFHLHdCQUF3QlAsVUFBVSxHQUFHQyxhQUFhLEdBQUcsS0FBS0EsYUFBYSxFQUFFLEdBQUcsRUFBRSxFQUFFO0VBRWhHLElBQUlELFVBQVUsS0FBSyxHQUFHLElBQUksQ0FBQ0QsV0FBVyxJQUFJLENBQUNLLE1BQU0sRUFBRTtJQUNqREksY0FBYyxDQUFDLE1BQU1YLFFBQVEsQ0FBQyxJQUFJTCx1QkFBdUIsQ0FBQ2UsT0FBTyxFQUFFUCxVQUFVLEVBQUVFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekY7RUFDRjtFQUVBLE1BQU1PLGVBQWUsR0FBR0MsS0FBSyxDQUFDRCxlQUFlO0VBQzdDQyxLQUFLLENBQUNELGVBQWUsR0FBRyxDQUFDO0VBQ3pCLElBQUlFLE9BQU87RUFFWCxJQUFJO0lBQ0YsSUFBSUMsNEJBQTRCLENBQUNiLFdBQVcsQ0FBQyxFQUFFO01BQzdDWSxPQUFPLEdBQUdFLElBQUksQ0FBQ0MsS0FBSyxDQUFDckIsWUFBWSxDQUFDVSxNQUFNLEVBQUVDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BELENBQUMsTUFBTSxJQUFJVyxpQkFBaUIsQ0FBQ2hCLFdBQVcsQ0FBQyxFQUFFO01BQ3pDWSxPQUFPLEdBQUdsQixZQUFZLENBQUNVLE1BQU0sRUFBRUMsTUFBTSxDQUFDO0lBQ3hDO0VBQ0YsQ0FBQyxDQUFDLE1BQU07SUFDTjtFQUFBLENBQ0QsU0FBUztJQUNSTSxLQUFLLENBQUNELGVBQWUsR0FBR0EsZUFBZTtFQUN6QztFQUNBRCxjQUFjLENBQUMsTUFBTVgsUUFBUSxDQUFDLElBQUlMLHVCQUF1QixDQUFDZSxPQUFPLEVBQUVQLFVBQVUsRUFBRUUsT0FBTyxFQUFFUyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3BHO0FBRUEsTUFBTUMsNEJBQTRCLEdBQUliLFdBQVcsSUFBSztFQUNwRCxPQUNFQSxXQUFXLENBQUNLLE1BQU0sR0FBRyxFQUFFLElBQ3ZCTCxXQUFXLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxJQUN2QkEsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFDdEJBLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQ3RCQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUN0QkEsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFDdEJBLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQ3RCQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUN0QkEsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFDdEJBLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQ3RCQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUN0QkEsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFDdEJBLFdBQVcsQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLElBQ3ZCQSxXQUFXLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxJQUN2QkEsV0FBVyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFDdkJBLFdBQVcsQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLElBQ3ZCQSxXQUFXLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRztBQUUzQixDQUFDO0FBRUQsTUFBTWdCLGlCQUFpQixHQUFJaEIsV0FBVyxJQUFLO0VBQ3pDLE9BQ0VBLFdBQVcsQ0FBQ0ssTUFBTSxHQUFHLENBQUMsSUFDdEJMLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQ3RCQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUN0QkEsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFDdEJBLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQ3RCQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRztBQUUxQixDQUFDO0FBRURpQixNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmdEIsMkJBQTJCO0VBQzNCaUIsNEJBQTRCO0VBQzVCRztBQUNGLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhc3NlcnQgPSByZXF1aXJlKCdub2RlOmFzc2VydCcpXG5jb25zdCB7XG4gIFJlc3BvbnNlU3RhdHVzQ29kZUVycm9yXG59ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuXG5jb25zdCB7IGNodW5rc0RlY29kZSB9ID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpXG5jb25zdCBDSFVOS19MSU1JVCA9IDEyOCAqIDEwMjRcblxuYXN5bmMgZnVuY3Rpb24gZ2V0UmVzb2x2ZUVycm9yQm9keUNhbGxiYWNrICh7IGNhbGxiYWNrLCBib2R5LCBjb250ZW50VHlwZSwgc3RhdHVzQ29kZSwgc3RhdHVzTWVzc2FnZSwgaGVhZGVycyB9KSB7XG4gIGFzc2VydChib2R5KVxuXG4gIGxldCBjaHVua3MgPSBbXVxuICBsZXQgbGVuZ3RoID0gMFxuXG4gIHRyeSB7XG4gICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBib2R5KSB7XG4gICAgICBjaHVua3MucHVzaChjaHVuaylcbiAgICAgIGxlbmd0aCArPSBjaHVuay5sZW5ndGhcbiAgICAgIGlmIChsZW5ndGggPiBDSFVOS19MSU1JVCkge1xuICAgICAgICBjaHVua3MgPSBbXVxuICAgICAgICBsZW5ndGggPSAwXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICBjaHVua3MgPSBbXVxuICAgIGxlbmd0aCA9IDBcbiAgICAvLyBEbyBub3RoaW5nLi4uLlxuICB9XG5cbiAgY29uc3QgbWVzc2FnZSA9IGBSZXNwb25zZSBzdGF0dXMgY29kZSAke3N0YXR1c0NvZGV9JHtzdGF0dXNNZXNzYWdlID8gYDogJHtzdGF0dXNNZXNzYWdlfWAgOiAnJ31gXG5cbiAgaWYgKHN0YXR1c0NvZGUgPT09IDIwNCB8fCAhY29udGVudFR5cGUgfHwgIWxlbmd0aCkge1xuICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IGNhbGxiYWNrKG5ldyBSZXNwb25zZVN0YXR1c0NvZGVFcnJvcihtZXNzYWdlLCBzdGF0dXNDb2RlLCBoZWFkZXJzKSkpXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBzdGFja1RyYWNlTGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXRcbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMFxuICBsZXQgcGF5bG9hZFxuXG4gIHRyeSB7XG4gICAgaWYgKGlzQ29udGVudFR5cGVBcHBsaWNhdGlvbkpzb24oY29udGVudFR5cGUpKSB7XG4gICAgICBwYXlsb2FkID0gSlNPTi5wYXJzZShjaHVua3NEZWNvZGUoY2h1bmtzLCBsZW5ndGgpKVxuICAgIH0gZWxzZSBpZiAoaXNDb250ZW50VHlwZVRleHQoY29udGVudFR5cGUpKSB7XG4gICAgICBwYXlsb2FkID0gY2h1bmtzRGVjb2RlKGNodW5rcywgbGVuZ3RoKVxuICAgIH1cbiAgfSBjYXRjaCB7XG4gICAgLy8gcHJvY2VzcyBpbiBhIGNhbGxiYWNrIHRvIGF2b2lkIHRocm93aW5nIGluIHRoZSBtaWNyb3Rhc2sgcXVldWVcbiAgfSBmaW5hbGx5IHtcbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBzdGFja1RyYWNlTGltaXRcbiAgfVxuICBxdWV1ZU1pY3JvdGFzaygoKSA9PiBjYWxsYmFjayhuZXcgUmVzcG9uc2VTdGF0dXNDb2RlRXJyb3IobWVzc2FnZSwgc3RhdHVzQ29kZSwgaGVhZGVycywgcGF5bG9hZCkpKVxufVxuXG5jb25zdCBpc0NvbnRlbnRUeXBlQXBwbGljYXRpb25Kc29uID0gKGNvbnRlbnRUeXBlKSA9PiB7XG4gIHJldHVybiAoXG4gICAgY29udGVudFR5cGUubGVuZ3RoID4gMTUgJiZcbiAgICBjb250ZW50VHlwZVsxMV0gPT09ICcvJyAmJlxuICAgIGNvbnRlbnRUeXBlWzBdID09PSAnYScgJiZcbiAgICBjb250ZW50VHlwZVsxXSA9PT0gJ3AnICYmXG4gICAgY29udGVudFR5cGVbMl0gPT09ICdwJyAmJlxuICAgIGNvbnRlbnRUeXBlWzNdID09PSAnbCcgJiZcbiAgICBjb250ZW50VHlwZVs0XSA9PT0gJ2knICYmXG4gICAgY29udGVudFR5cGVbNV0gPT09ICdjJyAmJlxuICAgIGNvbnRlbnRUeXBlWzZdID09PSAnYScgJiZcbiAgICBjb250ZW50VHlwZVs3XSA9PT0gJ3QnICYmXG4gICAgY29udGVudFR5cGVbOF0gPT09ICdpJyAmJlxuICAgIGNvbnRlbnRUeXBlWzldID09PSAnbycgJiZcbiAgICBjb250ZW50VHlwZVsxMF0gPT09ICduJyAmJlxuICAgIGNvbnRlbnRUeXBlWzEyXSA9PT0gJ2onICYmXG4gICAgY29udGVudFR5cGVbMTNdID09PSAncycgJiZcbiAgICBjb250ZW50VHlwZVsxNF0gPT09ICdvJyAmJlxuICAgIGNvbnRlbnRUeXBlWzE1XSA9PT0gJ24nXG4gIClcbn1cblxuY29uc3QgaXNDb250ZW50VHlwZVRleHQgPSAoY29udGVudFR5cGUpID0+IHtcbiAgcmV0dXJuIChcbiAgICBjb250ZW50VHlwZS5sZW5ndGggPiA0ICYmXG4gICAgY29udGVudFR5cGVbNF0gPT09ICcvJyAmJlxuICAgIGNvbnRlbnRUeXBlWzBdID09PSAndCcgJiZcbiAgICBjb250ZW50VHlwZVsxXSA9PT0gJ2UnICYmXG4gICAgY29udGVudFR5cGVbMl0gPT09ICd4JyAmJlxuICAgIGNvbnRlbnRUeXBlWzNdID09PSAndCdcbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0UmVzb2x2ZUVycm9yQm9keUNhbGxiYWNrLFxuICBpc0NvbnRlbnRUeXBlQXBwbGljYXRpb25Kc29uLFxuICBpc0NvbnRlbnRUeXBlVGV4dFxufVxuIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJSZXNwb25zZVN0YXR1c0NvZGVFcnJvciIsImNodW5rc0RlY29kZSIsIkNIVU5LX0xJTUlUIiwiZ2V0UmVzb2x2ZUVycm9yQm9keUNhbGxiYWNrIiwiX3JlZiIsImNhbGxiYWNrIiwiYm9keSIsImNvbnRlbnRUeXBlIiwic3RhdHVzQ29kZSIsInN0YXR1c01lc3NhZ2UiLCJoZWFkZXJzIiwiY2h1bmtzIiwibGVuZ3RoIiwiY2h1bmsiLCJwdXNoIiwibWVzc2FnZSIsInF1ZXVlTWljcm90YXNrIiwic3RhY2tUcmFjZUxpbWl0IiwiRXJyb3IiLCJwYXlsb2FkIiwiaXNDb250ZW50VHlwZUFwcGxpY2F0aW9uSnNvbiIsIkpTT04iLCJwYXJzZSIsImlzQ29udGVudFR5cGVUZXh0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/connect.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/core/connect.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  InvalidArgumentError,\n  ConnectTimeoutError\n} = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nlet tls; // include tls conditionally since it is not always available\n\n// TODO: session re-use does not wait for the first\n// connection to resolve the session and might therefore\n// resolve the same servername multiple times even when\n// re-use is enabled.\n\nlet SessionCache;\n// FIXME: remove workaround when the Node bug is fixed\n// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\nif (global.FinalizationRegistry && !(process.env.NODE_V8_COVERAGE || process.env.UNDICI_NO_FG)) {\n  SessionCache = class WeakSessionCache {\n    constructor(maxCachedSessions) {\n      this._maxCachedSessions = maxCachedSessions;\n      this._sessionCache = new Map();\n      this._sessionRegistry = new global.FinalizationRegistry(key => {\n        if (this._sessionCache.size < this._maxCachedSessions) {\n          return;\n        }\n        const ref = this._sessionCache.get(key);\n        if (ref !== undefined && ref.deref() === undefined) {\n          this._sessionCache.delete(key);\n        }\n      });\n    }\n    get(sessionKey) {\n      const ref = this._sessionCache.get(sessionKey);\n      return ref ? ref.deref() : null;\n    }\n    set(sessionKey, session) {\n      if (this._maxCachedSessions === 0) {\n        return;\n      }\n      this._sessionCache.set(sessionKey, new WeakRef(session));\n      this._sessionRegistry.register(session, sessionKey);\n    }\n  };\n} else {\n  SessionCache = class SimpleSessionCache {\n    constructor(maxCachedSessions) {\n      this._maxCachedSessions = maxCachedSessions;\n      this._sessionCache = new Map();\n    }\n    get(sessionKey) {\n      return this._sessionCache.get(sessionKey);\n    }\n    set(sessionKey, session) {\n      if (this._maxCachedSessions === 0) {\n        return;\n      }\n      if (this._sessionCache.size >= this._maxCachedSessions) {\n        // remove the oldest session\n        const {\n          value: oldestKey\n        } = this._sessionCache.keys().next();\n        this._sessionCache.delete(oldestKey);\n      }\n      this._sessionCache.set(sessionKey, session);\n    }\n  };\n}\nfunction buildConnector(_ref) {\n  let {\n    allowH2,\n    maxCachedSessions,\n    socketPath,\n    timeout,\n    session: customSession,\n    ...opts\n  } = _ref;\n  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {\n    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero');\n  }\n  const options = {\n    path: socketPath,\n    ...opts\n  };\n  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);\n  timeout = timeout == null ? 10e3 : timeout;\n  allowH2 = allowH2 != null ? allowH2 : false;\n  return function connect(_ref2, callback) {\n    let {\n      hostname,\n      host,\n      protocol,\n      port,\n      servername,\n      localAddress,\n      httpSocket\n    } = _ref2;\n    let socket;\n    if (protocol === 'https:') {\n      if (!tls) {\n        tls = __webpack_require__(/*! node:tls */ \"node:tls\");\n      }\n      servername = servername || options.servername || util.getServerName(host) || null;\n      const sessionKey = servername || hostname;\n      const session = customSession || sessionCache.get(sessionKey) || null;\n      assert(sessionKey);\n      socket = tls.connect({\n        highWaterMark: 16384,\n        // TLS in node can't have bigger HWM anyway...\n        ...options,\n        servername,\n        session,\n        localAddress,\n        // TODO(HTTP/2): Add support for h2c\n        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],\n        socket: httpSocket,\n        // upgrade socket connection\n        port: port || 443,\n        host: hostname\n      });\n      socket.on('session', function (session) {\n        // TODO (fix): Can a session become invalid once established? Don't think so?\n        sessionCache.set(sessionKey, session);\n      });\n    } else {\n      assert(!httpSocket, 'httpSocket can only be sent on TLS update');\n      socket = net.connect({\n        highWaterMark: 64 * 1024,\n        // Same as nodejs fs streams.\n        ...options,\n        localAddress,\n        port: port || 80,\n        host: hostname\n      });\n    }\n\n    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket\n    if (options.keepAlive == null || options.keepAlive) {\n      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay;\n      socket.setKeepAlive(true, keepAliveInitialDelay);\n    }\n    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);\n    socket.setNoDelay(true).once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {\n      cancelTimeout();\n      if (callback) {\n        const cb = callback;\n        callback = null;\n        cb(null, this);\n      }\n    }).on('error', function (err) {\n      cancelTimeout();\n      if (callback) {\n        const cb = callback;\n        callback = null;\n        cb(err);\n      }\n    });\n    return socket;\n  };\n}\nfunction setupTimeout(onConnectTimeout, timeout) {\n  if (!timeout) {\n    return () => {};\n  }\n  let s1 = null;\n  let s2 = null;\n  const timeoutId = setTimeout(() => {\n    // setImmediate is added to make sure that we prioritize socket error events over timeouts\n    s1 = setImmediate(() => {\n      if (process.platform === 'win32') {\n        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic\n        s2 = setImmediate(() => onConnectTimeout());\n      } else {\n        onConnectTimeout();\n      }\n    });\n  }, timeout);\n  return () => {\n    clearTimeout(timeoutId);\n    clearImmediate(s1);\n    clearImmediate(s2);\n  };\n}\nfunction onConnectTimeout(socket) {\n  let message = 'Connect Timeout Error';\n  if (Array.isArray(socket.autoSelectFamilyAttemptedAddresses)) {\n    message += ` (attempted addresses: ${socket.autoSelectFamilyAttemptedAddresses.join(', ')})`;\n  }\n  util.destroy(socket, new ConnectTimeoutError(message));\n}\nmodule.exports = buildConnector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/core/constants.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/** @type {Record<string, string | undefined>} */\nconst headerNameLowerCasedRecord = {};\n\n// https://developer.mozilla.org/docs/Web/HTTP/Headers\nconst wellknownHeaderNames = ['Accept', 'Accept-Encoding', 'Accept-Language', 'Accept-Ranges', 'Access-Control-Allow-Credentials', 'Access-Control-Allow-Headers', 'Access-Control-Allow-Methods', 'Access-Control-Allow-Origin', 'Access-Control-Expose-Headers', 'Access-Control-Max-Age', 'Access-Control-Request-Headers', 'Access-Control-Request-Method', 'Age', 'Allow', 'Alt-Svc', 'Alt-Used', 'Authorization', 'Cache-Control', 'Clear-Site-Data', 'Connection', 'Content-Disposition', 'Content-Encoding', 'Content-Language', 'Content-Length', 'Content-Location', 'Content-Range', 'Content-Security-Policy', 'Content-Security-Policy-Report-Only', 'Content-Type', 'Cookie', 'Cross-Origin-Embedder-Policy', 'Cross-Origin-Opener-Policy', 'Cross-Origin-Resource-Policy', 'Date', 'Device-Memory', 'Downlink', 'ECT', 'ETag', 'Expect', 'Expect-CT', 'Expires', 'Forwarded', 'From', 'Host', 'If-Match', 'If-Modified-Since', 'If-None-Match', 'If-Range', 'If-Unmodified-Since', 'Keep-Alive', 'Last-Modified', 'Link', 'Location', 'Max-Forwards', 'Origin', 'Permissions-Policy', 'Pragma', 'Proxy-Authenticate', 'Proxy-Authorization', 'RTT', 'Range', 'Referer', 'Referrer-Policy', 'Refresh', 'Retry-After', 'Sec-WebSocket-Accept', 'Sec-WebSocket-Extensions', 'Sec-WebSocket-Key', 'Sec-WebSocket-Protocol', 'Sec-WebSocket-Version', 'Server', 'Server-Timing', 'Service-Worker-Allowed', 'Service-Worker-Navigation-Preload', 'Set-Cookie', 'SourceMap', 'Strict-Transport-Security', 'Supports-Loading-Mode', 'TE', 'Timing-Allow-Origin', 'Trailer', 'Transfer-Encoding', 'Upgrade', 'Upgrade-Insecure-Requests', 'User-Agent', 'Vary', 'Via', 'WWW-Authenticate', 'X-Content-Type-Options', 'X-DNS-Prefetch-Control', 'X-Frame-Options', 'X-Permitted-Cross-Domain-Policies', 'X-Powered-By', 'X-Requested-With', 'X-XSS-Protection'];\nfor (let i = 0; i < wellknownHeaderNames.length; ++i) {\n  const key = wellknownHeaderNames[i];\n  const lowerCasedKey = key.toLowerCase();\n  headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;\n}\n\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(headerNameLowerCasedRecord, null);\nmodule.exports = {\n  wellknownHeaderNames,\n  headerNameLowerCasedRecord\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jb3JlL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBLE1BQU1BLDBCQUEwQixHQUFHLENBQUMsQ0FBQzs7QUFFckM7QUFDQSxNQUFNQyxvQkFBb0IsR0FBRyxDQUMzQixRQUFRLEVBQ1IsaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNqQixlQUFlLEVBQ2Ysa0NBQWtDLEVBQ2xDLDhCQUE4QixFQUM5Qiw4QkFBOEIsRUFDOUIsNkJBQTZCLEVBQzdCLCtCQUErQixFQUMvQix3QkFBd0IsRUFDeEIsZ0NBQWdDLEVBQ2hDLCtCQUErQixFQUMvQixLQUFLLEVBQ0wsT0FBTyxFQUNQLFNBQVMsRUFDVCxVQUFVLEVBQ1YsZUFBZSxFQUNmLGVBQWUsRUFDZixpQkFBaUIsRUFDakIsWUFBWSxFQUNaLHFCQUFxQixFQUNyQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUNoQixrQkFBa0IsRUFDbEIsZUFBZSxFQUNmLHlCQUF5QixFQUN6QixxQ0FBcUMsRUFDckMsY0FBYyxFQUNkLFFBQVEsRUFDUiw4QkFBOEIsRUFDOUIsNEJBQTRCLEVBQzVCLDhCQUE4QixFQUM5QixNQUFNLEVBQ04sZUFBZSxFQUNmLFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxFQUNOLFFBQVEsRUFDUixXQUFXLEVBQ1gsU0FBUyxFQUNULFdBQVcsRUFDWCxNQUFNLEVBQ04sTUFBTSxFQUNOLFVBQVUsRUFDVixtQkFBbUIsRUFDbkIsZUFBZSxFQUNmLFVBQVUsRUFDVixxQkFBcUIsRUFDckIsWUFBWSxFQUNaLGVBQWUsRUFDZixNQUFNLEVBQ04sVUFBVSxFQUNWLGNBQWMsRUFDZCxRQUFRLEVBQ1Isb0JBQW9CLEVBQ3BCLFFBQVEsRUFDUixvQkFBb0IsRUFDcEIscUJBQXFCLEVBQ3JCLEtBQUssRUFDTCxPQUFPLEVBQ1AsU0FBUyxFQUNULGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsYUFBYSxFQUNiLHNCQUFzQixFQUN0QiwwQkFBMEIsRUFDMUIsbUJBQW1CLEVBQ25CLHdCQUF3QixFQUN4Qix1QkFBdUIsRUFDdkIsUUFBUSxFQUNSLGVBQWUsRUFDZix3QkFBd0IsRUFDeEIsbUNBQW1DLEVBQ25DLFlBQVksRUFDWixXQUFXLEVBQ1gsMkJBQTJCLEVBQzNCLHVCQUF1QixFQUN2QixJQUFJLEVBQ0oscUJBQXFCLEVBQ3JCLFNBQVMsRUFDVCxtQkFBbUIsRUFDbkIsU0FBUyxFQUNULDJCQUEyQixFQUMzQixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxrQkFBa0IsRUFDbEIsd0JBQXdCLEVBQ3hCLHdCQUF3QixFQUN4QixpQkFBaUIsRUFDakIsbUNBQW1DLEVBQ25DLGNBQWMsRUFDZCxrQkFBa0IsRUFDbEIsa0JBQWtCLENBQ25CO0FBRUQsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELG9CQUFvQixDQUFDRSxNQUFNLEVBQUUsRUFBRUQsQ0FBQyxFQUFFO0VBQ3BELE1BQU1FLEdBQUcsR0FBR0gsb0JBQW9CLENBQUNDLENBQUMsQ0FBQztFQUNuQyxNQUFNRyxhQUFhLEdBQUdELEdBQUcsQ0FBQ0UsV0FBVyxDQUFDLENBQUM7RUFDdkNOLDBCQUEwQixDQUFDSSxHQUFHLENBQUMsR0FBR0osMEJBQTBCLENBQUNLLGFBQWEsQ0FBQyxHQUN6RUEsYUFBYTtBQUNqQjs7QUFFQTtBQUNBRSxNQUFNLENBQUNDLGNBQWMsQ0FBQ1IsMEJBQTBCLEVBQUUsSUFBSSxDQUFDO0FBRXZEUyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmVCxvQkFBb0I7RUFDcEJEO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2NvcmUvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD59ICovXG5jb25zdCBoZWFkZXJOYW1lTG93ZXJDYXNlZFJlY29yZCA9IHt9XG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUVFAvSGVhZGVyc1xuY29uc3Qgd2VsbGtub3duSGVhZGVyTmFtZXMgPSBbXG4gICdBY2NlcHQnLFxuICAnQWNjZXB0LUVuY29kaW5nJyxcbiAgJ0FjY2VwdC1MYW5ndWFnZScsXG4gICdBY2NlcHQtUmFuZ2VzJyxcbiAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzJyxcbiAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnLFxuICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsXG4gICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLFxuICAnQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnMnLFxuICAnQWNjZXNzLUNvbnRyb2wtTWF4LUFnZScsXG4gICdBY2Nlc3MtQ29udHJvbC1SZXF1ZXN0LUhlYWRlcnMnLFxuICAnQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1NZXRob2QnLFxuICAnQWdlJyxcbiAgJ0FsbG93JyxcbiAgJ0FsdC1TdmMnLFxuICAnQWx0LVVzZWQnLFxuICAnQXV0aG9yaXphdGlvbicsXG4gICdDYWNoZS1Db250cm9sJyxcbiAgJ0NsZWFyLVNpdGUtRGF0YScsXG4gICdDb25uZWN0aW9uJyxcbiAgJ0NvbnRlbnQtRGlzcG9zaXRpb24nLFxuICAnQ29udGVudC1FbmNvZGluZycsXG4gICdDb250ZW50LUxhbmd1YWdlJyxcbiAgJ0NvbnRlbnQtTGVuZ3RoJyxcbiAgJ0NvbnRlbnQtTG9jYXRpb24nLFxuICAnQ29udGVudC1SYW5nZScsXG4gICdDb250ZW50LVNlY3VyaXR5LVBvbGljeScsXG4gICdDb250ZW50LVNlY3VyaXR5LVBvbGljeS1SZXBvcnQtT25seScsXG4gICdDb250ZW50LVR5cGUnLFxuICAnQ29va2llJyxcbiAgJ0Nyb3NzLU9yaWdpbi1FbWJlZGRlci1Qb2xpY3knLFxuICAnQ3Jvc3MtT3JpZ2luLU9wZW5lci1Qb2xpY3knLFxuICAnQ3Jvc3MtT3JpZ2luLVJlc291cmNlLVBvbGljeScsXG4gICdEYXRlJyxcbiAgJ0RldmljZS1NZW1vcnknLFxuICAnRG93bmxpbmsnLFxuICAnRUNUJyxcbiAgJ0VUYWcnLFxuICAnRXhwZWN0JyxcbiAgJ0V4cGVjdC1DVCcsXG4gICdFeHBpcmVzJyxcbiAgJ0ZvcndhcmRlZCcsXG4gICdGcm9tJyxcbiAgJ0hvc3QnLFxuICAnSWYtTWF0Y2gnLFxuICAnSWYtTW9kaWZpZWQtU2luY2UnLFxuICAnSWYtTm9uZS1NYXRjaCcsXG4gICdJZi1SYW5nZScsXG4gICdJZi1Vbm1vZGlmaWVkLVNpbmNlJyxcbiAgJ0tlZXAtQWxpdmUnLFxuICAnTGFzdC1Nb2RpZmllZCcsXG4gICdMaW5rJyxcbiAgJ0xvY2F0aW9uJyxcbiAgJ01heC1Gb3J3YXJkcycsXG4gICdPcmlnaW4nLFxuICAnUGVybWlzc2lvbnMtUG9saWN5JyxcbiAgJ1ByYWdtYScsXG4gICdQcm94eS1BdXRoZW50aWNhdGUnLFxuICAnUHJveHktQXV0aG9yaXphdGlvbicsXG4gICdSVFQnLFxuICAnUmFuZ2UnLFxuICAnUmVmZXJlcicsXG4gICdSZWZlcnJlci1Qb2xpY3knLFxuICAnUmVmcmVzaCcsXG4gICdSZXRyeS1BZnRlcicsXG4gICdTZWMtV2ViU29ja2V0LUFjY2VwdCcsXG4gICdTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnMnLFxuICAnU2VjLVdlYlNvY2tldC1LZXknLFxuICAnU2VjLVdlYlNvY2tldC1Qcm90b2NvbCcsXG4gICdTZWMtV2ViU29ja2V0LVZlcnNpb24nLFxuICAnU2VydmVyJyxcbiAgJ1NlcnZlci1UaW1pbmcnLFxuICAnU2VydmljZS1Xb3JrZXItQWxsb3dlZCcsXG4gICdTZXJ2aWNlLVdvcmtlci1OYXZpZ2F0aW9uLVByZWxvYWQnLFxuICAnU2V0LUNvb2tpZScsXG4gICdTb3VyY2VNYXAnLFxuICAnU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eScsXG4gICdTdXBwb3J0cy1Mb2FkaW5nLU1vZGUnLFxuICAnVEUnLFxuICAnVGltaW5nLUFsbG93LU9yaWdpbicsXG4gICdUcmFpbGVyJyxcbiAgJ1RyYW5zZmVyLUVuY29kaW5nJyxcbiAgJ1VwZ3JhZGUnLFxuICAnVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0cycsXG4gICdVc2VyLUFnZW50JyxcbiAgJ1ZhcnknLFxuICAnVmlhJyxcbiAgJ1dXVy1BdXRoZW50aWNhdGUnLFxuICAnWC1Db250ZW50LVR5cGUtT3B0aW9ucycsXG4gICdYLUROUy1QcmVmZXRjaC1Db250cm9sJyxcbiAgJ1gtRnJhbWUtT3B0aW9ucycsXG4gICdYLVBlcm1pdHRlZC1Dcm9zcy1Eb21haW4tUG9saWNpZXMnLFxuICAnWC1Qb3dlcmVkLUJ5JyxcbiAgJ1gtUmVxdWVzdGVkLVdpdGgnLFxuICAnWC1YU1MtUHJvdGVjdGlvbidcbl1cblxuZm9yIChsZXQgaSA9IDA7IGkgPCB3ZWxsa25vd25IZWFkZXJOYW1lcy5sZW5ndGg7ICsraSkge1xuICBjb25zdCBrZXkgPSB3ZWxsa25vd25IZWFkZXJOYW1lc1tpXVxuICBjb25zdCBsb3dlckNhc2VkS2V5ID0ga2V5LnRvTG93ZXJDYXNlKClcbiAgaGVhZGVyTmFtZUxvd2VyQ2FzZWRSZWNvcmRba2V5XSA9IGhlYWRlck5hbWVMb3dlckNhc2VkUmVjb3JkW2xvd2VyQ2FzZWRLZXldID1cbiAgICBsb3dlckNhc2VkS2V5XG59XG5cbi8vIE5vdGU6IG9iamVjdCBwcm90b3R5cGVzIHNob3VsZCBub3QgYmUgYWJsZSB0byBiZSByZWZlcmVuY2VkLiBlLmcuIGBPYmplY3QjaGFzT3duUHJvcGVydHlgLlxuT2JqZWN0LnNldFByb3RvdHlwZU9mKGhlYWRlck5hbWVMb3dlckNhc2VkUmVjb3JkLCBudWxsKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgd2VsbGtub3duSGVhZGVyTmFtZXMsXG4gIGhlYWRlck5hbWVMb3dlckNhc2VkUmVjb3JkXG59XG4iXSwibmFtZXMiOlsiaGVhZGVyTmFtZUxvd2VyQ2FzZWRSZWNvcmQiLCJ3ZWxsa25vd25IZWFkZXJOYW1lcyIsImkiLCJsZW5ndGgiLCJrZXkiLCJsb3dlckNhc2VkS2V5IiwidG9Mb3dlckNhc2UiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/diagnostics.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/core/diagnostics.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst undiciDebugLog = util.debuglog('undici');\nconst fetchDebuglog = util.debuglog('fetch');\nconst websocketDebuglog = util.debuglog('websocket');\nlet isClientSet = false;\nconst channels = {\n  // Client\n  beforeConnect: diagnosticsChannel.channel('undici:client:beforeConnect'),\n  connected: diagnosticsChannel.channel('undici:client:connected'),\n  connectError: diagnosticsChannel.channel('undici:client:connectError'),\n  sendHeaders: diagnosticsChannel.channel('undici:client:sendHeaders'),\n  // Request\n  create: diagnosticsChannel.channel('undici:request:create'),\n  bodySent: diagnosticsChannel.channel('undici:request:bodySent'),\n  headers: diagnosticsChannel.channel('undici:request:headers'),\n  trailers: diagnosticsChannel.channel('undici:request:trailers'),\n  error: diagnosticsChannel.channel('undici:request:error'),\n  // WebSocket\n  open: diagnosticsChannel.channel('undici:websocket:open'),\n  close: diagnosticsChannel.channel('undici:websocket:close'),\n  socketError: diagnosticsChannel.channel('undici:websocket:socket_error'),\n  ping: diagnosticsChannel.channel('undici:websocket:ping'),\n  pong: diagnosticsChannel.channel('undici:websocket:pong')\n};\nif (undiciDebugLog.enabled || fetchDebuglog.enabled) {\n  const debuglog = fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog;\n\n  // Track all Client events\n  diagnosticsChannel.channel('undici:client:beforeConnect').subscribe(evt => {\n    const {\n      connectParams: {\n        version,\n        protocol,\n        port,\n        host\n      }\n    } = evt;\n    debuglog('connecting to %s using %s%s', `${host}${port ? `:${port}` : ''}`, protocol, version);\n  });\n  diagnosticsChannel.channel('undici:client:connected').subscribe(evt => {\n    const {\n      connectParams: {\n        version,\n        protocol,\n        port,\n        host\n      }\n    } = evt;\n    debuglog('connected to %s using %s%s', `${host}${port ? `:${port}` : ''}`, protocol, version);\n  });\n  diagnosticsChannel.channel('undici:client:connectError').subscribe(evt => {\n    const {\n      connectParams: {\n        version,\n        protocol,\n        port,\n        host\n      },\n      error\n    } = evt;\n    debuglog('connection to %s using %s%s errored - %s', `${host}${port ? `:${port}` : ''}`, protocol, version, error.message);\n  });\n  diagnosticsChannel.channel('undici:client:sendHeaders').subscribe(evt => {\n    const {\n      request: {\n        method,\n        path,\n        origin\n      }\n    } = evt;\n    debuglog('sending request to %s %s/%s', method, origin, path);\n  });\n\n  // Track Request events\n  diagnosticsChannel.channel('undici:request:headers').subscribe(evt => {\n    const {\n      request: {\n        method,\n        path,\n        origin\n      },\n      response: {\n        statusCode\n      }\n    } = evt;\n    debuglog('received response to %s %s/%s - HTTP %d', method, origin, path, statusCode);\n  });\n  diagnosticsChannel.channel('undici:request:trailers').subscribe(evt => {\n    const {\n      request: {\n        method,\n        path,\n        origin\n      }\n    } = evt;\n    debuglog('trailers received from %s %s/%s', method, origin, path);\n  });\n  diagnosticsChannel.channel('undici:request:error').subscribe(evt => {\n    const {\n      request: {\n        method,\n        path,\n        origin\n      },\n      error\n    } = evt;\n    debuglog('request to %s %s/%s errored - %s', method, origin, path, error.message);\n  });\n  isClientSet = true;\n}\nif (websocketDebuglog.enabled) {\n  if (!isClientSet) {\n    const debuglog = undiciDebugLog.enabled ? undiciDebugLog : websocketDebuglog;\n    diagnosticsChannel.channel('undici:client:beforeConnect').subscribe(evt => {\n      const {\n        connectParams: {\n          version,\n          protocol,\n          port,\n          host\n        }\n      } = evt;\n      debuglog('connecting to %s%s using %s%s', host, port ? `:${port}` : '', protocol, version);\n    });\n    diagnosticsChannel.channel('undici:client:connected').subscribe(evt => {\n      const {\n        connectParams: {\n          version,\n          protocol,\n          port,\n          host\n        }\n      } = evt;\n      debuglog('connected to %s%s using %s%s', host, port ? `:${port}` : '', protocol, version);\n    });\n    diagnosticsChannel.channel('undici:client:connectError').subscribe(evt => {\n      const {\n        connectParams: {\n          version,\n          protocol,\n          port,\n          host\n        },\n        error\n      } = evt;\n      debuglog('connection to %s%s using %s%s errored - %s', host, port ? `:${port}` : '', protocol, version, error.message);\n    });\n    diagnosticsChannel.channel('undici:client:sendHeaders').subscribe(evt => {\n      const {\n        request: {\n          method,\n          path,\n          origin\n        }\n      } = evt;\n      debuglog('sending request to %s %s/%s', method, origin, path);\n    });\n  }\n\n  // Track all WebSocket events\n  diagnosticsChannel.channel('undici:websocket:open').subscribe(evt => {\n    const {\n      address: {\n        address,\n        port\n      }\n    } = evt;\n    websocketDebuglog('connection opened %s%s', address, port ? `:${port}` : '');\n  });\n  diagnosticsChannel.channel('undici:websocket:close').subscribe(evt => {\n    const {\n      websocket,\n      code,\n      reason\n    } = evt;\n    websocketDebuglog('closed connection to %s - %s %s', websocket.url, code, reason);\n  });\n  diagnosticsChannel.channel('undici:websocket:socket_error').subscribe(err => {\n    websocketDebuglog('connection errored - %s', err.message);\n  });\n  diagnosticsChannel.channel('undici:websocket:ping').subscribe(evt => {\n    websocketDebuglog('ping received');\n  });\n  diagnosticsChannel.channel('undici:websocket:pong').subscribe(evt => {\n    websocketDebuglog('pong received');\n  });\n}\nmodule.exports = {\n  channels\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/diagnostics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/errors.js":
/*!************************************************!*\
  !*** ./node_modules/undici/lib/core/errors.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nclass UndiciError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'UndiciError';\n    this.code = 'UND_ERR';\n  }\n}\nclass ConnectTimeoutError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'ConnectTimeoutError';\n    this.message = message || 'Connect Timeout Error';\n    this.code = 'UND_ERR_CONNECT_TIMEOUT';\n  }\n}\nclass HeadersTimeoutError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'HeadersTimeoutError';\n    this.message = message || 'Headers Timeout Error';\n    this.code = 'UND_ERR_HEADERS_TIMEOUT';\n  }\n}\nclass HeadersOverflowError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'HeadersOverflowError';\n    this.message = message || 'Headers Overflow Error';\n    this.code = 'UND_ERR_HEADERS_OVERFLOW';\n  }\n}\nclass BodyTimeoutError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'BodyTimeoutError';\n    this.message = message || 'Body Timeout Error';\n    this.code = 'UND_ERR_BODY_TIMEOUT';\n  }\n}\nclass ResponseStatusCodeError extends UndiciError {\n  constructor(message, statusCode, headers, body) {\n    super(message);\n    this.name = 'ResponseStatusCodeError';\n    this.message = message || 'Response Status Code Error';\n    this.code = 'UND_ERR_RESPONSE_STATUS_CODE';\n    this.body = body;\n    this.status = statusCode;\n    this.statusCode = statusCode;\n    this.headers = headers;\n  }\n}\nclass InvalidArgumentError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidArgumentError';\n    this.message = message || 'Invalid Argument Error';\n    this.code = 'UND_ERR_INVALID_ARG';\n  }\n}\nclass InvalidReturnValueError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'InvalidReturnValueError';\n    this.message = message || 'Invalid Return Value Error';\n    this.code = 'UND_ERR_INVALID_RETURN_VALUE';\n  }\n}\nclass AbortError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'AbortError';\n    this.message = message || 'The operation was aborted';\n  }\n}\nclass RequestAbortedError extends AbortError {\n  constructor(message) {\n    super(message);\n    this.name = 'AbortError';\n    this.message = message || 'Request aborted';\n    this.code = 'UND_ERR_ABORTED';\n  }\n}\nclass InformationalError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'InformationalError';\n    this.message = message || 'Request information';\n    this.code = 'UND_ERR_INFO';\n  }\n}\nclass RequestContentLengthMismatchError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'RequestContentLengthMismatchError';\n    this.message = message || 'Request body length does not match content-length header';\n    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH';\n  }\n}\nclass ResponseContentLengthMismatchError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'ResponseContentLengthMismatchError';\n    this.message = message || 'Response body length does not match content-length header';\n    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH';\n  }\n}\nclass ClientDestroyedError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'ClientDestroyedError';\n    this.message = message || 'The client is destroyed';\n    this.code = 'UND_ERR_DESTROYED';\n  }\n}\nclass ClientClosedError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'ClientClosedError';\n    this.message = message || 'The client is closed';\n    this.code = 'UND_ERR_CLOSED';\n  }\n}\nclass SocketError extends UndiciError {\n  constructor(message, socket) {\n    super(message);\n    this.name = 'SocketError';\n    this.message = message || 'Socket error';\n    this.code = 'UND_ERR_SOCKET';\n    this.socket = socket;\n  }\n}\nclass NotSupportedError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'NotSupportedError';\n    this.message = message || 'Not supported error';\n    this.code = 'UND_ERR_NOT_SUPPORTED';\n  }\n}\nclass BalancedPoolMissingUpstreamError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'MissingUpstreamError';\n    this.message = message || 'No upstream has been added to the BalancedPool';\n    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM';\n  }\n}\nclass HTTPParserError extends Error {\n  constructor(message, code, data) {\n    super(message);\n    this.name = 'HTTPParserError';\n    this.code = code ? `HPE_${code}` : undefined;\n    this.data = data ? data.toString() : undefined;\n  }\n}\nclass ResponseExceededMaxSizeError extends UndiciError {\n  constructor(message) {\n    super(message);\n    this.name = 'ResponseExceededMaxSizeError';\n    this.message = message || 'Response content exceeded max size';\n    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE';\n  }\n}\nclass RequestRetryError extends UndiciError {\n  constructor(message, code, _ref) {\n    let {\n      headers,\n      data\n    } = _ref;\n    super(message);\n    this.name = 'RequestRetryError';\n    this.message = message || 'Request retry error';\n    this.code = 'UND_ERR_REQ_RETRY';\n    this.statusCode = code;\n    this.data = data;\n    this.headers = headers;\n  }\n}\nclass SecureProxyConnectionError extends UndiciError {\n  constructor(cause, message, options) {\n    super(message, {\n      cause,\n      ...(options ?? {})\n    });\n    this.name = 'SecureProxyConnectionError';\n    this.message = message || 'Secure Proxy Connection failed';\n    this.code = 'UND_ERR_PRX_TLS';\n    this.cause = cause;\n  }\n}\nmodule.exports = {\n  AbortError,\n  HTTPParserError,\n  UndiciError,\n  HeadersTimeoutError,\n  HeadersOverflowError,\n  BodyTimeoutError,\n  RequestContentLengthMismatchError,\n  ConnectTimeoutError,\n  ResponseStatusCodeError,\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError,\n  ClientDestroyedError,\n  ClientClosedError,\n  InformationalError,\n  SocketError,\n  NotSupportedError,\n  ResponseContentLengthMismatchError,\n  BalancedPoolMissingUpstreamError,\n  ResponseExceededMaxSizeError,\n  RequestRetryError,\n  SecureProxyConnectionError\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/request.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/core/request.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  InvalidArgumentError,\n  NotSupportedError\n} = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  isValidHTTPToken,\n  isValidHeaderValue,\n  isStream,\n  destroy,\n  isBuffer,\n  isFormDataLike,\n  isIterable,\n  isBlobLike,\n  buildURL,\n  validateHandler,\n  getServerName,\n  normalizedMethodRecords\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  channels\n} = __webpack_require__(/*! ./diagnostics.js */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst {\n  headerNameLowerCasedRecord\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/core/constants.js\");\n\n// Verifies that a given path is valid does not contain control chars \\x00 to \\x20\nconst invalidPathRegex = /[^\\u0021-\\u00ff]/;\nconst kHandler = Symbol('handler');\nclass Request {\n  constructor(origin, _ref, handler) {\n    let {\n      path,\n      method,\n      body,\n      headers,\n      query,\n      idempotent,\n      blocking,\n      upgrade,\n      headersTimeout,\n      bodyTimeout,\n      reset,\n      throwOnError,\n      expectContinue,\n      servername\n    } = _ref;\n    if (typeof path !== 'string') {\n      throw new InvalidArgumentError('path must be a string');\n    } else if (path[0] !== '/' && !(path.startsWith('http://') || path.startsWith('https://')) && method !== 'CONNECT') {\n      throw new InvalidArgumentError('path must be an absolute URL or start with a slash');\n    } else if (invalidPathRegex.test(path)) {\n      throw new InvalidArgumentError('invalid request path');\n    }\n    if (typeof method !== 'string') {\n      throw new InvalidArgumentError('method must be a string');\n    } else if (normalizedMethodRecords[method] === undefined && !isValidHTTPToken(method)) {\n      throw new InvalidArgumentError('invalid request method');\n    }\n    if (upgrade && typeof upgrade !== 'string') {\n      throw new InvalidArgumentError('upgrade must be a string');\n    }\n    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {\n      throw new InvalidArgumentError('invalid headersTimeout');\n    }\n    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {\n      throw new InvalidArgumentError('invalid bodyTimeout');\n    }\n    if (reset != null && typeof reset !== 'boolean') {\n      throw new InvalidArgumentError('invalid reset');\n    }\n    if (expectContinue != null && typeof expectContinue !== 'boolean') {\n      throw new InvalidArgumentError('invalid expectContinue');\n    }\n    this.headersTimeout = headersTimeout;\n    this.bodyTimeout = bodyTimeout;\n    this.throwOnError = throwOnError === true;\n    this.method = method;\n    this.abort = null;\n    if (body == null) {\n      this.body = null;\n    } else if (isStream(body)) {\n      this.body = body;\n      const rState = this.body._readableState;\n      if (!rState || !rState.autoDestroy) {\n        this.endHandler = function autoDestroy() {\n          destroy(this);\n        };\n        this.body.on('end', this.endHandler);\n      }\n      this.errorHandler = err => {\n        if (this.abort) {\n          this.abort(err);\n        } else {\n          this.error = err;\n        }\n      };\n      this.body.on('error', this.errorHandler);\n    } else if (isBuffer(body)) {\n      this.body = body.byteLength ? body : null;\n    } else if (ArrayBuffer.isView(body)) {\n      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;\n    } else if (body instanceof ArrayBuffer) {\n      this.body = body.byteLength ? Buffer.from(body) : null;\n    } else if (typeof body === 'string') {\n      this.body = body.length ? Buffer.from(body) : null;\n    } else if (isFormDataLike(body) || isIterable(body) || isBlobLike(body)) {\n      this.body = body;\n    } else {\n      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable');\n    }\n    this.completed = false;\n    this.aborted = false;\n    this.upgrade = upgrade || null;\n    this.path = query ? buildURL(path, query) : path;\n    this.origin = origin;\n    this.idempotent = idempotent == null ? method === 'HEAD' || method === 'GET' : idempotent;\n    this.blocking = blocking == null ? false : blocking;\n    this.reset = reset == null ? null : reset;\n    this.host = null;\n    this.contentLength = null;\n    this.contentType = null;\n    this.headers = [];\n\n    // Only for H2\n    this.expectContinue = expectContinue != null ? expectContinue : false;\n    if (Array.isArray(headers)) {\n      if (headers.length % 2 !== 0) {\n        throw new InvalidArgumentError('headers array must be even');\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        processHeader(this, headers[i], headers[i + 1]);\n      }\n    } else if (headers && typeof headers === 'object') {\n      if (headers[Symbol.iterator]) {\n        for (const header of headers) {\n          if (!Array.isArray(header) || header.length !== 2) {\n            throw new InvalidArgumentError('headers must be in key-value pair format');\n          }\n          processHeader(this, header[0], header[1]);\n        }\n      } else {\n        const keys = Object.keys(headers);\n        for (let i = 0; i < keys.length; ++i) {\n          processHeader(this, keys[i], headers[keys[i]]);\n        }\n      }\n    } else if (headers != null) {\n      throw new InvalidArgumentError('headers must be an object or an array');\n    }\n    validateHandler(handler, method, upgrade);\n    this.servername = servername || getServerName(this.host);\n    this[kHandler] = handler;\n    if (channels.create.hasSubscribers) {\n      channels.create.publish({\n        request: this\n      });\n    }\n  }\n  onBodySent(chunk) {\n    if (this[kHandler].onBodySent) {\n      try {\n        return this[kHandler].onBodySent(chunk);\n      } catch (err) {\n        this.abort(err);\n      }\n    }\n  }\n  onRequestSent() {\n    if (channels.bodySent.hasSubscribers) {\n      channels.bodySent.publish({\n        request: this\n      });\n    }\n    if (this[kHandler].onRequestSent) {\n      try {\n        return this[kHandler].onRequestSent();\n      } catch (err) {\n        this.abort(err);\n      }\n    }\n  }\n  onConnect(abort) {\n    assert(!this.aborted);\n    assert(!this.completed);\n    if (this.error) {\n      abort(this.error);\n    } else {\n      this.abort = abort;\n      return this[kHandler].onConnect(abort);\n    }\n  }\n  onResponseStarted() {\n    return this[kHandler].onResponseStarted?.();\n  }\n  onHeaders(statusCode, headers, resume, statusText) {\n    assert(!this.aborted);\n    assert(!this.completed);\n    if (channels.headers.hasSubscribers) {\n      channels.headers.publish({\n        request: this,\n        response: {\n          statusCode,\n          headers,\n          statusText\n        }\n      });\n    }\n    try {\n      return this[kHandler].onHeaders(statusCode, headers, resume, statusText);\n    } catch (err) {\n      this.abort(err);\n    }\n  }\n  onData(chunk) {\n    assert(!this.aborted);\n    assert(!this.completed);\n    try {\n      return this[kHandler].onData(chunk);\n    } catch (err) {\n      this.abort(err);\n      return false;\n    }\n  }\n  onUpgrade(statusCode, headers, socket) {\n    assert(!this.aborted);\n    assert(!this.completed);\n    return this[kHandler].onUpgrade(statusCode, headers, socket);\n  }\n  onComplete(trailers) {\n    this.onFinally();\n    assert(!this.aborted);\n    this.completed = true;\n    if (channels.trailers.hasSubscribers) {\n      channels.trailers.publish({\n        request: this,\n        trailers\n      });\n    }\n    try {\n      return this[kHandler].onComplete(trailers);\n    } catch (err) {\n      // TODO (fix): This might be a bad idea?\n      this.onError(err);\n    }\n  }\n  onError(error) {\n    this.onFinally();\n    if (channels.error.hasSubscribers) {\n      channels.error.publish({\n        request: this,\n        error\n      });\n    }\n    if (this.aborted) {\n      return;\n    }\n    this.aborted = true;\n    return this[kHandler].onError(error);\n  }\n  onFinally() {\n    if (this.errorHandler) {\n      this.body.off('error', this.errorHandler);\n      this.errorHandler = null;\n    }\n    if (this.endHandler) {\n      this.body.off('end', this.endHandler);\n      this.endHandler = null;\n    }\n  }\n  addHeader(key, value) {\n    processHeader(this, key, value);\n    return this;\n  }\n}\nfunction processHeader(request, key, val) {\n  if (val && typeof val === 'object' && !Array.isArray(val)) {\n    throw new InvalidArgumentError(`invalid ${key} header`);\n  } else if (val === undefined) {\n    return;\n  }\n  let headerName = headerNameLowerCasedRecord[key];\n  if (headerName === undefined) {\n    headerName = key.toLowerCase();\n    if (headerNameLowerCasedRecord[headerName] === undefined && !isValidHTTPToken(headerName)) {\n      throw new InvalidArgumentError('invalid header key');\n    }\n  }\n  if (Array.isArray(val)) {\n    const arr = [];\n    for (let i = 0; i < val.length; i++) {\n      if (typeof val[i] === 'string') {\n        if (!isValidHeaderValue(val[i])) {\n          throw new InvalidArgumentError(`invalid ${key} header`);\n        }\n        arr.push(val[i]);\n      } else if (val[i] === null) {\n        arr.push('');\n      } else if (typeof val[i] === 'object') {\n        throw new InvalidArgumentError(`invalid ${key} header`);\n      } else {\n        arr.push(`${val[i]}`);\n      }\n    }\n    val = arr;\n  } else if (typeof val === 'string') {\n    if (!isValidHeaderValue(val)) {\n      throw new InvalidArgumentError(`invalid ${key} header`);\n    }\n  } else if (val === null) {\n    val = '';\n  } else {\n    val = `${val}`;\n  }\n  if (request.host === null && headerName === 'host') {\n    if (typeof val !== 'string') {\n      throw new InvalidArgumentError('invalid host header');\n    }\n    // Consumed by Client\n    request.host = val;\n  } else if (request.contentLength === null && headerName === 'content-length') {\n    request.contentLength = parseInt(val, 10);\n    if (!Number.isFinite(request.contentLength)) {\n      throw new InvalidArgumentError('invalid content-length header');\n    }\n  } else if (request.contentType === null && headerName === 'content-type') {\n    request.contentType = val;\n    request.headers.push(key, val);\n  } else if (headerName === 'transfer-encoding' || headerName === 'keep-alive' || headerName === 'upgrade') {\n    throw new InvalidArgumentError(`invalid ${headerName} header`);\n  } else if (headerName === 'connection') {\n    const value = typeof val === 'string' ? val.toLowerCase() : null;\n    if (value !== 'close' && value !== 'keep-alive') {\n      throw new InvalidArgumentError('invalid connection header');\n    }\n    if (value === 'close') {\n      request.reset = true;\n    }\n  } else if (headerName === 'expect') {\n    throw new NotSupportedError('expect header not supported');\n  } else {\n    request.headers.push(key, val);\n  }\n}\nmodule.exports = Request;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/symbols.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/core/symbols.js ***!
  \*************************************************/
/***/ ((module) => {

eval("module.exports = {\n  kClose: Symbol('close'),\n  kDestroy: Symbol('destroy'),\n  kDispatch: Symbol('dispatch'),\n  kUrl: Symbol('url'),\n  kWriting: Symbol('writing'),\n  kResuming: Symbol('resuming'),\n  kQueue: Symbol('queue'),\n  kConnect: Symbol('connect'),\n  kConnecting: Symbol('connecting'),\n  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),\n  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),\n  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),\n  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),\n  kKeepAlive: Symbol('keep alive'),\n  kHeadersTimeout: Symbol('headers timeout'),\n  kBodyTimeout: Symbol('body timeout'),\n  kServerName: Symbol('server name'),\n  kLocalAddress: Symbol('local address'),\n  kHost: Symbol('host'),\n  kNoRef: Symbol('no ref'),\n  kBodyUsed: Symbol('used'),\n  kBody: Symbol('abstracted request body'),\n  kRunning: Symbol('running'),\n  kBlocking: Symbol('blocking'),\n  kPending: Symbol('pending'),\n  kSize: Symbol('size'),\n  kBusy: Symbol('busy'),\n  kQueued: Symbol('queued'),\n  kFree: Symbol('free'),\n  kConnected: Symbol('connected'),\n  kClosed: Symbol('closed'),\n  kNeedDrain: Symbol('need drain'),\n  kReset: Symbol('reset'),\n  kDestroyed: Symbol.for('nodejs.stream.destroyed'),\n  kResume: Symbol('resume'),\n  kOnError: Symbol('on error'),\n  kMaxHeadersSize: Symbol('max headers size'),\n  kRunningIdx: Symbol('running index'),\n  kPendingIdx: Symbol('pending index'),\n  kError: Symbol('error'),\n  kClients: Symbol('clients'),\n  kClient: Symbol('client'),\n  kParser: Symbol('parser'),\n  kOnDestroyed: Symbol('destroy callbacks'),\n  kPipelining: Symbol('pipelining'),\n  kSocket: Symbol('socket'),\n  kHostHeader: Symbol('host header'),\n  kConnector: Symbol('connector'),\n  kStrictContentLength: Symbol('strict content length'),\n  kMaxRedirections: Symbol('maxRedirections'),\n  kMaxRequests: Symbol('maxRequestsPerClient'),\n  kProxy: Symbol('proxy agent options'),\n  kCounter: Symbol('socket request counter'),\n  kInterceptors: Symbol('dispatch interceptors'),\n  kMaxResponseSize: Symbol('max response size'),\n  kHTTP2Session: Symbol('http2Session'),\n  kHTTP2SessionState: Symbol('http2Session state'),\n  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),\n  kConstruct: Symbol('constructable'),\n  kListeners: Symbol('listeners'),\n  kHTTPContext: Symbol('http context'),\n  kMaxConcurrentStreams: Symbol('max concurrent streams'),\n  kNoProxyAgent: Symbol('no proxy agent'),\n  kHttpProxyAgent: Symbol('http proxy agent'),\n  kHttpsProxyAgent: Symbol('https proxy agent')\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/tree.js":
/*!**********************************************!*\
  !*** ./node_modules/undici/lib/core/tree.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nconst {\n  wellknownHeaderNames,\n  headerNameLowerCasedRecord\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/core/constants.js\");\nclass TstNode {\n  /**\n   * @param {string} key\n   * @param {any} value\n   * @param {number} index\n   */\n  constructor(key, value, index) {\n    /** @type {any} */\n    _defineProperty(this, \"value\", null);\n    /** @type {null | TstNode} */\n    _defineProperty(this, \"left\", null);\n    /** @type {null | TstNode} */\n    _defineProperty(this, \"middle\", null);\n    /** @type {null | TstNode} */\n    _defineProperty(this, \"right\", null);\n    /** @type {number} */\n    _defineProperty(this, \"code\", void 0);\n    if (index === undefined || index >= key.length) {\n      throw new TypeError('Unreachable');\n    }\n    const code = this.code = key.charCodeAt(index);\n    // check code is ascii string\n    if (code > 0x7F) {\n      throw new TypeError('key must be ascii string');\n    }\n    if (key.length !== ++index) {\n      this.middle = new TstNode(key, value, index);\n    } else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} value\n   */\n  add(key, value) {\n    const length = key.length;\n    if (length === 0) {\n      throw new TypeError('Unreachable');\n    }\n    let index = 0;\n    let node = this;\n    while (true) {\n      const code = key.charCodeAt(index);\n      // check code is ascii string\n      if (code > 0x7F) {\n        throw new TypeError('key must be ascii string');\n      }\n      if (node.code === code) {\n        if (length === ++index) {\n          node.value = value;\n          break;\n        } else if (node.middle !== null) {\n          node = node.middle;\n        } else {\n          node.middle = new TstNode(key, value, index);\n          break;\n        }\n      } else if (node.code < code) {\n        if (node.left !== null) {\n          node = node.left;\n        } else {\n          node.left = new TstNode(key, value, index);\n          break;\n        }\n      } else if (node.right !== null) {\n        node = node.right;\n      } else {\n        node.right = new TstNode(key, value, index);\n        break;\n      }\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @return {TstNode | null}\n   */\n  search(key) {\n    const keylength = key.length;\n    let index = 0;\n    let node = this;\n    while (node !== null && index < keylength) {\n      let code = key[index];\n      // A-Z\n      // First check if it is bigger than 0x5a.\n      // Lowercase letters have higher char codes than uppercase ones.\n      // Also we assume that headers will mostly contain lowercase characters.\n      if (code <= 0x5a && code >= 0x41) {\n        // Lowercase for uppercase.\n        code |= 32;\n      }\n      while (node !== null) {\n        if (code === node.code) {\n          if (keylength === ++index) {\n            // Returns Node since it is the last key.\n            return node;\n          }\n          node = node.middle;\n          break;\n        }\n        node = node.code < code ? node.left : node.right;\n      }\n    }\n    return null;\n  }\n}\nclass TernarySearchTree {\n  constructor() {\n    /** @type {TstNode | null} */\n    _defineProperty(this, \"node\", null);\n  }\n  /**\n   * @param {string} key\n   * @param {any} value\n   * */\n  insert(key, value) {\n    if (this.node === null) {\n      this.node = new TstNode(key, value, 0);\n    } else {\n      this.node.add(key, value);\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @return {any}\n   */\n  lookup(key) {\n    return this.node?.search(key)?.value ?? null;\n  }\n}\nconst tree = new TernarySearchTree();\nfor (let i = 0; i < wellknownHeaderNames.length; ++i) {\n  const key = headerNameLowerCasedRecord[wellknownHeaderNames[i]];\n  tree.insert(key, key);\n}\nmodule.exports = {\n  TernarySearchTree,\n  tree\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/tree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/util.js":
/*!**********************************************!*\
  !*** ./node_modules/undici/lib/core/util.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  kDestroyed,\n  kBodyUsed,\n  kListeners,\n  kBody\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst {\n  IncomingMessage\n} = __webpack_require__(/*! node:http */ \"node:http\");\nconst stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst {\n  Blob\n} = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst nodeUtil = __webpack_require__(/*! node:util */ \"node:util\");\nconst {\n  stringify\n} = __webpack_require__(/*! node:querystring */ \"node:querystring\");\nconst {\n  EventEmitter: EE\n} = __webpack_require__(/*! node:events */ \"node:events\");\nconst {\n  InvalidArgumentError\n} = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  headerNameLowerCasedRecord\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/core/constants.js\");\nconst {\n  tree\n} = __webpack_require__(/*! ./tree */ \"(ssr)/./node_modules/undici/lib/core/tree.js\");\nconst [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v));\nclass BodyAsyncIterable {\n  constructor(body) {\n    this[kBody] = body;\n    this[kBodyUsed] = false;\n  }\n  async *[Symbol.asyncIterator]() {\n    assert(!this[kBodyUsed], 'disturbed');\n    this[kBodyUsed] = true;\n    yield* this[kBody];\n  }\n}\nfunction wrapRequestBody(body) {\n  if (isStream(body)) {\n    // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n    // so that it can be dispatched again?\n    // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n    if (bodyLength(body) === 0) {\n      body.on('data', function () {\n        assert(false);\n      });\n    }\n    if (typeof body.readableDidRead !== 'boolean') {\n      body[kBodyUsed] = false;\n      EE.prototype.on.call(body, 'data', function () {\n        this[kBodyUsed] = true;\n      });\n    }\n    return body;\n  } else if (body && typeof body.pipeTo === 'function') {\n    // TODO (fix): We can't access ReadableStream internal state\n    // to determine whether or not it has been disturbed. This is just\n    // a workaround.\n    return new BodyAsyncIterable(body);\n  } else if (body && typeof body !== 'string' && !ArrayBuffer.isView(body) && isIterable(body)) {\n    // TODO: Should we allow re-using iterable if !this.opts.idempotent\n    // or through some other flag?\n    return new BodyAsyncIterable(body);\n  } else {\n    return body;\n  }\n}\nfunction nop() {}\nfunction isStream(obj) {\n  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function';\n}\n\n// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)\nfunction isBlobLike(object) {\n  if (object === null) {\n    return false;\n  } else if (object instanceof Blob) {\n    return true;\n  } else if (typeof object !== 'object') {\n    return false;\n  } else {\n    const sTag = object[Symbol.toStringTag];\n    return (sTag === 'Blob' || sTag === 'File') && ('stream' in object && typeof object.stream === 'function' || 'arrayBuffer' in object && typeof object.arrayBuffer === 'function');\n  }\n}\nfunction buildURL(url, queryParams) {\n  if (url.includes('?') || url.includes('#')) {\n    throw new Error('Query params cannot be passed when url already contains \"?\" or \"#\".');\n  }\n  const stringified = stringify(queryParams);\n  if (stringified) {\n    url += '?' + stringified;\n  }\n  return url;\n}\nfunction isValidPort(port) {\n  const value = parseInt(port, 10);\n  return value === Number(port) && value >= 0 && value <= 65535;\n}\nfunction isHttpOrHttpsPrefixed(value) {\n  return value != null && value[0] === 'h' && value[1] === 't' && value[2] === 't' && value[3] === 'p' && (value[4] === ':' || value[4] === 's' && value[5] === ':');\n}\nfunction parseURL(url) {\n  if (typeof url === 'string') {\n    url = new URL(url);\n    if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {\n      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.');\n    }\n    return url;\n  }\n  if (!url || typeof url !== 'object') {\n    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.');\n  }\n  if (!(url instanceof URL)) {\n    if (url.port != null && url.port !== '' && isValidPort(url.port) === false) {\n      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.');\n    }\n    if (url.path != null && typeof url.path !== 'string') {\n      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.');\n    }\n    if (url.pathname != null && typeof url.pathname !== 'string') {\n      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.');\n    }\n    if (url.hostname != null && typeof url.hostname !== 'string') {\n      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.');\n    }\n    if (url.origin != null && typeof url.origin !== 'string') {\n      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.');\n    }\n    if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {\n      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.');\n    }\n    const port = url.port != null ? url.port : url.protocol === 'https:' ? 443 : 80;\n    let origin = url.origin != null ? url.origin : `${url.protocol || ''}//${url.hostname || ''}:${port}`;\n    let path = url.path != null ? url.path : `${url.pathname || ''}${url.search || ''}`;\n    if (origin[origin.length - 1] === '/') {\n      origin = origin.slice(0, origin.length - 1);\n    }\n    if (path && path[0] !== '/') {\n      path = `/${path}`;\n    }\n    // new URL(path, origin) is unsafe when `path` contains an absolute URL\n    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:\n    // If first parameter is a relative URL, second param is required, and will be used as the base URL.\n    // If first parameter is an absolute URL, a given second param will be ignored.\n    return new URL(`${origin}${path}`);\n  }\n  if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {\n    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.');\n  }\n  return url;\n}\nfunction parseOrigin(url) {\n  url = parseURL(url);\n  if (url.pathname !== '/' || url.search || url.hash) {\n    throw new InvalidArgumentError('invalid url');\n  }\n  return url;\n}\nfunction getHostname(host) {\n  if (host[0] === '[') {\n    const idx = host.indexOf(']');\n    assert(idx !== -1);\n    return host.substring(1, idx);\n  }\n  const idx = host.indexOf(':');\n  if (idx === -1) return host;\n  return host.substring(0, idx);\n}\n\n// IP addresses are not valid server names per RFC6066\n// > Currently, the only server names supported are DNS hostnames\nfunction getServerName(host) {\n  if (!host) {\n    return null;\n  }\n  assert.strictEqual(typeof host, 'string');\n  const servername = getHostname(host);\n  if (net.isIP(servername)) {\n    return '';\n  }\n  return servername;\n}\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\nfunction isAsyncIterable(obj) {\n  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function');\n}\nfunction isIterable(obj) {\n  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'));\n}\nfunction bodyLength(body) {\n  if (body == null) {\n    return 0;\n  } else if (isStream(body)) {\n    const state = body._readableState;\n    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;\n  } else if (isBlobLike(body)) {\n    return body.size != null ? body.size : null;\n  } else if (isBuffer(body)) {\n    return body.byteLength;\n  }\n  return null;\n}\nfunction isDestroyed(body) {\n  return body && !!(body.destroyed || body[kDestroyed] || stream.isDestroyed?.(body));\n}\nfunction destroy(stream, err) {\n  if (stream == null || !isStream(stream) || isDestroyed(stream)) {\n    return;\n  }\n  if (typeof stream.destroy === 'function') {\n    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {\n      // See: https://github.com/nodejs/node/pull/38505/files\n      stream.socket = null;\n    }\n    stream.destroy(err);\n  } else if (err) {\n    queueMicrotask(() => {\n      stream.emit('error', err);\n    });\n  }\n  if (stream.destroyed !== true) {\n    stream[kDestroyed] = true;\n  }\n}\nconst KEEPALIVE_TIMEOUT_EXPR = /timeout=(\\d+)/;\nfunction parseKeepAliveTimeout(val) {\n  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);\n  return m ? parseInt(m[1], 10) * 1000 : null;\n}\n\n/**\n * Retrieves a header name and returns its lowercase value.\n * @param {string | Buffer} value Header name\n * @returns {string}\n */\nfunction headerNameToString(value) {\n  return typeof value === 'string' ? headerNameLowerCasedRecord[value] ?? value.toLowerCase() : tree.lookup(value) ?? value.toString('latin1').toLowerCase();\n}\n\n/**\n * Receive the buffer as a string and return its lowercase value.\n * @param {Buffer} value Header name\n * @returns {string}\n */\nfunction bufferToLowerCasedHeaderName(value) {\n  return tree.lookup(value) ?? value.toString('latin1').toLowerCase();\n}\n\n/**\n * @param {Record<string, string | string[]> | (Buffer | string | (Buffer | string)[])[]} headers\n * @param {Record<string, string | string[]>} [obj]\n * @returns {Record<string, string | string[]>}\n */\nfunction parseHeaders(headers, obj) {\n  if (obj === undefined) obj = {};\n  for (let i = 0; i < headers.length; i += 2) {\n    const key = headerNameToString(headers[i]);\n    let val = obj[key];\n    if (val) {\n      if (typeof val === 'string') {\n        val = [val];\n        obj[key] = val;\n      }\n      val.push(headers[i + 1].toString('utf8'));\n    } else {\n      const headersValue = headers[i + 1];\n      if (typeof headersValue === 'string') {\n        obj[key] = headersValue;\n      } else {\n        obj[key] = Array.isArray(headersValue) ? headersValue.map(x => x.toString('utf8')) : headersValue.toString('utf8');\n      }\n    }\n  }\n\n  // See https://github.com/nodejs/node/pull/46528\n  if ('content-length' in obj && 'content-disposition' in obj) {\n    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1');\n  }\n  return obj;\n}\nfunction parseRawHeaders(headers) {\n  const len = headers.length;\n  const ret = new Array(len);\n  let hasContentLength = false;\n  let contentDispositionIdx = -1;\n  let key;\n  let val;\n  let kLen = 0;\n  for (let n = 0; n < headers.length; n += 2) {\n    key = headers[n];\n    val = headers[n + 1];\n    typeof key !== 'string' && (key = key.toString());\n    typeof val !== 'string' && (val = val.toString('utf8'));\n    kLen = key.length;\n    if (kLen === 14 && key[7] === '-' && (key === 'content-length' || key.toLowerCase() === 'content-length')) {\n      hasContentLength = true;\n    } else if (kLen === 19 && key[7] === '-' && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {\n      contentDispositionIdx = n + 1;\n    }\n    ret[n] = key;\n    ret[n + 1] = val;\n  }\n\n  // See https://github.com/nodejs/node/pull/46528\n  if (hasContentLength && contentDispositionIdx !== -1) {\n    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1');\n  }\n  return ret;\n}\nfunction isBuffer(buffer) {\n  // See, https://github.com/mcollina/undici/pull/319\n  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);\n}\nfunction validateHandler(handler, method, upgrade) {\n  if (!handler || typeof handler !== 'object') {\n    throw new InvalidArgumentError('handler must be an object');\n  }\n  if (typeof handler.onConnect !== 'function') {\n    throw new InvalidArgumentError('invalid onConnect method');\n  }\n  if (typeof handler.onError !== 'function') {\n    throw new InvalidArgumentError('invalid onError method');\n  }\n  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {\n    throw new InvalidArgumentError('invalid onBodySent method');\n  }\n  if (upgrade || method === 'CONNECT') {\n    if (typeof handler.onUpgrade !== 'function') {\n      throw new InvalidArgumentError('invalid onUpgrade method');\n    }\n  } else {\n    if (typeof handler.onHeaders !== 'function') {\n      throw new InvalidArgumentError('invalid onHeaders method');\n    }\n    if (typeof handler.onData !== 'function') {\n      throw new InvalidArgumentError('invalid onData method');\n    }\n    if (typeof handler.onComplete !== 'function') {\n      throw new InvalidArgumentError('invalid onComplete method');\n    }\n  }\n}\n\n// A body is disturbed if it has been read from and it cannot\n// be re-used without losing state or data.\nfunction isDisturbed(body) {\n  // TODO (fix): Why is body[kBodyUsed] needed?\n  return !!(body && (stream.isDisturbed(body) || body[kBodyUsed]));\n}\nfunction isErrored(body) {\n  return !!(body && stream.isErrored(body));\n}\nfunction isReadable(body) {\n  return !!(body && stream.isReadable(body));\n}\nfunction getSocketInfo(socket) {\n  return {\n    localAddress: socket.localAddress,\n    localPort: socket.localPort,\n    remoteAddress: socket.remoteAddress,\n    remotePort: socket.remotePort,\n    remoteFamily: socket.remoteFamily,\n    timeout: socket.timeout,\n    bytesWritten: socket.bytesWritten,\n    bytesRead: socket.bytesRead\n  };\n}\n\n/** @type {globalThis['ReadableStream']} */\nfunction ReadableStreamFrom(iterable) {\n  // We cannot use ReadableStream.from here because it does not return a byte stream.\n\n  let iterator;\n  return new ReadableStream({\n    async start() {\n      iterator = iterable[Symbol.asyncIterator]();\n    },\n    async pull(controller) {\n      const {\n        done,\n        value\n      } = await iterator.next();\n      if (done) {\n        queueMicrotask(() => {\n          controller.close();\n          controller.byobRequest?.respond(0);\n        });\n      } else {\n        const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);\n        if (buf.byteLength) {\n          controller.enqueue(new Uint8Array(buf));\n        }\n      }\n      return controller.desiredSize > 0;\n    },\n    async cancel(reason) {\n      await iterator.return();\n    },\n    type: 'bytes'\n  });\n}\n\n// The chunk should be a FormData instance and contains\n// all the required methods.\nfunction isFormDataLike(object) {\n  return object && typeof object === 'object' && typeof object.append === 'function' && typeof object.delete === 'function' && typeof object.get === 'function' && typeof object.getAll === 'function' && typeof object.has === 'function' && typeof object.set === 'function' && object[Symbol.toStringTag] === 'FormData';\n}\nfunction addAbortListener(signal, listener) {\n  if ('addEventListener' in signal) {\n    signal.addEventListener('abort', listener, {\n      once: true\n    });\n    return () => signal.removeEventListener('abort', listener);\n  }\n  signal.addListener('abort', listener);\n  return () => signal.removeListener('abort', listener);\n}\nconst hasToWellFormed = typeof String.prototype.toWellFormed === 'function';\nconst hasIsWellFormed = typeof String.prototype.isWellFormed === 'function';\n\n/**\n * @param {string} val\n */\nfunction toUSVString(val) {\n  return hasToWellFormed ? `${val}`.toWellFormed() : nodeUtil.toUSVString(val);\n}\n\n/**\n * @param {string} val\n */\n// TODO: move this to webidl\nfunction isUSVString(val) {\n  return hasIsWellFormed ? `${val}`.isWellFormed() : toUSVString(val) === `${val}`;\n}\n\n/**\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n * @param {number} c\n */\nfunction isTokenCharCode(c) {\n  switch (c) {\n    case 0x22:\n    case 0x28:\n    case 0x29:\n    case 0x2c:\n    case 0x2f:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x7b:\n    case 0x7d:\n      // DQUOTE and \"(),/:;<=>?@[\\]{}\"\n      return false;\n    default:\n      // VCHAR %x21-7E\n      return c >= 0x21 && c <= 0x7e;\n  }\n}\n\n/**\n * @param {string} characters\n */\nfunction isValidHTTPToken(characters) {\n  if (characters.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < characters.length; ++i) {\n    if (!isTokenCharCode(characters.charCodeAt(i))) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// headerCharRegex have been lifted from\n// https://github.com/nodejs/node/blob/main/lib/_http_common.js\n\n/**\n * Matches if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n */\nconst headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\n/**\n * @param {string} characters\n */\nfunction isValidHeaderValue(characters) {\n  return !headerCharRegex.test(characters);\n}\n\n// Parsed accordingly to RFC 9110\n// https://www.rfc-editor.org/rfc/rfc9110#field.content-range\nfunction parseRangeHeader(range) {\n  if (range == null || range === '') return {\n    start: 0,\n    end: null,\n    size: null\n  };\n  const m = range ? range.match(/^bytes (\\d+)-(\\d+)\\/(\\d+)?$/) : null;\n  return m ? {\n    start: parseInt(m[1]),\n    end: m[2] ? parseInt(m[2]) : null,\n    size: m[3] ? parseInt(m[3]) : null\n  } : null;\n}\nfunction addListener(obj, name, listener) {\n  const listeners = obj[kListeners] ??= [];\n  listeners.push([name, listener]);\n  obj.on(name, listener);\n  return obj;\n}\nfunction removeAllListeners(obj) {\n  for (const [name, listener] of obj[kListeners] ?? []) {\n    obj.removeListener(name, listener);\n  }\n  obj[kListeners] = null;\n}\nfunction errorRequest(client, request, err) {\n  try {\n    request.onError(err);\n    assert(request.aborted);\n  } catch (err) {\n    client.emit('error', err);\n  }\n}\nconst kEnumerableProperty = Object.create(null);\nkEnumerableProperty.enumerable = true;\nconst normalizedMethodRecordsBase = {\n  delete: 'DELETE',\n  DELETE: 'DELETE',\n  get: 'GET',\n  GET: 'GET',\n  head: 'HEAD',\n  HEAD: 'HEAD',\n  options: 'OPTIONS',\n  OPTIONS: 'OPTIONS',\n  post: 'POST',\n  POST: 'POST',\n  put: 'PUT',\n  PUT: 'PUT'\n};\nconst normalizedMethodRecords = {\n  ...normalizedMethodRecordsBase,\n  patch: 'patch',\n  PATCH: 'PATCH'\n};\n\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(normalizedMethodRecordsBase, null);\nObject.setPrototypeOf(normalizedMethodRecords, null);\nmodule.exports = {\n  kEnumerableProperty,\n  nop,\n  isDisturbed,\n  isErrored,\n  isReadable,\n  toUSVString,\n  isUSVString,\n  isBlobLike,\n  parseOrigin,\n  parseURL,\n  getServerName,\n  isStream,\n  isIterable,\n  isAsyncIterable,\n  isDestroyed,\n  headerNameToString,\n  bufferToLowerCasedHeaderName,\n  addListener,\n  removeAllListeners,\n  errorRequest,\n  parseRawHeaders,\n  parseHeaders,\n  parseKeepAliveTimeout,\n  destroy,\n  bodyLength,\n  deepClone,\n  ReadableStreamFrom,\n  isBuffer,\n  validateHandler,\n  getSocketInfo,\n  isFormDataLike,\n  buildURL,\n  addAbortListener,\n  isValidHTTPToken,\n  isValidHeaderValue,\n  isTokenCharCode,\n  parseRangeHeader,\n  normalizedMethodRecordsBase,\n  normalizedMethodRecords,\n  isValidPort,\n  isHttpOrHttpsPrefixed,\n  nodeMajor,\n  nodeMinor,\n  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE'],\n  wrapRequestBody\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/agent.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/agent.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  InvalidArgumentError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  kClients,\n  kRunning,\n  kClose,\n  kDestroy,\n  kDispatch,\n  kInterceptors\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst Client = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/undici/lib/dispatcher/client.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst createRedirectInterceptor = __webpack_require__(/*! ../interceptor/redirect-interceptor */ \"(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js\");\nconst kOnConnect = Symbol('onConnect');\nconst kOnDisconnect = Symbol('onDisconnect');\nconst kOnConnectionError = Symbol('onConnectionError');\nconst kMaxRedirections = Symbol('maxRedirections');\nconst kOnDrain = Symbol('onDrain');\nconst kFactory = Symbol('factory');\nconst kOptions = Symbol('options');\nfunction defaultFactory(origin, opts) {\n  return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);\n}\nclass Agent extends DispatcherBase {\n  constructor() {\n    let {\n      factory = defaultFactory,\n      maxRedirections = 0,\n      connect,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.');\n    }\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object');\n    }\n    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number');\n    }\n    if (connect && typeof connect !== 'function') {\n      connect = {\n        ...connect\n      };\n    }\n    this[kInterceptors] = options.interceptors?.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor({\n      maxRedirections\n    })];\n    this[kOptions] = {\n      ...util.deepClone(options),\n      connect\n    };\n    this[kOptions].interceptors = options.interceptors ? {\n      ...options.interceptors\n    } : undefined;\n    this[kMaxRedirections] = maxRedirections;\n    this[kFactory] = factory;\n    this[kClients] = new Map();\n    this[kOnDrain] = (origin, targets) => {\n      this.emit('drain', origin, [this, ...targets]);\n    };\n    this[kOnConnect] = (origin, targets) => {\n      this.emit('connect', origin, [this, ...targets]);\n    };\n    this[kOnDisconnect] = (origin, targets, err) => {\n      this.emit('disconnect', origin, [this, ...targets], err);\n    };\n    this[kOnConnectionError] = (origin, targets, err) => {\n      this.emit('connectionError', origin, [this, ...targets], err);\n    };\n  }\n  get [kRunning]() {\n    let ret = 0;\n    for (const client of this[kClients].values()) {\n      ret += client[kRunning];\n    }\n    return ret;\n  }\n  [kDispatch](opts, handler) {\n    let key;\n    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {\n      key = String(opts.origin);\n    } else {\n      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.');\n    }\n    let dispatcher = this[kClients].get(key);\n    if (!dispatcher) {\n      dispatcher = this[kFactory](opts.origin, this[kOptions]).on('drain', this[kOnDrain]).on('connect', this[kOnConnect]).on('disconnect', this[kOnDisconnect]).on('connectionError', this[kOnConnectionError]);\n\n      // This introduces a tiny memory leak, as dispatchers are never removed from the map.\n      // TODO(mcollina): remove te timer when the client/pool do not have any more\n      // active connections.\n      this[kClients].set(key, dispatcher);\n    }\n    return dispatcher.dispatch(opts, handler);\n  }\n  async [kClose]() {\n    const closePromises = [];\n    for (const client of this[kClients].values()) {\n      closePromises.push(client.close());\n    }\n    this[kClients].clear();\n    await Promise.all(closePromises);\n  }\n  async [kDestroy](err) {\n    const destroyPromises = [];\n    for (const client of this[kClients].values()) {\n      destroyPromises.push(client.destroy(err));\n    }\n    this[kClients].clear();\n    await Promise.all(destroyPromises);\n  }\n}\nmodule.exports = Agent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/balanced-pool.js":
/*!*************************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/balanced-pool.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  BalancedPoolMissingUpstreamError,\n  InvalidArgumentError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n} = __webpack_require__(/*! ./pool-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool-base.js\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst {\n  kUrl,\n  kInterceptors\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst {\n  parseOrigin\n} = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst kFactory = Symbol('factory');\nconst kOptions = Symbol('options');\nconst kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor');\nconst kCurrentWeight = Symbol('kCurrentWeight');\nconst kIndex = Symbol('kIndex');\nconst kWeight = Symbol('kWeight');\nconst kMaxWeightPerServer = Symbol('kMaxWeightPerServer');\nconst kErrorPenalty = Symbol('kErrorPenalty');\nfunction getGreatestCommonDivisor(a, b) {\n  if (b === 0) return a;\n  return getGreatestCommonDivisor(b, a % b);\n}\nfunction defaultFactory(origin, opts) {\n  return new Pool(origin, opts);\n}\nclass BalancedPool extends PoolBase {\n  constructor() {\n    let upstreams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let {\n      factory = defaultFactory,\n      ...opts\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this[kOptions] = opts;\n    this[kIndex] = -1;\n    this[kCurrentWeight] = 0;\n    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;\n    this[kErrorPenalty] = this[kOptions].errorPenalty || 15;\n    if (!Array.isArray(upstreams)) {\n      upstreams = [upstreams];\n    }\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.');\n    }\n    this[kInterceptors] = opts.interceptors?.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];\n    this[kFactory] = factory;\n    for (const upstream of upstreams) {\n      this.addUpstream(upstream);\n    }\n    this._updateBalancedPoolStats();\n  }\n  addUpstream(upstream) {\n    var _this = this;\n    const upstreamOrigin = parseOrigin(upstream).origin;\n    if (this[kClients].find(pool => pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true)) {\n      return this;\n    }\n    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));\n    this[kAddClient](pool);\n    pool.on('connect', () => {\n      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);\n    });\n    pool.on('connectionError', () => {\n      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);\n      this._updateBalancedPoolStats();\n    });\n    pool.on('disconnect', function () {\n      const err = arguments.length <= 2 ? undefined : arguments[2];\n      if (err && err.code === 'UND_ERR_SOCKET') {\n        // decrease the weight of the pool.\n        pool[kWeight] = Math.max(1, pool[kWeight] - _this[kErrorPenalty]);\n        _this._updateBalancedPoolStats();\n      }\n    });\n    for (const client of this[kClients]) {\n      client[kWeight] = this[kMaxWeightPerServer];\n    }\n    this._updateBalancedPoolStats();\n    return this;\n  }\n  _updateBalancedPoolStats() {\n    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0);\n  }\n  removeUpstream(upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin;\n    const pool = this[kClients].find(pool => pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true);\n    if (pool) {\n      this[kRemoveClient](pool);\n    }\n    return this;\n  }\n  get upstreams() {\n    return this[kClients].filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true).map(p => p[kUrl].origin);\n  }\n  [kGetDispatcher]() {\n    // We validate that pools is greater than 0,\n    // otherwise we would have to wait until an upstream\n    // is added, which might never happen.\n    if (this[kClients].length === 0) {\n      throw new BalancedPoolMissingUpstreamError();\n    }\n    const dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);\n    if (!dispatcher) {\n      return;\n    }\n    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true);\n    if (allClientsBusy) {\n      return;\n    }\n    let counter = 0;\n    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain]);\n    while (counter++ < this[kClients].length) {\n      this[kIndex] = (this[kIndex] + 1) % this[kClients].length;\n      const pool = this[kClients][this[kIndex]];\n\n      // find pool index with the largest weight\n      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n        maxWeightIndex = this[kIndex];\n      }\n\n      // decrease the current weight every `this[kClients].length`.\n      if (this[kIndex] === 0) {\n        // Set the current weight to the next lower weight.\n        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];\n        if (this[kCurrentWeight] <= 0) {\n          this[kCurrentWeight] = this[kMaxWeightPerServer];\n        }\n      }\n      if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {\n        return pool;\n      }\n    }\n    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];\n    this[kIndex] = maxWeightIndex;\n    return this[kClients][maxWeightIndex];\n  }\n}\nmodule.exports = BalancedPool;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/balanced-pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/client-h1.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/client-h1.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* global WebAssembly */\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst util = __webpack_require__(/*! ../core/util.js */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  channels\n} = __webpack_require__(/*! ../core/diagnostics.js */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst timers = __webpack_require__(/*! ../util/timers.js */ \"(ssr)/./node_modules/undici/lib/util/timers.js\");\nconst {\n  RequestContentLengthMismatchError,\n  ResponseContentLengthMismatchError,\n  RequestAbortedError,\n  HeadersTimeoutError,\n  HeadersOverflowError,\n  SocketError,\n  InformationalError,\n  BodyTimeoutError,\n  HTTPParserError,\n  ResponseExceededMaxSizeError\n} = __webpack_require__(/*! ../core/errors.js */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  kUrl,\n  kReset,\n  kClient,\n  kParser,\n  kBlocking,\n  kRunning,\n  kPending,\n  kSize,\n  kWriting,\n  kQueue,\n  kNoRef,\n  kKeepAliveDefaultTimeout,\n  kHostHeader,\n  kPendingIdx,\n  kRunningIdx,\n  kError,\n  kPipelining,\n  kSocket,\n  kKeepAliveTimeoutValue,\n  kMaxHeadersSize,\n  kKeepAliveMaxTimeout,\n  kKeepAliveTimeoutThreshold,\n  kHeadersTimeout,\n  kBodyTimeout,\n  kStrictContentLength,\n  kMaxRequests,\n  kCounter,\n  kMaxResponseSize,\n  kOnError,\n  kResume,\n  kHTTPContext\n} = __webpack_require__(/*! ../core/symbols.js */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst constants = __webpack_require__(/*! ../llhttp/constants.js */ \"(ssr)/./node_modules/undici/lib/llhttp/constants.js\");\nconst EMPTY_BUF = Buffer.alloc(0);\nconst FastBuffer = Buffer[Symbol.species];\nconst addListener = util.addListener;\nconst removeAllListeners = util.removeAllListeners;\nlet extractBody;\nasync function lazyllhttp() {\n  const llhttpWasmData = process.env.JEST_WORKER_ID ? __webpack_require__(/*! ../llhttp/llhttp-wasm.js */ \"(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js\") : undefined;\n  let mod;\n  try {\n    mod = await WebAssembly.compile(__webpack_require__(/*! ../llhttp/llhttp_simd-wasm.js */ \"(ssr)/./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js\"));\n  } catch (e) {\n    /* istanbul ignore next */\n\n    // We could check if the error was caused by the simd option not\n    // being enabled, but the occurring of this other error\n    // * https://github.com/emscripten-core/emscripten/issues/11495\n    // got me to remove that check to avoid breaking Node 12.\n    mod = await WebAssembly.compile(llhttpWasmData || __webpack_require__(/*! ../llhttp/llhttp-wasm.js */ \"(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js\"));\n  }\n  return await WebAssembly.instantiate(mod, {\n    env: {\n      /* eslint-disable camelcase */\n\n      wasm_on_url: (p, at, len) => {\n        /* istanbul ignore next */\n        return 0;\n      },\n      wasm_on_status: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p);\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n      },\n      wasm_on_message_begin: p => {\n        assert.strictEqual(currentParser.ptr, p);\n        return currentParser.onMessageBegin() || 0;\n      },\n      wasm_on_header_field: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p);\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n      },\n      wasm_on_header_value: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p);\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n      },\n      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {\n        assert.strictEqual(currentParser.ptr, p);\n        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;\n      },\n      wasm_on_body: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p);\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n      },\n      wasm_on_message_complete: p => {\n        assert.strictEqual(currentParser.ptr, p);\n        return currentParser.onMessageComplete() || 0;\n      }\n\n      /* eslint-enable camelcase */\n    }\n  });\n}\nlet llhttpInstance = null;\nlet llhttpPromise = lazyllhttp();\nllhttpPromise.catch();\nlet currentParser = null;\nlet currentBufferRef = null;\nlet currentBufferSize = 0;\nlet currentBufferPtr = null;\nconst TIMEOUT_HEADERS = 1;\nconst TIMEOUT_BODY = 2;\nconst TIMEOUT_IDLE = 3;\nclass Parser {\n  constructor(client, socket, _ref) {\n    let {\n      exports\n    } = _ref;\n    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);\n    this.llhttp = exports;\n    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);\n    this.client = client;\n    this.socket = socket;\n    this.timeout = null;\n    this.timeoutValue = null;\n    this.timeoutType = null;\n    this.statusCode = null;\n    this.statusText = '';\n    this.upgrade = false;\n    this.headers = [];\n    this.headersSize = 0;\n    this.headersMaxSize = client[kMaxHeadersSize];\n    this.shouldKeepAlive = false;\n    this.paused = false;\n    this.resume = this.resume.bind(this);\n    this.bytesRead = 0;\n    this.keepAlive = '';\n    this.contentLength = '';\n    this.connection = '';\n    this.maxResponseSize = client[kMaxResponseSize];\n  }\n  setTimeout(value, type) {\n    this.timeoutType = type;\n    if (value !== this.timeoutValue) {\n      timers.clearTimeout(this.timeout);\n      if (value) {\n        this.timeout = timers.setTimeout(onParserTimeout, value, this);\n        // istanbul ignore else: only for jest\n        if (this.timeout.unref) {\n          this.timeout.unref();\n        }\n      } else {\n        this.timeout = null;\n      }\n      this.timeoutValue = value;\n    } else if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh();\n      }\n    }\n  }\n  resume() {\n    if (this.socket.destroyed || !this.paused) {\n      return;\n    }\n    assert(this.ptr != null);\n    assert(currentParser == null);\n    this.llhttp.llhttp_resume(this.ptr);\n    assert(this.timeoutType === TIMEOUT_BODY);\n    if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh();\n      }\n    }\n    this.paused = false;\n    this.execute(this.socket.read() || EMPTY_BUF); // Flush parser.\n    this.readMore();\n  }\n  readMore() {\n    while (!this.paused && this.ptr) {\n      const chunk = this.socket.read();\n      if (chunk === null) {\n        break;\n      }\n      this.execute(chunk);\n    }\n  }\n  execute(data) {\n    assert(this.ptr != null);\n    assert(currentParser == null);\n    assert(!this.paused);\n    const {\n      socket,\n      llhttp\n    } = this;\n    if (data.length > currentBufferSize) {\n      if (currentBufferPtr) {\n        llhttp.free(currentBufferPtr);\n      }\n      currentBufferSize = Math.ceil(data.length / 4096) * 4096;\n      currentBufferPtr = llhttp.malloc(currentBufferSize);\n    }\n    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);\n\n    // Call `execute` on the wasm parser.\n    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,\n    // and finally the length of bytes to parse.\n    // The return value is an error code or `constants.ERROR.OK`.\n    try {\n      let ret;\n      try {\n        currentBufferRef = data;\n        currentParser = this;\n        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);\n        /* eslint-disable-next-line no-useless-catch */\n      } catch (err) {\n        /* istanbul ignore next: difficult to make a test case for */\n        throw err;\n      } finally {\n        currentParser = null;\n        currentBufferRef = null;\n      }\n      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;\n      if (ret === constants.ERROR.PAUSED_UPGRADE) {\n        this.onUpgrade(data.slice(offset));\n      } else if (ret === constants.ERROR.PAUSED) {\n        this.paused = true;\n        socket.unshift(data.slice(offset));\n      } else if (ret !== constants.ERROR.OK) {\n        const ptr = llhttp.llhttp_get_error_reason(this.ptr);\n        let message = '';\n        /* istanbul ignore else: difficult to make a test case for */\n        if (ptr) {\n          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);\n          message = 'Response does not match the HTTP/1.1 protocol (' + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ')';\n        }\n        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));\n      }\n    } catch (err) {\n      util.destroy(socket, err);\n    }\n  }\n  destroy() {\n    assert(this.ptr != null);\n    assert(currentParser == null);\n    this.llhttp.llhttp_free(this.ptr);\n    this.ptr = null;\n    timers.clearTimeout(this.timeout);\n    this.timeout = null;\n    this.timeoutValue = null;\n    this.timeoutType = null;\n    this.paused = false;\n  }\n  onStatus(buf) {\n    this.statusText = buf.toString();\n  }\n  onMessageBegin() {\n    const {\n      socket,\n      client\n    } = this;\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (socket.destroyed) {\n      return -1;\n    }\n    const request = client[kQueue][client[kRunningIdx]];\n    if (!request) {\n      return -1;\n    }\n    request.onResponseStarted();\n  }\n  onHeaderField(buf) {\n    const len = this.headers.length;\n    if ((len & 1) === 0) {\n      this.headers.push(buf);\n    } else {\n      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);\n    }\n    this.trackHeader(buf.length);\n  }\n  onHeaderValue(buf) {\n    let len = this.headers.length;\n    if ((len & 1) === 1) {\n      this.headers.push(buf);\n      len += 1;\n    } else {\n      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);\n    }\n    const key = this.headers[len - 2];\n    if (key.length === 10) {\n      const headerName = util.bufferToLowerCasedHeaderName(key);\n      if (headerName === 'keep-alive') {\n        this.keepAlive += buf.toString();\n      } else if (headerName === 'connection') {\n        this.connection += buf.toString();\n      }\n    } else if (key.length === 14 && util.bufferToLowerCasedHeaderName(key) === 'content-length') {\n      this.contentLength += buf.toString();\n    }\n    this.trackHeader(buf.length);\n  }\n  trackHeader(len) {\n    this.headersSize += len;\n    if (this.headersSize >= this.headersMaxSize) {\n      util.destroy(this.socket, new HeadersOverflowError());\n    }\n  }\n  onUpgrade(head) {\n    const {\n      upgrade,\n      client,\n      socket,\n      headers,\n      statusCode\n    } = this;\n    assert(upgrade);\n    const request = client[kQueue][client[kRunningIdx]];\n    assert(request);\n    assert(!socket.destroyed);\n    assert(socket === client[kSocket]);\n    assert(!this.paused);\n    assert(request.upgrade || request.method === 'CONNECT');\n    this.statusCode = null;\n    this.statusText = '';\n    this.shouldKeepAlive = null;\n    assert(this.headers.length % 2 === 0);\n    this.headers = [];\n    this.headersSize = 0;\n    socket.unshift(head);\n    socket[kParser].destroy();\n    socket[kParser] = null;\n    socket[kClient] = null;\n    socket[kError] = null;\n    removeAllListeners(socket);\n    client[kSocket] = null;\n    client[kHTTPContext] = null; // TODO (fix): This is hacky...\n    client[kQueue][client[kRunningIdx]++] = null;\n    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'));\n    try {\n      request.onUpgrade(statusCode, headers, socket);\n    } catch (err) {\n      util.destroy(socket, err);\n    }\n    client[kResume]();\n  }\n  onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {\n    const {\n      client,\n      socket,\n      headers,\n      statusText\n    } = this;\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (socket.destroyed) {\n      return -1;\n    }\n    const request = client[kQueue][client[kRunningIdx]];\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (!request) {\n      return -1;\n    }\n    assert(!this.upgrade);\n    assert(this.statusCode < 200);\n    if (statusCode === 100) {\n      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)));\n      return -1;\n    }\n\n    /* this can only happen if server is misbehaving */\n    if (upgrade && !request.upgrade) {\n      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)));\n      return -1;\n    }\n    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);\n    this.statusCode = statusCode;\n    this.shouldKeepAlive = shouldKeepAlive ||\n    // Override llhttp value which does not allow keepAlive for HEAD.\n    request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive';\n    if (this.statusCode >= 200) {\n      const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];\n      this.setTimeout(bodyTimeout, TIMEOUT_BODY);\n    } else if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh();\n      }\n    }\n    if (request.method === 'CONNECT') {\n      assert(client[kRunning] === 1);\n      this.upgrade = true;\n      return 2;\n    }\n    if (upgrade) {\n      assert(client[kRunning] === 1);\n      this.upgrade = true;\n      return 2;\n    }\n    assert(this.headers.length % 2 === 0);\n    this.headers = [];\n    this.headersSize = 0;\n    if (this.shouldKeepAlive && client[kPipelining]) {\n      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;\n      if (keepAliveTimeout != null) {\n        const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);\n        if (timeout <= 0) {\n          socket[kReset] = true;\n        } else {\n          client[kKeepAliveTimeoutValue] = timeout;\n        }\n      } else {\n        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];\n      }\n    } else {\n      // Stop more requests from being dispatched.\n      socket[kReset] = true;\n    }\n    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;\n    if (request.aborted) {\n      return -1;\n    }\n    if (request.method === 'HEAD') {\n      return 1;\n    }\n    if (statusCode < 200) {\n      return 1;\n    }\n    if (socket[kBlocking]) {\n      socket[kBlocking] = false;\n      client[kResume]();\n    }\n    return pause ? constants.ERROR.PAUSED : 0;\n  }\n  onBody(buf) {\n    const {\n      client,\n      socket,\n      statusCode,\n      maxResponseSize\n    } = this;\n    if (socket.destroyed) {\n      return -1;\n    }\n    const request = client[kQueue][client[kRunningIdx]];\n    assert(request);\n    assert.strictEqual(this.timeoutType, TIMEOUT_BODY);\n    if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh();\n      }\n    }\n    assert(statusCode >= 200);\n    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {\n      util.destroy(socket, new ResponseExceededMaxSizeError());\n      return -1;\n    }\n    this.bytesRead += buf.length;\n    if (request.onData(buf) === false) {\n      return constants.ERROR.PAUSED;\n    }\n  }\n  onMessageComplete() {\n    const {\n      client,\n      socket,\n      statusCode,\n      upgrade,\n      headers,\n      contentLength,\n      bytesRead,\n      shouldKeepAlive\n    } = this;\n    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {\n      return -1;\n    }\n    if (upgrade) {\n      return;\n    }\n    const request = client[kQueue][client[kRunningIdx]];\n    assert(request);\n    assert(statusCode >= 100);\n    this.statusCode = null;\n    this.statusText = '';\n    this.bytesRead = 0;\n    this.contentLength = '';\n    this.keepAlive = '';\n    this.connection = '';\n    assert(this.headers.length % 2 === 0);\n    this.headers = [];\n    this.headersSize = 0;\n    if (statusCode < 200) {\n      return;\n    }\n\n    /* istanbul ignore next: should be handled by llhttp? */\n    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {\n      util.destroy(socket, new ResponseContentLengthMismatchError());\n      return -1;\n    }\n    request.onComplete(headers);\n    client[kQueue][client[kRunningIdx]++] = null;\n    if (socket[kWriting]) {\n      assert.strictEqual(client[kRunning], 0);\n      // Response completed before request.\n      util.destroy(socket, new InformationalError('reset'));\n      return constants.ERROR.PAUSED;\n    } else if (!shouldKeepAlive) {\n      util.destroy(socket, new InformationalError('reset'));\n      return constants.ERROR.PAUSED;\n    } else if (socket[kReset] && client[kRunning] === 0) {\n      // Destroy socket once all requests have completed.\n      // The request at the tail of the pipeline is the one\n      // that requested reset and no further requests should\n      // have been queued since then.\n      util.destroy(socket, new InformationalError('reset'));\n      return constants.ERROR.PAUSED;\n    } else if (client[kPipelining] == null || client[kPipelining] === 1) {\n      // We must wait a full event loop cycle to reuse this socket to make sure\n      // that non-spec compliant servers are not closing the connection even if they\n      // said they won't.\n      setImmediate(() => client[kResume]());\n    } else {\n      client[kResume]();\n    }\n  }\n}\nfunction onParserTimeout(parser) {\n  const {\n    socket,\n    timeoutType,\n    client\n  } = parser;\n\n  /* istanbul ignore else */\n  if (timeoutType === TIMEOUT_HEADERS) {\n    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {\n      assert(!parser.paused, 'cannot be paused while waiting for headers');\n      util.destroy(socket, new HeadersTimeoutError());\n    }\n  } else if (timeoutType === TIMEOUT_BODY) {\n    if (!parser.paused) {\n      util.destroy(socket, new BodyTimeoutError());\n    }\n  } else if (timeoutType === TIMEOUT_IDLE) {\n    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);\n    util.destroy(socket, new InformationalError('socket idle timeout'));\n  }\n}\nasync function connectH1(client, socket) {\n  client[kSocket] = socket;\n  if (!llhttpInstance) {\n    llhttpInstance = await llhttpPromise;\n    llhttpPromise = null;\n  }\n  socket[kNoRef] = false;\n  socket[kWriting] = false;\n  socket[kReset] = false;\n  socket[kBlocking] = false;\n  socket[kParser] = new Parser(client, socket, llhttpInstance);\n  addListener(socket, 'error', function (err) {\n    const parser = this[kParser];\n    assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');\n\n    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded\n    // to the user.\n    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so for as a valid response.\n      parser.onMessageComplete();\n      return;\n    }\n    this[kError] = err;\n    this[kClient][kOnError](err);\n  });\n  addListener(socket, 'readable', function () {\n    const parser = this[kParser];\n    if (parser) {\n      parser.readMore();\n    }\n  });\n  addListener(socket, 'end', function () {\n    const parser = this[kParser];\n    if (parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so far as a valid response.\n      parser.onMessageComplete();\n      return;\n    }\n    util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)));\n  });\n  addListener(socket, 'close', function () {\n    const client = this[kClient];\n    const parser = this[kParser];\n    if (parser) {\n      if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {\n        // We treat all incoming data so far as a valid response.\n        parser.onMessageComplete();\n      }\n      this[kParser].destroy();\n      this[kParser] = null;\n    }\n    const err = this[kError] || new SocketError('closed', util.getSocketInfo(this));\n    client[kSocket] = null;\n    client[kHTTPContext] = null; // TODO (fix): This is hacky...\n\n    if (client.destroyed) {\n      assert(client[kPending] === 0);\n\n      // Fail entire queue.\n      const requests = client[kQueue].splice(client[kRunningIdx]);\n      for (let i = 0; i < requests.length; i++) {\n        const request = requests[i];\n        util.errorRequest(client, request, err);\n      }\n    } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {\n      // Fail head of pipeline.\n      const request = client[kQueue][client[kRunningIdx]];\n      client[kQueue][client[kRunningIdx]++] = null;\n      util.errorRequest(client, request, err);\n    }\n    client[kPendingIdx] = client[kRunningIdx];\n    assert(client[kRunning] === 0);\n    client.emit('disconnect', client[kUrl], [client], err);\n    client[kResume]();\n  });\n  let closed = false;\n  socket.on('close', () => {\n    closed = true;\n  });\n  return {\n    version: 'h1',\n    defaultPipelining: 1,\n    write() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return writeH1(client, ...args);\n    },\n    resume() {\n      resumeH1(client);\n    },\n    destroy(err, callback) {\n      if (closed) {\n        queueMicrotask(callback);\n      } else {\n        socket.destroy(err).on('close', callback);\n      }\n    },\n    get destroyed() {\n      return socket.destroyed;\n    },\n    busy(request) {\n      if (socket[kWriting] || socket[kReset] || socket[kBlocking]) {\n        return true;\n      }\n      if (request) {\n        if (client[kRunning] > 0 && !request.idempotent) {\n          // Non-idempotent request cannot be retried.\n          // Ensure that no other requests are inflight and\n          // could cause failure.\n          return true;\n        }\n        if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {\n          // Don't dispatch an upgrade until all preceding requests have completed.\n          // A misbehaving server might upgrade the connection before all pipelined\n          // request has completed.\n          return true;\n        }\n        if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body) || util.isFormDataLike(request.body))) {\n          // Request with stream or iterator body can error while other requests\n          // are inflight and indirectly error those as well.\n          // Ensure this doesn't happen by waiting for inflight\n          // to complete before dispatching.\n\n          // Request with stream or iterator body cannot be retried.\n          // Ensure that no other requests are inflight and\n          // could cause failure.\n          return true;\n        }\n      }\n      return false;\n    }\n  };\n}\nfunction resumeH1(client) {\n  const socket = client[kSocket];\n  if (socket && !socket.destroyed) {\n    if (client[kSize] === 0) {\n      if (!socket[kNoRef] && socket.unref) {\n        socket.unref();\n        socket[kNoRef] = true;\n      }\n    } else if (socket[kNoRef] && socket.ref) {\n      socket.ref();\n      socket[kNoRef] = false;\n    }\n    if (client[kSize] === 0) {\n      if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {\n        socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);\n      }\n    } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {\n      if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {\n        const request = client[kQueue][client[kRunningIdx]];\n        const headersTimeout = request.headersTimeout != null ? request.headersTimeout : client[kHeadersTimeout];\n        socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);\n      }\n    }\n  }\n}\n\n// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2\nfunction shouldSendContentLength(method) {\n  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT';\n}\nfunction writeH1(client, request) {\n  const {\n    method,\n    path,\n    host,\n    upgrade,\n    blocking,\n    reset\n  } = request;\n  let {\n    body,\n    headers,\n    contentLength\n  } = request;\n\n  // https://tools.ietf.org/html/rfc7231#section-4.3.1\n  // https://tools.ietf.org/html/rfc7231#section-4.3.2\n  // https://tools.ietf.org/html/rfc7231#section-4.3.5\n\n  // Sending a payload body on a request that does not\n  // expect it can cause undefined behavior on some\n  // servers and corrupt connection state. Do not\n  // re-use the connection for further requests.\n\n  const expectsPayload = method === 'PUT' || method === 'POST' || method === 'PATCH';\n  if (util.isFormDataLike(body)) {\n    if (!extractBody) {\n      extractBody = (__webpack_require__(/*! ../web/fetch/body.js */ \"(ssr)/./node_modules/undici/lib/web/fetch/body.js\").extractBody);\n    }\n    const [bodyStream, contentType] = extractBody(body);\n    if (request.contentType == null) {\n      headers.push('content-type', contentType);\n    }\n    body = bodyStream.stream;\n    contentLength = bodyStream.length;\n  } else if (util.isBlobLike(body) && request.contentType == null && body.type) {\n    headers.push('content-type', body.type);\n  }\n  if (body && typeof body.read === 'function') {\n    // Try to read EOF in order to get length.\n    body.read(0);\n  }\n  const bodyLength = util.bodyLength(body);\n  contentLength = bodyLength ?? contentLength;\n  if (contentLength === null) {\n    contentLength = request.contentLength;\n  }\n  if (contentLength === 0 && !expectsPayload) {\n    // https://tools.ietf.org/html/rfc7230#section-3.3.2\n    // A user agent SHOULD NOT send a Content-Length header field when\n    // the request message does not contain a payload body and the method\n    // semantics do not anticipate such a body.\n\n    contentLength = null;\n  }\n\n  // https://github.com/nodejs/undici/issues/2046\n  // A user agent may send a Content-Length header with 0 value, this should be allowed.\n  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {\n    if (client[kStrictContentLength]) {\n      util.errorRequest(client, request, new RequestContentLengthMismatchError());\n      return false;\n    }\n    process.emitWarning(new RequestContentLengthMismatchError());\n  }\n  const socket = client[kSocket];\n  const abort = err => {\n    if (request.aborted || request.completed) {\n      return;\n    }\n    util.errorRequest(client, request, err || new RequestAbortedError());\n    util.destroy(body);\n    util.destroy(socket, new InformationalError('aborted'));\n  };\n  try {\n    request.onConnect(abort);\n  } catch (err) {\n    util.errorRequest(client, request, err);\n  }\n  if (request.aborted) {\n    return false;\n  }\n  if (method === 'HEAD') {\n    // https://github.com/mcollina/undici/issues/258\n    // Close after a HEAD request to interop with misbehaving servers\n    // that may send a body in the response.\n\n    socket[kReset] = true;\n  }\n  if (upgrade || method === 'CONNECT') {\n    // On CONNECT or upgrade, block pipeline from dispatching further\n    // requests on this connection.\n\n    socket[kReset] = true;\n  }\n  if (reset != null) {\n    socket[kReset] = reset;\n  }\n  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {\n    socket[kReset] = true;\n  }\n  if (blocking) {\n    socket[kBlocking] = true;\n  }\n  let header = `${method} ${path} HTTP/1.1\\r\\n`;\n  if (typeof host === 'string') {\n    header += `host: ${host}\\r\\n`;\n  } else {\n    header += client[kHostHeader];\n  }\n  if (upgrade) {\n    header += `connection: upgrade\\r\\nupgrade: ${upgrade}\\r\\n`;\n  } else if (client[kPipelining] && !socket[kReset]) {\n    header += 'connection: keep-alive\\r\\n';\n  } else {\n    header += 'connection: close\\r\\n';\n  }\n  if (Array.isArray(headers)) {\n    for (let n = 0; n < headers.length; n += 2) {\n      const key = headers[n + 0];\n      const val = headers[n + 1];\n      if (Array.isArray(val)) {\n        for (let i = 0; i < val.length; i++) {\n          header += `${key}: ${val[i]}\\r\\n`;\n        }\n      } else {\n        header += `${key}: ${val}\\r\\n`;\n      }\n    }\n  }\n  if (channels.sendHeaders.hasSubscribers) {\n    channels.sendHeaders.publish({\n      request,\n      headers: header,\n      socket\n    });\n  }\n\n  /* istanbul ignore else: assertion */\n  if (!body || bodyLength === 0) {\n    writeBuffer(abort, null, client, request, socket, contentLength, header, expectsPayload);\n  } else if (util.isBuffer(body)) {\n    writeBuffer(abort, body, client, request, socket, contentLength, header, expectsPayload);\n  } else if (util.isBlobLike(body)) {\n    if (typeof body.stream === 'function') {\n      writeIterable(abort, body.stream(), client, request, socket, contentLength, header, expectsPayload);\n    } else {\n      writeBlob(abort, body, client, request, socket, contentLength, header, expectsPayload);\n    }\n  } else if (util.isStream(body)) {\n    writeStream(abort, body, client, request, socket, contentLength, header, expectsPayload);\n  } else if (util.isIterable(body)) {\n    writeIterable(abort, body, client, request, socket, contentLength, header, expectsPayload);\n  } else {\n    assert(false);\n  }\n  return true;\n}\nfunction writeStream(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined');\n  let finished = false;\n  const writer = new AsyncWriter({\n    abort,\n    socket,\n    request,\n    contentLength,\n    client,\n    expectsPayload,\n    header\n  });\n  const onData = function (chunk) {\n    if (finished) {\n      return;\n    }\n    try {\n      if (!writer.write(chunk) && this.pause) {\n        this.pause();\n      }\n    } catch (err) {\n      util.destroy(this, err);\n    }\n  };\n  const onDrain = function () {\n    if (finished) {\n      return;\n    }\n    if (body.resume) {\n      body.resume();\n    }\n  };\n  const onClose = function () {\n    // 'close' might be emitted *before* 'error' for\n    // broken streams. Wait a tick to avoid this case.\n    queueMicrotask(() => {\n      // It's only safe to remove 'error' listener after\n      // 'close'.\n      body.removeListener('error', onFinished);\n    });\n    if (!finished) {\n      const err = new RequestAbortedError();\n      queueMicrotask(() => onFinished(err));\n    }\n  };\n  const onFinished = function (err) {\n    if (finished) {\n      return;\n    }\n    finished = true;\n    assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);\n    socket.off('drain', onDrain).off('error', onFinished);\n    body.removeListener('data', onData).removeListener('end', onFinished).removeListener('close', onClose);\n    if (!err) {\n      try {\n        writer.end();\n      } catch (er) {\n        err = er;\n      }\n    }\n    writer.destroy(err);\n    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {\n      util.destroy(body, err);\n    } else {\n      util.destroy(body);\n    }\n  };\n  body.on('data', onData).on('end', onFinished).on('error', onFinished).on('close', onClose);\n  if (body.resume) {\n    body.resume();\n  }\n  socket.on('drain', onDrain).on('error', onFinished);\n  if (body.errorEmitted ?? body.errored) {\n    setImmediate(() => onFinished(body.errored));\n  } else if (body.endEmitted ?? body.readableEnded) {\n    setImmediate(() => onFinished(null));\n  }\n  if (body.closeEmitted ?? body.closed) {\n    setImmediate(onClose);\n  }\n}\nfunction writeBuffer(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n  try {\n    if (!body) {\n      if (contentLength === 0) {\n        socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1');\n      } else {\n        assert(contentLength === null, 'no body must not have content length');\n        socket.write(`${header}\\r\\n`, 'latin1');\n      }\n    } else if (util.isBuffer(body)) {\n      assert(contentLength === body.byteLength, 'buffer body must have content length');\n      socket.cork();\n      socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1');\n      socket.write(body);\n      socket.uncork();\n      request.onBodySent(body);\n      if (!expectsPayload) {\n        socket[kReset] = true;\n      }\n    }\n    request.onRequestSent();\n    client[kResume]();\n  } catch (err) {\n    abort(err);\n  }\n}\nasync function writeBlob(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n  assert(contentLength === body.size, 'blob body must have content length');\n  try {\n    if (contentLength != null && contentLength !== body.size) {\n      throw new RequestContentLengthMismatchError();\n    }\n    const buffer = Buffer.from(await body.arrayBuffer());\n    socket.cork();\n    socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1');\n    socket.write(buffer);\n    socket.uncork();\n    request.onBodySent(buffer);\n    request.onRequestSent();\n    if (!expectsPayload) {\n      socket[kReset] = true;\n    }\n    client[kResume]();\n  } catch (err) {\n    abort(err);\n  }\n}\nasync function writeIterable(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined');\n  let callback = null;\n  function onDrain() {\n    if (callback) {\n      const cb = callback;\n      callback = null;\n      cb();\n    }\n  }\n  const waitForDrain = () => new Promise((resolve, reject) => {\n    assert(callback === null);\n    if (socket[kError]) {\n      reject(socket[kError]);\n    } else {\n      callback = resolve;\n    }\n  });\n  socket.on('close', onDrain).on('drain', onDrain);\n  const writer = new AsyncWriter({\n    abort,\n    socket,\n    request,\n    contentLength,\n    client,\n    expectsPayload,\n    header\n  });\n  try {\n    // It's up to the user to somehow abort the async iterable.\n    for await (const chunk of body) {\n      if (socket[kError]) {\n        throw socket[kError];\n      }\n      if (!writer.write(chunk)) {\n        await waitForDrain();\n      }\n    }\n    writer.end();\n  } catch (err) {\n    writer.destroy(err);\n  } finally {\n    socket.off('close', onDrain).off('drain', onDrain);\n  }\n}\nclass AsyncWriter {\n  constructor(_ref2) {\n    let {\n      abort,\n      socket,\n      request,\n      contentLength,\n      client,\n      expectsPayload,\n      header\n    } = _ref2;\n    this.socket = socket;\n    this.request = request;\n    this.contentLength = contentLength;\n    this.client = client;\n    this.bytesWritten = 0;\n    this.expectsPayload = expectsPayload;\n    this.header = header;\n    this.abort = abort;\n    socket[kWriting] = true;\n  }\n  write(chunk) {\n    const {\n      socket,\n      request,\n      contentLength,\n      client,\n      bytesWritten,\n      expectsPayload,\n      header\n    } = this;\n    if (socket[kError]) {\n      throw socket[kError];\n    }\n    if (socket.destroyed) {\n      return false;\n    }\n    const len = Buffer.byteLength(chunk);\n    if (!len) {\n      return true;\n    }\n\n    // We should defer writing chunks.\n    if (contentLength !== null && bytesWritten + len > contentLength) {\n      if (client[kStrictContentLength]) {\n        throw new RequestContentLengthMismatchError();\n      }\n      process.emitWarning(new RequestContentLengthMismatchError());\n    }\n    socket.cork();\n    if (bytesWritten === 0) {\n      if (!expectsPayload) {\n        socket[kReset] = true;\n      }\n      if (contentLength === null) {\n        socket.write(`${header}transfer-encoding: chunked\\r\\n`, 'latin1');\n      } else {\n        socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1');\n      }\n    }\n    if (contentLength === null) {\n      socket.write(`\\r\\n${len.toString(16)}\\r\\n`, 'latin1');\n    }\n    this.bytesWritten += len;\n    const ret = socket.write(chunk);\n    socket.uncork();\n    request.onBodySent(chunk);\n    if (!ret) {\n      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n        // istanbul ignore else: only for jest\n        if (socket[kParser].timeout.refresh) {\n          socket[kParser].timeout.refresh();\n        }\n      }\n    }\n    return ret;\n  }\n  end() {\n    const {\n      socket,\n      contentLength,\n      client,\n      bytesWritten,\n      expectsPayload,\n      header,\n      request\n    } = this;\n    request.onRequestSent();\n    socket[kWriting] = false;\n    if (socket[kError]) {\n      throw socket[kError];\n    }\n    if (socket.destroyed) {\n      return;\n    }\n    if (bytesWritten === 0) {\n      if (expectsPayload) {\n        // https://tools.ietf.org/html/rfc7230#section-3.3.2\n        // A user agent SHOULD send a Content-Length in a request message when\n        // no Transfer-Encoding is sent and the request method defines a meaning\n        // for an enclosed payload body.\n\n        socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1');\n      } else {\n        socket.write(`${header}\\r\\n`, 'latin1');\n      }\n    } else if (contentLength === null) {\n      socket.write('\\r\\n0\\r\\n\\r\\n', 'latin1');\n    }\n    if (contentLength !== null && bytesWritten !== contentLength) {\n      if (client[kStrictContentLength]) {\n        throw new RequestContentLengthMismatchError();\n      } else {\n        process.emitWarning(new RequestContentLengthMismatchError());\n      }\n    }\n    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n      // istanbul ignore else: only for jest\n      if (socket[kParser].timeout.refresh) {\n        socket[kParser].timeout.refresh();\n      }\n    }\n    client[kResume]();\n  }\n  destroy(err) {\n    const {\n      socket,\n      client,\n      abort\n    } = this;\n    socket[kWriting] = false;\n    if (err) {\n      assert(client[kRunning] <= 1, 'pipeline should only contain this request');\n      abort(err);\n    }\n  }\n}\nmodule.exports = connectH1;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/client-h1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/client-h2.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/client-h2.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  pipeline\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst util = __webpack_require__(/*! ../core/util.js */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  RequestContentLengthMismatchError,\n  RequestAbortedError,\n  SocketError,\n  InformationalError\n} = __webpack_require__(/*! ../core/errors.js */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  kUrl,\n  kReset,\n  kClient,\n  kRunning,\n  kPending,\n  kQueue,\n  kPendingIdx,\n  kRunningIdx,\n  kError,\n  kSocket,\n  kStrictContentLength,\n  kOnError,\n  kMaxConcurrentStreams,\n  kHTTP2Session,\n  kResume\n} = __webpack_require__(/*! ../core/symbols.js */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst kOpenStreams = Symbol('open streams');\n\n// Experimental\nlet h2ExperimentalWarned = false;\n\n/** @type {import('http2')} */\nlet http2;\ntry {\n  http2 = __webpack_require__(/*! node:http2 */ \"node:http2\");\n} catch {\n  // @ts-ignore\n  http2 = {\n    constants: {}\n  };\n}\nconst {\n  constants: {\n    HTTP2_HEADER_AUTHORITY,\n    HTTP2_HEADER_METHOD,\n    HTTP2_HEADER_PATH,\n    HTTP2_HEADER_SCHEME,\n    HTTP2_HEADER_CONTENT_LENGTH,\n    HTTP2_HEADER_EXPECT,\n    HTTP2_HEADER_STATUS\n  }\n} = http2;\nfunction parseH2Headers(headers) {\n  const result = [];\n  for (const [name, value] of Object.entries(headers)) {\n    // h2 may concat the header value by array\n    // e.g. Set-Cookie\n    if (Array.isArray(value)) {\n      for (const subvalue of value) {\n        // we need to provide each header value of header name\n        // because the headers handler expect name-value pair\n        result.push(Buffer.from(name), Buffer.from(subvalue));\n      }\n    } else {\n      result.push(Buffer.from(name), Buffer.from(value));\n    }\n  }\n  return result;\n}\nasync function connectH2(client, socket) {\n  client[kSocket] = socket;\n  if (!h2ExperimentalWarned) {\n    h2ExperimentalWarned = true;\n    process.emitWarning('H2 support is experimental, expect them to change at any time.', {\n      code: 'UNDICI-H2'\n    });\n  }\n  const session = http2.connect(client[kUrl], {\n    createConnection: () => socket,\n    peerMaxConcurrentStreams: client[kMaxConcurrentStreams]\n  });\n  session[kOpenStreams] = 0;\n  session[kClient] = client;\n  session[kSocket] = socket;\n  util.addListener(session, 'error', onHttp2SessionError);\n  util.addListener(session, 'frameError', onHttp2FrameError);\n  util.addListener(session, 'end', onHttp2SessionEnd);\n  util.addListener(session, 'goaway', onHTTP2GoAway);\n  util.addListener(session, 'close', function () {\n    const {\n      [kClient]: client\n    } = this;\n    const {\n      [kSocket]: socket\n    } = client;\n    const err = this[kSocket][kError] || this[kError] || new SocketError('closed', util.getSocketInfo(socket));\n    client[kHTTP2Session] = null;\n    if (client.destroyed) {\n      assert(client[kPending] === 0);\n\n      // Fail entire queue.\n      const requests = client[kQueue].splice(client[kRunningIdx]);\n      for (let i = 0; i < requests.length; i++) {\n        const request = requests[i];\n        util.errorRequest(client, request, err);\n      }\n    }\n  });\n  session.unref();\n  client[kHTTP2Session] = session;\n  socket[kHTTP2Session] = session;\n  util.addListener(socket, 'error', function (err) {\n    assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');\n    this[kError] = err;\n    this[kClient][kOnError](err);\n  });\n  util.addListener(socket, 'end', function () {\n    util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)));\n  });\n  util.addListener(socket, 'close', function () {\n    const err = this[kError] || new SocketError('closed', util.getSocketInfo(this));\n    client[kSocket] = null;\n    if (this[kHTTP2Session] != null) {\n      this[kHTTP2Session].destroy(err);\n    }\n    client[kPendingIdx] = client[kRunningIdx];\n    assert(client[kRunning] === 0);\n    client.emit('disconnect', client[kUrl], [client], err);\n    client[kResume]();\n  });\n  let closed = false;\n  socket.on('close', () => {\n    closed = true;\n  });\n  return {\n    version: 'h2',\n    defaultPipelining: Infinity,\n    write() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      // TODO (fix): return\n      writeH2(client, ...args);\n    },\n    resume() {},\n    destroy(err, callback) {\n      if (closed) {\n        queueMicrotask(callback);\n      } else {\n        // Destroying the socket will trigger the session close\n        socket.destroy(err).on('close', callback);\n      }\n    },\n    get destroyed() {\n      return socket.destroyed;\n    },\n    busy() {\n      return false;\n    }\n  };\n}\nfunction onHttp2SessionError(err) {\n  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');\n  this[kSocket][kError] = err;\n  this[kClient][kOnError](err);\n}\nfunction onHttp2FrameError(type, code, id) {\n  if (id === 0) {\n    const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`);\n    this[kSocket][kError] = err;\n    this[kClient][kOnError](err);\n  }\n}\nfunction onHttp2SessionEnd() {\n  const err = new SocketError('other side closed', util.getSocketInfo(this[kSocket]));\n  this.destroy(err);\n  util.destroy(this[kSocket], err);\n}\n\n/**\n * This is the root cause of #3011\n * We need to handle GOAWAY frames properly, and trigger the session close\n * along with the socket right away\n */\nfunction onHTTP2GoAway(code) {\n  const err = new RequestAbortedError(`HTTP/2: \"GOAWAY\" frame received with code ${code}`);\n\n  // We need to trigger the close cycle right away\n  // We need to destroy the session and the socket\n  // Requests should be failed with the error after the current one is handled\n  this[kSocket][kError] = err;\n  this[kClient][kOnError](err);\n  this.unref();\n  util.destroy(this[kSocket], err);\n}\n\n// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2\nfunction shouldSendContentLength(method) {\n  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT';\n}\nfunction writeH2(client, request) {\n  const session = client[kHTTP2Session];\n  const {\n    body,\n    method,\n    path,\n    host,\n    upgrade,\n    expectContinue,\n    signal,\n    headers: reqHeaders\n  } = request;\n  if (upgrade) {\n    util.errorRequest(client, request, new Error('Upgrade not supported for H2'));\n    return false;\n  }\n  if (request.aborted) {\n    return false;\n  }\n  const headers = {};\n  for (let n = 0; n < reqHeaders.length; n += 2) {\n    const key = reqHeaders[n + 0];\n    const val = reqHeaders[n + 1];\n    if (Array.isArray(val)) {\n      for (let i = 0; i < val.length; i++) {\n        if (headers[key]) {\n          headers[key] += `,${val[i]}`;\n        } else {\n          headers[key] = val[i];\n        }\n      }\n    } else {\n      headers[key] = val;\n    }\n  }\n\n  /** @type {import('node:http2').ClientHttp2Stream} */\n  let stream;\n  const {\n    hostname,\n    port\n  } = client[kUrl];\n  headers[HTTP2_HEADER_AUTHORITY] = host || `${hostname}${port ? `:${port}` : ''}`;\n  headers[HTTP2_HEADER_METHOD] = method;\n  const abort = err => {\n    if (request.aborted || request.completed) {\n      return;\n    }\n    err = err || new RequestAbortedError();\n    util.errorRequest(client, request, err);\n    if (stream != null) {\n      util.destroy(stream, err);\n    }\n\n    // We do not destroy the socket as we can continue using the session\n    // the stream get's destroyed and the session remains to create new streams\n    util.destroy(body, err);\n  };\n  try {\n    // We are already connected, streams are pending.\n    // We can call on connect, and wait for abort\n    request.onConnect(abort);\n  } catch (err) {\n    util.errorRequest(client, request, err);\n  }\n  if (method === 'CONNECT') {\n    session.ref();\n    // We are already connected, streams are pending, first request\n    // will create a new stream. We trigger a request to create the stream and wait until\n    // `ready` event is triggered\n    // We disabled endStream to allow the user to write to the stream\n    stream = session.request(headers, {\n      endStream: false,\n      signal\n    });\n    if (stream.id && !stream.pending) {\n      request.onUpgrade(null, null, stream);\n      ++session[kOpenStreams];\n    } else {\n      stream.once('ready', () => {\n        request.onUpgrade(null, null, stream);\n        ++session[kOpenStreams];\n      });\n    }\n    stream.once('close', () => {\n      session[kOpenStreams] -= 1;\n      if (session[kOpenStreams] === 0) session.unref();\n    });\n    return true;\n  }\n\n  // https://tools.ietf.org/html/rfc7540#section-8.3\n  // :path and :scheme headers must be omitted when sending CONNECT\n\n  headers[HTTP2_HEADER_PATH] = path;\n  headers[HTTP2_HEADER_SCHEME] = 'https';\n\n  // https://tools.ietf.org/html/rfc7231#section-4.3.1\n  // https://tools.ietf.org/html/rfc7231#section-4.3.2\n  // https://tools.ietf.org/html/rfc7231#section-4.3.5\n\n  // Sending a payload body on a request that does not\n  // expect it can cause undefined behavior on some\n  // servers and corrupt connection state. Do not\n  // re-use the connection for further requests.\n\n  const expectsPayload = method === 'PUT' || method === 'POST' || method === 'PATCH';\n  if (body && typeof body.read === 'function') {\n    // Try to read EOF in order to get length.\n    body.read(0);\n  }\n  let contentLength = util.bodyLength(body);\n  if (contentLength == null) {\n    contentLength = request.contentLength;\n  }\n  if (contentLength === 0 || !expectsPayload) {\n    // https://tools.ietf.org/html/rfc7230#section-3.3.2\n    // A user agent SHOULD NOT send a Content-Length header field when\n    // the request message does not contain a payload body and the method\n    // semantics do not anticipate such a body.\n\n    contentLength = null;\n  }\n\n  // https://github.com/nodejs/undici/issues/2046\n  // A user agent may send a Content-Length header with 0 value, this should be allowed.\n  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {\n    if (client[kStrictContentLength]) {\n      util.errorRequest(client, request, new RequestContentLengthMismatchError());\n      return false;\n    }\n    process.emitWarning(new RequestContentLengthMismatchError());\n  }\n  if (contentLength != null) {\n    assert(body, 'no body must not have content length');\n    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;\n  }\n  session.ref();\n  const shouldEndStream = method === 'GET' || method === 'HEAD' || body === null;\n  if (expectContinue) {\n    headers[HTTP2_HEADER_EXPECT] = '100-continue';\n    stream = session.request(headers, {\n      endStream: shouldEndStream,\n      signal\n    });\n    stream.once('continue', writeBodyH2);\n  } else {\n    stream = session.request(headers, {\n      endStream: shouldEndStream,\n      signal\n    });\n    writeBodyH2();\n  }\n\n  // Increment counter as we have new streams open\n  ++session[kOpenStreams];\n  stream.once('response', headers => {\n    const {\n      [HTTP2_HEADER_STATUS]: statusCode,\n      ...realHeaders\n    } = headers;\n    request.onResponseStarted();\n\n    // Due to the stream nature, it is possible we face a race condition\n    // where the stream has been assigned, but the request has been aborted\n    // the request remains in-flight and headers hasn't been received yet\n    // for those scenarios, best effort is to destroy the stream immediately\n    // as there's no value to keep it open.\n    if (request.aborted) {\n      const err = new RequestAbortedError();\n      util.errorRequest(client, request, err);\n      util.destroy(stream, err);\n      return;\n    }\n    if (request.onHeaders(Number(statusCode), parseH2Headers(realHeaders), stream.resume.bind(stream), '') === false) {\n      stream.pause();\n    }\n    stream.on('data', chunk => {\n      if (request.onData(chunk) === false) {\n        stream.pause();\n      }\n    });\n  });\n  stream.once('end', () => {\n    // When state is null, it means we haven't consumed body and the stream still do not have\n    // a state.\n    // Present specially when using pipeline or stream\n    if (stream.state?.state == null || stream.state.state < 6) {\n      request.onComplete([]);\n      return;\n    }\n\n    // Stream is closed or half-closed-remote (6), decrement counter and cleanup\n    // It does not have sense to continue working with the stream as we do not\n    // have yet RST_STREAM support on client-side\n    if (session[kOpenStreams] === 0) {\n      session.unref();\n    }\n    abort(new InformationalError('HTTP/2: stream half-closed (remote)'));\n  });\n  stream.once('close', () => {\n    session[kOpenStreams] -= 1;\n    if (session[kOpenStreams] === 0) {\n      session.unref();\n    }\n  });\n  stream.once('error', function (err) {\n    abort(err);\n  });\n  stream.once('frameError', (type, code) => {\n    abort(new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`));\n  });\n\n  // stream.on('aborted', () => {\n  //   // TODO(HTTP/2): Support aborted\n  // })\n\n  // stream.on('timeout', () => {\n  //   // TODO(HTTP/2): Support timeout\n  // })\n\n  // stream.on('push', headers => {\n  //   // TODO(HTTP/2): Support push\n  // })\n\n  // stream.on('trailers', headers => {\n  //   // TODO(HTTP/2): Support trailers\n  // })\n\n  return true;\n  function writeBodyH2() {\n    /* istanbul ignore else: assertion */\n    if (!body || contentLength === 0) {\n      writeBuffer(abort, stream, null, client, request, client[kSocket], contentLength, expectsPayload);\n    } else if (util.isBuffer(body)) {\n      writeBuffer(abort, stream, body, client, request, client[kSocket], contentLength, expectsPayload);\n    } else if (util.isBlobLike(body)) {\n      if (typeof body.stream === 'function') {\n        writeIterable(abort, stream, body.stream(), client, request, client[kSocket], contentLength, expectsPayload);\n      } else {\n        writeBlob(abort, stream, body, client, request, client[kSocket], contentLength, expectsPayload);\n      }\n    } else if (util.isStream(body)) {\n      writeStream(abort, client[kSocket], expectsPayload, stream, body, client, request, contentLength);\n    } else if (util.isIterable(body)) {\n      writeIterable(abort, stream, body, client, request, client[kSocket], contentLength, expectsPayload);\n    } else {\n      assert(false);\n    }\n  }\n}\nfunction writeBuffer(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {\n  try {\n    if (body != null && util.isBuffer(body)) {\n      assert(contentLength === body.byteLength, 'buffer body must have content length');\n      h2stream.cork();\n      h2stream.write(body);\n      h2stream.uncork();\n      h2stream.end();\n      request.onBodySent(body);\n    }\n    if (!expectsPayload) {\n      socket[kReset] = true;\n    }\n    request.onRequestSent();\n    client[kResume]();\n  } catch (error) {\n    abort(error);\n  }\n}\nfunction writeStream(abort, socket, expectsPayload, h2stream, body, client, request, contentLength) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined');\n\n  // For HTTP/2, is enough to pipe the stream\n  const pipe = pipeline(body, h2stream, err => {\n    if (err) {\n      util.destroy(pipe, err);\n      abort(err);\n    } else {\n      util.removeAllListeners(pipe);\n      request.onRequestSent();\n      if (!expectsPayload) {\n        socket[kReset] = true;\n      }\n      client[kResume]();\n    }\n  });\n  util.addListener(pipe, 'data', onPipeData);\n  function onPipeData(chunk) {\n    request.onBodySent(chunk);\n  }\n}\nasync function writeBlob(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {\n  assert(contentLength === body.size, 'blob body must have content length');\n  try {\n    if (contentLength != null && contentLength !== body.size) {\n      throw new RequestContentLengthMismatchError();\n    }\n    const buffer = Buffer.from(await body.arrayBuffer());\n    h2stream.cork();\n    h2stream.write(buffer);\n    h2stream.uncork();\n    h2stream.end();\n    request.onBodySent(buffer);\n    request.onRequestSent();\n    if (!expectsPayload) {\n      socket[kReset] = true;\n    }\n    client[kResume]();\n  } catch (err) {\n    abort(err);\n  }\n}\nasync function writeIterable(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined');\n  let callback = null;\n  function onDrain() {\n    if (callback) {\n      const cb = callback;\n      callback = null;\n      cb();\n    }\n  }\n  const waitForDrain = () => new Promise((resolve, reject) => {\n    assert(callback === null);\n    if (socket[kError]) {\n      reject(socket[kError]);\n    } else {\n      callback = resolve;\n    }\n  });\n  h2stream.on('close', onDrain).on('drain', onDrain);\n  try {\n    // It's up to the user to somehow abort the async iterable.\n    for await (const chunk of body) {\n      if (socket[kError]) {\n        throw socket[kError];\n      }\n      const res = h2stream.write(chunk);\n      request.onBodySent(chunk);\n      if (!res) {\n        await waitForDrain();\n      }\n    }\n    h2stream.end();\n    request.onRequestSent();\n    if (!expectsPayload) {\n      socket[kReset] = true;\n    }\n    client[kResume]();\n  } catch (err) {\n    abort(err);\n  } finally {\n    h2stream.off('close', onDrain).off('drain', onDrain);\n  }\n}\nmodule.exports = connectH2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/client-h2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/client.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/client.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// @ts-check\n\n\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst util = __webpack_require__(/*! ../core/util.js */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  channels\n} = __webpack_require__(/*! ../core/diagnostics.js */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst Request = __webpack_require__(/*! ../core/request.js */ \"(ssr)/./node_modules/undici/lib/core/request.js\");\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst {\n  InvalidArgumentError,\n  InformationalError,\n  ClientDestroyedError\n} = __webpack_require__(/*! ../core/errors.js */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst buildConnector = __webpack_require__(/*! ../core/connect.js */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst {\n  kUrl,\n  kServerName,\n  kClient,\n  kBusy,\n  kConnect,\n  kResuming,\n  kRunning,\n  kPending,\n  kSize,\n  kQueue,\n  kConnected,\n  kConnecting,\n  kNeedDrain,\n  kKeepAliveDefaultTimeout,\n  kHostHeader,\n  kPendingIdx,\n  kRunningIdx,\n  kError,\n  kPipelining,\n  kKeepAliveTimeoutValue,\n  kMaxHeadersSize,\n  kKeepAliveMaxTimeout,\n  kKeepAliveTimeoutThreshold,\n  kHeadersTimeout,\n  kBodyTimeout,\n  kStrictContentLength,\n  kConnector,\n  kMaxRedirections,\n  kMaxRequests,\n  kCounter,\n  kClose,\n  kDestroy,\n  kDispatch,\n  kInterceptors,\n  kLocalAddress,\n  kMaxResponseSize,\n  kOnError,\n  kHTTPContext,\n  kMaxConcurrentStreams,\n  kResume\n} = __webpack_require__(/*! ../core/symbols.js */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst connectH1 = __webpack_require__(/*! ./client-h1.js */ \"(ssr)/./node_modules/undici/lib/dispatcher/client-h1.js\");\nconst connectH2 = __webpack_require__(/*! ./client-h2.js */ \"(ssr)/./node_modules/undici/lib/dispatcher/client-h2.js\");\nlet deprecatedInterceptorWarned = false;\nconst kClosedResolve = Symbol('kClosedResolve');\nfunction getPipelining(client) {\n  return client[kPipelining] ?? client[kHTTPContext]?.defaultPipelining ?? 1;\n}\n\n/**\n * @type {import('../../types/client.js').default}\n */\nclass Client extends DispatcherBase {\n  /**\n   *\n   * @param {string|URL} url\n   * @param {import('../../types/client.js').Client.Options} options\n   */\n  constructor(url) {\n    let {\n      interceptors,\n      maxHeaderSize,\n      headersTimeout,\n      socketTimeout,\n      requestTimeout,\n      connectTimeout,\n      bodyTimeout,\n      idleTimeout,\n      keepAlive,\n      keepAliveTimeout,\n      maxKeepAliveTimeout,\n      keepAliveMaxTimeout,\n      keepAliveTimeoutThreshold,\n      socketPath,\n      pipelining,\n      tls,\n      strictContentLength,\n      maxCachedSessions,\n      maxRedirections,\n      connect,\n      maxRequestsPerClient,\n      localAddress,\n      maxResponseSize,\n      autoSelectFamily,\n      autoSelectFamilyAttemptTimeout,\n      // h2\n      maxConcurrentStreams,\n      allowH2\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    if (keepAlive !== undefined) {\n      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead');\n    }\n    if (socketTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead');\n    }\n    if (requestTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead');\n    }\n    if (idleTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead');\n    }\n    if (maxKeepAliveTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead');\n    }\n    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {\n      throw new InvalidArgumentError('invalid maxHeaderSize');\n    }\n    if (socketPath != null && typeof socketPath !== 'string') {\n      throw new InvalidArgumentError('invalid socketPath');\n    }\n    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {\n      throw new InvalidArgumentError('invalid connectTimeout');\n    }\n    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {\n      throw new InvalidArgumentError('invalid keepAliveTimeout');\n    }\n    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {\n      throw new InvalidArgumentError('invalid keepAliveMaxTimeout');\n    }\n    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {\n      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold');\n    }\n    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {\n      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero');\n    }\n    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {\n      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero');\n    }\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object');\n    }\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number');\n    }\n    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {\n      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number');\n    }\n    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {\n      throw new InvalidArgumentError('localAddress must be valid string IP address');\n    }\n    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {\n      throw new InvalidArgumentError('maxResponseSize must be a positive number');\n    }\n    if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {\n      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number');\n    }\n\n    // h2\n    if (allowH2 != null && typeof allowH2 !== 'boolean') {\n      throw new InvalidArgumentError('allowH2 must be a valid boolean value');\n    }\n    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {\n      throw new InvalidArgumentError('maxConcurrentStreams must be a positive integer, greater than 0');\n    }\n    if (typeof connect !== 'function') {\n      connect = buildConnector({\n        ...tls,\n        maxCachedSessions,\n        allowH2,\n        socketPath,\n        timeout: connectTimeout,\n        ...(autoSelectFamily ? {\n          autoSelectFamily,\n          autoSelectFamilyAttemptTimeout\n        } : undefined),\n        ...connect\n      });\n    }\n    if (interceptors?.Client && Array.isArray(interceptors.Client)) {\n      this[kInterceptors] = interceptors.Client;\n      if (!deprecatedInterceptorWarned) {\n        deprecatedInterceptorWarned = true;\n        process.emitWarning('Client.Options#interceptor is deprecated. Use Dispatcher#compose instead.', {\n          code: 'UNDICI-CLIENT-INTERCEPTOR-DEPRECATED'\n        });\n      }\n    } else {\n      this[kInterceptors] = [createRedirectInterceptor({\n        maxRedirections\n      })];\n    }\n    this[kUrl] = util.parseOrigin(url);\n    this[kConnector] = connect;\n    this[kPipelining] = pipelining != null ? pipelining : 1;\n    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;\n    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;\n    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout;\n    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 2e3 : keepAliveTimeoutThreshold;\n    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];\n    this[kServerName] = null;\n    this[kLocalAddress] = localAddress != null ? localAddress : null;\n    this[kResuming] = 0; // 0, idle, 1, scheduled, 2 resuming\n    this[kNeedDrain] = 0; // 0, idle, 1, scheduled, 2 resuming\n    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\\r\\n`;\n    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3;\n    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3;\n    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;\n    this[kMaxRedirections] = maxRedirections;\n    this[kMaxRequests] = maxRequestsPerClient;\n    this[kClosedResolve] = null;\n    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;\n    this[kMaxConcurrentStreams] = maxConcurrentStreams != null ? maxConcurrentStreams : 100; // Max peerConcurrentStreams for a Node h2 server\n    this[kHTTPContext] = null;\n\n    // kQueue is built up of 3 sections separated by\n    // the kRunningIdx and kPendingIdx indices.\n    // |   complete   |   running   |   pending   |\n    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length\n    // kRunningIdx points to the first running element.\n    // kPendingIdx points to the first pending element.\n    // This implements a fast queue with an amortized\n    // time of O(1).\n\n    this[kQueue] = [];\n    this[kRunningIdx] = 0;\n    this[kPendingIdx] = 0;\n    this[kResume] = sync => resume(this, sync);\n    this[kOnError] = err => onError(this, err);\n  }\n  get pipelining() {\n    return this[kPipelining];\n  }\n  set pipelining(value) {\n    this[kPipelining] = value;\n    this[kResume](true);\n  }\n  get [kPending]() {\n    return this[kQueue].length - this[kPendingIdx];\n  }\n  get [kRunning]() {\n    return this[kPendingIdx] - this[kRunningIdx];\n  }\n  get [kSize]() {\n    return this[kQueue].length - this[kRunningIdx];\n  }\n  get [kConnected]() {\n    return !!this[kHTTPContext] && !this[kConnecting] && !this[kHTTPContext].destroyed;\n  }\n  get [kBusy]() {\n    return Boolean(this[kHTTPContext]?.busy(null) || this[kSize] >= (getPipelining(this) || 1) || this[kPending] > 0);\n  }\n\n  /* istanbul ignore: only used for test */\n  [kConnect](cb) {\n    connect(this);\n    this.once('connect', cb);\n  }\n  [kDispatch](opts, handler) {\n    const origin = opts.origin || this[kUrl].origin;\n    const request = new Request(origin, opts, handler);\n    this[kQueue].push(request);\n    if (this[kResuming]) {\n      // Do nothing.\n    } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {\n      // Wait a tick in case stream/iterator is ended in the same tick.\n      this[kResuming] = 1;\n      queueMicrotask(() => resume(this));\n    } else {\n      this[kResume](true);\n    }\n    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {\n      this[kNeedDrain] = 2;\n    }\n    return this[kNeedDrain] < 2;\n  }\n  async [kClose]() {\n    // TODO: for H2 we need to gracefully flush the remaining enqueued\n    // request and close each stream.\n    return new Promise(resolve => {\n      if (this[kSize]) {\n        this[kClosedResolve] = resolve;\n      } else {\n        resolve(null);\n      }\n    });\n  }\n  async [kDestroy](err) {\n    return new Promise(resolve => {\n      const requests = this[kQueue].splice(this[kPendingIdx]);\n      for (let i = 0; i < requests.length; i++) {\n        const request = requests[i];\n        util.errorRequest(this, request, err);\n      }\n      const callback = () => {\n        if (this[kClosedResolve]) {\n          // TODO (fix): Should we error here with ClientDestroyedError?\n          this[kClosedResolve]();\n          this[kClosedResolve] = null;\n        }\n        resolve(null);\n      };\n      if (this[kHTTPContext]) {\n        this[kHTTPContext].destroy(err, callback);\n        this[kHTTPContext] = null;\n      } else {\n        queueMicrotask(callback);\n      }\n      this[kResume]();\n    });\n  }\n}\nconst createRedirectInterceptor = __webpack_require__(/*! ../interceptor/redirect-interceptor.js */ \"(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js\");\nfunction onError(client, err) {\n  if (client[kRunning] === 0 && err.code !== 'UND_ERR_INFO' && err.code !== 'UND_ERR_SOCKET') {\n    // Error is not caused by running request and not a recoverable\n    // socket error.\n\n    assert(client[kPendingIdx] === client[kRunningIdx]);\n    const requests = client[kQueue].splice(client[kRunningIdx]);\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i];\n      util.errorRequest(client, request, err);\n    }\n    assert(client[kSize] === 0);\n  }\n}\nasync function connect(client) {\n  assert(!client[kConnecting]);\n  assert(!client[kHTTPContext]);\n  let {\n    host,\n    hostname,\n    protocol,\n    port\n  } = client[kUrl];\n\n  // Resolve ipv6\n  if (hostname[0] === '[') {\n    const idx = hostname.indexOf(']');\n    assert(idx !== -1);\n    const ip = hostname.substring(1, idx);\n    assert(net.isIP(ip));\n    hostname = ip;\n  }\n  client[kConnecting] = true;\n  if (channels.beforeConnect.hasSubscribers) {\n    channels.beforeConnect.publish({\n      connectParams: {\n        host,\n        hostname,\n        protocol,\n        port,\n        version: client[kHTTPContext]?.version,\n        servername: client[kServerName],\n        localAddress: client[kLocalAddress]\n      },\n      connector: client[kConnector]\n    });\n  }\n  try {\n    const socket = await new Promise((resolve, reject) => {\n      client[kConnector]({\n        host,\n        hostname,\n        protocol,\n        port,\n        servername: client[kServerName],\n        localAddress: client[kLocalAddress]\n      }, (err, socket) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(socket);\n        }\n      });\n    });\n    if (client.destroyed) {\n      util.destroy(socket.on('error', () => {}), new ClientDestroyedError());\n      return;\n    }\n    assert(socket);\n    try {\n      client[kHTTPContext] = socket.alpnProtocol === 'h2' ? await connectH2(client, socket) : await connectH1(client, socket);\n    } catch (err) {\n      socket.destroy().on('error', () => {});\n      throw err;\n    }\n    client[kConnecting] = false;\n    socket[kCounter] = 0;\n    socket[kMaxRequests] = client[kMaxRequests];\n    socket[kClient] = client;\n    socket[kError] = null;\n    if (channels.connected.hasSubscribers) {\n      channels.connected.publish({\n        connectParams: {\n          host,\n          hostname,\n          protocol,\n          port,\n          version: client[kHTTPContext]?.version,\n          servername: client[kServerName],\n          localAddress: client[kLocalAddress]\n        },\n        connector: client[kConnector],\n        socket\n      });\n    }\n    client.emit('connect', client[kUrl], [client]);\n  } catch (err) {\n    if (client.destroyed) {\n      return;\n    }\n    client[kConnecting] = false;\n    if (channels.connectError.hasSubscribers) {\n      channels.connectError.publish({\n        connectParams: {\n          host,\n          hostname,\n          protocol,\n          port,\n          version: client[kHTTPContext]?.version,\n          servername: client[kServerName],\n          localAddress: client[kLocalAddress]\n        },\n        connector: client[kConnector],\n        error: err\n      });\n    }\n    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {\n      assert(client[kRunning] === 0);\n      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {\n        const request = client[kQueue][client[kPendingIdx]++];\n        util.errorRequest(client, request, err);\n      }\n    } else {\n      onError(client, err);\n    }\n    client.emit('connectionError', client[kUrl], [client], err);\n  }\n  client[kResume]();\n}\nfunction emitDrain(client) {\n  client[kNeedDrain] = 0;\n  client.emit('drain', client[kUrl], [client]);\n}\nfunction resume(client, sync) {\n  if (client[kResuming] === 2) {\n    return;\n  }\n  client[kResuming] = 2;\n  _resume(client, sync);\n  client[kResuming] = 0;\n  if (client[kRunningIdx] > 256) {\n    client[kQueue].splice(0, client[kRunningIdx]);\n    client[kPendingIdx] -= client[kRunningIdx];\n    client[kRunningIdx] = 0;\n  }\n}\nfunction _resume(client, sync) {\n  while (true) {\n    if (client.destroyed) {\n      assert(client[kPending] === 0);\n      return;\n    }\n    if (client[kClosedResolve] && !client[kSize]) {\n      client[kClosedResolve]();\n      client[kClosedResolve] = null;\n      return;\n    }\n    if (client[kHTTPContext]) {\n      client[kHTTPContext].resume();\n    }\n    if (client[kBusy]) {\n      client[kNeedDrain] = 2;\n    } else if (client[kNeedDrain] === 2) {\n      if (sync) {\n        client[kNeedDrain] = 1;\n        queueMicrotask(() => emitDrain(client));\n      } else {\n        emitDrain(client);\n      }\n      continue;\n    }\n    if (client[kPending] === 0) {\n      return;\n    }\n    if (client[kRunning] >= (getPipelining(client) || 1)) {\n      return;\n    }\n    const request = client[kQueue][client[kPendingIdx]];\n    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {\n      if (client[kRunning] > 0) {\n        return;\n      }\n      client[kServerName] = request.servername;\n      client[kHTTPContext]?.destroy(new InformationalError('servername changed'), () => {\n        client[kHTTPContext] = null;\n        resume(client);\n      });\n    }\n    if (client[kConnecting]) {\n      return;\n    }\n    if (!client[kHTTPContext]) {\n      connect(client);\n      return;\n    }\n    if (client[kHTTPContext].destroyed) {\n      return;\n    }\n    if (client[kHTTPContext].busy(request)) {\n      return;\n    }\n    if (!request.aborted && client[kHTTPContext].write(request)) {\n      client[kPendingIdx]++;\n    } else {\n      client[kQueue].splice(client[kPendingIdx], 1);\n    }\n  }\n}\nmodule.exports = Client;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js":
/*!***************************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/dispatcher-base.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst Dispatcher = __webpack_require__(/*! ./dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\");\nconst {\n  ClientDestroyedError,\n  ClientClosedError,\n  InvalidArgumentError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  kDestroy,\n  kClose,\n  kClosed,\n  kDestroyed,\n  kDispatch,\n  kInterceptors\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst kOnDestroyed = Symbol('onDestroyed');\nconst kOnClosed = Symbol('onClosed');\nconst kInterceptedDispatch = Symbol('Intercepted Dispatch');\nclass DispatcherBase extends Dispatcher {\n  constructor() {\n    super();\n    this[kDestroyed] = false;\n    this[kOnDestroyed] = null;\n    this[kClosed] = false;\n    this[kOnClosed] = [];\n  }\n  get destroyed() {\n    return this[kDestroyed];\n  }\n  get closed() {\n    return this[kClosed];\n  }\n  get interceptors() {\n    return this[kInterceptors];\n  }\n  set interceptors(newInterceptors) {\n    if (newInterceptors) {\n      for (let i = newInterceptors.length - 1; i >= 0; i--) {\n        const interceptor = this[kInterceptors][i];\n        if (typeof interceptor !== 'function') {\n          throw new InvalidArgumentError('interceptor must be an function');\n        }\n      }\n    }\n    this[kInterceptors] = newInterceptors;\n  }\n  close(callback) {\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        this.close((err, data) => {\n          return err ? reject(err) : resolve(data);\n        });\n      });\n    }\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback');\n    }\n    if (this[kDestroyed]) {\n      queueMicrotask(() => callback(new ClientDestroyedError(), null));\n      return;\n    }\n    if (this[kClosed]) {\n      if (this[kOnClosed]) {\n        this[kOnClosed].push(callback);\n      } else {\n        queueMicrotask(() => callback(null, null));\n      }\n      return;\n    }\n    this[kClosed] = true;\n    this[kOnClosed].push(callback);\n    const onClosed = () => {\n      const callbacks = this[kOnClosed];\n      this[kOnClosed] = null;\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](null, null);\n      }\n    };\n\n    // Should not error.\n    this[kClose]().then(() => this.destroy()).then(() => {\n      queueMicrotask(onClosed);\n    });\n  }\n  destroy(err, callback) {\n    if (typeof err === 'function') {\n      callback = err;\n      err = null;\n    }\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        this.destroy(err, (err, data) => {\n          return err ? /* istanbul ignore next: should never error */reject(err) : resolve(data);\n        });\n      });\n    }\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback');\n    }\n    if (this[kDestroyed]) {\n      if (this[kOnDestroyed]) {\n        this[kOnDestroyed].push(callback);\n      } else {\n        queueMicrotask(() => callback(null, null));\n      }\n      return;\n    }\n    if (!err) {\n      err = new ClientDestroyedError();\n    }\n    this[kDestroyed] = true;\n    this[kOnDestroyed] = this[kOnDestroyed] || [];\n    this[kOnDestroyed].push(callback);\n    const onDestroyed = () => {\n      const callbacks = this[kOnDestroyed];\n      this[kOnDestroyed] = null;\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](null, null);\n      }\n    };\n\n    // Should not error.\n    this[kDestroy](err).then(() => {\n      queueMicrotask(onDestroyed);\n    });\n  }\n  [kInterceptedDispatch](opts, handler) {\n    if (!this[kInterceptors] || this[kInterceptors].length === 0) {\n      this[kInterceptedDispatch] = this[kDispatch];\n      return this[kDispatch](opts, handler);\n    }\n    let dispatch = this[kDispatch].bind(this);\n    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {\n      dispatch = this[kInterceptors][i](dispatch);\n    }\n    this[kInterceptedDispatch] = dispatch;\n    return dispatch(opts, handler);\n  }\n  dispatch(opts, handler) {\n    if (!handler || typeof handler !== 'object') {\n      throw new InvalidArgumentError('handler must be an object');\n    }\n    try {\n      if (!opts || typeof opts !== 'object') {\n        throw new InvalidArgumentError('opts must be an object.');\n      }\n      if (this[kDestroyed] || this[kOnDestroyed]) {\n        throw new ClientDestroyedError();\n      }\n      if (this[kClosed]) {\n        throw new ClientClosedError();\n      }\n      return this[kInterceptedDispatch](opts, handler);\n    } catch (err) {\n      if (typeof handler.onError !== 'function') {\n        throw new InvalidArgumentError('invalid onError method');\n      }\n      handler.onError(err);\n      return false;\n    }\n  }\n}\nmodule.exports = DispatcherBase;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/dispatcher.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst EventEmitter = __webpack_require__(/*! node:events */ \"node:events\");\nclass Dispatcher extends EventEmitter {\n  dispatch() {\n    throw new Error('not implemented');\n  }\n  close() {\n    throw new Error('not implemented');\n  }\n  destroy() {\n    throw new Error('not implemented');\n  }\n  compose() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    // So we handle [interceptor1, interceptor2] or interceptor1, interceptor2, ...\n    const interceptors = Array.isArray(args[0]) ? args[0] : args;\n    let dispatch = this.dispatch.bind(this);\n    for (const interceptor of interceptors) {\n      if (interceptor == null) {\n        continue;\n      }\n      if (typeof interceptor !== 'function') {\n        throw new TypeError(`invalid interceptor, expected function received ${typeof interceptor}`);\n      }\n      dispatch = interceptor(dispatch);\n      if (dispatch == null || typeof dispatch !== 'function' || dispatch.length !== 2) {\n        throw new TypeError('invalid interceptor');\n      }\n    }\n    return new ComposedDispatcher(this, dispatch);\n  }\n}\nvar _dispatcher = /*#__PURE__*/new WeakMap();\nvar _dispatch = /*#__PURE__*/new WeakMap();\nclass ComposedDispatcher extends Dispatcher {\n  constructor(dispatcher, dispatch) {\n    super();\n    _classPrivateFieldInitSpec(this, _dispatcher, null);\n    _classPrivateFieldInitSpec(this, _dispatch, null);\n    _classPrivateFieldSet(_dispatcher, this, dispatcher);\n    _classPrivateFieldSet(_dispatch, this, dispatch);\n  }\n  dispatch() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    _classPrivateFieldGet(_dispatch, this).call(this, ...args);\n  }\n  close() {\n    return _classPrivateFieldGet(_dispatcher, this).close(...arguments);\n  }\n  destroy() {\n    return _classPrivateFieldGet(_dispatcher, this).destroy(...arguments);\n  }\n}\nmodule.exports = Dispatcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL2Rpc3BhdGNoZXIuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBQUEsU0FBQUEsMkJBQUFDLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLElBQUFDLDBCQUFBLENBQUFILENBQUEsRUFBQUMsQ0FBQSxHQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQUosQ0FBQSxFQUFBRSxDQUFBO0FBQUEsU0FBQUMsMkJBQUFILENBQUEsRUFBQUMsQ0FBQSxRQUFBQSxDQUFBLENBQUFJLEdBQUEsQ0FBQUwsQ0FBQSxhQUFBTSxTQUFBO0FBQUEsU0FBQUMsc0JBQUFDLENBQUEsRUFBQU4sQ0FBQSxXQUFBTSxDQUFBLENBQUFDLEdBQUEsQ0FBQUMsaUJBQUEsQ0FBQUYsQ0FBQSxFQUFBTixDQUFBO0FBQUEsU0FBQVMsc0JBQUFILENBQUEsRUFBQU4sQ0FBQSxFQUFBVSxDQUFBLFdBQUFKLENBQUEsQ0FBQUosR0FBQSxDQUFBTSxpQkFBQSxDQUFBRixDQUFBLEVBQUFOLENBQUEsR0FBQVUsQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQUYsa0JBQUFWLENBQUEsRUFBQUMsQ0FBQSxFQUFBWSxDQUFBLDZCQUFBYixDQUFBLEdBQUFBLENBQUEsS0FBQUMsQ0FBQSxHQUFBRCxDQUFBLENBQUFLLEdBQUEsQ0FBQUosQ0FBQSxVQUFBYSxTQUFBLENBQUFDLE1BQUEsT0FBQWQsQ0FBQSxHQUFBWSxDQUFBLFlBQUFQLFNBQUE7QUFDWixNQUFNVSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsZ0NBQWEsQ0FBQztBQUUzQyxNQUFNQyxVQUFVLFNBQVNGLFlBQVksQ0FBQztFQUNwQ0csUUFBUUEsQ0FBQSxFQUFJO0lBQ1YsTUFBTSxJQUFJQyxLQUFLLENBQUMsaUJBQWlCLENBQUM7RUFDcEM7RUFFQUMsS0FBS0EsQ0FBQSxFQUFJO0lBQ1AsTUFBTSxJQUFJRCxLQUFLLENBQUMsaUJBQWlCLENBQUM7RUFDcEM7RUFFQUUsT0FBT0EsQ0FBQSxFQUFJO0lBQ1QsTUFBTSxJQUFJRixLQUFLLENBQUMsaUJBQWlCLENBQUM7RUFDcEM7RUFFQUcsT0FBT0EsQ0FBQSxFQUFXO0lBQUEsU0FBQUMsSUFBQSxHQUFBVixTQUFBLENBQUFDLE1BQUEsRUFBTlUsSUFBSSxPQUFBQyxLQUFBLENBQUFGLElBQUEsR0FBQUcsSUFBQSxNQUFBQSxJQUFBLEdBQUFILElBQUEsRUFBQUcsSUFBQTtNQUFKRixJQUFJLENBQUFFLElBQUEsSUFBQWIsU0FBQSxDQUFBYSxJQUFBO0lBQUE7SUFDZDtJQUNBLE1BQU1DLFlBQVksR0FBR0YsS0FBSyxDQUFDRyxPQUFPLENBQUNKLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUdBLElBQUk7SUFDNUQsSUFBSU4sUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUSxDQUFDVyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBRXZDLEtBQUssTUFBTUMsV0FBVyxJQUFJSCxZQUFZLEVBQUU7TUFDdEMsSUFBSUcsV0FBVyxJQUFJLElBQUksRUFBRTtRQUN2QjtNQUNGO01BRUEsSUFBSSxPQUFPQSxXQUFXLEtBQUssVUFBVSxFQUFFO1FBQ3JDLE1BQU0sSUFBSXpCLFNBQVMsQ0FBQyxtREFBbUQsT0FBT3lCLFdBQVcsRUFBRSxDQUFDO01BQzlGO01BRUFaLFFBQVEsR0FBR1ksV0FBVyxDQUFDWixRQUFRLENBQUM7TUFFaEMsSUFBSUEsUUFBUSxJQUFJLElBQUksSUFBSSxPQUFPQSxRQUFRLEtBQUssVUFBVSxJQUFJQSxRQUFRLENBQUNKLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDL0UsTUFBTSxJQUFJVCxTQUFTLENBQUMscUJBQXFCLENBQUM7TUFDNUM7SUFDRjtJQUVBLE9BQU8sSUFBSTBCLGtCQUFrQixDQUFDLElBQUksRUFBRWIsUUFBUSxDQUFDO0VBQy9DO0FBQ0Y7QUFBQyxJQUFBYyxXQUFBLG9CQUFBQyxPQUFBO0FBQUEsSUFBQUMsU0FBQSxvQkFBQUQsT0FBQTtBQUVELE1BQU1GLGtCQUFrQixTQUFTZCxVQUFVLENBQUM7RUFJMUNrQixXQUFXQSxDQUFFQyxVQUFVLEVBQUVsQixRQUFRLEVBQUU7SUFDakMsS0FBSyxDQUFDLENBQUM7SUFKVHBCLDBCQUFBLE9BQUFrQyxXQUFXLEVBQUcsSUFBSTtJQUNsQmxDLDBCQUFBLE9BQUFvQyxTQUFTLEVBQUcsSUFBSTtJQUlkeEIscUJBQUEsQ0FBS3NCLFdBQVcsRUFBaEIsSUFBSSxFQUFlSSxVQUFKLENBQUM7SUFDaEIxQixxQkFBQSxDQUFLd0IsU0FBUyxFQUFkLElBQUksRUFBYWhCLFFBQUosQ0FBQztFQUNoQjtFQUVBQSxRQUFRQSxDQUFBLEVBQVc7SUFBQSxTQUFBbUIsS0FBQSxHQUFBeEIsU0FBQSxDQUFBQyxNQUFBLEVBQU5VLElBQUksT0FBQUMsS0FBQSxDQUFBWSxLQUFBLEdBQUFDLEtBQUEsTUFBQUEsS0FBQSxHQUFBRCxLQUFBLEVBQUFDLEtBQUE7TUFBSmQsSUFBSSxDQUFBYyxLQUFBLElBQUF6QixTQUFBLENBQUF5QixLQUFBO0lBQUE7SUFDZmhDLHFCQUFBLENBQUs0QixTQUFTLEVBQWQsSUFBYSxDQUFDLENBQUFLLElBQUEsQ0FBZCxJQUFJLEVBQVcsR0FBR2YsSUFBSTtFQUN4QjtFQUVBSixLQUFLQSxDQUFBLEVBQVc7SUFDZCxPQUFPZCxxQkFBQSxDQUFLMEIsV0FBVyxFQUFoQixJQUFlLENBQUMsQ0FBQ1osS0FBSyxDQUFDLEdBQUFQLFNBQU8sQ0FBQztFQUN4QztFQUVBUSxPQUFPQSxDQUFBLEVBQVc7SUFDaEIsT0FBT2YscUJBQUEsQ0FBSzBCLFdBQVcsRUFBaEIsSUFBZSxDQUFDLENBQUNYLE9BQU8sQ0FBQyxHQUFBUixTQUFPLENBQUM7RUFDMUM7QUFDRjtBQUVBMkIsTUFBTSxDQUFDQyxPQUFPLEdBQUd4QixVQUFVIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvZGlzcGF0Y2hlci9kaXNwYXRjaGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnbm9kZTpldmVudHMnKVxuXG5jbGFzcyBEaXNwYXRjaGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgZGlzcGF0Y2ggKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJylcbiAgfVxuXG4gIGNsb3NlICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gIH1cblxuICBjb21wb3NlICguLi5hcmdzKSB7XG4gICAgLy8gU28gd2UgaGFuZGxlIFtpbnRlcmNlcHRvcjEsIGludGVyY2VwdG9yMl0gb3IgaW50ZXJjZXB0b3IxLCBpbnRlcmNlcHRvcjIsIC4uLlxuICAgIGNvbnN0IGludGVyY2VwdG9ycyA9IEFycmF5LmlzQXJyYXkoYXJnc1swXSkgPyBhcmdzWzBdIDogYXJnc1xuICAgIGxldCBkaXNwYXRjaCA9IHRoaXMuZGlzcGF0Y2guYmluZCh0aGlzKVxuXG4gICAgZm9yIChjb25zdCBpbnRlcmNlcHRvciBvZiBpbnRlcmNlcHRvcnMpIHtcbiAgICAgIGlmIChpbnRlcmNlcHRvciA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgaW52YWxpZCBpbnRlcmNlcHRvciwgZXhwZWN0ZWQgZnVuY3Rpb24gcmVjZWl2ZWQgJHt0eXBlb2YgaW50ZXJjZXB0b3J9YClcbiAgICAgIH1cblxuICAgICAgZGlzcGF0Y2ggPSBpbnRlcmNlcHRvcihkaXNwYXRjaClcblxuICAgICAgaWYgKGRpc3BhdGNoID09IG51bGwgfHwgdHlwZW9mIGRpc3BhdGNoICE9PSAnZnVuY3Rpb24nIHx8IGRpc3BhdGNoLmxlbmd0aCAhPT0gMikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGludGVyY2VwdG9yJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENvbXBvc2VkRGlzcGF0Y2hlcih0aGlzLCBkaXNwYXRjaClcbiAgfVxufVxuXG5jbGFzcyBDb21wb3NlZERpc3BhdGNoZXIgZXh0ZW5kcyBEaXNwYXRjaGVyIHtcbiAgI2Rpc3BhdGNoZXIgPSBudWxsXG4gICNkaXNwYXRjaCA9IG51bGxcblxuICBjb25zdHJ1Y3RvciAoZGlzcGF0Y2hlciwgZGlzcGF0Y2gpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy4jZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXJcbiAgICB0aGlzLiNkaXNwYXRjaCA9IGRpc3BhdGNoXG4gIH1cblxuICBkaXNwYXRjaCAoLi4uYXJncykge1xuICAgIHRoaXMuI2Rpc3BhdGNoKC4uLmFyZ3MpXG4gIH1cblxuICBjbG9zZSAoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLiNkaXNwYXRjaGVyLmNsb3NlKC4uLmFyZ3MpXG4gIH1cblxuICBkZXN0cm95ICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2Rpc3BhdGNoZXIuZGVzdHJveSguLi5hcmdzKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGlzcGF0Y2hlclxuIl0sIm5hbWVzIjpbIl9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjIiwiZSIsInQiLCJhIiwiX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24iLCJzZXQiLCJoYXMiLCJUeXBlRXJyb3IiLCJfY2xhc3NQcml2YXRlRmllbGRHZXQiLCJzIiwiZ2V0IiwiX2Fzc2VydENsYXNzQnJhbmQiLCJfY2xhc3NQcml2YXRlRmllbGRTZXQiLCJyIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJEaXNwYXRjaGVyIiwiZGlzcGF0Y2giLCJFcnJvciIsImNsb3NlIiwiZGVzdHJveSIsImNvbXBvc2UiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImludGVyY2VwdG9ycyIsImlzQXJyYXkiLCJiaW5kIiwiaW50ZXJjZXB0b3IiLCJDb21wb3NlZERpc3BhdGNoZXIiLCJfZGlzcGF0Y2hlciIsIldlYWtNYXAiLCJfZGlzcGF0Y2giLCJjb25zdHJ1Y3RvciIsImRpc3BhdGNoZXIiLCJfbGVuMiIsIl9rZXkyIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/env-http-proxy-agent.js":
/*!********************************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/env-http-proxy-agent.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateGetter(s, r, a) { return a(_assertClassBrand(s, r)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst {\n  kClose,\n  kDestroy,\n  kClosed,\n  kDestroyed,\n  kDispatch,\n  kNoProxyAgent,\n  kHttpProxyAgent,\n  kHttpsProxyAgent\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst ProxyAgent = __webpack_require__(/*! ./proxy-agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/proxy-agent.js\");\nconst Agent = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nconst DEFAULT_PORTS = {\n  'http:': 80,\n  'https:': 443\n};\nlet experimentalWarned = false;\nvar _noProxyValue = /*#__PURE__*/new WeakMap();\nvar _noProxyEntries = /*#__PURE__*/new WeakMap();\nvar _opts = /*#__PURE__*/new WeakMap();\nvar _EnvHttpProxyAgent_brand = /*#__PURE__*/new WeakSet();\nclass EnvHttpProxyAgent extends DispatcherBase {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    _classPrivateMethodInitSpec(this, _EnvHttpProxyAgent_brand);\n    _classPrivateFieldInitSpec(this, _noProxyValue, null);\n    _classPrivateFieldInitSpec(this, _noProxyEntries, null);\n    _classPrivateFieldInitSpec(this, _opts, null);\n    _classPrivateFieldSet(_opts, this, opts);\n    if (!experimentalWarned) {\n      experimentalWarned = true;\n      process.emitWarning('EnvHttpProxyAgent is experimental, expect them to change at any time.', {\n        code: 'UNDICI-EHPA'\n      });\n    }\n    const {\n      httpProxy,\n      httpsProxy,\n      noProxy,\n      ...agentOpts\n    } = opts;\n    this[kNoProxyAgent] = new Agent(agentOpts);\n    const HTTP_PROXY = httpProxy ?? process.env.http_proxy ?? process.env.HTTP_PROXY;\n    if (HTTP_PROXY) {\n      this[kHttpProxyAgent] = new ProxyAgent({\n        ...agentOpts,\n        uri: HTTP_PROXY\n      });\n    } else {\n      this[kHttpProxyAgent] = this[kNoProxyAgent];\n    }\n    const HTTPS_PROXY = httpsProxy ?? process.env.https_proxy ?? process.env.HTTPS_PROXY;\n    if (HTTPS_PROXY) {\n      this[kHttpsProxyAgent] = new ProxyAgent({\n        ...agentOpts,\n        uri: HTTPS_PROXY\n      });\n    } else {\n      this[kHttpsProxyAgent] = this[kHttpProxyAgent];\n    }\n    _assertClassBrand(_EnvHttpProxyAgent_brand, this, _parseNoProxy).call(this);\n  }\n  [kDispatch](opts, handler) {\n    const url = new URL(opts.origin);\n    const agent = _assertClassBrand(_EnvHttpProxyAgent_brand, this, _getProxyAgentForUrl).call(this, url);\n    return agent.dispatch(opts, handler);\n  }\n  async [kClose]() {\n    await this[kNoProxyAgent].close();\n    if (!this[kHttpProxyAgent][kClosed]) {\n      await this[kHttpProxyAgent].close();\n    }\n    if (!this[kHttpsProxyAgent][kClosed]) {\n      await this[kHttpsProxyAgent].close();\n    }\n  }\n  async [kDestroy](err) {\n    await this[kNoProxyAgent].destroy(err);\n    if (!this[kHttpProxyAgent][kDestroyed]) {\n      await this[kHttpProxyAgent].destroy(err);\n    }\n    if (!this[kHttpsProxyAgent][kDestroyed]) {\n      await this[kHttpsProxyAgent].destroy(err);\n    }\n  }\n}\nfunction _getProxyAgentForUrl(url) {\n  let {\n    protocol,\n    host: hostname,\n    port\n  } = url;\n\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n  hostname = hostname.replace(/:\\d*$/, '').toLowerCase();\n  port = Number.parseInt(port, 10) || DEFAULT_PORTS[protocol] || 0;\n  if (!_assertClassBrand(_EnvHttpProxyAgent_brand, this, _shouldProxy).call(this, hostname, port)) {\n    return this[kNoProxyAgent];\n  }\n  if (protocol === 'https:') {\n    return this[kHttpsProxyAgent];\n  }\n  return this[kHttpProxyAgent];\n}\nfunction _shouldProxy(hostname, port) {\n  if (_classPrivateGetter(_EnvHttpProxyAgent_brand, this, _get_noProxyChanged)) {\n    _assertClassBrand(_EnvHttpProxyAgent_brand, this, _parseNoProxy).call(this);\n  }\n  if (_classPrivateFieldGet(_noProxyEntries, this).length === 0) {\n    return true; // Always proxy if NO_PROXY is not set or empty.\n  }\n  if (_classPrivateFieldGet(_noProxyValue, this) === '*') {\n    return false; // Never proxy if wildcard is set.\n  }\n  for (let i = 0; i < _classPrivateFieldGet(_noProxyEntries, this).length; i++) {\n    const entry = _classPrivateFieldGet(_noProxyEntries, this)[i];\n    if (entry.port && entry.port !== port) {\n      continue; // Skip if ports don't match.\n    }\n    if (!/^[.*]/.test(entry.hostname)) {\n      // No wildcards, so don't proxy only if there is not an exact match.\n      if (hostname === entry.hostname) {\n        return false;\n      }\n    } else {\n      // Don't proxy if the hostname ends with the no_proxy host.\n      if (hostname.endsWith(entry.hostname.replace(/^\\*/, ''))) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction _parseNoProxy() {\n  const noProxyValue = _classPrivateFieldGet(_opts, this).noProxy ?? _classPrivateGetter(_EnvHttpProxyAgent_brand, this, _get_noProxyEnv);\n  const noProxySplit = noProxyValue.split(/[,\\s]/);\n  const noProxyEntries = [];\n  for (let i = 0; i < noProxySplit.length; i++) {\n    const entry = noProxySplit[i];\n    if (!entry) {\n      continue;\n    }\n    const parsed = entry.match(/^(.+):(\\d+)$/);\n    noProxyEntries.push({\n      hostname: (parsed ? parsed[1] : entry).toLowerCase(),\n      port: parsed ? Number.parseInt(parsed[2], 10) : 0\n    });\n  }\n  _classPrivateFieldSet(_noProxyValue, this, noProxyValue);\n  _classPrivateFieldSet(_noProxyEntries, this, noProxyEntries);\n}\nfunction _get_noProxyChanged(_this) {\n  if (_classPrivateFieldGet(_opts, _this).noProxy !== undefined) {\n    return false;\n  }\n  return _classPrivateFieldGet(_noProxyValue, _this) !== _classPrivateGetter(_EnvHttpProxyAgent_brand, _this, _get_noProxyEnv);\n}\nfunction _get_noProxyEnv(_this2) {\n  return process.env.no_proxy ?? process.env.NO_PROXY ?? '';\n}\nmodule.exports = EnvHttpProxyAgent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/env-http-proxy-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/fixed-queue.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/fixed-queue.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
eval("/* eslint-disable */\n\n\n\n// Extracted from node/lib/internal/fixed_queue.js\n\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\nconst kSize = 2048;\nconst kMask = kSize - 1;\n\n// The FixedQueue is implemented as a singly-linked list of fixed-size\n// circular buffers. It looks something like this:\n//\n//  head                                                       tail\n//    |                                                          |\n//    v                                                          v\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\n// +-----------+               +-----------+                  +-----------+\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |       bottom --> |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |    ...    |               |    ...    |                  |    ...    |\n// |   item    |               |   item    |                  |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |  [empty]  | <-- top       |   item    |                  |   item    |\n// |  [empty]  |               |   item    |                  |   item    |\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\n// +-----------+               +-----------+                  +-----------+\n//\n// Or, if there is only one circular buffer, it looks something\n// like either of these:\n//\n//  head   tail                                 head   tail\n//    |     |                                     |     |\n//    v     v                                     v     v\n// +-----------+                               +-----------+\n// |  [null]   |                               |  [null]   |\n// +-----------+                               +-----------+\n// |  [empty]  |                               |   item    |\n// |  [empty]  |                               |   item    |\n// |   item    | <-- bottom            top --> |  [empty]  |\n// |   item    |                               |  [empty]  |\n// |  [empty]  | <-- top            bottom --> |   item    |\n// |  [empty]  |                               |   item    |\n// +-----------+                               +-----------+\n//\n// Adding a value means moving `top` forward by one, removing means\n// moving `bottom` forward by one. After reaching the end, the queue\n// wraps around.\n//\n// When `top === bottom` the current queue is empty and when\n// `top + 1 === bottom` it's full. This wastes a single space of storage\n// but allows much quicker checks.\n\nclass FixedCircularBuffer {\n  constructor() {\n    this.bottom = 0;\n    this.top = 0;\n    this.list = new Array(kSize);\n    this.next = null;\n  }\n  isEmpty() {\n    return this.top === this.bottom;\n  }\n  isFull() {\n    return (this.top + 1 & kMask) === this.bottom;\n  }\n  push(data) {\n    this.list[this.top] = data;\n    this.top = this.top + 1 & kMask;\n  }\n  shift() {\n    const nextItem = this.list[this.bottom];\n    if (nextItem === undefined) return null;\n    this.list[this.bottom] = undefined;\n    this.bottom = this.bottom + 1 & kMask;\n    return nextItem;\n  }\n}\nmodule.exports = class FixedQueue {\n  constructor() {\n    this.head = this.tail = new FixedCircularBuffer();\n  }\n  isEmpty() {\n    return this.head.isEmpty();\n  }\n  push(data) {\n    if (this.head.isFull()) {\n      // Head is full: Creates a new queue, sets the old queue's `.next` to it,\n      // and sets it as the new main queue.\n      this.head = this.head.next = new FixedCircularBuffer();\n    }\n    this.head.push(data);\n  }\n  shift() {\n    const tail = this.tail;\n    const next = tail.shift();\n    if (tail.isEmpty() && tail.next !== null) {\n      // If there is another queue, it forms the new tail.\n      this.tail = tail.next;\n    }\n    return next;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/fixed-queue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/pool-base.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/pool-base.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst FixedQueue = __webpack_require__(/*! ./fixed-queue */ \"(ssr)/./node_modules/undici/lib/dispatcher/fixed-queue.js\");\nconst {\n  kConnected,\n  kSize,\n  kRunning,\n  kPending,\n  kQueued,\n  kBusy,\n  kFree,\n  kUrl,\n  kClose,\n  kDestroy,\n  kDispatch\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst PoolStats = __webpack_require__(/*! ./pool-stats */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool-stats.js\");\nconst kClients = Symbol('clients');\nconst kNeedDrain = Symbol('needDrain');\nconst kQueue = Symbol('queue');\nconst kClosedResolve = Symbol('closed resolve');\nconst kOnDrain = Symbol('onDrain');\nconst kOnConnect = Symbol('onConnect');\nconst kOnDisconnect = Symbol('onDisconnect');\nconst kOnConnectionError = Symbol('onConnectionError');\nconst kGetDispatcher = Symbol('get dispatcher');\nconst kAddClient = Symbol('add client');\nconst kRemoveClient = Symbol('remove client');\nconst kStats = Symbol('stats');\nclass PoolBase extends DispatcherBase {\n  constructor() {\n    super();\n    this[kQueue] = new FixedQueue();\n    this[kClients] = [];\n    this[kQueued] = 0;\n    const pool = this;\n    this[kOnDrain] = function onDrain(origin, targets) {\n      const queue = pool[kQueue];\n      let needDrain = false;\n      while (!needDrain) {\n        const item = queue.shift();\n        if (!item) {\n          break;\n        }\n        pool[kQueued]--;\n        needDrain = !this.dispatch(item.opts, item.handler);\n      }\n      this[kNeedDrain] = needDrain;\n      if (!this[kNeedDrain] && pool[kNeedDrain]) {\n        pool[kNeedDrain] = false;\n        pool.emit('drain', origin, [pool, ...targets]);\n      }\n      if (pool[kClosedResolve] && queue.isEmpty()) {\n        Promise.all(pool[kClients].map(c => c.close())).then(pool[kClosedResolve]);\n      }\n    };\n    this[kOnConnect] = (origin, targets) => {\n      pool.emit('connect', origin, [pool, ...targets]);\n    };\n    this[kOnDisconnect] = (origin, targets, err) => {\n      pool.emit('disconnect', origin, [pool, ...targets], err);\n    };\n    this[kOnConnectionError] = (origin, targets, err) => {\n      pool.emit('connectionError', origin, [pool, ...targets], err);\n    };\n    this[kStats] = new PoolStats(this);\n  }\n  get [kBusy]() {\n    return this[kNeedDrain];\n  }\n  get [kConnected]() {\n    return this[kClients].filter(client => client[kConnected]).length;\n  }\n  get [kFree]() {\n    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length;\n  }\n  get [kPending]() {\n    let ret = this[kQueued];\n    for (const {\n      [kPending]: pending\n    } of this[kClients]) {\n      ret += pending;\n    }\n    return ret;\n  }\n  get [kRunning]() {\n    let ret = 0;\n    for (const {\n      [kRunning]: running\n    } of this[kClients]) {\n      ret += running;\n    }\n    return ret;\n  }\n  get [kSize]() {\n    let ret = this[kQueued];\n    for (const {\n      [kSize]: size\n    } of this[kClients]) {\n      ret += size;\n    }\n    return ret;\n  }\n  get stats() {\n    return this[kStats];\n  }\n  async [kClose]() {\n    if (this[kQueue].isEmpty()) {\n      return Promise.all(this[kClients].map(c => c.close()));\n    } else {\n      return new Promise(resolve => {\n        this[kClosedResolve] = resolve;\n      });\n    }\n  }\n  async [kDestroy](err) {\n    while (true) {\n      const item = this[kQueue].shift();\n      if (!item) {\n        break;\n      }\n      item.handler.onError(err);\n    }\n    return Promise.all(this[kClients].map(c => c.destroy(err)));\n  }\n  [kDispatch](opts, handler) {\n    const dispatcher = this[kGetDispatcher]();\n    if (!dispatcher) {\n      this[kNeedDrain] = true;\n      this[kQueue].push({\n        opts,\n        handler\n      });\n      this[kQueued]++;\n    } else if (!dispatcher.dispatch(opts, handler)) {\n      dispatcher[kNeedDrain] = true;\n      this[kNeedDrain] = !this[kGetDispatcher]();\n    }\n    return !this[kNeedDrain];\n  }\n  [kAddClient](client) {\n    client.on('drain', this[kOnDrain]).on('connect', this[kOnConnect]).on('disconnect', this[kOnDisconnect]).on('connectionError', this[kOnConnectionError]);\n    this[kClients].push(client);\n    if (this[kNeedDrain]) {\n      queueMicrotask(() => {\n        if (this[kNeedDrain]) {\n          this[kOnDrain](client[kUrl], [this, client]);\n        }\n      });\n    }\n    return this;\n  }\n  [kRemoveClient](client) {\n    client.close(() => {\n      const idx = this[kClients].indexOf(client);\n      if (idx !== -1) {\n        this[kClients].splice(idx, 1);\n      }\n    });\n    this[kNeedDrain] = this[kClients].some(dispatcher => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);\n  }\n}\nmodule.exports = {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/pool-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/pool-stats.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/pool-stats.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  kFree,\n  kConnected,\n  kPending,\n  kQueued,\n  kRunning,\n  kSize\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst kPool = Symbol('pool');\nclass PoolStats {\n  constructor(pool) {\n    this[kPool] = pool;\n  }\n  get connected() {\n    return this[kPool][kConnected];\n  }\n  get free() {\n    return this[kPool][kFree];\n  }\n  get pending() {\n    return this[kPool][kPending];\n  }\n  get queued() {\n    return this[kPool][kQueued];\n  }\n  get running() {\n    return this[kPool][kRunning];\n  }\n  get size() {\n    return this[kPool][kSize];\n  }\n}\nmodule.exports = PoolStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL3Bvb2wtc3RhdHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTTtFQUFFQSxLQUFLO0VBQUVDLFVBQVU7RUFBRUMsUUFBUTtFQUFFQyxPQUFPO0VBQUVDLFFBQVE7RUFBRUM7QUFBTSxDQUFDLEdBQUdDLG1CQUFPLENBQUMsd0VBQWlCLENBQUM7QUFDNUYsTUFBTUMsS0FBSyxHQUFHQyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBRTVCLE1BQU1DLFNBQVMsQ0FBQztFQUNkQyxXQUFXQSxDQUFFQyxJQUFJLEVBQUU7SUFDakIsSUFBSSxDQUFDSixLQUFLLENBQUMsR0FBR0ksSUFBSTtFQUNwQjtFQUVBLElBQUlDLFNBQVNBLENBQUEsRUFBSTtJQUNmLE9BQU8sSUFBSSxDQUFDTCxLQUFLLENBQUMsQ0FBQ04sVUFBVSxDQUFDO0VBQ2hDO0VBRUEsSUFBSVksSUFBSUEsQ0FBQSxFQUFJO0lBQ1YsT0FBTyxJQUFJLENBQUNOLEtBQUssQ0FBQyxDQUFDUCxLQUFLLENBQUM7RUFDM0I7RUFFQSxJQUFJYyxPQUFPQSxDQUFBLEVBQUk7SUFDYixPQUFPLElBQUksQ0FBQ1AsS0FBSyxDQUFDLENBQUNMLFFBQVEsQ0FBQztFQUM5QjtFQUVBLElBQUlhLE1BQU1BLENBQUEsRUFBSTtJQUNaLE9BQU8sSUFBSSxDQUFDUixLQUFLLENBQUMsQ0FBQ0osT0FBTyxDQUFDO0VBQzdCO0VBRUEsSUFBSWEsT0FBT0EsQ0FBQSxFQUFJO0lBQ2IsT0FBTyxJQUFJLENBQUNULEtBQUssQ0FBQyxDQUFDSCxRQUFRLENBQUM7RUFDOUI7RUFFQSxJQUFJYSxJQUFJQSxDQUFBLEVBQUk7SUFDVixPQUFPLElBQUksQ0FBQ1YsS0FBSyxDQUFDLENBQUNGLEtBQUssQ0FBQztFQUMzQjtBQUNGO0FBRUFhLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVixTQUFTIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvZGlzcGF0Y2hlci9wb29sLXN0YXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsga0ZyZWUsIGtDb25uZWN0ZWQsIGtQZW5kaW5nLCBrUXVldWVkLCBrUnVubmluZywga1NpemUgfSA9IHJlcXVpcmUoJy4uL2NvcmUvc3ltYm9scycpXG5jb25zdCBrUG9vbCA9IFN5bWJvbCgncG9vbCcpXG5cbmNsYXNzIFBvb2xTdGF0cyB7XG4gIGNvbnN0cnVjdG9yIChwb29sKSB7XG4gICAgdGhpc1trUG9vbF0gPSBwb29sXG4gIH1cblxuICBnZXQgY29ubmVjdGVkICgpIHtcbiAgICByZXR1cm4gdGhpc1trUG9vbF1ba0Nvbm5lY3RlZF1cbiAgfVxuXG4gIGdldCBmcmVlICgpIHtcbiAgICByZXR1cm4gdGhpc1trUG9vbF1ba0ZyZWVdXG4gIH1cblxuICBnZXQgcGVuZGluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXNba1Bvb2xdW2tQZW5kaW5nXVxuICB9XG5cbiAgZ2V0IHF1ZXVlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXNba1Bvb2xdW2tRdWV1ZWRdXG4gIH1cblxuICBnZXQgcnVubmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXNba1Bvb2xdW2tSdW5uaW5nXVxuICB9XG5cbiAgZ2V0IHNpemUgKCkge1xuICAgIHJldHVybiB0aGlzW2tQb29sXVtrU2l6ZV1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2xTdGF0c1xuIl0sIm5hbWVzIjpbImtGcmVlIiwia0Nvbm5lY3RlZCIsImtQZW5kaW5nIiwia1F1ZXVlZCIsImtSdW5uaW5nIiwia1NpemUiLCJyZXF1aXJlIiwia1Bvb2wiLCJTeW1ib2wiLCJQb29sU3RhdHMiLCJjb25zdHJ1Y3RvciIsInBvb2wiLCJjb25uZWN0ZWQiLCJmcmVlIiwicGVuZGluZyIsInF1ZXVlZCIsInJ1bm5pbmciLCJzaXplIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/pool-stats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/pool.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/pool.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kGetDispatcher\n} = __webpack_require__(/*! ./pool-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool-base.js\");\nconst Client = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/undici/lib/dispatcher/client.js\");\nconst {\n  InvalidArgumentError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  kUrl,\n  kInterceptors\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst buildConnector = __webpack_require__(/*! ../core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst kOptions = Symbol('options');\nconst kConnections = Symbol('connections');\nconst kFactory = Symbol('factory');\nfunction defaultFactory(origin, opts) {\n  return new Client(origin, opts);\n}\nclass Pool extends PoolBase {\n  constructor(origin) {\n    let {\n      connections,\n      factory = defaultFactory,\n      connect,\n      connectTimeout,\n      tls,\n      maxCachedSessions,\n      socketPath,\n      autoSelectFamily,\n      autoSelectFamilyAttemptTimeout,\n      allowH2,\n      ...options\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {\n      throw new InvalidArgumentError('invalid connections');\n    }\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.');\n    }\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object');\n    }\n    if (typeof connect !== 'function') {\n      connect = buildConnector({\n        ...tls,\n        maxCachedSessions,\n        allowH2,\n        socketPath,\n        timeout: connectTimeout,\n        ...(autoSelectFamily ? {\n          autoSelectFamily,\n          autoSelectFamilyAttemptTimeout\n        } : undefined),\n        ...connect\n      });\n    }\n    this[kInterceptors] = options.interceptors?.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];\n    this[kConnections] = connections || null;\n    this[kUrl] = util.parseOrigin(origin);\n    this[kOptions] = {\n      ...util.deepClone(options),\n      connect,\n      allowH2\n    };\n    this[kOptions].interceptors = options.interceptors ? {\n      ...options.interceptors\n    } : undefined;\n    this[kFactory] = factory;\n  }\n  [kGetDispatcher]() {\n    for (const client of this[kClients]) {\n      if (!client[kNeedDrain]) {\n        return client;\n      }\n    }\n    if (!this[kConnections] || this[kClients].length < this[kConnections]) {\n      const dispatcher = this[kFactory](this[kUrl], this[kOptions]);\n      this[kAddClient](dispatcher);\n      return dispatcher;\n    }\n  }\n}\nmodule.exports = Pool;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL3Bvb2wuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosTUFBTTtFQUNKQSxRQUFRO0VBQ1JDLFFBQVE7RUFDUkMsVUFBVTtFQUNWQyxVQUFVO0VBQ1ZDO0FBQ0YsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLDRFQUFhLENBQUM7QUFDMUIsTUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHNFQUFVLENBQUM7QUFDbEMsTUFBTTtFQUNKRTtBQUNGLENBQUMsR0FBR0YsbUJBQU8sQ0FBQyxzRUFBZ0IsQ0FBQztBQUM3QixNQUFNRyxJQUFJLEdBQUdILG1CQUFPLENBQUMsa0VBQWMsQ0FBQztBQUNwQyxNQUFNO0VBQUVJLElBQUk7RUFBRUM7QUFBYyxDQUFDLEdBQUdMLG1CQUFPLENBQUMsd0VBQWlCLENBQUM7QUFDMUQsTUFBTU0sY0FBYyxHQUFHTixtQkFBTyxDQUFDLHdFQUFpQixDQUFDO0FBRWpELE1BQU1PLFFBQVEsR0FBR0MsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNsQyxNQUFNQyxZQUFZLEdBQUdELE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDMUMsTUFBTUUsUUFBUSxHQUFHRixNQUFNLENBQUMsU0FBUyxDQUFDO0FBRWxDLFNBQVNHLGNBQWNBLENBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFO0VBQ3JDLE9BQU8sSUFBSVosTUFBTSxDQUFDVyxNQUFNLEVBQUVDLElBQUksQ0FBQztBQUNqQztBQUVBLE1BQU1DLElBQUksU0FBU25CLFFBQVEsQ0FBQztFQUMxQm9CLFdBQVdBLENBQUVILE1BQU0sRUFZWDtJQUFBLElBWmE7TUFDbkJJLFdBQVc7TUFDWEMsT0FBTyxHQUFHTixjQUFjO01BQ3hCTyxPQUFPO01BQ1BDLGNBQWM7TUFDZEMsR0FBRztNQUNIQyxpQkFBaUI7TUFDakJDLFVBQVU7TUFDVkMsZ0JBQWdCO01BQ2hCQyw4QkFBOEI7TUFDOUJDLE9BQU87TUFDUCxHQUFHQztJQUNMLENBQUMsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0lBQ0osS0FBSyxDQUFDLENBQUM7SUFFUCxJQUFJWCxXQUFXLElBQUksSUFBSSxLQUFLLENBQUNjLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDZixXQUFXLENBQUMsSUFBSUEsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO01BQzdFLE1BQU0sSUFBSWQsb0JBQW9CLENBQUMscUJBQXFCLENBQUM7SUFDdkQ7SUFFQSxJQUFJLE9BQU9lLE9BQU8sS0FBSyxVQUFVLEVBQUU7TUFDakMsTUFBTSxJQUFJZixvQkFBb0IsQ0FBQyw2QkFBNkIsQ0FBQztJQUMvRDtJQUVBLElBQUlnQixPQUFPLElBQUksSUFBSSxJQUFJLE9BQU9BLE9BQU8sS0FBSyxVQUFVLElBQUksT0FBT0EsT0FBTyxLQUFLLFFBQVEsRUFBRTtNQUNuRixNQUFNLElBQUloQixvQkFBb0IsQ0FBQyx5Q0FBeUMsQ0FBQztJQUMzRTtJQUVBLElBQUksT0FBT2dCLE9BQU8sS0FBSyxVQUFVLEVBQUU7TUFDakNBLE9BQU8sR0FBR1osY0FBYyxDQUFDO1FBQ3ZCLEdBQUdjLEdBQUc7UUFDTkMsaUJBQWlCO1FBQ2pCSSxPQUFPO1FBQ1BILFVBQVU7UUFDVlUsT0FBTyxFQUFFYixjQUFjO1FBQ3ZCLElBQUlJLGdCQUFnQixHQUFHO1VBQUVBLGdCQUFnQjtVQUFFQztRQUErQixDQUFDLEdBQUdLLFNBQVMsQ0FBQztRQUN4RixHQUFHWDtNQUNMLENBQUMsQ0FBQztJQUNKO0lBRUEsSUFBSSxDQUFDYixhQUFhLENBQUMsR0FBR3FCLE9BQU8sQ0FBQ08sWUFBWSxFQUFFbkIsSUFBSSxJQUFJb0IsS0FBSyxDQUFDQyxPQUFPLENBQUNULE9BQU8sQ0FBQ08sWUFBWSxDQUFDbkIsSUFBSSxDQUFDLEdBQ3hGWSxPQUFPLENBQUNPLFlBQVksQ0FBQ25CLElBQUksR0FDekIsRUFBRTtJQUNOLElBQUksQ0FBQ0wsWUFBWSxDQUFDLEdBQUdPLFdBQVcsSUFBSSxJQUFJO0lBQ3hDLElBQUksQ0FBQ1osSUFBSSxDQUFDLEdBQUdELElBQUksQ0FBQ2lDLFdBQVcsQ0FBQ3hCLE1BQU0sQ0FBQztJQUNyQyxJQUFJLENBQUNMLFFBQVEsQ0FBQyxHQUFHO01BQUUsR0FBR0osSUFBSSxDQUFDa0MsU0FBUyxDQUFDWCxPQUFPLENBQUM7TUFBRVIsT0FBTztNQUFFTztJQUFRLENBQUM7SUFDakUsSUFBSSxDQUFDbEIsUUFBUSxDQUFDLENBQUMwQixZQUFZLEdBQUdQLE9BQU8sQ0FBQ08sWUFBWSxHQUM5QztNQUFFLEdBQUdQLE9BQU8sQ0FBQ087SUFBYSxDQUFDLEdBQzNCSixTQUFTO0lBQ2IsSUFBSSxDQUFDbkIsUUFBUSxDQUFDLEdBQUdPLE9BQU87RUFDMUI7RUFFQSxDQUFDbEIsY0FBYyxJQUFLO0lBQ2xCLEtBQUssTUFBTXVDLE1BQU0sSUFBSSxJQUFJLENBQUMxQyxRQUFRLENBQUMsRUFBRTtNQUNuQyxJQUFJLENBQUMwQyxNQUFNLENBQUN6QyxVQUFVLENBQUMsRUFBRTtRQUN2QixPQUFPeUMsTUFBTTtNQUNmO0lBQ0Y7SUFFQSxJQUFJLENBQUMsSUFBSSxDQUFDN0IsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDYixRQUFRLENBQUMsQ0FBQ2dDLE1BQU0sR0FBRyxJQUFJLENBQUNuQixZQUFZLENBQUMsRUFBRTtNQUNyRSxNQUFNOEIsVUFBVSxHQUFHLElBQUksQ0FBQzdCLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQ04sSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDRyxRQUFRLENBQUMsQ0FBQztNQUM3RCxJQUFJLENBQUNULFVBQVUsQ0FBQyxDQUFDeUMsVUFBVSxDQUFDO01BQzVCLE9BQU9BLFVBQVU7SUFDbkI7RUFDRjtBQUNGO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHM0IsSUFBSSIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2Rpc3BhdGNoZXIvcG9vbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qge1xuICBQb29sQmFzZSxcbiAga0NsaWVudHMsXG4gIGtOZWVkRHJhaW4sXG4gIGtBZGRDbGllbnQsXG4gIGtHZXREaXNwYXRjaGVyXG59ID0gcmVxdWlyZSgnLi9wb29sLWJhc2UnKVxuY29uc3QgQ2xpZW50ID0gcmVxdWlyZSgnLi9jbGllbnQnKVxuY29uc3Qge1xuICBJbnZhbGlkQXJndW1lbnRFcnJvclxufSA9IHJlcXVpcmUoJy4uL2NvcmUvZXJyb3JzJylcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuLi9jb3JlL3V0aWwnKVxuY29uc3QgeyBrVXJsLCBrSW50ZXJjZXB0b3JzIH0gPSByZXF1aXJlKCcuLi9jb3JlL3N5bWJvbHMnKVxuY29uc3QgYnVpbGRDb25uZWN0b3IgPSByZXF1aXJlKCcuLi9jb3JlL2Nvbm5lY3QnKVxuXG5jb25zdCBrT3B0aW9ucyA9IFN5bWJvbCgnb3B0aW9ucycpXG5jb25zdCBrQ29ubmVjdGlvbnMgPSBTeW1ib2woJ2Nvbm5lY3Rpb25zJylcbmNvbnN0IGtGYWN0b3J5ID0gU3ltYm9sKCdmYWN0b3J5JylcblxuZnVuY3Rpb24gZGVmYXVsdEZhY3RvcnkgKG9yaWdpbiwgb3B0cykge1xuICByZXR1cm4gbmV3IENsaWVudChvcmlnaW4sIG9wdHMpXG59XG5cbmNsYXNzIFBvb2wgZXh0ZW5kcyBQb29sQmFzZSB7XG4gIGNvbnN0cnVjdG9yIChvcmlnaW4sIHtcbiAgICBjb25uZWN0aW9ucyxcbiAgICBmYWN0b3J5ID0gZGVmYXVsdEZhY3RvcnksXG4gICAgY29ubmVjdCxcbiAgICBjb25uZWN0VGltZW91dCxcbiAgICB0bHMsXG4gICAgbWF4Q2FjaGVkU2Vzc2lvbnMsXG4gICAgc29ja2V0UGF0aCxcbiAgICBhdXRvU2VsZWN0RmFtaWx5LFxuICAgIGF1dG9TZWxlY3RGYW1pbHlBdHRlbXB0VGltZW91dCxcbiAgICBhbGxvd0gyLFxuICAgIC4uLm9wdGlvbnNcbiAgfSA9IHt9KSB7XG4gICAgc3VwZXIoKVxuXG4gICAgaWYgKGNvbm5lY3Rpb25zICE9IG51bGwgJiYgKCFOdW1iZXIuaXNGaW5pdGUoY29ubmVjdGlvbnMpIHx8IGNvbm5lY3Rpb25zIDwgMCkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignaW52YWxpZCBjb25uZWN0aW9ucycpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBmYWN0b3J5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2ZhY3RvcnkgbXVzdCBiZSBhIGZ1bmN0aW9uLicpXG4gICAgfVxuXG4gICAgaWYgKGNvbm5lY3QgIT0gbnVsbCAmJiB0eXBlb2YgY29ubmVjdCAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgY29ubmVjdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignY29ubmVjdCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0JylcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbm5lY3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbm5lY3QgPSBidWlsZENvbm5lY3Rvcih7XG4gICAgICAgIC4uLnRscyxcbiAgICAgICAgbWF4Q2FjaGVkU2Vzc2lvbnMsXG4gICAgICAgIGFsbG93SDIsXG4gICAgICAgIHNvY2tldFBhdGgsXG4gICAgICAgIHRpbWVvdXQ6IGNvbm5lY3RUaW1lb3V0LFxuICAgICAgICAuLi4oYXV0b1NlbGVjdEZhbWlseSA/IHsgYXV0b1NlbGVjdEZhbWlseSwgYXV0b1NlbGVjdEZhbWlseUF0dGVtcHRUaW1lb3V0IH0gOiB1bmRlZmluZWQpLFxuICAgICAgICAuLi5jb25uZWN0XG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXNba0ludGVyY2VwdG9yc10gPSBvcHRpb25zLmludGVyY2VwdG9ycz8uUG9vbCAmJiBBcnJheS5pc0FycmF5KG9wdGlvbnMuaW50ZXJjZXB0b3JzLlBvb2wpXG4gICAgICA/IG9wdGlvbnMuaW50ZXJjZXB0b3JzLlBvb2xcbiAgICAgIDogW11cbiAgICB0aGlzW2tDb25uZWN0aW9uc10gPSBjb25uZWN0aW9ucyB8fCBudWxsXG4gICAgdGhpc1trVXJsXSA9IHV0aWwucGFyc2VPcmlnaW4ob3JpZ2luKVxuICAgIHRoaXNba09wdGlvbnNdID0geyAuLi51dGlsLmRlZXBDbG9uZShvcHRpb25zKSwgY29ubmVjdCwgYWxsb3dIMiB9XG4gICAgdGhpc1trT3B0aW9uc10uaW50ZXJjZXB0b3JzID0gb3B0aW9ucy5pbnRlcmNlcHRvcnNcbiAgICAgID8geyAuLi5vcHRpb25zLmludGVyY2VwdG9ycyB9XG4gICAgICA6IHVuZGVmaW5lZFxuICAgIHRoaXNba0ZhY3RvcnldID0gZmFjdG9yeVxuICB9XG5cbiAgW2tHZXREaXNwYXRjaGVyXSAoKSB7XG4gICAgZm9yIChjb25zdCBjbGllbnQgb2YgdGhpc1trQ2xpZW50c10pIHtcbiAgICAgIGlmICghY2xpZW50W2tOZWVkRHJhaW5dKSB7XG4gICAgICAgIHJldHVybiBjbGllbnRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXNba0Nvbm5lY3Rpb25zXSB8fCB0aGlzW2tDbGllbnRzXS5sZW5ndGggPCB0aGlzW2tDb25uZWN0aW9uc10pIHtcbiAgICAgIGNvbnN0IGRpc3BhdGNoZXIgPSB0aGlzW2tGYWN0b3J5XSh0aGlzW2tVcmxdLCB0aGlzW2tPcHRpb25zXSlcbiAgICAgIHRoaXNba0FkZENsaWVudF0oZGlzcGF0Y2hlcilcbiAgICAgIHJldHVybiBkaXNwYXRjaGVyXG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9vbFxuIl0sIm5hbWVzIjpbIlBvb2xCYXNlIiwia0NsaWVudHMiLCJrTmVlZERyYWluIiwia0FkZENsaWVudCIsImtHZXREaXNwYXRjaGVyIiwicmVxdWlyZSIsIkNsaWVudCIsIkludmFsaWRBcmd1bWVudEVycm9yIiwidXRpbCIsImtVcmwiLCJrSW50ZXJjZXB0b3JzIiwiYnVpbGRDb25uZWN0b3IiLCJrT3B0aW9ucyIsIlN5bWJvbCIsImtDb25uZWN0aW9ucyIsImtGYWN0b3J5IiwiZGVmYXVsdEZhY3RvcnkiLCJvcmlnaW4iLCJvcHRzIiwiUG9vbCIsImNvbnN0cnVjdG9yIiwiY29ubmVjdGlvbnMiLCJmYWN0b3J5IiwiY29ubmVjdCIsImNvbm5lY3RUaW1lb3V0IiwidGxzIiwibWF4Q2FjaGVkU2Vzc2lvbnMiLCJzb2NrZXRQYXRoIiwiYXV0b1NlbGVjdEZhbWlseSIsImF1dG9TZWxlY3RGYW1pbHlBdHRlbXB0VGltZW91dCIsImFsbG93SDIiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJ0aW1lb3V0IiwiaW50ZXJjZXB0b3JzIiwiQXJyYXkiLCJpc0FycmF5IiwicGFyc2VPcmlnaW4iLCJkZWVwQ2xvbmUiLCJjbGllbnQiLCJkaXNwYXRjaGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/proxy-agent.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/proxy-agent.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  kProxy,\n  kClose,\n  kDestroy,\n  kInterceptors\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst {\n  URL\n} = __webpack_require__(/*! node:url */ \"node:url\");\nconst Agent = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher-base.js\");\nconst {\n  InvalidArgumentError,\n  RequestAbortedError,\n  SecureProxyConnectionError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst buildConnector = __webpack_require__(/*! ../core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst kAgent = Symbol('proxy agent');\nconst kClient = Symbol('proxy client');\nconst kProxyHeaders = Symbol('proxy headers');\nconst kRequestTls = Symbol('request tls settings');\nconst kProxyTls = Symbol('proxy tls settings');\nconst kConnectEndpoint = Symbol('connect endpoint function');\nfunction defaultProtocolPort(protocol) {\n  return protocol === 'https:' ? 443 : 80;\n}\nfunction defaultFactory(origin, opts) {\n  return new Pool(origin, opts);\n}\nvar _ProxyAgent_brand = /*#__PURE__*/new WeakSet();\nclass ProxyAgent extends DispatcherBase {\n  constructor(_opts) {\n    super();\n    /**\n     * @param {import('../types/proxy-agent').ProxyAgent.Options | string | URL} opts\n     * @returns {URL}\n     */\n    _classPrivateMethodInitSpec(this, _ProxyAgent_brand);\n    if (!_opts || typeof _opts === 'object' && !(_opts instanceof URL) && !_opts.uri) {\n      throw new InvalidArgumentError('Proxy uri is mandatory');\n    }\n    const {\n      clientFactory = defaultFactory\n    } = _opts;\n    if (typeof clientFactory !== 'function') {\n      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.');\n    }\n    const url = _assertClassBrand(_ProxyAgent_brand, this, _getUrl).call(this, _opts);\n    const {\n      href,\n      origin,\n      port,\n      protocol,\n      username,\n      password,\n      hostname: proxyHostname\n    } = url;\n    this[kProxy] = {\n      uri: href,\n      protocol\n    };\n    this[kInterceptors] = _opts.interceptors?.ProxyAgent && Array.isArray(_opts.interceptors.ProxyAgent) ? _opts.interceptors.ProxyAgent : [];\n    this[kRequestTls] = _opts.requestTls;\n    this[kProxyTls] = _opts.proxyTls;\n    this[kProxyHeaders] = _opts.headers || {};\n    if (_opts.auth && _opts.token) {\n      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token');\n    } else if (_opts.auth) {\n      /* @deprecated in favour of opts.token */\n      this[kProxyHeaders]['proxy-authorization'] = `Basic ${_opts.auth}`;\n    } else if (_opts.token) {\n      this[kProxyHeaders]['proxy-authorization'] = _opts.token;\n    } else if (username && password) {\n      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`;\n    }\n    const connect = buildConnector({\n      ..._opts.proxyTls\n    });\n    this[kConnectEndpoint] = buildConnector({\n      ..._opts.requestTls\n    });\n    this[kClient] = clientFactory(url, {\n      connect\n    });\n    this[kAgent] = new Agent({\n      ..._opts,\n      connect: async (opts, callback) => {\n        let requestedPath = opts.host;\n        if (!opts.port) {\n          requestedPath += `:${defaultProtocolPort(opts.protocol)}`;\n        }\n        try {\n          const {\n            socket,\n            statusCode\n          } = await this[kClient].connect({\n            origin,\n            port,\n            path: requestedPath,\n            signal: opts.signal,\n            headers: {\n              ...this[kProxyHeaders],\n              host: opts.host\n            },\n            servername: this[kProxyTls]?.servername || proxyHostname\n          });\n          if (statusCode !== 200) {\n            socket.on('error', () => {}).destroy();\n            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));\n          }\n          if (opts.protocol !== 'https:') {\n            callback(null, socket);\n            return;\n          }\n          let servername;\n          if (this[kRequestTls]) {\n            servername = this[kRequestTls].servername;\n          } else {\n            servername = opts.servername;\n          }\n          this[kConnectEndpoint]({\n            ...opts,\n            servername,\n            httpSocket: socket\n          }, callback);\n        } catch (err) {\n          if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {\n            // Throw a custom error to avoid loop in client.js#connect\n            callback(new SecureProxyConnectionError(err));\n          } else {\n            callback(err);\n          }\n        }\n      }\n    });\n  }\n  dispatch(opts, handler) {\n    const headers = buildHeaders(opts.headers);\n    throwIfProxyAuthIsSent(headers);\n    if (headers && !('host' in headers) && !('Host' in headers)) {\n      const {\n        host\n      } = new URL(opts.origin);\n      headers.host = host;\n    }\n    return this[kAgent].dispatch({\n      ...opts,\n      headers\n    }, handler);\n  }\n  async [kClose]() {\n    await this[kAgent].close();\n    await this[kClient].close();\n  }\n  async [kDestroy]() {\n    await this[kAgent].destroy();\n    await this[kClient].destroy();\n  }\n}\n\n/**\n * @param {string[] | Record<string, string>} headers\n * @returns {Record<string, string>}\n */\nfunction _getUrl(opts) {\n  if (typeof opts === 'string') {\n    return new URL(opts);\n  } else if (opts instanceof URL) {\n    return opts;\n  } else {\n    return new URL(opts.uri);\n  }\n}\nfunction buildHeaders(headers) {\n  // When using undici.fetch, the headers list is stored\n  // as an array.\n  if (Array.isArray(headers)) {\n    /** @type {Record<string, string>} */\n    const headersPair = {};\n    for (let i = 0; i < headers.length; i += 2) {\n      headersPair[headers[i]] = headers[i + 1];\n    }\n    return headersPair;\n  }\n  return headers;\n}\n\n/**\n * @param {Record<string, string>} headers\n *\n * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers\n * Nevertheless, it was changed and to avoid a security vulnerability by end users\n * this check was created.\n * It should be removed in the next major version for performance reasons\n */\nfunction throwIfProxyAuthIsSent(headers) {\n  const existProxyAuth = headers && Object.keys(headers).find(key => key.toLowerCase() === 'proxy-authorization');\n  if (existProxyAuth) {\n    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor');\n  }\n}\nmodule.exports = ProxyAgent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL3Byb3h5LWFnZW50LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUFBLFNBQUFBLDRCQUFBQyxDQUFBLEVBQUFDLENBQUEsSUFBQUMsMEJBQUEsQ0FBQUYsQ0FBQSxFQUFBQyxDQUFBLEdBQUFBLENBQUEsQ0FBQUUsR0FBQSxDQUFBSCxDQUFBO0FBQUEsU0FBQUUsMkJBQUFGLENBQUEsRUFBQUksQ0FBQSxRQUFBQSxDQUFBLENBQUFDLEdBQUEsQ0FBQUwsQ0FBQSxhQUFBTSxTQUFBO0FBQUEsU0FBQUMsa0JBQUFQLENBQUEsRUFBQUksQ0FBQSxFQUFBSSxDQUFBLDZCQUFBUixDQUFBLEdBQUFBLENBQUEsS0FBQUksQ0FBQSxHQUFBSixDQUFBLENBQUFLLEdBQUEsQ0FBQUQsQ0FBQSxVQUFBSyxTQUFBLENBQUFDLE1BQUEsT0FBQU4sQ0FBQSxHQUFBSSxDQUFBLFlBQUFGLFNBQUE7QUFFWixNQUFNO0VBQUVLLE1BQU07RUFBRUMsTUFBTTtFQUFFQyxRQUFRO0VBQUVDO0FBQWMsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLHdFQUFpQixDQUFDO0FBQzlFLE1BQU07RUFBRUM7QUFBSSxDQUFDLEdBQUdELG1CQUFPLENBQUMsMEJBQVUsQ0FBQztBQUNuQyxNQUFNRSxLQUFLLEdBQUdGLG1CQUFPLENBQUMsb0VBQVMsQ0FBQztBQUNoQyxNQUFNRyxJQUFJLEdBQUdILG1CQUFPLENBQUMsa0VBQVEsQ0FBQztBQUM5QixNQUFNSSxjQUFjLEdBQUdKLG1CQUFPLENBQUMsd0ZBQW1CLENBQUM7QUFDbkQsTUFBTTtFQUFFSyxvQkFBb0I7RUFBRUMsbUJBQW1CO0VBQUVDO0FBQTJCLENBQUMsR0FBR1AsbUJBQU8sQ0FBQyxzRUFBZ0IsQ0FBQztBQUMzRyxNQUFNUSxjQUFjLEdBQUdSLG1CQUFPLENBQUMsd0VBQWlCLENBQUM7QUFFakQsTUFBTVMsTUFBTSxHQUFHQyxNQUFNLENBQUMsYUFBYSxDQUFDO0FBQ3BD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cGF0Y2hlci9wcm94eS1hZ2VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBrUHJveHksIGtDbG9zZSwga0Rlc3Ryb3ksIGtJbnRlcmNlcHRvcnMgfSA9IHJlcXVpcmUoJy4uL2NvcmUvc3ltYm9scycpXG5jb25zdCB7IFVSTCB9ID0gcmVxdWlyZSgnbm9kZTp1cmwnKVxuY29uc3QgQWdlbnQgPSByZXF1aXJlKCcuL2FnZW50JylcbmNvbnN0IFBvb2wgPSByZXF1aXJlKCcuL3Bvb2wnKVxuY29uc3QgRGlzcGF0Y2hlckJhc2UgPSByZXF1aXJlKCcuL2Rpc3BhdGNoZXItYmFzZScpXG5jb25zdCB7IEludmFsaWRBcmd1bWVudEVycm9yLCBSZXF1ZXN0QWJvcnRlZEVycm9yLCBTZWN1cmVQcm94eUNvbm5lY3Rpb25FcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuY29uc3QgYnVpbGRDb25uZWN0b3IgPSByZXF1aXJlKCcuLi9jb3JlL2Nvbm5lY3QnKVxuXG5jb25zdCBrQWdlbnQgPSBTeW1ib2woJ3Byb3h5IGFnZW50JylcbmNvbnN0IGtDbGllbnQgPSBTeW1ib2woJ3Byb3h5IGNsaWVudCcpXG5jb25zdCBrUHJveHlIZWFkZXJzID0gU3ltYm9sKCdwcm94eSBoZWFkZXJzJylcbmNvbnN0IGtSZXF1ZXN0VGxzID0gU3ltYm9sKCdyZXF1ZXN0IHRscyBzZXR0aW5ncycpXG5jb25zdCBrUHJveHlUbHMgPSBTeW1ib2woJ3Byb3h5IHRscyBzZXR0aW5ncycpXG5jb25zdCBrQ29ubmVjdEVuZHBvaW50ID0gU3ltYm9sKCdjb25uZWN0IGVuZHBvaW50IGZ1bmN0aW9uJylcblxuZnVuY3Rpb24gZGVmYXVsdFByb3RvY29sUG9ydCAocHJvdG9jb2wpIHtcbiAgcmV0dXJuIHByb3RvY29sID09PSAnaHR0cHM6JyA/IDQ0MyA6IDgwXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRGYWN0b3J5IChvcmlnaW4sIG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBQb29sKG9yaWdpbiwgb3B0cylcbn1cblxuY2xhc3MgUHJveHlBZ2VudCBleHRlbmRzIERpc3BhdGNoZXJCYXNlIHtcbiAgY29uc3RydWN0b3IgKG9wdHMpIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAoIW9wdHMgfHwgKHR5cGVvZiBvcHRzID09PSAnb2JqZWN0JyAmJiAhKG9wdHMgaW5zdGFuY2VvZiBVUkwpICYmICFvcHRzLnVyaSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignUHJveHkgdXJpIGlzIG1hbmRhdG9yeScpXG4gICAgfVxuXG4gICAgY29uc3QgeyBjbGllbnRGYWN0b3J5ID0gZGVmYXVsdEZhY3RvcnkgfSA9IG9wdHNcbiAgICBpZiAodHlwZW9mIGNsaWVudEZhY3RvcnkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignUHJveHkgb3B0cy5jbGllbnRGYWN0b3J5IG11c3QgYmUgYSBmdW5jdGlvbi4nKVxuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IHRoaXMuI2dldFVybChvcHRzKVxuICAgIGNvbnN0IHsgaHJlZiwgb3JpZ2luLCBwb3J0LCBwcm90b2NvbCwgdXNlcm5hbWUsIHBhc3N3b3JkLCBob3N0bmFtZTogcHJveHlIb3N0bmFtZSB9ID0gdXJsXG5cbiAgICB0aGlzW2tQcm94eV0gPSB7IHVyaTogaHJlZiwgcHJvdG9jb2wgfVxuICAgIHRoaXNba0ludGVyY2VwdG9yc10gPSBvcHRzLmludGVyY2VwdG9ycz8uUHJveHlBZ2VudCAmJiBBcnJheS5pc0FycmF5KG9wdHMuaW50ZXJjZXB0b3JzLlByb3h5QWdlbnQpXG4gICAgICA/IG9wdHMuaW50ZXJjZXB0b3JzLlByb3h5QWdlbnRcbiAgICAgIDogW11cbiAgICB0aGlzW2tSZXF1ZXN0VGxzXSA9IG9wdHMucmVxdWVzdFRsc1xuICAgIHRoaXNba1Byb3h5VGxzXSA9IG9wdHMucHJveHlUbHNcbiAgICB0aGlzW2tQcm94eUhlYWRlcnNdID0gb3B0cy5oZWFkZXJzIHx8IHt9XG5cbiAgICBpZiAob3B0cy5hdXRoICYmIG9wdHMudG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignb3B0cy5hdXRoIGNhbm5vdCBiZSB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggb3B0cy50b2tlbicpXG4gICAgfSBlbHNlIGlmIChvcHRzLmF1dGgpIHtcbiAgICAgIC8qIEBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBvcHRzLnRva2VuICovXG4gICAgICB0aGlzW2tQcm94eUhlYWRlcnNdWydwcm94eS1hdXRob3JpemF0aW9uJ10gPSBgQmFzaWMgJHtvcHRzLmF1dGh9YFxuICAgIH0gZWxzZSBpZiAob3B0cy50b2tlbikge1xuICAgICAgdGhpc1trUHJveHlIZWFkZXJzXVsncHJveHktYXV0aG9yaXphdGlvbiddID0gb3B0cy50b2tlblxuICAgIH0gZWxzZSBpZiAodXNlcm5hbWUgJiYgcGFzc3dvcmQpIHtcbiAgICAgIHRoaXNba1Byb3h5SGVhZGVyc11bJ3Byb3h5LWF1dGhvcml6YXRpb24nXSA9IGBCYXNpYyAke0J1ZmZlci5mcm9tKGAke2RlY29kZVVSSUNvbXBvbmVudCh1c2VybmFtZSl9OiR7ZGVjb2RlVVJJQ29tcG9uZW50KHBhc3N3b3JkKX1gKS50b1N0cmluZygnYmFzZTY0Jyl9YFxuICAgIH1cblxuICAgIGNvbnN0IGNvbm5lY3QgPSBidWlsZENvbm5lY3Rvcih7IC4uLm9wdHMucHJveHlUbHMgfSlcbiAgICB0aGlzW2tDb25uZWN0RW5kcG9pbnRdID0gYnVpbGRDb25uZWN0b3IoeyAuLi5vcHRzLnJlcXVlc3RUbHMgfSlcbiAgICB0aGlzW2tDbGllbnRdID0gY2xpZW50RmFjdG9yeSh1cmwsIHsgY29ubmVjdCB9KVxuICAgIHRoaXNba0FnZW50XSA9IG5ldyBBZ2VudCh7XG4gICAgICAuLi5vcHRzLFxuICAgICAgY29ubmVjdDogYXN5bmMgKG9wdHMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGxldCByZXF1ZXN0ZWRQYXRoID0gb3B0cy5ob3N0XG4gICAgICAgIGlmICghb3B0cy5wb3J0KSB7XG4gICAgICAgICAgcmVxdWVzdGVkUGF0aCArPSBgOiR7ZGVmYXVsdFByb3RvY29sUG9ydChvcHRzLnByb3RvY29sKX1gXG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB7IHNvY2tldCwgc3RhdHVzQ29kZSB9ID0gYXdhaXQgdGhpc1trQ2xpZW50XS5jb25uZWN0KHtcbiAgICAgICAgICAgIG9yaWdpbixcbiAgICAgICAgICAgIHBvcnQsXG4gICAgICAgICAgICBwYXRoOiByZXF1ZXN0ZWRQYXRoLFxuICAgICAgICAgICAgc2lnbmFsOiBvcHRzLnNpZ25hbCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgLi4udGhpc1trUHJveHlIZWFkZXJzXSxcbiAgICAgICAgICAgICAgaG9zdDogb3B0cy5ob3N0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VydmVybmFtZTogdGhpc1trUHJveHlUbHNdPy5zZXJ2ZXJuYW1lIHx8IHByb3h5SG9zdG5hbWVcbiAgICAgICAgICB9KVxuICAgICAgICAgIGlmIChzdGF0dXNDb2RlICE9PSAyMDApIHtcbiAgICAgICAgICAgIHNvY2tldC5vbignZXJyb3InLCAoKSA9PiB7fSkuZGVzdHJveSgpXG4gICAgICAgICAgICBjYWxsYmFjayhuZXcgUmVxdWVzdEFib3J0ZWRFcnJvcihgUHJveHkgcmVzcG9uc2UgKCR7c3RhdHVzQ29kZX0pICE9PSAyMDAgd2hlbiBIVFRQIFR1bm5lbGluZ2ApKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0cy5wcm90b2NvbCAhPT0gJ2h0dHBzOicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHNvY2tldClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgc2VydmVybmFtZVxuICAgICAgICAgIGlmICh0aGlzW2tSZXF1ZXN0VGxzXSkge1xuICAgICAgICAgICAgc2VydmVybmFtZSA9IHRoaXNba1JlcXVlc3RUbHNdLnNlcnZlcm5hbWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VydmVybmFtZSA9IG9wdHMuc2VydmVybmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzW2tDb25uZWN0RW5kcG9pbnRdKHsgLi4ub3B0cywgc2VydmVybmFtZSwgaHR0cFNvY2tldDogc29ja2V0IH0sIGNhbGxiYWNrKVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09ICdFUlJfVExTX0NFUlRfQUxUTkFNRV9JTlZBTElEJykge1xuICAgICAgICAgICAgLy8gVGhyb3cgYSBjdXN0b20gZXJyb3IgdG8gYXZvaWQgbG9vcCBpbiBjbGllbnQuanMjY29ubmVjdFxuICAgICAgICAgICAgY2FsbGJhY2sobmV3IFNlY3VyZVByb3h5Q29ubmVjdGlvbkVycm9yKGVycikpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZGlzcGF0Y2ggKG9wdHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBoZWFkZXJzID0gYnVpbGRIZWFkZXJzKG9wdHMuaGVhZGVycylcbiAgICB0aHJvd0lmUHJveHlBdXRoSXNTZW50KGhlYWRlcnMpXG5cbiAgICBpZiAoaGVhZGVycyAmJiAhKCdob3N0JyBpbiBoZWFkZXJzKSAmJiAhKCdIb3N0JyBpbiBoZWFkZXJzKSkge1xuICAgICAgY29uc3QgeyBob3N0IH0gPSBuZXcgVVJMKG9wdHMub3JpZ2luKVxuICAgICAgaGVhZGVycy5ob3N0ID0gaG9zdFxuICAgIH1cblxuICAgIHJldHVybiB0aGlzW2tBZ2VudF0uZGlzcGF0Y2goXG4gICAgICB7XG4gICAgICAgIC4uLm9wdHMsXG4gICAgICAgIGhlYWRlcnNcbiAgICAgIH0sXG4gICAgICBoYW5kbGVyXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuLi90eXBlcy9wcm94eS1hZ2VudCcpLlByb3h5QWdlbnQuT3B0aW9ucyB8IHN0cmluZyB8IFVSTH0gb3B0c1xuICAgKiBAcmV0dXJucyB7VVJMfVxuICAgKi9cbiAgI2dldFVybCAob3B0cykge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBuZXcgVVJMKG9wdHMpXG4gICAgfSBlbHNlIGlmIChvcHRzIGluc3RhbmNlb2YgVVJMKSB7XG4gICAgICByZXR1cm4gb3B0c1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFVSTChvcHRzLnVyaSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBba0Nsb3NlXSAoKSB7XG4gICAgYXdhaXQgdGhpc1trQWdlbnRdLmNsb3NlKClcbiAgICBhd2FpdCB0aGlzW2tDbGllbnRdLmNsb3NlKClcbiAgfVxuXG4gIGFzeW5jIFtrRGVzdHJveV0gKCkge1xuICAgIGF3YWl0IHRoaXNba0FnZW50XS5kZXN0cm95KClcbiAgICBhd2FpdCB0aGlzW2tDbGllbnRdLmRlc3Ryb3koKVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXSB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz59IGhlYWRlcnNcbiAqIEByZXR1cm5zIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5mdW5jdGlvbiBidWlsZEhlYWRlcnMgKGhlYWRlcnMpIHtcbiAgLy8gV2hlbiB1c2luZyB1bmRpY2kuZmV0Y2gsIHRoZSBoZWFkZXJzIGxpc3QgaXMgc3RvcmVkXG4gIC8vIGFzIGFuIGFycmF5LlxuICBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgc3RyaW5nPn0gKi9cbiAgICBjb25zdCBoZWFkZXJzUGFpciA9IHt9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlYWRlcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIGhlYWRlcnNQYWlyW2hlYWRlcnNbaV1dID0gaGVhZGVyc1tpICsgMV1cbiAgICB9XG5cbiAgICByZXR1cm4gaGVhZGVyc1BhaXJcbiAgfVxuXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fSBoZWFkZXJzXG4gKlxuICogUHJldmlvdXMgdmVyc2lvbnMgb2YgUHJveHlBZ2VudCBzdWdnZXN0cyB0aGUgUHJveHktQXV0aG9yaXphdGlvbiBpbiByZXF1ZXN0IGhlYWRlcnNcbiAqIE5ldmVydGhlbGVzcywgaXQgd2FzIGNoYW5nZWQgYW5kIHRvIGF2b2lkIGEgc2VjdXJpdHkgdnVsbmVyYWJpbGl0eSBieSBlbmQgdXNlcnNcbiAqIHRoaXMgY2hlY2sgd2FzIGNyZWF0ZWQuXG4gKiBJdCBzaG91bGQgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZQcm94eUF1dGhJc1NlbnQgKGhlYWRlcnMpIHtcbiAgY29uc3QgZXhpc3RQcm94eUF1dGggPSBoZWFkZXJzICYmIE9iamVjdC5rZXlzKGhlYWRlcnMpXG4gICAgLmZpbmQoKGtleSkgPT4ga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdwcm94eS1hdXRob3JpemF0aW9uJylcbiAgaWYgKGV4aXN0UHJveHlBdXRoKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdQcm94eS1BdXRob3JpemF0aW9uIHNob3VsZCBiZSBzZW50IGluIFByb3h5QWdlbnQgY29uc3RydWN0b3InKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJveHlBZ2VudFxuIl0sIm5hbWVzIjpbIl9jbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYyIsImUiLCJhIiwiX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24iLCJhZGQiLCJ0IiwiaGFzIiwiVHlwZUVycm9yIiwiX2Fzc2VydENsYXNzQnJhbmQiLCJuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwia1Byb3h5Iiwia0Nsb3NlIiwia0Rlc3Ryb3kiLCJrSW50ZXJjZXB0b3JzIiwicmVxdWlyZSIsIlVSTCIsIkFnZW50IiwiUG9vbCIsIkRpc3BhdGNoZXJCYXNlIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJSZXF1ZXN0QWJvcnRlZEVycm9yIiwiU2VjdXJlUHJveHlDb25uZWN0aW9uRXJyb3IiLCJidWlsZENvbm5lY3RvciIsImtBZ2VudCIsIlN5bWJvbCIsImtDbGllbnQiLCJrUHJveHlIZWFkZXJzIiwia1JlcXVlc3RUbHMiLCJrUHJveHlUbHMiLCJrQ29ubmVjdEVuZHBvaW50IiwiZGVmYXVsdFByb3RvY29sUG9ydCIsInByb3RvY29sIiwiZGVmYXVsdEZhY3RvcnkiLCJvcmlnaW4iLCJvcHRzIiwiX1Byb3h5QWdlbnRfYnJhbmQiLCJXZWFrU2V0IiwiUHJveHlBZ2VudCIsImNvbnN0cnVjdG9yIiwidXJpIiwiY2xpZW50RmFjdG9yeSIsInVybCIsIl9nZXRVcmwiLCJjYWxsIiwiaHJlZiIsInBvcnQiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiaG9zdG5hbWUiLCJwcm94eUhvc3RuYW1lIiwiaW50ZXJjZXB0b3JzIiwiQXJyYXkiLCJpc0FycmF5IiwicmVxdWVzdFRscyIsInByb3h5VGxzIiwiaGVhZGVycyIsImF1dGgiLCJ0b2tlbiIsIkJ1ZmZlciIsImZyb20iLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0b1N0cmluZyIsImNvbm5lY3QiLCJjYWxsYmFjayIsInJlcXVlc3RlZFBhdGgiLCJob3N0Iiwic29ja2V0Iiwic3RhdHVzQ29kZSIsInBhdGgiLCJzaWduYWwiLCJzZXJ2ZXJuYW1lIiwib24iLCJkZXN0cm95IiwiaHR0cFNvY2tldCIsImVyciIsImNvZGUiLCJkaXNwYXRjaCIsImhhbmRsZXIiLCJidWlsZEhlYWRlcnMiLCJ0aHJvd0lmUHJveHlBdXRoSXNTZW50IiwiY2xvc2UiLCJoZWFkZXJzUGFpciIsImkiLCJleGlzdFByb3h5QXV0aCIsIk9iamVjdCIsImtleXMiLCJmaW5kIiwia2V5IiwidG9Mb3dlckNhc2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/proxy-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher/retry-agent.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher/retry-agent.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst Dispatcher = __webpack_require__(/*! ./dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\");\nconst RetryHandler = __webpack_require__(/*! ../handler/retry-handler */ \"(ssr)/./node_modules/undici/lib/handler/retry-handler.js\");\nvar _agent = /*#__PURE__*/new WeakMap();\nvar _options = /*#__PURE__*/new WeakMap();\nclass RetryAgent extends Dispatcher {\n  constructor(agent) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(options);\n    _classPrivateFieldInitSpec(this, _agent, null);\n    _classPrivateFieldInitSpec(this, _options, null);\n    _classPrivateFieldSet(_agent, this, agent);\n    _classPrivateFieldSet(_options, this, options);\n  }\n  dispatch(opts, handler) {\n    const retry = new RetryHandler({\n      ...opts,\n      retryOptions: _classPrivateFieldGet(_options, this)\n    }, {\n      dispatch: _classPrivateFieldGet(_agent, this).dispatch.bind(_classPrivateFieldGet(_agent, this)),\n      handler\n    });\n    return _classPrivateFieldGet(_agent, this).dispatch(opts, retry);\n  }\n  close() {\n    return _classPrivateFieldGet(_agent, this).close();\n  }\n  destroy() {\n    return _classPrivateFieldGet(_agent, this).destroy();\n  }\n}\nmodule.exports = RetryAgent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyL3JldHJ5LWFnZW50LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUFBLFNBQUFBLDJCQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxJQUFBQywwQkFBQSxDQUFBSCxDQUFBLEVBQUFDLENBQUEsR0FBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFKLENBQUEsRUFBQUUsQ0FBQTtBQUFBLFNBQUFDLDJCQUFBSCxDQUFBLEVBQUFDLENBQUEsUUFBQUEsQ0FBQSxDQUFBSSxHQUFBLENBQUFMLENBQUEsYUFBQU0sU0FBQTtBQUFBLFNBQUFDLHNCQUFBQyxDQUFBLEVBQUFOLENBQUEsV0FBQU0sQ0FBQSxDQUFBQyxHQUFBLENBQUFDLGlCQUFBLENBQUFGLENBQUEsRUFBQU4sQ0FBQTtBQUFBLFNBQUFTLHNCQUFBSCxDQUFBLEVBQUFOLENBQUEsRUFBQVUsQ0FBQSxXQUFBSixDQUFBLENBQUFKLEdBQUEsQ0FBQU0saUJBQUEsQ0FBQUYsQ0FBQSxFQUFBTixDQUFBLEdBQUFVLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFGLGtCQUFBVixDQUFBLEVBQUFDLENBQUEsRUFBQVksQ0FBQSw2QkFBQWIsQ0FBQSxHQUFBQSxDQUFBLEtBQUFDLENBQUEsR0FBQUQsQ0FBQSxDQUFBSyxHQUFBLENBQUFKLENBQUEsVUFBQWEsU0FBQSxDQUFBQyxNQUFBLE9BQUFkLENBQUEsR0FBQVksQ0FBQSxZQUFBUCxTQUFBO0FBRVosTUFBTVUsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLDhFQUFjLENBQUM7QUFDMUMsTUFBTUMsWUFBWSxHQUFHRCxtQkFBTyxDQUFDLDBGQUEwQixDQUFDO0FBQUEsSUFBQUUsTUFBQSxvQkFBQUMsT0FBQTtBQUFBLElBQUFDLFFBQUEsb0JBQUFELE9BQUE7QUFFeEQsTUFBTUUsVUFBVSxTQUFTTixVQUFVLENBQUM7RUFHbENPLFdBQVdBLENBQUVDLEtBQUssRUFBZ0I7SUFBQSxJQUFkQyxPQUFPLEdBQUFYLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFZLFNBQUEsR0FBQVosU0FBQSxNQUFHLENBQUMsQ0FBQztJQUM5QixLQUFLLENBQUNXLE9BQU8sQ0FBQztJQUhoQjFCLDBCQUFBLE9BQUFvQixNQUFNLEVBQUcsSUFBSTtJQUNicEIsMEJBQUEsT0FBQXNCLFFBQVEsRUFBRyxJQUFJO0lBR2JWLHFCQUFBLENBQUtRLE1BQU0sRUFBWCxJQUFJLEVBQVVLLEtBQUosQ0FBQztJQUNYYixxQkFBQSxDQUFLVSxRQUFRLEVBQWIsSUFBSSxFQUFZSSxPQUFKLENBQUM7RUFDZjtFQUVBRSxRQUFRQSxDQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUN2QixNQUFNQyxLQUFLLEdBQUcsSUFBSVosWUFBWSxDQUFDO01BQzdCLEdBQUdVLElBQUk7TUFDUEcsWUFBWSxFQUFFeEIscUJBQUEsQ0FBS2MsUUFBUSxFQUFiLElBQVk7SUFDNUIsQ0FBQyxFQUFFO01BQ0RNLFFBQVEsRUFBRXBCLHFCQUFBLENBQUtZLE1BQU0sRUFBWCxJQUFVLENBQUMsQ0FBQ1EsUUFBUSxDQUFDSyxJQUFJLENBQUN6QixxQkFBQSxDQUFLWSxNQUFNLEVBQVgsSUFBVSxDQUFDLENBQUM7TUFDaERVO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsT0FBT3RCLHFCQUFBLENBQUtZLE1BQU0sRUFBWCxJQUFVLENBQUMsQ0FBQ1EsUUFBUSxDQUFDQyxJQUFJLEVBQUVFLEtBQUssQ0FBQztFQUMxQztFQUVBRyxLQUFLQSxDQUFBLEVBQUk7SUFDUCxPQUFPMUIscUJBQUEsQ0FBS1ksTUFBTSxFQUFYLElBQVUsQ0FBQyxDQUFDYyxLQUFLLENBQUMsQ0FBQztFQUM1QjtFQUVBQyxPQUFPQSxDQUFBLEVBQUk7SUFDVCxPQUFPM0IscUJBQUEsQ0FBS1ksTUFBTSxFQUFYLElBQVUsQ0FBQyxDQUFDZSxPQUFPLENBQUMsQ0FBQztFQUM5QjtBQUNGO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHZCxVQUFVIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvZGlzcGF0Y2hlci9yZXRyeS1hZ2VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hlcicpXG5jb25zdCBSZXRyeUhhbmRsZXIgPSByZXF1aXJlKCcuLi9oYW5kbGVyL3JldHJ5LWhhbmRsZXInKVxuXG5jbGFzcyBSZXRyeUFnZW50IGV4dGVuZHMgRGlzcGF0Y2hlciB7XG4gICNhZ2VudCA9IG51bGxcbiAgI29wdGlvbnMgPSBudWxsXG4gIGNvbnN0cnVjdG9yIChhZ2VudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIob3B0aW9ucylcbiAgICB0aGlzLiNhZ2VudCA9IGFnZW50XG4gICAgdGhpcy4jb3B0aW9ucyA9IG9wdGlvbnNcbiAgfVxuXG4gIGRpc3BhdGNoIChvcHRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3QgcmV0cnkgPSBuZXcgUmV0cnlIYW5kbGVyKHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICByZXRyeU9wdGlvbnM6IHRoaXMuI29wdGlvbnNcbiAgICB9LCB7XG4gICAgICBkaXNwYXRjaDogdGhpcy4jYWdlbnQuZGlzcGF0Y2guYmluZCh0aGlzLiNhZ2VudCksXG4gICAgICBoYW5kbGVyXG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy4jYWdlbnQuZGlzcGF0Y2gob3B0cywgcmV0cnkpXG4gIH1cblxuICBjbG9zZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2FnZW50LmNsb3NlKClcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHJldHVybiB0aGlzLiNhZ2VudC5kZXN0cm95KClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJldHJ5QWdlbnRcbiJdLCJuYW1lcyI6WyJfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyIsImUiLCJ0IiwiYSIsIl9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uIiwic2V0IiwiaGFzIiwiVHlwZUVycm9yIiwiX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwicyIsImdldCIsIl9hc3NlcnRDbGFzc0JyYW5kIiwiX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiciIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJEaXNwYXRjaGVyIiwicmVxdWlyZSIsIlJldHJ5SGFuZGxlciIsIl9hZ2VudCIsIldlYWtNYXAiLCJfb3B0aW9ucyIsIlJldHJ5QWdlbnQiLCJjb25zdHJ1Y3RvciIsImFnZW50Iiwib3B0aW9ucyIsInVuZGVmaW5lZCIsImRpc3BhdGNoIiwib3B0cyIsImhhbmRsZXIiLCJyZXRyeSIsInJldHJ5T3B0aW9ucyIsImJpbmQiLCJjbG9zZSIsImRlc3Ryb3kiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher/retry-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/global.js":
/*!*******************************************!*\
  !*** ./node_modules/undici/lib/global.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// We include a version number for the Dispatcher API. In case of breaking changes,\n// this version number must be increased to avoid conflicts.\nconst globalDispatcher = Symbol.for('undici.globalDispatcher.1');\nconst {\n  InvalidArgumentError\n} = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst Agent = __webpack_require__(/*! ./dispatcher/agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nif (getGlobalDispatcher() === undefined) {\n  setGlobalDispatcher(new Agent());\n}\nfunction setGlobalDispatcher(agent) {\n  if (!agent || typeof agent.dispatch !== 'function') {\n    throw new InvalidArgumentError('Argument agent must implement Agent');\n  }\n  Object.defineProperty(globalThis, globalDispatcher, {\n    value: agent,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  });\n}\nfunction getGlobalDispatcher() {\n  return globalThis[globalDispatcher];\n}\nmodule.exports = {\n  setGlobalDispatcher,\n  getGlobalDispatcher\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9nbG9iYWwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBLE1BQU1BLGdCQUFnQixHQUFHQyxNQUFNLENBQUNDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQztBQUNoRSxNQUFNO0VBQUVDO0FBQXFCLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxxRUFBZSxDQUFDO0FBQ3pELE1BQU1DLEtBQUssR0FBR0QsbUJBQU8sQ0FBQywrRUFBb0IsQ0FBQztBQUUzQyxJQUFJRSxtQkFBbUIsQ0FBQyxDQUFDLEtBQUtDLFNBQVMsRUFBRTtFQUN2Q0MsbUJBQW1CLENBQUMsSUFBSUgsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQztBQUVBLFNBQVNHLG1CQUFtQkEsQ0FBRUMsS0FBSyxFQUFFO0VBQ25DLElBQUksQ0FBQ0EsS0FBSyxJQUFJLE9BQU9BLEtBQUssQ0FBQ0MsUUFBUSxLQUFLLFVBQVUsRUFBRTtJQUNsRCxNQUFNLElBQUlQLG9CQUFvQixDQUFDLHFDQUFxQyxDQUFDO0VBQ3ZFO0VBQ0FRLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxVQUFVLEVBQUViLGdCQUFnQixFQUFFO0lBQ2xEYyxLQUFLLEVBQUVMLEtBQUs7SUFDWk0sUUFBUSxFQUFFLElBQUk7SUFDZEMsVUFBVSxFQUFFLEtBQUs7SUFDakJDLFlBQVksRUFBRTtFQUNoQixDQUFDLENBQUM7QUFDSjtBQUVBLFNBQVNYLG1CQUFtQkEsQ0FBQSxFQUFJO0VBQzlCLE9BQU9PLFVBQVUsQ0FBQ2IsZ0JBQWdCLENBQUM7QUFDckM7QUFFQWtCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZYLG1CQUFtQjtFQUNuQkY7QUFDRixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvZ2xvYmFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vLyBXZSBpbmNsdWRlIGEgdmVyc2lvbiBudW1iZXIgZm9yIHRoZSBEaXNwYXRjaGVyIEFQSS4gSW4gY2FzZSBvZiBicmVha2luZyBjaGFuZ2VzLFxuLy8gdGhpcyB2ZXJzaW9uIG51bWJlciBtdXN0IGJlIGluY3JlYXNlZCB0byBhdm9pZCBjb25mbGljdHMuXG5jb25zdCBnbG9iYWxEaXNwYXRjaGVyID0gU3ltYm9sLmZvcigndW5kaWNpLmdsb2JhbERpc3BhdGNoZXIuMScpXG5jb25zdCB7IEludmFsaWRBcmd1bWVudEVycm9yIH0gPSByZXF1aXJlKCcuL2NvcmUvZXJyb3JzJylcbmNvbnN0IEFnZW50ID0gcmVxdWlyZSgnLi9kaXNwYXRjaGVyL2FnZW50JylcblxuaWYgKGdldEdsb2JhbERpc3BhdGNoZXIoKSA9PT0gdW5kZWZpbmVkKSB7XG4gIHNldEdsb2JhbERpc3BhdGNoZXIobmV3IEFnZW50KCkpXG59XG5cbmZ1bmN0aW9uIHNldEdsb2JhbERpc3BhdGNoZXIgKGFnZW50KSB7XG4gIGlmICghYWdlbnQgfHwgdHlwZW9mIGFnZW50LmRpc3BhdGNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdBcmd1bWVudCBhZ2VudCBtdXN0IGltcGxlbWVudCBBZ2VudCcpXG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbFRoaXMsIGdsb2JhbERpc3BhdGNoZXIsIHtcbiAgICB2YWx1ZTogYWdlbnQsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICB9KVxufVxuXG5mdW5jdGlvbiBnZXRHbG9iYWxEaXNwYXRjaGVyICgpIHtcbiAgcmV0dXJuIGdsb2JhbFRoaXNbZ2xvYmFsRGlzcGF0Y2hlcl1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldEdsb2JhbERpc3BhdGNoZXIsXG4gIGdldEdsb2JhbERpc3BhdGNoZXJcbn1cbiJdLCJuYW1lcyI6WyJnbG9iYWxEaXNwYXRjaGVyIiwiU3ltYm9sIiwiZm9yIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJyZXF1aXJlIiwiQWdlbnQiLCJnZXRHbG9iYWxEaXNwYXRjaGVyIiwidW5kZWZpbmVkIiwic2V0R2xvYmFsRGlzcGF0Y2hlciIsImFnZW50IiwiZGlzcGF0Y2giLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdsb2JhbFRoaXMiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/handler/decorator-handler.js":
/*!**************************************************************!*\
  !*** ./node_modules/undici/lib/handler/decorator-handler.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar _handler;\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nmodule.exports = (_handler = /*#__PURE__*/new WeakMap(), class DecoratorHandler {\n  constructor(handler) {\n    _classPrivateFieldInitSpec(this, _handler, void 0);\n    if (typeof handler !== 'object' || handler === null) {\n      throw new TypeError('handler must be an object');\n    }\n    _classPrivateFieldSet(_handler, this, handler);\n  }\n  onConnect() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _classPrivateFieldGet(_handler, this).onConnect?.(...args);\n  }\n  onError() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return _classPrivateFieldGet(_handler, this).onError?.(...args);\n  }\n  onUpgrade() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return _classPrivateFieldGet(_handler, this).onUpgrade?.(...args);\n  }\n  onResponseStarted() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return _classPrivateFieldGet(_handler, this).onResponseStarted?.(...args);\n  }\n  onHeaders() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    return _classPrivateFieldGet(_handler, this).onHeaders?.(...args);\n  }\n  onData() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    return _classPrivateFieldGet(_handler, this).onData?.(...args);\n  }\n  onComplete() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    return _classPrivateFieldGet(_handler, this).onComplete?.(...args);\n  }\n  onBodySent() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    return _classPrivateFieldGet(_handler, this).onBodySent?.(...args);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9oYW5kbGVyL2RlY29yYXRvci1oYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUFBLElBQUFBLFFBQUE7QUFBQSxTQUFBQywyQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsSUFBQUMsMEJBQUEsQ0FBQUgsQ0FBQSxFQUFBQyxDQUFBLEdBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBSixDQUFBLEVBQUFFLENBQUE7QUFBQSxTQUFBQywyQkFBQUgsQ0FBQSxFQUFBQyxDQUFBLFFBQUFBLENBQUEsQ0FBQUksR0FBQSxDQUFBTCxDQUFBLGFBQUFNLFNBQUE7QUFBQSxTQUFBQyxzQkFBQUMsQ0FBQSxFQUFBTixDQUFBLFdBQUFNLENBQUEsQ0FBQUMsR0FBQSxDQUFBQyxpQkFBQSxDQUFBRixDQUFBLEVBQUFOLENBQUE7QUFBQSxTQUFBUyxzQkFBQUgsQ0FBQSxFQUFBTixDQUFBLEVBQUFVLENBQUEsV0FBQUosQ0FBQSxDQUFBSixHQUFBLENBQUFNLGlCQUFBLENBQUFGLENBQUEsRUFBQU4sQ0FBQSxHQUFBVSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBRixrQkFBQVYsQ0FBQSxFQUFBQyxDQUFBLEVBQUFZLENBQUEsNkJBQUFiLENBQUEsR0FBQUEsQ0FBQSxLQUFBQyxDQUFBLEdBQUFELENBQUEsQ0FBQUssR0FBQSxDQUFBSixDQUFBLFVBQUFhLFNBQUEsQ0FBQUMsTUFBQSxPQUFBZCxDQUFBLEdBQUFZLENBQUEsWUFBQVAsU0FBQTtBQUVaVSxNQUFNLENBQUNDLE9BQU8sSUFBQW5CLFFBQUEsb0JBQUFvQixPQUFBLElBQUcsTUFBTUMsZ0JBQWdCLENBQUM7RUFHdENDLFdBQVdBLENBQUVDLE9BQU8sRUFBRTtJQUZ0QnRCLDBCQUFBLE9BQUFELFFBQVE7SUFHTixJQUFJLE9BQU91QixPQUFPLEtBQUssUUFBUSxJQUFJQSxPQUFPLEtBQUssSUFBSSxFQUFFO01BQ25ELE1BQU0sSUFBSWYsU0FB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Q0FBQWtCLEtBQUEsR0FBQUMsS0FBQSxNQUFBQSxLQUFBLEdBQUFELEtBQUEsRUFBQUMsS0FBQTtNQUFKcEIsSUFBSSxDQUFBb0IsS0FBQSxJQUFBOUIsU0FBQSxDQUFBOEIsS0FBQTtJQUFBO0lBQ2pCLE9BQU9yQyxxQkFBQSxDQUFLVCxRQUFRLEVBQWIsSUFBWSxDQUFDLENBQUM0QyxVQUFVLEdBQUcsR0FBR2xCLElBQUksQ0FBQztFQUM1QztFQUVBcUIsVUFBVUEsQ0FBQSxFQUFXO0lBQUEsU0FBQUMsS0FBQSxHQUFBaEMsU0FBQSxDQUFBQyxNQUFBLEVBQU5TLElBQUksT0FBQUMsS0FBQSxDQUFBcUIsS0FBQSxHQUFBQyxLQUFBLE1BQUFBLEtBQUEsR0FBQUQsS0FBQSxFQUFBQyxLQUFBO01BQUp2QixJQUFJLENBQUF1QixLQUFBLElBQUFqQyxTQUFBLENBQUFpQyxLQUFBO0lBQUE7SUFDakIsT0FBT3hDLHFCQUFBLENBQUtULFFBQVEsRUFBYixJQUFZLENBQUMsQ0FBQytDLFVBQVUsR0FBRyxHQUFHckIsSUFBSSxDQUFDO0VBQzVDO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2hhbmRsZXIvZGVjb3JhdG9yLWhhbmRsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRGVjb3JhdG9ySGFuZGxlciB7XG4gICNoYW5kbGVyXG5cbiAgY29uc3RydWN0b3IgKGhhbmRsZXIpIHtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdvYmplY3QnIHx8IGhhbmRsZXIgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2hhbmRsZXIgbXVzdCBiZSBhbiBvYmplY3QnKVxuICAgIH1cbiAgICB0aGlzLiNoYW5kbGVyID0gaGFuZGxlclxuICB9XG5cbiAgb25Db25uZWN0ICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuI2hhbmRsZXIub25Db25uZWN0Py4oLi4uYXJncylcbiAgfVxuXG4gIG9uRXJyb3IgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4jaGFuZGxlci5vbkVycm9yPy4oLi4uYXJncylcbiAgfVxuXG4gIG9uVXBncmFkZSAoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLiNoYW5kbGVyLm9uVXBncmFkZT8uKC4uLmFyZ3MpXG4gIH1cblxuICBvblJlc3BvbnNlU3RhcnRlZCAoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLiNoYW5kbGVyLm9uUmVzcG9uc2VTdGFydGVkPy4oLi4uYXJncylcbiAgfVxuXG4gIG9uSGVhZGVycyAoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLiNoYW5kbGVyLm9uSGVhZGVycz8uKC4uLmFyZ3MpXG4gIH1cblxuICBvbkRhdGEgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy4jaGFuZGxlci5vbkRhdGE/LiguLi5hcmdzKVxuICB9XG5cbiAgb25Db21wbGV0ZSAoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLiNoYW5kbGVyLm9uQ29tcGxldGU/LiguLi5hcmdzKVxuICB9XG5cbiAgb25Cb2R5U2VudCAoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLiNoYW5kbGVyLm9uQm9keVNlbnQ/LiguLi5hcmdzKVxuICB9XG59XG4iXSwibmFtZXMiOlsiX2hhbmRsZXIiLCJfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyIsImUiLCJ0IiwiYSIsIl9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uIiwic2V0IiwiaGFzIiwiVHlwZUVycm9yIiwiX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwicyIsImdldCIsIl9hc3NlcnRDbGFzc0JyYW5kIiwiX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiciIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIiwiV2Vha01hcCIsIkRlY29yYXRvckhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXIiLCJvbkNvbm5lY3QiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIm9uRXJyb3IiLCJfbGVuMiIsIl9rZXkyIiwib25VcGdyYWRlIiwiX2xlbjMiLCJfa2V5MyIsIm9uUmVzcG9uc2VTdGFydGVkIiwiX2xlbjQiLCJfa2V5NCIsIm9uSGVhZGVycyIsIl9sZW41IiwiX2tleTUiLCJvbkRhdGEiLCJfbGVuNiIsIl9rZXk2Iiwib25Db21wbGV0ZSIsIl9sZW43IiwiX2tleTciLCJvbkJvZHlTZW50IiwiX2xlbjgiLCJfa2V5OCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/handler/decorator-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/handler/redirect-handler.js":
/*!*************************************************************!*\
  !*** ./node_modules/undici/lib/handler/redirect-handler.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  kBodyUsed\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  InvalidArgumentError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst EE = __webpack_require__(/*! node:events */ \"node:events\");\nconst redirectableStatusCodes = [300, 301, 302, 303, 307, 308];\nconst kBody = Symbol('body');\nclass BodyAsyncIterable {\n  constructor(body) {\n    this[kBody] = body;\n    this[kBodyUsed] = false;\n  }\n  async *[Symbol.asyncIterator]() {\n    assert(!this[kBodyUsed], 'disturbed');\n    this[kBodyUsed] = true;\n    yield* this[kBody];\n  }\n}\nclass RedirectHandler {\n  constructor(dispatch, maxRedirections, opts, handler) {\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number');\n    }\n    util.validateHandler(handler, opts.method, opts.upgrade);\n    this.dispatch = dispatch;\n    this.location = null;\n    this.abort = null;\n    this.opts = {\n      ...opts,\n      maxRedirections: 0\n    }; // opts must be a copy\n    this.maxRedirections = maxRedirections;\n    this.handler = handler;\n    this.history = [];\n    this.redirectionLimitReached = false;\n    if (util.isStream(this.opts.body)) {\n      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n      // so that it can be dispatched again?\n      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n      if (util.bodyLength(this.opts.body) === 0) {\n        this.opts.body.on('data', function () {\n          assert(false);\n        });\n      }\n      if (typeof this.opts.body.readableDidRead !== 'boolean') {\n        this.opts.body[kBodyUsed] = false;\n        EE.prototype.on.call(this.opts.body, 'data', function () {\n          this[kBodyUsed] = true;\n        });\n      }\n    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {\n      // TODO (fix): We can't access ReadableStream internal state\n      // to determine whether or not it has been disturbed. This is just\n      // a workaround.\n      this.opts.body = new BodyAsyncIterable(this.opts.body);\n    } else if (this.opts.body && typeof this.opts.body !== 'string' && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {\n      // TODO: Should we allow re-using iterable if !this.opts.idempotent\n      // or through some other flag?\n      this.opts.body = new BodyAsyncIterable(this.opts.body);\n    }\n  }\n  onConnect(abort) {\n    this.abort = abort;\n    this.handler.onConnect(abort, {\n      history: this.history\n    });\n  }\n  onUpgrade(statusCode, headers, socket) {\n    this.handler.onUpgrade(statusCode, headers, socket);\n  }\n  onError(error) {\n    this.handler.onError(error);\n  }\n  onHeaders(statusCode, headers, resume, statusText) {\n    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);\n    if (this.opts.throwOnMaxRedirect && this.history.length >= this.maxRedirections) {\n      if (this.request) {\n        this.request.abort(new Error('max redirects'));\n      }\n      this.redirectionLimitReached = true;\n      this.abort(new Error('max redirects'));\n      return;\n    }\n    if (this.opts.origin) {\n      this.history.push(new URL(this.opts.path, this.opts.origin));\n    }\n    if (!this.location) {\n      return this.handler.onHeaders(statusCode, headers, resume, statusText);\n    }\n    const {\n      origin,\n      pathname,\n      search\n    } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));\n    const path = search ? `${pathname}${search}` : pathname;\n\n    // Remove headers referring to the original URL.\n    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.\n    // https://tools.ietf.org/html/rfc7231#section-6.4\n    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);\n    this.opts.path = path;\n    this.opts.origin = origin;\n    this.opts.maxRedirections = 0;\n    this.opts.query = null;\n\n    // https://tools.ietf.org/html/rfc7231#section-6.4.4\n    // In case of HTTP 303, always replace method to be either HEAD or GET\n    if (statusCode === 303 && this.opts.method !== 'HEAD') {\n      this.opts.method = 'GET';\n      this.opts.body = null;\n    }\n  }\n  onData(chunk) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n         TLDR: undici always ignores 3xx response bodies.\n         Redirection is used to serve the requested resource from another URL, so it is assumes that\n        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.\n         For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually\n        (which means it's optional and not mandated) contain just an hyperlink to the value of\n        the Location response header, so the body can be ignored safely.\n         For status 300, which is \"Multiple Choices\", the spec mentions both generating a Location\n        response header AND a response body with the other possible location to follow.\n        Since the spec explicitly chooses not to specify a format for such body and leave it to\n        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.\n      */\n    } else {\n      return this.handler.onData(chunk);\n    }\n  }\n  onComplete(trailers) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n         TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections\n        and neither are useful if present.\n         See comment on onData method above for more detailed information.\n      */\n\n      this.location = null;\n      this.abort = null;\n      this.dispatch(this.opts, this);\n    } else {\n      this.handler.onComplete(trailers);\n    }\n  }\n  onBodySent(chunk) {\n    if (this.handler.onBodySent) {\n      this.handler.onBodySent(chunk);\n    }\n  }\n}\nfunction parseLocation(statusCode, headers) {\n  if (redirectableStatusCodes.indexOf(statusCode) === -1) {\n    return null;\n  }\n  for (let i = 0; i < headers.length; i += 2) {\n    if (headers[i].length === 8 && util.headerNameToString(headers[i]) === 'location') {\n      return headers[i + 1];\n    }\n  }\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4.4\nfunction shouldRemoveHeader(header, removeContent, unknownOrigin) {\n  if (header.length === 4) {\n    return util.headerNameToString(header) === 'host';\n  }\n  if (removeContent && util.headerNameToString(header).startsWith('content-')) {\n    return true;\n  }\n  if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {\n    const name = util.headerNameToString(header);\n    return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization';\n  }\n  return false;\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4\nfunction cleanRequestHeaders(headers, removeContent, unknownOrigin) {\n  const ret = [];\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {\n        ret.push(headers[i], headers[i + 1]);\n      }\n    }\n  } else if (headers && typeof headers === 'object') {\n    for (const key of Object.keys(headers)) {\n      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {\n        ret.push(key, headers[key]);\n      }\n    }\n  } else {\n    assert(headers == null, 'headers must be an object or an array');\n  }\n  return ret;\n}\nmodule.exports = RedirectHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/handler/redirect-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/handler/retry-handler.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/handler/retry-handler.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  kRetryHandlerDefaultRetry\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst {\n  RequestRetryError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  isDisturbed,\n  parseHeaders,\n  parseRangeHeader,\n  wrapRequestBody\n} = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nfunction calculateRetryAfterHeader(retryAfter) {\n  const current = Date.now();\n  return new Date(retryAfter).getTime() - current;\n}\nclass RetryHandler {\n  constructor(opts, handlers) {\n    const {\n      retryOptions,\n      ...dispatchOpts\n    } = opts;\n    const {\n      // Retry scoped\n      retry: retryFn,\n      maxRetries,\n      maxTimeout,\n      minTimeout,\n      timeoutFactor,\n      // Response scoped\n      methods,\n      errorCodes,\n      retryAfter,\n      statusCodes\n    } = retryOptions ?? {};\n    this.dispatch = handlers.dispatch;\n    this.handler = handlers.handler;\n    this.opts = {\n      ...dispatchOpts,\n      body: wrapRequestBody(opts.body)\n    };\n    this.abort = null;\n    this.aborted = false;\n    this.retryOpts = {\n      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],\n      retryAfter: retryAfter ?? true,\n      maxTimeout: maxTimeout ?? 30 * 1000,\n      // 30s,\n      minTimeout: minTimeout ?? 500,\n      // .5s\n      timeoutFactor: timeoutFactor ?? 2,\n      maxRetries: maxRetries ?? 5,\n      // What errors we should retry\n      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],\n      // Indicates which errors to retry\n      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],\n      // List of errors to retry\n      errorCodes: errorCodes ?? ['ECONNRESET', 'ECONNREFUSED', 'ENOTFOUND', 'ENETDOWN', 'ENETUNREACH', 'EHOSTDOWN', 'EHOSTUNREACH', 'EPIPE', 'UND_ERR_SOCKET']\n    };\n    this.retryCount = 0;\n    this.retryCountCheckpoint = 0;\n    this.start = 0;\n    this.end = null;\n    this.etag = null;\n    this.resume = null;\n\n    // Handle possible onConnect duplication\n    this.handler.onConnect(reason => {\n      this.aborted = true;\n      if (this.abort) {\n        this.abort(reason);\n      } else {\n        this.reason = reason;\n      }\n    });\n  }\n  onRequestSent() {\n    if (this.handler.onRequestSent) {\n      this.handler.onRequestSent();\n    }\n  }\n  onUpgrade(statusCode, headers, socket) {\n    if (this.handler.onUpgrade) {\n      this.handler.onUpgrade(statusCode, headers, socket);\n    }\n  }\n  onConnect(abort) {\n    if (this.aborted) {\n      abort(this.reason);\n    } else {\n      this.abort = abort;\n    }\n  }\n  onBodySent(chunk) {\n    if (this.handler.onBodySent) return this.handler.onBodySent(chunk);\n  }\n  static [kRetryHandlerDefaultRetry](err, _ref, cb) {\n    let {\n      state,\n      opts\n    } = _ref;\n    const {\n      statusCode,\n      code,\n      headers\n    } = err;\n    const {\n      method,\n      retryOptions\n    } = opts;\n    const {\n      maxRetries,\n      minTimeout,\n      maxTimeout,\n      timeoutFactor,\n      statusCodes,\n      errorCodes,\n      methods\n    } = retryOptions;\n    const {\n      counter\n    } = state;\n\n    // Any code that is not a Undici's originated and allowed to retry\n    if (code && code !== 'UND_ERR_REQ_RETRY' && !errorCodes.includes(code)) {\n      cb(err);\n      return;\n    }\n\n    // If a set of method are provided and the current method is not in the list\n    if (Array.isArray(methods) && !methods.includes(method)) {\n      cb(err);\n      return;\n    }\n\n    // If a set of status code are provided and the current status code is not in the list\n    if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {\n      cb(err);\n      return;\n    }\n\n    // If we reached the max number of retries\n    if (counter > maxRetries) {\n      cb(err);\n      return;\n    }\n    let retryAfterHeader = headers?.['retry-after'];\n    if (retryAfterHeader) {\n      retryAfterHeader = Number(retryAfterHeader);\n      retryAfterHeader = Number.isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3; // Retry-After is in seconds\n    }\n    const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(minTimeout * timeoutFactor ** (counter - 1), maxTimeout);\n    setTimeout(() => cb(null), retryTimeout);\n  }\n  onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n    const headers = parseHeaders(rawHeaders);\n    this.retryCount += 1;\n    if (statusCode >= 300) {\n      if (this.retryOpts.statusCodes.includes(statusCode) === false) {\n        return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);\n      } else {\n        this.abort(new RequestRetryError('Request failed', statusCode, {\n          headers,\n          data: {\n            count: this.retryCount\n          }\n        }));\n        return false;\n      }\n    }\n\n    // Checkpoint for resume from where we left it\n    if (this.resume != null) {\n      this.resume = null;\n      if (statusCode !== 206) {\n        return true;\n      }\n      const contentRange = parseRangeHeader(headers['content-range']);\n      // If no content range\n      if (!contentRange) {\n        this.abort(new RequestRetryError('Content-Range mismatch', statusCode, {\n          headers,\n          data: {\n            count: this.retryCount\n          }\n        }));\n        return false;\n      }\n\n      // Let's start with a weak etag check\n      if (this.etag != null && this.etag !== headers.etag) {\n        this.abort(new RequestRetryError('ETag mismatch', statusCode, {\n          headers,\n          data: {\n            count: this.retryCount\n          }\n        }));\n        return false;\n      }\n      const {\n        start,\n        size,\n        end = size\n      } = contentRange;\n      assert(this.start === start, 'content-range mismatch');\n      assert(this.end == null || this.end === end, 'content-range mismatch');\n      this.resume = resume;\n      return true;\n    }\n    if (this.end == null) {\n      if (statusCode === 206) {\n        // First time we receive 206\n        const range = parseRangeHeader(headers['content-range']);\n        if (range == null) {\n          return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);\n        }\n        const {\n          start,\n          size,\n          end = size\n        } = range;\n        assert(start != null && Number.isFinite(start), 'content-range mismatch');\n        assert(end != null && Number.isFinite(end), 'invalid content-length');\n        this.start = start;\n        this.end = end;\n      }\n\n      // We make our best to checkpoint the body for further range headers\n      if (this.end == null) {\n        const contentLength = headers['content-length'];\n        this.end = contentLength != null ? Number(contentLength) : null;\n      }\n      assert(Number.isFinite(this.start));\n      assert(this.end == null || Number.isFinite(this.end), 'invalid content-length');\n      this.resume = resume;\n      this.etag = headers.etag != null ? headers.etag : null;\n\n      // Weak etags are not useful for comparison nor cache\n      // for instance not safe to assume if the response is byte-per-byte\n      // equal\n      if (this.etag != null && this.etag.startsWith('W/')) {\n        this.etag = null;\n      }\n      return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);\n    }\n    const err = new RequestRetryError('Request failed', statusCode, {\n      headers,\n      data: {\n        count: this.retryCount\n      }\n    });\n    this.abort(err);\n    return false;\n  }\n  onData(chunk) {\n    this.start += chunk.length;\n    return this.handler.onData(chunk);\n  }\n  onComplete(rawTrailers) {\n    this.retryCount = 0;\n    return this.handler.onComplete(rawTrailers);\n  }\n  onError(err) {\n    if (this.aborted || isDisturbed(this.opts.body)) {\n      return this.handler.onError(err);\n    }\n\n    // We reconcile in case of a mix between network errors\n    // and server error response\n    if (this.retryCount - this.retryCountCheckpoint > 0) {\n      // We count the difference between the last checkpoint and the current retry count\n      this.retryCount = this.retryCountCheckpoint + (this.retryCount - this.retryCountCheckpoint);\n    } else {\n      this.retryCount += 1;\n    }\n    this.retryOpts.retry(err, {\n      state: {\n        counter: this.retryCount\n      },\n      opts: {\n        retryOptions: this.retryOpts,\n        ...this.opts\n      }\n    }, onRetry.bind(this));\n    function onRetry(err) {\n      if (err != null || this.aborted || isDisturbed(this.opts.body)) {\n        return this.handler.onError(err);\n      }\n      if (this.start !== 0) {\n        const headers = {\n          range: `bytes=${this.start}-${this.end ?? ''}`\n        };\n\n        // Weak etag check - weak etags will make comparison algorithms never match\n        if (this.etag != null) {\n          headers['if-match'] = this.etag;\n        }\n        this.opts = {\n          ...this.opts,\n          headers: {\n            ...this.opts.headers,\n            ...headers\n          }\n        };\n      }\n      try {\n        this.retryCountCheckpoint = this.retryCount;\n        this.dispatch(this.opts, this);\n      } catch (err) {\n        this.handler.onError(err);\n      }\n    }\n  }\n}\nmodule.exports = RetryHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/handler/retry-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/interceptor/dump.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/interceptor/dump.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  InvalidArgumentError,\n  RequestAbortedError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst DecoratorHandler = __webpack_require__(/*! ../handler/decorator-handler */ \"(ssr)/./node_modules/undici/lib/handler/decorator-handler.js\");\nvar _maxSize = /*#__PURE__*/new WeakMap();\nvar _abort = /*#__PURE__*/new WeakMap();\nvar _dumped = /*#__PURE__*/new WeakMap();\nvar _aborted = /*#__PURE__*/new WeakMap();\nvar _size = /*#__PURE__*/new WeakMap();\nvar _reason = /*#__PURE__*/new WeakMap();\nvar _handler = /*#__PURE__*/new WeakMap();\nvar _DumpHandler_brand = /*#__PURE__*/new WeakSet();\nclass DumpHandler extends DecoratorHandler {\n  constructor(_ref, handler) {\n    let {\n      maxSize\n    } = _ref;\n    super(handler);\n    _classPrivateMethodInitSpec(this, _DumpHandler_brand);\n    _classPrivateFieldInitSpec(this, _maxSize, 1024 * 1024);\n    _classPrivateFieldInitSpec(this, _abort, null);\n    _classPrivateFieldInitSpec(this, _dumped, false);\n    _classPrivateFieldInitSpec(this, _aborted, false);\n    _classPrivateFieldInitSpec(this, _size, 0);\n    _classPrivateFieldInitSpec(this, _reason, null);\n    _classPrivateFieldInitSpec(this, _handler, null);\n    if (maxSize != null && (!Number.isFinite(maxSize) || maxSize < 1)) {\n      throw new InvalidArgumentError('maxSize must be a number greater than 0');\n    }\n    _classPrivateFieldSet(_maxSize, this, maxSize ?? _classPrivateFieldGet(_maxSize, this));\n    _classPrivateFieldSet(_handler, this, handler);\n  }\n  onConnect(abort) {\n    _classPrivateFieldSet(_abort, this, abort);\n    _classPrivateFieldGet(_handler, this).onConnect(_assertClassBrand(_DumpHandler_brand, this, _customAbort).bind(this));\n  }\n  // TODO: will require adjustment after new hooks are out\n  onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n    const headers = util.parseHeaders(rawHeaders);\n    const contentLength = headers['content-length'];\n    if (contentLength != null && contentLength > _classPrivateFieldGet(_maxSize, this)) {\n      throw new RequestAbortedError(`Response size (${contentLength}) larger than maxSize (${_classPrivateFieldGet(_maxSize, this)})`);\n    }\n    if (_classPrivateFieldGet(_aborted, this)) {\n      return true;\n    }\n    return _classPrivateFieldGet(_handler, this).onHeaders(statusCode, rawHeaders, resume, statusMessage);\n  }\n  onError(err) {\n    if (_classPrivateFieldGet(_dumped, this)) {\n      return;\n    }\n    err = _classPrivateFieldGet(_reason, this) ?? err;\n    _classPrivateFieldGet(_handler, this).onError(err);\n  }\n  onData(chunk) {\n    _classPrivateFieldSet(_size, this, _classPrivateFieldGet(_size, this) + chunk.length);\n    if (_classPrivateFieldGet(_size, this) >= _classPrivateFieldGet(_maxSize, this)) {\n      _classPrivateFieldSet(_dumped, this, true);\n      if (_classPrivateFieldGet(_aborted, this)) {\n        _classPrivateFieldGet(_handler, this).onError(_classPrivateFieldGet(_reason, this));\n      } else {\n        _classPrivateFieldGet(_handler, this).onComplete([]);\n      }\n    }\n    return true;\n  }\n  onComplete(trailers) {\n    if (_classPrivateFieldGet(_dumped, this)) {\n      return;\n    }\n    if (_classPrivateFieldGet(_aborted, this)) {\n      _classPrivateFieldGet(_handler, this).onError(this.reason);\n      return;\n    }\n    _classPrivateFieldGet(_handler, this).onComplete(trailers);\n  }\n}\nfunction _customAbort(reason) {\n  _classPrivateFieldSet(_aborted, this, true);\n  _classPrivateFieldSet(_reason, this, reason);\n}\nfunction createDumpInterceptor() {\n  let {\n    maxSize: defaultMaxSize\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    maxSize: 1024 * 1024\n  };\n  return dispatch => {\n    return function Intercept(opts, handler) {\n      const {\n        dumpMaxSize = defaultMaxSize\n      } = opts;\n      const dumpHandler = new DumpHandler({\n        maxSize: dumpMaxSize\n      }, handler);\n      return dispatch(opts, dumpHandler);\n    };\n  };\n}\nmodule.exports = createDumpInterceptor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/interceptor/dump.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/undici/lib/interceptor/redirect-interceptor.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst RedirectHandler = __webpack_require__(/*! ../handler/redirect-handler */ \"(ssr)/./node_modules/undici/lib/handler/redirect-handler.js\");\nfunction createRedirectInterceptor(_ref) {\n  let {\n    maxRedirections: defaultMaxRedirections\n  } = _ref;\n  return dispatch => {\n    return function Intercept(opts, handler) {\n      const {\n        maxRedirections = defaultMaxRedirections\n      } = opts;\n      if (!maxRedirections) {\n        return dispatch(opts, handler);\n      }\n      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);\n      opts = {\n        ...opts,\n        maxRedirections: 0\n      }; // Stop sub dispatcher from also redirecting.\n      return dispatch(opts, redirectHandler);\n    };\n  };\n}\nmodule.exports = createRedirectInterceptor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9pbnRlcmNlcHRvci9yZWRpcmVjdC1pbnRlcmNlcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixNQUFNQSxlQUFlLEdBQUdDLG1CQUFPLENBQUMsZ0dBQTZCLENBQUM7QUFFOUQsU0FBU0MseUJBQXlCQSxDQUFBQyxJQUFBLEVBQStDO0VBQUEsSUFBN0M7SUFBRUMsZUFBZSxFQUFFQztFQUF1QixDQUFDLEdBQUFGLElBQUE7RUFDN0UsT0FBUUcsUUFBUSxJQUFLO0lBQ25CLE9BQU8sU0FBU0MsU0FBU0EsQ0FBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7TUFDeEMsTUFBTTtRQUFFTCxlQUFlLEdBQUdDO01BQXVCLENBQUMsR0FBR0csSUFBSTtNQUV6RCxJQUFJLENBQUNKLGVBQWUsRUFBRTtRQUNwQixPQUFPRSxRQUFRLENBQUNFLElBQUksRUFBRUMsT0FBTyxDQUFDO01BQ2hDO01BRUEsTUFBTUMsZUFBZSxHQUFHLElBQUlWLGVBQWUsQ0FBQ00sUUFBUSxFQUFFRixlQUFlLEVBQUVJLElBQUksRUFBRUMsT0FBTyxDQUFDO01BQ3JGRCxJQUFJLEdBQUc7UUFBRSxHQUFHQSxJQUFJO1FBQUVKLGVBQWUsRUFBRTtNQUFFLENBQUMsRUFBQztNQUN2QyxPQUFPRSxRQUFRLENBQUNFLElBQUksRUFBRUUsZUFBZSxDQUFDO0lBQ3hDLENBQUM7RUFDSCxDQUFDO0FBQ0g7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdWLHlCQUF5QiIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2ludGVyY2VwdG9yL3JlZGlyZWN0LWludGVyY2VwdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBSZWRpcmVjdEhhbmRsZXIgPSByZXF1aXJlKCcuLi9oYW5kbGVyL3JlZGlyZWN0LWhhbmRsZXInKVxuXG5mdW5jdGlvbiBjcmVhdGVSZWRpcmVjdEludGVyY2VwdG9yICh7IG1heFJlZGlyZWN0aW9uczogZGVmYXVsdE1heFJlZGlyZWN0aW9ucyB9KSB7XG4gIHJldHVybiAoZGlzcGF0Y2gpID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gSW50ZXJjZXB0IChvcHRzLCBoYW5kbGVyKSB7XG4gICAgICBjb25zdCB7IG1heFJlZGlyZWN0aW9ucyA9IGRlZmF1bHRNYXhSZWRpcmVjdGlvbnMgfSA9IG9wdHNcblxuICAgICAgaWYgKCFtYXhSZWRpcmVjdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKG9wdHMsIGhhbmRsZXIpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlZGlyZWN0SGFuZGxlciA9IG5ldyBSZWRpcmVjdEhhbmRsZXIoZGlzcGF0Y2gsIG1heFJlZGlyZWN0aW9ucywgb3B0cywgaGFuZGxlcilcbiAgICAgIG9wdHMgPSB7IC4uLm9wdHMsIG1heFJlZGlyZWN0aW9uczogMCB9IC8vIFN0b3Agc3ViIGRpc3BhdGNoZXIgZnJvbSBhbHNvIHJlZGlyZWN0aW5nLlxuICAgICAgcmV0dXJuIGRpc3BhdGNoKG9wdHMsIHJlZGlyZWN0SGFuZGxlcilcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVSZWRpcmVjdEludGVyY2VwdG9yXG4iXSwibmFtZXMiOlsiUmVkaXJlY3RIYW5kbGVyIiwicmVxdWlyZSIsImNyZWF0ZVJlZGlyZWN0SW50ZXJjZXB0b3IiLCJfcmVmIiwibWF4UmVkaXJlY3Rpb25zIiwiZGVmYXVsdE1heFJlZGlyZWN0aW9ucyIsImRpc3BhdGNoIiwiSW50ZXJjZXB0Iiwib3B0cyIsImhhbmRsZXIiLCJyZWRpcmVjdEhhbmRsZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/interceptor/redirect-interceptor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/interceptor/redirect.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/interceptor/redirect.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst RedirectHandler = __webpack_require__(/*! ../handler/redirect-handler */ \"(ssr)/./node_modules/undici/lib/handler/redirect-handler.js\");\nmodule.exports = opts => {\n  const globalMaxRedirections = opts?.maxRedirections;\n  return dispatch => {\n    return function redirectInterceptor(opts, handler) {\n      const {\n        maxRedirections = globalMaxRedirections,\n        ...baseOpts\n      } = opts;\n      if (!maxRedirections) {\n        return dispatch(opts, handler);\n      }\n      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);\n      return dispatch(baseOpts, redirectHandler);\n    };\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9pbnRlcmNlcHRvci9yZWRpcmVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixNQUFNQSxlQUFlLEdBQUdDLG1CQUFPLENBQUMsZ0dBQTZCLENBQUM7QUFFOURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxJQUFJLElBQUk7RUFDdkIsTUFBTUMscUJBQXFCLEdBQUdELElBQUksRUFBRUUsZUFBZTtFQUNuRCxPQUFPQyxRQUFRLElBQUk7SUFDakIsT0FBTyxTQUFTQyxtQkFBbUJBLENBQUVKLElBQUksRUFBRUssT0FBTyxFQUFFO01BQ2xELE1BQU07UUFBRUgsZUFBZSxHQUFHRCxxQkFBcUI7UUFBRSxHQUFHSztNQUFTLENBQUMsR0FBR04sSUFBSTtNQUVyRSxJQUFJLENBQUNFLGVBQWUsRUFBRTtRQUNwQixPQUFPQyxRQUFRLENBQUNILElBQUksRUFBRUssT0FBTyxDQUFDO01BQ2hDO01BRUEsTUFBTUUsZUFBZSxHQUFHLElBQUlYLGVBQWUsQ0FDekNPLFFBQVEsRUFDUkQsZUFBZSxFQUNmRixJQUFJLEVBQ0pLLE9BQ0YsQ0FBQztNQUVELE9BQU9GLFFBQVEsQ0FBQ0csUUFBUSxFQUFFQyxlQUFlLENBQUM7SUFDNUMsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvaW50ZXJjZXB0b3IvcmVkaXJlY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5jb25zdCBSZWRpcmVjdEhhbmRsZXIgPSByZXF1aXJlKCcuLi9oYW5kbGVyL3JlZGlyZWN0LWhhbmRsZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9wdHMgPT4ge1xuICBjb25zdCBnbG9iYWxNYXhSZWRpcmVjdGlvbnMgPSBvcHRzPy5tYXhSZWRpcmVjdGlvbnNcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVkaXJlY3RJbnRlcmNlcHRvciAob3B0cywgaGFuZGxlcikge1xuICAgICAgY29uc3QgeyBtYXhSZWRpcmVjdGlvbnMgPSBnbG9iYWxNYXhSZWRpcmVjdGlvbnMsIC4uLmJhc2VPcHRzIH0gPSBvcHRzXG5cbiAgICAgIGlmICghbWF4UmVkaXJlY3Rpb25zKSB7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaChvcHRzLCBoYW5kbGVyKVxuICAgICAgfVxuXG4gICAgICBjb25zdCByZWRpcmVjdEhhbmRsZXIgPSBuZXcgUmVkaXJlY3RIYW5kbGVyKFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgbWF4UmVkaXJlY3Rpb25zLFxuICAgICAgICBvcHRzLFxuICAgICAgICBoYW5kbGVyXG4gICAgICApXG5cbiAgICAgIHJldHVybiBkaXNwYXRjaChiYXNlT3B0cywgcmVkaXJlY3RIYW5kbGVyKVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIlJlZGlyZWN0SGFuZGxlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0cyIsImdsb2JhbE1heFJlZGlyZWN0aW9ucyIsIm1heFJlZGlyZWN0aW9ucyIsImRpc3BhdGNoIiwicmVkaXJlY3RJbnRlcmNlcHRvciIsImhhbmRsZXIiLCJiYXNlT3B0cyIsInJlZGlyZWN0SGFuZGxlciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/interceptor/redirect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/interceptor/retry.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/interceptor/retry.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst RetryHandler = __webpack_require__(/*! ../handler/retry-handler */ \"(ssr)/./node_modules/undici/lib/handler/retry-handler.js\");\nmodule.exports = globalOpts => {\n  return dispatch => {\n    return function retryInterceptor(opts, handler) {\n      return dispatch(opts, new RetryHandler({\n        ...opts,\n        retryOptions: {\n          ...globalOpts,\n          ...opts.retryOptions\n        }\n      }, {\n        handler,\n        dispatch\n      }));\n    };\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9pbnRlcmNlcHRvci9yZXRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWixNQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsMEZBQTBCLENBQUM7QUFFeERDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxVQUFVLElBQUk7RUFDN0IsT0FBT0MsUUFBUSxJQUFJO0lBQ2pCLE9BQU8sU0FBU0MsZ0JBQWdCQSxDQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtNQUMvQyxPQUFPSCxRQUFRLENBQ2JFLElBQUksRUFDSixJQUFJUCxZQUFZLENBQ2Q7UUFBRSxHQUFHTyxJQUFJO1FBQUVFLFlBQVksRUFBRTtVQUFFLEdBQUdMLFVBQVU7VUFBRSxHQUFHRyxJQUFJLENBQUNFO1FBQWE7TUFBRSxDQUFDLEVBQ2xFO1FBQ0VELE9BQU87UUFDUEg7TUFDRixDQUNGLENBQ0YsQ0FBQztJQUNILENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2ludGVyY2VwdG9yL3JldHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuY29uc3QgUmV0cnlIYW5kbGVyID0gcmVxdWlyZSgnLi4vaGFuZGxlci9yZXRyeS1oYW5kbGVyJylcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxPcHRzID0+IHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmV0cnlJbnRlcmNlcHRvciAob3B0cywgaGFuZGxlcikge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKFxuICAgICAgICBvcHRzLFxuICAgICAgICBuZXcgUmV0cnlIYW5kbGVyKFxuICAgICAgICAgIHsgLi4ub3B0cywgcmV0cnlPcHRpb25zOiB7IC4uLmdsb2JhbE9wdHMsIC4uLm9wdHMucmV0cnlPcHRpb25zIH0gfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgZGlzcGF0Y2hcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIClcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJSZXRyeUhhbmRsZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImdsb2JhbE9wdHMiLCJkaXNwYXRjaCIsInJldHJ5SW50ZXJjZXB0b3IiLCJvcHRzIiwiaGFuZGxlciIsInJldHJ5T3B0aW9ucyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/interceptor/retry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/constants.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/constants.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/undici/lib/llhttp/utils.js\");\n// C headers\nvar ERROR;\n(function (ERROR) {\n  ERROR[ERROR[\"OK\"] = 0] = \"OK\";\n  ERROR[ERROR[\"INTERNAL\"] = 1] = \"INTERNAL\";\n  ERROR[ERROR[\"STRICT\"] = 2] = \"STRICT\";\n  ERROR[ERROR[\"LF_EXPECTED\"] = 3] = \"LF_EXPECTED\";\n  ERROR[ERROR[\"UNEXPECTED_CONTENT_LENGTH\"] = 4] = \"UNEXPECTED_CONTENT_LENGTH\";\n  ERROR[ERROR[\"CLOSED_CONNECTION\"] = 5] = \"CLOSED_CONNECTION\";\n  ERROR[ERROR[\"INVALID_METHOD\"] = 6] = \"INVALID_METHOD\";\n  ERROR[ERROR[\"INVALID_URL\"] = 7] = \"INVALID_URL\";\n  ERROR[ERROR[\"INVALID_CONSTANT\"] = 8] = \"INVALID_CONSTANT\";\n  ERROR[ERROR[\"INVALID_VERSION\"] = 9] = \"INVALID_VERSION\";\n  ERROR[ERROR[\"INVALID_HEADER_TOKEN\"] = 10] = \"INVALID_HEADER_TOKEN\";\n  ERROR[ERROR[\"INVALID_CONTENT_LENGTH\"] = 11] = \"INVALID_CONTENT_LENGTH\";\n  ERROR[ERROR[\"INVALID_CHUNK_SIZE\"] = 12] = \"INVALID_CHUNK_SIZE\";\n  ERROR[ERROR[\"INVALID_STATUS\"] = 13] = \"INVALID_STATUS\";\n  ERROR[ERROR[\"INVALID_EOF_STATE\"] = 14] = \"INVALID_EOF_STATE\";\n  ERROR[ERROR[\"INVALID_TRANSFER_ENCODING\"] = 15] = \"INVALID_TRANSFER_ENCODING\";\n  ERROR[ERROR[\"CB_MESSAGE_BEGIN\"] = 16] = \"CB_MESSAGE_BEGIN\";\n  ERROR[ERROR[\"CB_HEADERS_COMPLETE\"] = 17] = \"CB_HEADERS_COMPLETE\";\n  ERROR[ERROR[\"CB_MESSAGE_COMPLETE\"] = 18] = \"CB_MESSAGE_COMPLETE\";\n  ERROR[ERROR[\"CB_CHUNK_HEADER\"] = 19] = \"CB_CHUNK_HEADER\";\n  ERROR[ERROR[\"CB_CHUNK_COMPLETE\"] = 20] = \"CB_CHUNK_COMPLETE\";\n  ERROR[ERROR[\"PAUSED\"] = 21] = \"PAUSED\";\n  ERROR[ERROR[\"PAUSED_UPGRADE\"] = 22] = \"PAUSED_UPGRADE\";\n  ERROR[ERROR[\"PAUSED_H2_UPGRADE\"] = 23] = \"PAUSED_H2_UPGRADE\";\n  ERROR[ERROR[\"USER\"] = 24] = \"USER\";\n})(ERROR = exports.ERROR || (exports.ERROR = {}));\nvar TYPE;\n(function (TYPE) {\n  TYPE[TYPE[\"BOTH\"] = 0] = \"BOTH\";\n  TYPE[TYPE[\"REQUEST\"] = 1] = \"REQUEST\";\n  TYPE[TYPE[\"RESPONSE\"] = 2] = \"RESPONSE\";\n})(TYPE = exports.TYPE || (exports.TYPE = {}));\nvar FLAGS;\n(function (FLAGS) {\n  FLAGS[FLAGS[\"CONNECTION_KEEP_ALIVE\"] = 1] = \"CONNECTION_KEEP_ALIVE\";\n  FLAGS[FLAGS[\"CONNECTION_CLOSE\"] = 2] = \"CONNECTION_CLOSE\";\n  FLAGS[FLAGS[\"CONNECTION_UPGRADE\"] = 4] = \"CONNECTION_UPGRADE\";\n  FLAGS[FLAGS[\"CHUNKED\"] = 8] = \"CHUNKED\";\n  FLAGS[FLAGS[\"UPGRADE\"] = 16] = \"UPGRADE\";\n  FLAGS[FLAGS[\"CONTENT_LENGTH\"] = 32] = \"CONTENT_LENGTH\";\n  FLAGS[FLAGS[\"SKIPBODY\"] = 64] = \"SKIPBODY\";\n  FLAGS[FLAGS[\"TRAILING\"] = 128] = \"TRAILING\";\n  // 1 << 8 is unused\n  FLAGS[FLAGS[\"TRANSFER_ENCODING\"] = 512] = \"TRANSFER_ENCODING\";\n})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));\nvar LENIENT_FLAGS;\n(function (LENIENT_FLAGS) {\n  LENIENT_FLAGS[LENIENT_FLAGS[\"HEADERS\"] = 1] = \"HEADERS\";\n  LENIENT_FLAGS[LENIENT_FLAGS[\"CHUNKED_LENGTH\"] = 2] = \"CHUNKED_LENGTH\";\n  LENIENT_FLAGS[LENIENT_FLAGS[\"KEEP_ALIVE\"] = 4] = \"KEEP_ALIVE\";\n})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));\nvar METHODS;\n(function (METHODS) {\n  METHODS[METHODS[\"DELETE\"] = 0] = \"DELETE\";\n  METHODS[METHODS[\"GET\"] = 1] = \"GET\";\n  METHODS[METHODS[\"HEAD\"] = 2] = \"HEAD\";\n  METHODS[METHODS[\"POST\"] = 3] = \"POST\";\n  METHODS[METHODS[\"PUT\"] = 4] = \"PUT\";\n  /* pathological */\n  METHODS[METHODS[\"CONNECT\"] = 5] = \"CONNECT\";\n  METHODS[METHODS[\"OPTIONS\"] = 6] = \"OPTIONS\";\n  METHODS[METHODS[\"TRACE\"] = 7] = \"TRACE\";\n  /* WebDAV */\n  METHODS[METHODS[\"COPY\"] = 8] = \"COPY\";\n  METHODS[METHODS[\"LOCK\"] = 9] = \"LOCK\";\n  METHODS[METHODS[\"MKCOL\"] = 10] = \"MKCOL\";\n  METHODS[METHODS[\"MOVE\"] = 11] = \"MOVE\";\n  METHODS[METHODS[\"PROPFIND\"] = 12] = \"PROPFIND\";\n  METHODS[METHODS[\"PROPPATCH\"] = 13] = \"PROPPATCH\";\n  METHODS[METHODS[\"SEARCH\"] = 14] = \"SEARCH\";\n  METHODS[METHODS[\"UNLOCK\"] = 15] = \"UNLOCK\";\n  METHODS[METHODS[\"BIND\"] = 16] = \"BIND\";\n  METHODS[METHODS[\"REBIND\"] = 17] = \"REBIND\";\n  METHODS[METHODS[\"UNBIND\"] = 18] = \"UNBIND\";\n  METHODS[METHODS[\"ACL\"] = 19] = \"ACL\";\n  /* subversion */\n  METHODS[METHODS[\"REPORT\"] = 20] = \"REPORT\";\n  METHODS[METHODS[\"MKACTIVITY\"] = 21] = \"MKACTIVITY\";\n  METHODS[METHODS[\"CHECKOUT\"] = 22] = \"CHECKOUT\";\n  METHODS[METHODS[\"MERGE\"] = 23] = \"MERGE\";\n  /* upnp */\n  METHODS[METHODS[\"M-SEARCH\"] = 24] = \"M-SEARCH\";\n  METHODS[METHODS[\"NOTIFY\"] = 25] = \"NOTIFY\";\n  METHODS[METHODS[\"SUBSCRIBE\"] = 26] = \"SUBSCRIBE\";\n  METHODS[METHODS[\"UNSUBSCRIBE\"] = 27] = \"UNSUBSCRIBE\";\n  /* RFC-5789 */\n  METHODS[METHODS[\"PATCH\"] = 28] = \"PATCH\";\n  METHODS[METHODS[\"PURGE\"] = 29] = \"PURGE\";\n  /* CalDAV */\n  METHODS[METHODS[\"MKCALENDAR\"] = 30] = \"MKCALENDAR\";\n  /* RFC-2068, section 19.6.1.2 */\n  METHODS[METHODS[\"LINK\"] = 31] = \"LINK\";\n  METHODS[METHODS[\"UNLINK\"] = 32] = \"UNLINK\";\n  /* icecast */\n  METHODS[METHODS[\"SOURCE\"] = 33] = \"SOURCE\";\n  /* RFC-7540, section 11.6 */\n  METHODS[METHODS[\"PRI\"] = 34] = \"PRI\";\n  /* RFC-2326 RTSP */\n  METHODS[METHODS[\"DESCRIBE\"] = 35] = \"DESCRIBE\";\n  METHODS[METHODS[\"ANNOUNCE\"] = 36] = \"ANNOUNCE\";\n  METHODS[METHODS[\"SETUP\"] = 37] = \"SETUP\";\n  METHODS[METHODS[\"PLAY\"] = 38] = \"PLAY\";\n  METHODS[METHODS[\"PAUSE\"] = 39] = \"PAUSE\";\n  METHODS[METHODS[\"TEARDOWN\"] = 40] = \"TEARDOWN\";\n  METHODS[METHODS[\"GET_PARAMETER\"] = 41] = \"GET_PARAMETER\";\n  METHODS[METHODS[\"SET_PARAMETER\"] = 42] = \"SET_PARAMETER\";\n  METHODS[METHODS[\"REDIRECT\"] = 43] = \"REDIRECT\";\n  METHODS[METHODS[\"RECORD\"] = 44] = \"RECORD\";\n  /* RAOP */\n  METHODS[METHODS[\"FLUSH\"] = 45] = \"FLUSH\";\n})(METHODS = exports.METHODS || (exports.METHODS = {}));\nexports.METHODS_HTTP = [METHODS.DELETE, METHODS.GET, METHODS.HEAD, METHODS.POST, METHODS.PUT, METHODS.CONNECT, METHODS.OPTIONS, METHODS.TRACE, METHODS.COPY, METHODS.LOCK, METHODS.MKCOL, METHODS.MOVE, METHODS.PROPFIND, METHODS.PROPPATCH, METHODS.SEARCH, METHODS.UNLOCK, METHODS.BIND, METHODS.REBIND, METHODS.UNBIND, METHODS.ACL, METHODS.REPORT, METHODS.MKACTIVITY, METHODS.CHECKOUT, METHODS.MERGE, METHODS['M-SEARCH'], METHODS.NOTIFY, METHODS.SUBSCRIBE, METHODS.UNSUBSCRIBE, METHODS.PATCH, METHODS.PURGE, METHODS.MKCALENDAR, METHODS.LINK, METHODS.UNLINK, METHODS.PRI,\n// TODO(indutny): should we allow it with HTTP?\nMETHODS.SOURCE];\nexports.METHODS_ICE = [METHODS.SOURCE];\nexports.METHODS_RTSP = [METHODS.OPTIONS, METHODS.DESCRIBE, METHODS.ANNOUNCE, METHODS.SETUP, METHODS.PLAY, METHODS.PAUSE, METHODS.TEARDOWN, METHODS.GET_PARAMETER, METHODS.SET_PARAMETER, METHODS.REDIRECT, METHODS.RECORD, METHODS.FLUSH,\n// For AirPlay\nMETHODS.GET, METHODS.POST];\nexports.METHOD_MAP = utils_1.enumToMap(METHODS);\nexports.H_METHOD_MAP = {};\nObject.keys(exports.METHOD_MAP).forEach(key => {\n  if (/^H/.test(key)) {\n    exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];\n  }\n});\nvar FINISH;\n(function (FINISH) {\n  FINISH[FINISH[\"SAFE\"] = 0] = \"SAFE\";\n  FINISH[FINISH[\"SAFE_WITH_CB\"] = 1] = \"SAFE_WITH_CB\";\n  FINISH[FINISH[\"UNSAFE\"] = 2] = \"UNSAFE\";\n})(FINISH = exports.FINISH || (exports.FINISH = {}));\nexports.ALPHA = [];\nfor (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {\n  // Upper case\n  exports.ALPHA.push(String.fromCharCode(i));\n  // Lower case\n  exports.ALPHA.push(String.fromCharCode(i + 0x20));\n}\nexports.NUM_MAP = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9\n};\nexports.HEX_MAP = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  A: 0XA,\n  B: 0XB,\n  C: 0XC,\n  D: 0XD,\n  E: 0XE,\n  F: 0XF,\n  a: 0xa,\n  b: 0xb,\n  c: 0xc,\n  d: 0xd,\n  e: 0xe,\n  f: 0xf\n};\nexports.NUM = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\nexports.ALPHANUM = exports.ALPHA.concat(exports.NUM);\nexports.MARK = ['-', '_', '.', '!', '~', '*', '\\'', '(', ')'];\nexports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat(['%', ';', ':', '&', '=', '+', '$', ',']);\n// TODO(indutny): use RFC\nexports.STRICT_URL_CHAR = ['!', '\"', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '@', '[', '\\\\', ']', '^', '_', '`', '{', '|', '}', '~'].concat(exports.ALPHANUM);\nexports.URL_CHAR = exports.STRICT_URL_CHAR.concat(['\\t', '\\f']);\n// All characters with 0x80 bit set to 1\nfor (let i = 0x80; i <= 0xff; i++) {\n  exports.URL_CHAR.push(i);\n}\nexports.HEX = exports.NUM.concat(['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F']);\n/* Tokens as defined by rfc 2616. Also lowercases them.\n *        token       = 1*<any CHAR except CTLs or separators>\n *     separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *                    | \",\" | \";\" | \":\" | \"\\\" | <\">\n *                    | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *                    | \"{\" | \"}\" | SP | HT\n */\nexports.STRICT_TOKEN = ['!', '#', '$', '%', '&', '\\'', '*', '+', '-', '.', '^', '_', '`', '|', '~'].concat(exports.ALPHANUM);\nexports.TOKEN = exports.STRICT_TOKEN.concat([' ']);\n/*\n * Verify that a char is a valid visible (printable) US-ASCII\n * character or %x80-FF\n */\nexports.HEADER_CHARS = ['\\t'];\nfor (let i = 32; i <= 255; i++) {\n  if (i !== 127) {\n    exports.HEADER_CHARS.push(i);\n  }\n}\n// ',' = \\x44\nexports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter(c => c !== 44);\nexports.MAJOR = exports.NUM_MAP;\nexports.MINOR = exports.MAJOR;\nvar HEADER_STATE;\n(function (HEADER_STATE) {\n  HEADER_STATE[HEADER_STATE[\"GENERAL\"] = 0] = \"GENERAL\";\n  HEADER_STATE[HEADER_STATE[\"CONNECTION\"] = 1] = \"CONNECTION\";\n  HEADER_STATE[HEADER_STATE[\"CONTENT_LENGTH\"] = 2] = \"CONTENT_LENGTH\";\n  HEADER_STATE[HEADER_STATE[\"TRANSFER_ENCODING\"] = 3] = \"TRANSFER_ENCODING\";\n  HEADER_STATE[HEADER_STATE[\"UPGRADE\"] = 4] = \"UPGRADE\";\n  HEADER_STATE[HEADER_STATE[\"CONNECTION_KEEP_ALIVE\"] = 5] = \"CONNECTION_KEEP_ALIVE\";\n  HEADER_STATE[HEADER_STATE[\"CONNECTION_CLOSE\"] = 6] = \"CONNECTION_CLOSE\";\n  HEADER_STATE[HEADER_STATE[\"CONNECTION_UPGRADE\"] = 7] = \"CONNECTION_UPGRADE\";\n  HEADER_STATE[HEADER_STATE[\"TRANSFER_ENCODING_CHUNKED\"] = 8] = \"TRANSFER_ENCODING_CHUNKED\";\n})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));\nexports.SPECIAL_HEADERS = {\n  'connection': HEADER_STATE.CONNECTION,\n  'content-length': HEADER_STATE.CONTENT_LENGTH,\n  'proxy-connection': HEADER_STATE.CONNECTION,\n  'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,\n  'upgrade': HEADER_STATE.UPGRADE\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/llhttp-wasm.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  Buffer\n} = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nmodule.exports = Buffer.from('AGFzbQEAAAABJwdgAX8Bf2ADf39/AX9gAX8AYAJ/fwBgBH9/f38Bf2AAAGADf39/AALLAQgDZW52GHdhc21fb25faGVhZGVyc19jb21wbGV0ZQAEA2VudhV3YXNtX29uX21lc3NhZ2VfYmVnaW4AAANlbnYLd2FzbV9vbl91cmwAAQNlbnYOd2FzbV9vbl9zdGF0dXMAAQNlbnYUd2FzbV9vbl9oZWFkZXJfZmllbGQAAQNlbnYUd2FzbV9vbl9oZWFkZXJfdmFsdWUAAQNlbnYMd2FzbV9vbl9ib2R5AAEDZW52GHdhc21fb25fbWVzc2FnZV9jb21wbGV0ZQAAAy0sBQYAAAIAAAAAAAACAQIAAgICAAADAAAAAAMDAwMBAQEBAQEBAQEAAAIAAAAEBQFwARISBQMBAAIGCAF/AUGA1AQLB9EFIgZtZW1vcnkCAAtfaW5pdGlhbGl6ZQAIGV9faW5kaXJlY3RfZnVuY3Rpb25fdGFibGUBAAtsbGh0dHBfaW5pdAAJGGxsaHR0cF9zaG91bGRfa2VlcF9hbGl2ZQAvDGxsaHR0cF9hbGxvYwALBm1hbGxvYwAxC2xsaHR0cF9mcmVlAAwEZnJlZQAMD2xsaHR0cF9nZXRfdHlwZQANFWxsaHR0cF9nZXRfaHR0cF9tYWpvcgAOFWxsaHR0cF9nZXRfaHR0cF9taW5vcgAPEWxsaHR0cF9nZXRfbWV0aG9kABAWbGxodHRwX2dldF9zdGF0dXNfY29kZQAREmxsaHR0cF9nZXRfdXBncmFkZQASDGxsaHR0cF9yZXNldAATDmxsaHR0cF9leGVjdXRlABQUbGxodHRwX3NldHRpbmdzX2luaXQAFQ1sbGh0dHBfZmluaXNoABYMbGxodHRwX3BhdXNlABcNbGxodHRwX3Jlc3VtZQAYG2xsaHR0cF9yZXN1bWVfYWZ0ZXJfdXBncmFkZQAZEGxsaHR0cF9nZXRfZXJybm8AGhdsbGh0dHBfZ2V0X2Vycm9yX3JlYXNvbgAbF2xsaHR0cF9zZXRfZXJyb3JfcmVhc29uABwUbGxodHRwX2dldF9lcnJvcl9wb3MAHRFsbGh0dHBfZXJybm9fbmFtZQAeEmxsaHR0cF9tZXRob2RfbmFtZQAfEmxsaHR0cF9zdGF0dXNfbmFtZQAgGmxsaHR0cF9zZXRfbGVu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PgtBhwEMPQtBiAEMPAtBiQEMOwtBigEMOgtBiwEMOQtBjAEMOAtBjQEMNwtBjgEMNgtBjwEMNQtBkAEMNAtBkQEMMwtBkgEMMgtBkwEMMQtBlAEMMAtBlQEMLwtBlgEMLgtBlwEMLQtBmAEMLAtBmQEMKwtBmgEMKgtBmwEMKQtBnAEMKAtBnQEMJwtBngEMJgtBnwEMJQtBoAEMJAtBoQEMIwtBogEMIgtBowEMIQtBpAEMIAtBpQEMHwtBpgEMHgtBpwEMHQtBqAEMHAtBqQEMGwtBqgEMGgtBqwEMGQtBrAEMGAtBrQEMFwtBrgEMFgtBAQwVC0GvAQwUC0GwAQwTC0GxAQwSC0GzAQwRC0GyAQwQC0G0AQwPC0G1AQwOC0G2AQwNC0G3AQwMC0G4AQwLC0G5AQwKC0G6AQwJC0G7AQwIC0HGAQwHC0G8AQwGC0G9AQwFC0G+AQwEC0G/AQwDC0HAAQwCC0HCAQwBC0HBAQshAwNAAkACQAJAAkACQAJAAkACQAJAIAICfwJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJ/AkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgAgJ/AkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACfwJAAkACfwJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAC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iQEhAwykAgtBASABLQAAQd8ARw1nGiABQQFqIQEMXgtBigEhAyABIARGDaICIAIoAgAiACAEIAFraiEFIAEgAGtBAWohBgNAIAEtAAAgAEGMzwBqLQAARw1kIABBAUYN+gEgAEEBaiEAIAQgAUEBaiIBRw0ACyACIAU2AgAMogILQYsBIQMgASAERg2hAiACKAIAIgAgBCABa2ohBSABIABrQQJqIQYCQANAIAEtAAAgAEGOzwBqLQAARw1kIABBAkYNASAAQQFqIQAgBCABQQFqIgFHDQALIAIgBTYCAAyiAgsgAkEANgIAIAZBAWohAUECDGULQYwBIQMgASAERg2gAiACKAIAIgAgBCABa2ohBSABIABrQQFqIQYCQANAIAEtAAAgAEHwzwBqLQAARw1jIABBAUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAIgBTYCAAyhAgsgAkEANgIAIAZBAWohAUEfDGQLQY0BIQMgASAERg2fAiACKAIAIgAgBCABa2ohBSABIABrQQFqIQYCQANAIAEtAAAgAEHyzwBqLQAARw1iIABBAUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAIgBTYCAAygAgsgAkEANgIAIAZBAWohAUEJDGMLIAEgBEYEQEGOASEDDJ8CCwJAAkAgAS0AAEHJAGsOBwBiYmJiYgFiCyABQQFqIQFB+AAhAwyGAgsgAUEBaiEBQfkAIQMMhQILQY8BIQMgASAERg2dAiACKAIAIgAgBCABa2ohBSABIABrQQVqIQYCQANAIAEtAAAgAEGRzwBqLQAARw1gIABBBUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAIgBTYCAAyeAgsgAkEANgIAIAZBAWohAUEYDGELQZABIQMgASAERg2cAiACKAIAIgAgBCABa2ohBSABIABrQQJqIQYCQANAIAEtAAAgAEGXzwBqLQAARw1fIABBAkYNASAAQQFqIQAgBCABQQFqIgFHDQALIAIgBTYCAAydAgsgAkEANgIAIAZBAWohAUEXDGALQZEBIQMgASAERg2bAiACKAIAIgAgBCABa2ohBSABIABrQQZqIQYCQANAIAEtAAAgAEGazwBqLQAARw1eIABBBkYNASAAQQFqIQAgBCABQQFqIgFHDQALIAIgBTYCAAycAgsgAkEANgIAIAZBAWohAUEV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JSIARQ0RIAJB5QA2AhwgAiABNgIUIAIgADYCDEEAIQMMtAELIAIoAgQhACACQQA2AgQgAiAAIAEQJSIARQ0gIAJB0wA2AhwgAiABNgIUIAIgADYCDEEAIQMMswELIAIoAgQhACACQQA2AgQgAiAAIAEQJSIARQ0iIAJB0gA2AhwgAiABNgIUIAIgADYCDEEAIQMMsgELIAIoAgQhACACQQA2AgQgAiAAIAEQJSIARQ0OIAJB5QA2AhwgAiABNgIUIAIgADYCDEEAIQMMsQELIAIoAgQhACACQQA2AgQgAiAAIAEQJSIARQ0dIAJB0wA2AhwgAiABNgIUIAIgADYCDEEAIQMMsAELIAIoAgQhACACQQA2AgQgAiAAIAEQJSIARQ0fIAJB0gA2AhwgAiABNgIUIAIgADYCDEEAIQMMrwELIABBP0cNASABQQFqCyEBQQUhAwyUAQtBACEDIAJBADYCHCACIAE2AhQgAkH9EjYCECACQQc2AgwMrAELIAJBADYCHCACIAE2AhQgAkHcCDYCECACQQc2AgxBACEDDKsBCyACKAIEIQAgAkEANgIEIAIgACABECUiAEUNByACQeUANgIcIAIgATYCFCACIAA2AgxBACEDDKoBCyACKAIEIQAgAkEANgIEIAIgACABECUiAEUNFiACQdMANgIcIAIgATYCFCACIAA2AgxBACEDDKkBCyACKAIEIQAgAkEANgIEIAIgACABECUiAEUNGCACQdIANgIcIAIgATYCFCACIAA2AgxBACEDDKgBCyACQQA2AhwgAiABNgIUIAJBxgo2AhAgAkEHNgIMQQAhAwynAQsgAigCBCEAIAJBADYCBCACIAAgARAlIgBFDQMgAkHlADYCHCACIAE2AhQgAiAANgIMQQAhAwymAQsgAigCBCEAIAJBADYCBCACIAAgARAlIgBFDRIgAkHTADYCHCACIAE2AhQgAiAANgIMQQAhAwylAQsgAigCBCEAIAJBADYCBCACIAAgARAlIgBFDRQgAkHSADYCHCACIAE2AhQgAiAANgIMQQAhAwykAQsgAigCBCEAIAJBADYCBCACIAAgARAlIgBFDQAgAkHlADYCHCACIAE2AhQgAiAANgIMQQAhAwyjAQtB1QAhAwyJAQsgAEEVRwRAIAJBADYCHCACIAE2AhQgAkG5DTYCECACQRo2AgxBACEDDKIBCyACQeQANgIcIAIgATYCFCACQeMXNgIQIAJBFTYCDEEAIQMMoQELIAJBADYCACAGQQFqIQEgAi0AKSIAQSNrQQtJDQQCQCAAQQZLDQBBASAAdEHKAHFFDQAMBQtBACEDIAJBADYCHCACIAE2AhQgAkH3CTYCECACQQg2AgwMoAELIAJBADYCACAGQQFqIQEgAi0AKUEhRg0DIAJBADYCHCACIAE2AhQgAkGbCjYCECACQQg2AgxBACEDDJ8BCyACQQA2AgALQQAhAyACQQA2AhwgAiABNgIUIAJBkDM2AhAgAkEINgIMDJ0BCyACQQA2AgAgBkEBaiEBIAItAClBI0kNACACQQA2AhwgAiABNgIUIAJB0wk2AhAgAkEINgIMQQAhAwycAQtB0QAhAwyCAQsgAS0AAEEwayIAQf8BcUEKSQRAIAIgADoAKiABQQFqIQFBzwAhAwyCAQsgAigCBCEAIAJBADYCBCACIAAgARAoIgBFDYYBIAJB3gA2AhwgAiABNgIUIAIgADYCDEEAIQMMmgELIAIoAgQhACACQQA2AgQgAiAAIAEQKCIARQ2GASACQdwANgIcIAIgATYCFCACIAA2AgxBACEDDJkBCyACKAIEIQAgAkEANgIEIAIgACAFECgiAEUEQCAFIQEMhwELIAJB2gA2AhwgAiAFNgIUIAIgADYCDAyYAQtBACEBQQEhAwsgAiADOgArIAVBAWohAwJAAkACQCACLQAtQRBxDQACQAJAAkAgAi0AKg4DAQACBAsgBkUNAwwCCyAADQEMAgsgAUUNAQsgAigCBCEAIAJBADYCBCACIAAgAxAoIgBFBEAgAyEBDAILIAJB2AA2AhwgAiADNgIUIAIgADYCDEEAIQMMmAELIAIoAgQhACACQQA2AgQgAiAAIAMQKCIARQRAIAMhAQyHAQsgAkHZADYCHCACIAM2AhQgAiAANgIMQQAhAwyXAQtBzAAhAwx9CyAAQRVHBEAgAkEANgIcIAIgATYCFCACQZQNNgIQIAJBITYCDEEAIQMMlgELIAJB1wA2AhwgAiABNgIUIAJByRc2AhAgAkEVNgIMQQAhAwyVAQtBACEDIAJBADYCHCACIAE2AhQgAkGAETYCECACQQk2AgwMlAELIAIoAgQhACACQQA2AgQgAiAAIAEQJSIARQ0AIAJB0wA2AhwgAiABNgIUIAIgADYCDEEAIQMMkwELQckAIQMMeQsgAkEANgIcIAIgATYCFCACQcEoNgIQIAJBBzYCDCACQQA2AgBBACEDDJEBCyACKAIEIQBBACEDIAJBADYCBCACIAAgARAlIgBFDQAgAkHSADYCHCACIAE2AhQgAiAANgIMDJABC0HIACEDDHYLIAJBADYCACAFIQELIAJBgBI7ASogAUEBaiEBQQAhAAJAIAIoAjgiA0UNACADKAIwIgNFDQAgAiADEQAAIQALIAANAQtBxwAhAwxzCyAAQRVGBEAgAkHRADYCHCACIAE2AhQgAkHjFzYCECACQRU2AgxBACEDDIwBC0EAIQMgAkEANgIcIAIgATYCFCACQbkNNgIQIAJBGjYCDAyLAQtBACEDIAJBADYCHCACIAE2AhQgAkGgGTYCECACQR42AgwMigELIAEtAABBOkYEQCACKAIEIQBBACEDIAJBADYCBCACIAAgARApIgBFDQEgAkHDADYCHCACIAA2AgwgAiABQQFqNgIUDIoBC0EAIQMgAkEANgIcIAIgATYCFCACQbERNgIQIAJBCjYCDAyJAQsgAUEBaiEBQTshAwxvCyACQcMANgIcIAIgADYCDCACIAFBAWo2AhQMhwELQQAhAyACQQA2AhwgAiABNgIUIAJB8A42AhAgAkEcNgIMDIYBCyACIAIvATBBEHI7ATAMZgsCQCACLwEwIgBBCHFFDQAgAi0AKEEBRw0AIAItAC1BCHFFDQMLIAIgAEH3+wNxQYAEcjsBMAwECyABIARHBEACQANAIAEtAABBMGsiAEH/AXFBCk8EQEE1IQMMbgsgAikDICIKQpmz5syZs+bMGVYNASACIApCCn4iCjcDICAKIACtQv8BgyILQn+FVg0BIAIgCiALfDcDICAEIAFBAWoiAUcNAAtBOSEDDIUBCyACKAIEIQBBACEDIAJBADYCBCACIAAgAUEBaiIBECoiAA0MDHcLQTkhAwyDAQsgAi0AMEEgcQ0GQcUBIQMMaQtBACEDIAJBADYCBCACIAEgARAqIgBFDQQgAkE6NgIcIAIgADYCDCACIAFBAWo2AhQMgQELIAItAChBAUcNACACLQAtQQhxRQ0BC0E3IQMMZgsgAigCBCEAQQAhAyACQQA2AgQgAiAAIAEQKiIABEAgAkE7NgIcIAIgADYCDCACIAFBAWo2AhQMfwsgAUEBaiEBDG4LIAJBCDoALAwECyABQQFqIQEMbQtBACEDIAJBADYCHCACIAE2AhQgAkHkEjYCECACQQQ2AgwMewsgAigCBCEAQQAhAyACQQA2AgQgAiAAIAEQKiIARQ1sIAJBNzYCHCACIAE2AhQgAiAANgIMDHoLIAIgAi8BMEEgcjsBMAtBMCEDDF8LIAJBNjYCHCACIAE2AhQgAiAANgIMDHcLIABBLEcNASABQQFqIQBBASEBAkACQAJAAkACQCACLQAsQQVrDgQDAQIEAAsgACEBDAQLQQIhAQwBC0EEIQELIAJBAToALCACIAIvATAgAXI7ATAgACEBDAELIAIgAi8BMEEIcjsBMCAAIQELQTkhAwxcCyACQQA6ACwLQTQhAwxaCyABIARGBEBBLSEDDHMLAkACQANAAkAgAS0AAEEKaw4EAgAAAwALIAQgAUEBaiIBRw0AC0EtIQMMdAsgAigCBCEAQQAhAyACQQA2AgQgAiAAIAEQKiIARQ0CIAJBLDYCHCACIAE2AhQgAiAANgIMDHMLIAIoAgQhAEEAIQMgAkEANgIEIAIgACABECoiAEUEQCABQQFqIQEMAgsgAkEsNgIcIAIgADYCDCACIAFBAWo2AhQMcgsgAS0AAEENRgRAIAIoAgQhAEEAIQMgAkEANgIEIAIgACABECoiAEUEQCABQQFqIQEMAgsgAkEsNgIcIAIgADYCDCACIAFBAWo2AhQMcgsgAi0ALUEBcQRAQcQBIQMMWQsgAigCBCEAQQAhAyACQQA2AgQgAiAAIAEQKiIADQEMZQtBLyEDDFcLIAJBLjYCHCACIAE2AhQgAiAANgIMDG8LQQAhAyACQQA2AhwgAiABNgIUIAJB8BQ2AhAgAkEDNgIMDG4LQQEhAwJAAkACQAJAIAItACxBBWsOBAMBAgAECyACIAIvATBBCHI7ATAMAwtBAiEDDAELQQQhAwsgAkEBOgAsIAIgAi8BMCADcjsBMAtBKiEDDFMLQQAhAyACQQA2AhwgAiABNgIUIAJB4Q82AhAgAkEKNgIMDGsLQQEhAwJAAkACQAJAAkACQCACLQAsQQJrDgcFBAQDAQIABAsgAiACLwEwQQhyOwEwDAMLQQIhAwwBC0EEIQMLIAJBAToALCACIAIvATAgA3I7ATALQSshAwxSC0EAIQMgAkEANgIcIAIgATYCFCACQasSNgIQIAJBCzYCDAxqC0EAIQMgAkEANgIcIAIgATYCFCACQf0NNgIQIAJBHTYCDAxpCyABIARHBEADQCABLQAAQSBHDUggBCABQQFqIgFHDQALQSUhAwxpC0ElIQMMaAsgAi0ALUEBcQRAQcMBIQMMTwsgAigCBCEAQQAhAyACQQA2AgQgAiAAIAEQKSIABEAgAkEmNgIcIAIgADYCDCACIAFBAWo2AhQMaAsgAUEBaiEBDFwLIAFBAWohASACLwEwIgBBgAFxBEBBACEAAkAgAigCOCIDRQ0AIAMoAlQiA0UNACACIAMRAAAhAAsgAEUNBiAAQRVHDR8gAkEFNgIcIAIgATYCFCACQfkXNgIQIAJBFTYCDEEAIQMMZwsCQCAAQaAEcUGgBEcNACACLQAtQQJxDQBBACEDIAJBADYCHCACIAE2AhQgAkGWEzYCECACQQQ2AgwMZwsgAgJ/IAIvATBBFHFBFEYEQEEBIAItAChBAUYNARogAi8BMkHlAEYMAQsgAi0AKUEFRgs6AC5BACEAAkAgAigCOCIDRQ0AIAMoAiQiA0UNACACIAMRAAAhAAsCQAJAAkACQAJAIAAOFgIBAAQEBAQEBAQEBAQEBAQEBAQEBAMECyACQQE6AC4LIAIgAi8BMEHAAHI7ATALQSchAwxPCyACQSM2AhwgAiABNgIUIAJBpRY2AhAgAkEVNgIMQQAhAwxnC0EAIQMgAkEANgIcIAIgATYCFCACQdULNgIQIAJBETYCDAxmC0EAIQACQCACKAI4IgNFDQAgAygCLCIDRQ0AIAIgAxEAACEACyAADQELQQ4hAwxLCyAAQRVGBEAgAkECNgIcIAIgATYCFCACQbAYNgIQIAJBFTYCDEEAIQMMZAtBACEDIAJBADYCHCACIAE2AhQgAkGnDjYCECACQRI2AgwMYwtBACEDIAJBADYCHCACIAE2AhQgAkGqHDYCECACQQ82AgwMYgsgAigCBCEAQQAhAyACQQA2AgQgAiAAIAEgCqdqIgEQKyIARQ0AIAJBBTYCHCACIAE2AhQgAiAANgIMDGELQQ8hAwxHC0EAIQMgAkEANgIcIAIgATYCFCACQc0TNgIQIAJBDDYCDAxfC0IBIQoLIAFBAWohAQJAIAIpAyAiC0L//////////w9YBEAgAiALQgSGIAqENwMgDAELQQAhAyACQQA2AhwgAiABNgIUIAJBrQk2AhAgAkEMNgIMDF4LQSQhAwxEC0EAIQMgAkEANgIcIAIgATYCFCACQc0TNgIQIAJBDDYCDAxcCyACKAIEIQBBACEDIAJBADYCBCACIAAgARAsIgBFBEAgAUEBaiEBDFILIAJBFzYCHCACIAA2AgwgAiABQQFqNgIUDFsLIAIoAgQhAEEAIQMgAkEANgIEAkAgAiAAIAEQLCIARQRAIAFBAWohAQwBCyACQRY2AhwgAiAANgIMIAIgAUEBajYCFAxbC0EfIQMMQQtBACEDIAJBADYCHCACIAE2AhQgAkGaDzYCECACQSI2AgwMWQsgAigCBCEAQQAhAyACQQA2AgQgAiAAIAEQLSIARQRAIAFBAWohAQxQCyACQRQ2AhwgAiAANgIMIAIgAUEBajYCFAxYCyACKAIEIQBBACEDIAJBADYCBAJAIAIgACABEC0iAEUEQCABQQFqIQEMAQsgAkETNgIcIAIgADYCDCACIAFBAWo2AhQMWAtBHiEDDD4LQQAhAyACQQA2AhwgAiABNgIUIAJBxgw2AhAgAkEjNgIMDFYLIAIoAgQhAEEAIQMgAkEANgIEIAIgACABEC0iAEUEQCABQQFqIQEMTgsgAkERNgIcIAIgADYCDCACIAFBAWo2AhQMVQsgAkEQNgIcIAIgATYCFCACIAA2AgwMVAtBACEDIAJBADYCHCACIAE2AhQgAkHGDDYCECACQSM2AgwMUwtBACEDIAJBADYCHCACIAE2AhQgAkHAFTYCECACQQI2AgwMUgsgAigCBCEAQQAhAyACQQA2AgQCQCACIAAgARAtIgBFBEAgAUEBaiEBDAELIAJBDjYCHCACIAA2AgwgAiABQQFqNgIUDFILQRshAww4C0EAIQMgAkEANgIcIAIgATYCFCACQcYMNgIQIAJBIzYCDAxQCyACKAIEIQBBACEDIAJBADYCBAJAIAIgACABECwiAEUEQCABQQFqIQEMAQsgAkENNgIcIAIgADYCDCACIAFBAWo2AhQMUAtBGiEDDDYLQQAhAyACQQA2AhwgAiABNgIUIAJBmg82AhAgAkEiNgIMDE4LIAIoAgQhAEEAIQMgAkEANgIEAkAgAiAAIAEQLCIARQRAIAFBAWohAQwBCyACQQw2AhwgAiAANgIMIAIgAUEBajYCFAxOC0EZIQMMNAtBACEDIAJBADYCHCACIAE2AhQgAkGaDzYCECACQSI2AgwMTAsgAEEVRwRAQQAhAyACQQA2AhwgAiABNgIUIAJBgww2AhAgAkETNgIMDEwLIAJBCjYCHCACIAE2AhQgAkHkFjYCECACQRU2AgxBACEDDEsLIAIoAgQhAEEAIQMgAkEANgIEIAIgACABIAqnaiIBECsiAARAIAJBBzYCHCACIAE2AhQgAiAANgIMDEsLQRMhAwwxCyAAQRVHBEBBACEDIAJBADYCHCACIAE2AhQgAkHaDTYCECACQRQ2AgwMSgsgAkEeNgIcIAIgATYCFCACQfkXNgIQIAJBFTYCDEEAIQMMSQtBACEAAkAgAigCOCIDRQ0AIAMoAiwiA0UNACACIAMRAAAhAAsgAEUNQSAAQRVGBEAgAkEDNgIcIAIgATYCFCACQbAYNgIQIAJBFTYCDEEAIQMMSQtBACEDIAJBADYCHCACIAE2AhQgAkGnDjYCECACQRI2AgwMSAtBACEDIAJBADYCHCACIAE2AhQgAkHaDTYCECACQRQ2AgwMRwtBACEDIAJBADYCHCACIAE2AhQgAkGnDjYCECACQRI2AgwMRgsgAkEAOgAvIAItAC1BBHFFDT8LIAJBADoALyACQQE6ADRBACEDDCsLQQAhAyACQQA2AhwgAkHkETYCECACQQc2AgwgAiABQQFqNgIUDEMLAkADQAJAIAEtAABBCmsOBAACAgACCyAEIAFBAWoiAUcNAAtB3QEhAwxDCwJAAkAgAi0ANEEBRw0AQQAhAAJAIAIoAjgiA0UNACADKAJYIgNFDQAgAiADEQAAIQALIABFDQAgAEEVRw0BIAJB3AE2AhwgAiABNgIUIAJB1RY2AhAgAkEVNgIMQQAhAwxEC0HBASEDDCoLIAJBADYCHCACIAE2AhQgAkHpCzYCECACQR82AgxBACEDDEILAkACQCACLQAoQQFrDgIEAQALQcABIQMMKQtBuQEhAwwoCyACQQI6AC9BACEAAkAgAigCOCIDRQ0AIAMoAgAiA0UNACACIAMRAAAhAAsgAEUEQEHCASEDDCgLIABBFUcEQCACQQA2AhwgAiABNgIUIAJBpAw2AhAgAkEQNgIMQQAhAwxBCyACQdsBNgIcIAIgATYCFCACQfoWNgIQIAJBFTYCDEEAIQMMQAsgASAERgRAQdoBIQMMQAsgAS0AAEHIAEYNASACQQE6ACgLQawBIQMMJQtBvwEhAwwkCyABIARHBEAgAkEQNgIIIAIgATYCBEG+ASEDDCQLQdkBIQMMPAsgASAERgRAQdgBIQMMPAsgAS0AAEHIAEcNBCABQQFqIQFBvQEhAwwiCyABIARGBEBB1wEhAww7CwJAAkAgAS0AAEHFAGsOEAAFBQUFBQUFBQUFBQUFBQEFCyABQQFqIQFBuwEhAwwiCyABQQFqIQFBvAEhAwwhC0HWASEDIAEgBEYNOSACKAIAIgAgBCABa2ohBSABIABrQQJqIQYCQANAIAEtAAAgAEGD0ABqLQAARw0DIABBAkYNASAAQQFqIQAgBCABQQFqIgFHDQALIAIgBTYCAAw6CyACKAIEIQAgAkIANwMAIAIgACAGQQFqIgEQJyIARQRAQcYBIQMMIQsgAkHVATYCHCACIAE2AhQgAiAANgIMQQAhAww5C0HUASEDIAEgBEYNOCACKAIAIgAgBCABa2ohBSABIABrQQFqIQYCQANAIAEtAAAgAEGB0ABqLQAARw0CIABBAUYNASAAQQFqIQAgBCABQQFqIgFHDQALIAIgBTYCAAw5CyACQYEEOwEoIAIoAgQhACACQgA3AwAgAiAAIAZBAWoiARAnIgANAwwCCyACQQA2AgALQQAhAyACQQA2AhwgAiABNgIUIAJB2Bs2AhAgAkEINgIMDDYLQboBIQMMHAsgAkHTATYCHCACIAE2AhQgAiAANgIMQQAhAww0C0EAIQACQCACKAI4IgNFDQAgAygCOCIDRQ0AIAIgAxEAACEACyAARQ0AIABBFUYNASACQQA2AhwgAiABNgIUIAJBzA42AhAgAkEgNgIMQQAhAwwzC0HkACEDDBkLIAJB+AA2AhwgAiABNgIUIAJByhg2AhAgAkEVNgIMQQAhAwwxC0HSASEDIAQgASIARg0wIAQgAWsgAigCACIBaiEFIAAgAWtBBGohBgJAA0AgAC0AACABQfzPAGotAABHDQEgAUEERg0DIAFBAWohASAEIABBAWoiAEcNAAsgAiAFNgIADDELIAJBADYCHCACIAA2AhQgAkGQMzYCECACQQg2AgwgAkEANgIAQQAhAwwwCyABIARHBEAgAkEONgIIIAIgATYCBEG3ASEDDBcLQdEBIQMMLwsgAkEANgIAIAZBAWohAQtBuAEhAwwUCyABIARGBEBB0AEhAwwtCyABLQAAQTBrIgBB/wFxQQpJBEAgAiAAOgAqIAFBAWohAUG2ASEDDBQLIAIoAgQhACACQQA2AgQgAiAAIAEQKCIARQ0UIAJBzwE2AhwgAiABNgIUIAIgADYCDEEAIQMMLAsgASAERgRAQc4BIQMMLAsCQCABLQAAQS5GBEAgAUEBaiEBDAELIAIoAgQhACACQQA2AgQgAiAAIAEQKCIARQ0VIAJBzQE2AhwgAiABNgIUIAIgADYCDEEAIQMMLAtBtQEhAwwSCyAEIAEiBUYEQEHMASEDDCsLQQAhAEEBIQFBASEGQQAhAwJAAkACQAJAAkACfwJAAkACQAJAAkACQAJAIAUtAABBMGsOCgoJAAECAwQFBggLC0ECDAYLQQMMBQtBBAwEC0EFDAMLQQYMAgtBBwwBC0EICyEDQQAhAUEAIQYMAgtBCSEDQQEhAEEAIQFBACEGDAELQQAhAUEBIQMLIAIgAzoAKyAFQQFqIQMCQAJAIAItAC1BEHENAAJAAkACQCACLQAqDgMBAAIECyAGRQ0DDAILIAANAQwCCyABRQ0BCyACKAIEIQAgAkEANgIEIAIgACADECgiAEUEQCADIQEMAwsgAkHJATYCHCACIAM2AhQgAiAANgIMQQAhAwwtCyACKAIEIQAgAkEANgIEIAIgACADECgiAEUEQCADIQEMGAsgAkHKATYCHCACIAM2AhQgAiAANgIMQQAhAwwsCyACKAIEIQAgAkEANgIEIAIgACAFECgiAEUEQCAFIQEMFgsgAkHLATYCHCACIAU2AhQgAiAANgIMDCsLQbQBIQMMEQtBACEAAkAgAigCOCIDRQ0AIAMoAjwiA0UNACACIAMRAAAhAAsCQCAABEAgAEEVRg0BIAJBADYCHCACIAE2AhQgAkGUDTYCECACQSE2AgxBACEDDCsLQbIBIQMMEQsgAkHIATYCHCACIAE2AhQgAkHJFzYCECACQRU2AgxBACEDDCkLIAJBADYCACAGQQFqIQFB9QAhAwwPCyACLQApQQVGBEBB4wAhAwwPC0HiACEDDA4LIAAhASACQQA2AgALIAJBADoALEEJIQMMDAsgAkEANgIAIAdBAWohAUHAACEDDAsLQQELOgAsIAJBADYCACAGQQFqIQELQSkhAwwIC0E4IQMMBwsCQCABIARHBEADQCABLQAAQYA+ai0AACIAQQFHBEAgAEECRw0DIAFBAWohAQwFCyAEIAFBAWoiAUcNAAtBPiEDDCELQT4hAwwgCwsgAkEAOgAsDAELQQshAwwEC0E6IQMMAwsgAUEBaiEBQS0hAwwCCyACIAE6ACwgAkEANgIAIAZBAWohAUEMIQMMAQsgAkEANgIAIAZBAWohAUEKIQMMAAsAC0EAIQMgAkEANgIcIAIgATYCFCACQc0QNgIQIAJBCTYCDAwXC0EAIQMgAkEANgIcIAIgATYCFCACQekKNgIQIAJBCTYCDAwWC0EAIQMgAkEANgIcIAIgATYCFCACQbcQNgIQIAJBCTYCDAwVC0EAIQMgAkEANgIcIAIgATYCFCACQZwRNgIQIAJBCTYCDAwUC0EAIQMgAkEANgIcIAIgATYCFCACQc0QNgIQIAJBCTYCDAwTC0EAIQMgAkEANgIcIAIgATYCFCACQekKNgIQIAJBCTYCDAwSC0EAIQMgAkEANgIcIAIgATYCFCACQbcQNgIQIAJBCTYCDAwRC0EAIQMgAkEANgIcIAIgATYCFCACQZwRNgIQIAJBCTYCDAwQC0EAIQMgAkEANgIcIAIgATYCFCACQZcVNgIQIAJBDzYCDAwPC0EAIQMgAkEANgIcIAIgATYCFCACQZcVNgIQIAJBDzYCDAwOC0EAIQMgAkEANgIcIAIgATYCFCACQcASNgIQIAJBCzYCDAwNC0EAIQMgAkEANgIcIAIgATYCFCACQZUJNgIQIAJBCzYCDAwMC0EAIQMgAkEANgIcIAIgATYCFCACQeEPNgIQIAJBCjYCDAwLC0EAIQMgAkEANgIcIAIgATYCFCACQfsPNgIQIAJBCjYCDAwKC0EAIQMgAkEANgIcIAIgATYCFCACQfEZNgIQIAJBAjYCDAwJC0EAIQMgAkEANgIcIAIgATYCFCACQcQUNgIQIAJBAjYCDAwIC0EAIQMgAkEANgIcIAIgATYCFCACQfIVNgIQIAJBAjYCDAwHCyACQQI2AhwgAiABNgIUIAJBnBo2AhAgAkEWNgIMQQAhAwwGC0EBIQMMBQtB1AAhAyABIARGDQQgCEEIaiEJIAIoAgAhBQJAAkAgASAERwRAIAVB2MIAaiEHIAQgBWogAWshACAFQX9zQQpqIgUgAWohBgNAIAEtAAAgBy0AAEcEQEECIQcMAwsgBUUEQEEAIQcgBiEBDAMLIAVBAWshBSAHQQFqIQcgBCABQQFqIgFHDQALIAAhBSAEIQELIAlBATYCACACIAU2AgAMAQsgAkEANgIAIAkgBzYCAAsgCSABNgIEIAgoAgwhACAIKAIIDgMBBAIACwALIAJBADYCHCACQbUaNgIQIAJBFzYCDCACIABBAWo2AhRBACEDDAILIAJBADYCHCACIAA2AhQgAkHKGjYCECACQQk2AgxBACEDDAELIAEgBEYEQEEiIQMMAQsgAkEJNgIIIAIgATYCBEEhIQMLIAhBEGokACADRQRAIAIoAgwhAAwBCyACIAM2AhxBACEAIAIoAgQiAUUNACACIAEgBCACKAIIEQEAIgFFDQAgAiAENgIUIAIgATYCDCABIQALIAALvgIBAn8gAEEAOgAAIABB3ABqIgFBAWtBADoAACAAQQA6AAIgAEEAOgABIAFBA2tBADoAACABQQJrQQA6AAAgAEEAOgADIAFBBGtBADoAAEEAIABrQQNxIgEgAGoiAEEANgIAQdwAIAFrQXxxIgIgAGoiAUEEa0EANgIAAkAgAkEJSQ0AIABBADYCCCAAQQA2AgQgAUEIa0EANgIAIAFBDGtBADYCACACQRlJDQAgAEEANgIYIABBADYCFCAAQQA2AhAgAEEANgIMIAFBEGtBADYCACABQRRrQQA2AgAgAUEYa0EANgIAIAFBHGtBADYCACACIABBBHFBGHIiAmsiAUEgSQ0AIAAgAmohAANAIABCADcDGCAAQgA3AxAgAEIANwMIIABCADcDACAAQSBqIQAgAUEgayIBQR9LDQALCwtWAQF/AkAgACgCDA0AAkACQAJAAkAgAC0ALw4DAQADAgsgACgCOCIBRQ0AIAEoAiwiAUUNACAAIAERAAAiAQ0DC0EADwsACyAAQcMWNgIQQQ4hAQsgAQsaACAAKAIMRQRAIABB0Rs2AhAgAEEVNgIMCwsUACAAKAIMQRVGBEAgAEEANgIMCwsUACAAKAIMQRZGBEAgAEEANgIMCwsHACAAKAIMCwcAIAAoAhALCQAgACABNgIQCwcAIAAoAhQLFwAgAEEkTwRAAAsgAEECdEGgM2ooAgALFwAgAEEuTwRAAAsgAEECdEGwNGooAgALvwkBAX9B6yghAQJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIABB5ABrDvQDY2IAAWFhYWFhYQIDBAVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhBgcICQoLDA0OD2FhYWFhEGFhYWFhYWFhYWFhEWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYRITFBUWFxgZGhthYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2YTc4OTphYWFhYWFhYTthYWE8YWFhYT0+P2FhYWFhYWFhQGFhQWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYUJDREVGR0hJSktMTU5PUFFSU2FhYWFhYWFhVFVWV1hZWlthXF1hYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFeYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhX2BhC0HhJw8LQaQhDwtByywPC0H+MQ8LQcAkDwtBqyQPC0GNKA8LQeImDwtBgDAPC0G5Lw8LQdckDwtB7x8PC0HhHw8LQfofDwtB8iAPC0GoLw8LQa4yDwtBiDAPC0HsJw8LQYIiDwtBjh0PC0HQLg8LQcojDwtBxTIPC0HfHA8LQdIcDwtBxCAPC0HXIA8LQaIfDwtB7S4PC0GrMA8LQdQlDwtBzC4PC0H6Lg8LQfwrDwtB0jAPC0HxHQ8LQbsgDwtB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CABB3AgLii1JbnZhbGlkIGNoYXIgaW4gdXJsIHF1ZXJ5AFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fYm9keQBDb250ZW50LUxlbmd0aCBvdmVyZmxvdwBDaHVuayBzaXplIG92ZXJmbG93AFJlc3BvbnNlIG92ZXJmbG93AEludmFsaWQgbWV0aG9kIGZvciBIVFRQL3gueCByZXF1ZXN0AEludmFsaWQgbWV0aG9kIGZvciBSVFNQL3gueCByZXF1ZXN0AEV4cGVjdGVkIFNPVVJDRSBtZXRob2QgZm9yIElDRS94LnggcmVxdWVzdABJbnZhbGlkIGNoYXIgaW4gdXJsIGZyYWdtZW50IHN0YXJ0AEV4cGVjdGVkIGRvdABTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX3N0YXR1cwBJbnZhbGlkIHJlc3BvbnNlIHN0YXR1cwBJbnZhbGlkIGNoYXJhY3RlciBpbiBjaHVuayBleHRlbnNpb25zAFVzZXIgY2FsbGJhY2sgZXJyb3IAYG9uX3Jlc2V0YCBjYWxsYmFjayBlcnJvcgBgb25fY2h1bmtfaGVhZGVyYCBjYWxsYmFjayBlcnJvcgBgb25fbWVzc2FnZV9iZWdpbmAgY2FsbGJhY2sgZXJyb3IAYG9uX2NodW5rX2V4dGVuc2lvbl92YWx1ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX3N0YXR1c19jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX3ZlcnNpb25fY29tcGxldGVgIGNhbGxiYWNrIGVycm9yAGBvbl91cmxfY29tcGxldGVgIGNhbGxiYWNrIGVycm9yAGBvbl9jaHVua19jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX2hlYWRlcl92YWx1ZV9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX21lc3NhZ2VfY29tcGxldGVgIGNhbGxiYWNrIGVycm9yAGBvbl9tZXRob2RfY29tcGxldGVgIGNhbGxiYWNrIGVycm9yAGBvbl9oZWFkZXJfZmllbGRfY29tcGxldGVgIGNhbGxiYWNrIGVycm9yAGBvbl9jaHVua19leHRlbnNpb25fbmFtZWAgY2FsbGJhY2sgZXJyb3IAVW5leHBlY3RlZCBjaGFyIGluIHVybCBzZXJ2ZXIASW52YWxpZCBoZWFkZXIgdmFsdWUgY2hhcgBJbnZhbGlkIGhlYWRlciBmaWVsZCBjaGFyAFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fdmVyc2lvbgBJbnZhbGlkIG1pbm9yIHZlcnNpb24ASW52YWxpZCBtYWpvciB2ZXJzaW9uAEV4cGVjdGVkIHNwYWNlIGFmdGVyIHZlcnNpb24ARXhwZWN0ZWQgQ1JMRiBhZnRlciB2ZXJzaW9uAEludmFsaWQgSFRUUCB2ZXJzaW9uAEludmFsaWQgaGVhZGVyIHRva2VuAFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fdXJsAEludmFsaWQgY2hhcmFjdGVycyBpbiB1cmwAVW5leHBlY3RlZCBzdGFydCBjaGFyIGluIHVybABEb3VibGUgQCBpbiB1cmwARW1wdHkgQ29udGVudC1MZW5ndGgASW52YWxpZCBjaGFyYWN0ZXIgaW4gQ29udGVudC1MZW5ndGgARHVwbGljYXRlIENvbnRlbnQtTGVuZ3RoAEludmFsaWQgY2hhciBpbiB1cmwgcGF0aABDb250ZW50LUxlbmd0aCBjYW4ndCBiZSBwcmVzZW50IHdpdGggVHJhbnNmZXItRW5jb2RpbmcASW52YWxpZCBjaGFyYWN0ZXIgaW4gY2h1bmsgc2l6ZQBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX2hlYWRlcl92YWx1ZQBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX2NodW5rX2V4dGVuc2lvbl92YWx1ZQBJbnZhbGlkIGNoYXJhY3RlciBpbiBjaHVuayBleHRlbnNpb25zIHZhbHVlAE1pc3NpbmcgZXhwZWN0ZWQgTEYgYWZ0ZXIgaGVhZGVyIHZhbHVlAEludmFsaWQgYFRyYW5zZmVyLUVuY29kaW5nYCBoZWFkZXIgdmFsdWUASW52YWxpZCBjaGFyYWN0ZXIgaW4gY2h1bmsgZXh0ZW5zaW9ucyBxdW90ZSB2YWx1ZQBJbnZhbGlkIGNoYXJhY3RlciBpbiBjaHVuayBleHRlbnNpb25zIHF1b3RlZCB2YWx1ZQBQYXVzZWQgYnkgb25faGVhZGVyc19jb21wbGV0ZQBJbnZhbGlkIEVPRiBzdGF0ZQBvbl9yZXNldCBwYXVzZQBvbl9jaHVua19oZWFkZXIgcGF1c2UAb25fbWVzc2FnZV9iZWdpbiBwYXVzZQBvbl9jaHVua19leHRlbnNpb25fdmFsdWUgcGF1c2UAb25fc3RhdHVzX2NvbXBsZXRlIHBhdXNlAG9uX3ZlcnNpb25fY29tcGxldGUgcGF1c2UAb25fdXJsX2NvbXBsZXRlIHBhdXNlAG9uX2NodW5rX2NvbXBsZXRlIHBhdXNlAG9uX2hlYWRlcl92YWx1ZV9jb21wbGV0ZSBwYXVzZQBvbl9tZXNzYWdlX2NvbXBsZXRlIHBhdXNlAG9uX21ldGhvZF9jb21wbGV0ZSBwYXVzZQBvbl9oZWFkZXJfZmllbGRfY29tcGxldGUgcGF1c2UAb25fY2h1bmtfZXh0ZW5zaW9uX25hbWUgcGF1c2UAVW5leHBlY3RlZCBzcGFjZSBhZnRlciBzdGFydCBsaW5lAFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fY2h1bmtfZXh0ZW5zaW9uX25hbWUASW52YWxpZCBjaGFyYWN0ZXIgaW4gY2h1bmsgZXh0ZW5zaW9ucyBuYW1lAFBhdXNlIG9uIENPTk5FQ1QvVXBncmFkZQBQYXVzZSBvbiBQUkkvVXBncmFkZQBFeHBlY3RlZCBIVFRQLzIgQ29ubmVjdGlvbiBQcmVmYWNlAFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fbWV0aG9kAEV4cGVjdGVkIHNwYWNlIGFmdGVyIG1ldGhvZABTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX2hlYWRlcl9maWVsZABQYXVzZWQASW52YWxpZCB3b3JkIGVuY291bnRlcmVkAEludmFsaWQgbWV0aG9kIGVuY291bnRlcmVkAFVuZXhwZWN0ZWQgY2hhciBpbiB1cmwgc2NoZW1hAFJlcXVlc3QgaGFzIGludmFsaWQgYFRyYW5zZmVyLUVuY29kaW5nYABTV0lUQ0hfUFJPWFkAVVNFX1BST1hZAE1LQUNUSVZJVFkAVU5QUk9DRVNTQUJMRV9FTlRJVFkAQ09QWQBNT1ZFRF9QRVJNQU5FTlRMWQBUT09fRUFSTFkATk9USUZZAEZBSUxFRF9ERVBFTkRFTkNZAEJBRF9HQVRFV0FZAFBMQVkAUFVUAENIRUNLT1VUAEdBVEVXQVlfVElNRU9VVABSRVFVRVNUX1RJTUVPVVQATkVUV09SS19DT05ORUNUX1RJTUVPVVQAQ09OTkVDVElPTl9USU1FT1VUAExPR0lOX1RJTUVPVVQATkVUV09SS19SRUFEX1RJTUVPVVQAUE9TVABNSVNESVJFQ1RFRF9SRVFVRVNUAENMSUVOVF9DTE9TRURfUkVRVUVTVABDTElFTlRfQ0xPU0VEX0xPQURfQkFMQU5DRURfUkVRVUVTVABCQURfUkVRVUVTVABIVFRQX1JFUVVFU1RfU0VOVF9UT19IVFRQU19QT1JUAFJFUE9SVABJTV9BX1RFQVBPVABSRVNFVF9DT05URU5UAE5PX0NPTlRFTlQAUEFSVElBTF9DT05URU5UAEhQRV9JTlZBTElEX0NPTlNUQU5UAEhQRV9DQl9SRVNFVABHRVQASFBFX1NUUklDVABDT05GTElDVABURU1QT1JBUllfUkVESVJFQ1QAUEVSTUFORU5UX1JFRElSRUNUAENPTk5FQ1QATVVMVElfU1RBVFVTAEhQRV9JTlZBTElEX1NUQVRVUwBUT09fTUFOWV9SRVFVRVNUUwBFQVJMWV9ISU5UUwBVTkFWQUlMQUJMRV9GT1JfTEVHQUxfUkVBU09OUwBPUFRJT05TAFNXSVRDSElOR19QUk9UT0NPTFMAVkFSSUFOVF9BTFNPX05FR09USUFURVMATVVMVElQTEVfQ0hPSUNFUwBJTlRFUk5BTF9TRVJWRVJfRVJST1IAV0VCX1NFUlZFUl9VTktOT1dOX0VSUk9SAFJBSUxHVU5fRVJST1IASURFTlRJVFlfUFJPVklERVJfQVVUSEVOVElDQVRJT05fRVJST1IAU1NMX0NFUlRJRklDQVRFX0VSUk9SAElOVkFMSURfWF9GT1JXQVJERURfRk9SAFNFVF9QQVJBTUVURVIAR0VUX1BBUkFNRVRFUgBIUEVfVVNFUgBTRUVfT1RIRVIASFBFX0NCX0NIVU5LX0hFQURFUgBNS0NBTEVOREFSAFNFVFVQAFdFQl9TRVJWRVJfSVNfRE9XTgBURUFSRE9XTgBIUEVfQ0xPU0VEX0NPTk5FQ1RJT04ASEVVUklTVElDX0VYUElSQVRJT04ARElTQ09OTkVDVEVEX09QRVJBVElPTgBOT05fQVVUSE9SSVRBVElWRV9JTkZPUk1BVElPTgBIUEVfSU5WQUxJRF9WRVJTSU9OAEhQRV9DQl9NRVNTQUdFX0JFR0lOAFNJVEVfSVNfRlJPWkVOAEhQRV9JTlZBTElEX0hFQURFUl9UT0tFTgBJTlZBTElEX1RPS0VOAEZPUkJJRERFTgBFTkhBTkNFX1lPVVJfQ0FMTQBIUEVfSU5WQUxJRF9VUkwAQkxPQ0tFRF9CWV9QQVJFTlRBTF9DT05UUk9MAE1LQ09MAEFDTABIUEVfSU5URVJOQUwAUkVRVUVTVF9IRUFERVJfRklFTERTX1RPT19MQVJHRV9VTk9GRklDSUFMAEhQRV9PSwBVTkxJTksAVU5MT0NLAFBSSQBSRVRSWV9XSVRIAEhQRV9JTlZBTElEX0NPTlRFTlRfTEVOR1RIAEhQRV9VTkVYUEVDVEVEX0NPTlRFTlRfTEVOR1RIAEZMVVNIAFBST1BQQVRDSABNLVNFQVJDSABVUklfVE9PX0xPTkcAUFJPQ0VTU0lORwBNSVNDRUxMQU5FT1VTX1BFUlNJU1RFTlRfV0FSTklORwBNSVNDRUxMQU5FT1VTX1dBUk5JTkcASFBFX0lOVkFMSURfVFJBTlNGRVJfRU5DT0RJTkcARXhwZWN0ZWQgQ1JMRgBIUEVfSU5WQUxJRF9DSFVOS19TSVpFAE1PVkUAQ09OVElOVUUASFBFX0NCX1NUQVRVU19DT01QTEVURQBIUEVfQ0JfSEVBREVSU19DT01QTEVURQBIUEVfQ0JfVkVSU0lPTl9DT01QTEVURQBIUEVfQ0JfVVJMX0NPTVBMRVRFAEhQRV9DQl9DSFVOS19DT01QTEVURQBIUEVfQ0JfSEVBREVSX1ZBTFVFX0NPTVBMRVRFAEhQRV9DQl9DSFVOS19FWFRFTlNJT05fVkFMVUVfQ09NUExFVEUASFBFX0NCX0NIVU5LX0VYVEVOU0lPTl9OQU1FX0NPTVBMRVRFAEhQRV9DQl9NRVNTQUdFX0NPTVBMRVRFAEhQRV9DQl9NRVRIT0RfQ09NUExFVEUASFBFX0NCX0hFQURFUl9GSUVMRF9DT01QTEVURQBERUxFVEUASFBFX0lOVkFMSURfRU9GX1NUQVRFAElOVkFMSURfU1NMX0NFUlRJRklDQVRFAFBBVVNFAE5PX1JFU1BPTlNFAFVOU1VQUE9SVEVEX01FRElBX1RZUEUAR09ORQBOT1RfQUNDRVBUQUJMRQBTRVJWSUNFX1VOQVZBSUxBQkxFAFJBTkdFX05PVF9TQVRJU0ZJQUJMRQBPUklHSU5fSVNfVU5SRUFDSEFCTEUAUkVTUE9OU0VfSVNfU1RBTEUAUFVSR0UATUVSR0UAUkVRVUVTVF9IRUFERVJfRklFTERTX1RPT19MQVJHRQBSRVFVRVNUX0hFQURFUl9UT09fTEFSR0UAUEFZTE9BRF9UT09fTEFSR0UASU5TVUZGSUNJRU5UX1NUT1JBR0UASFBFX1BBVVNFRF9VUEdSQURFAEhQRV9QQVVTRURfSDJfVVBHUkFERQBTT1VSQ0UAQU5OT1VOQ0UAVFJBQ0UASFBFX1VORVhQRUNURURfU1BBQ0UAREVTQ1JJQkUAVU5TVUJTQ1JJQkUAUkVDT1JEAEhQRV9JTlZBTElEX01FVEhPRABOT1RfRk9VTkQAUFJPUEZJTkQAVU5CSU5EAFJFQklORABVTkFVVEhPUklaRUQATUVUSE9EX05PVF9BTExPV0VEAEhUVFBfVkVSU0lPTl9OT1RfU1VQUE9SVEVEAEFMUkVBRFlfUkVQT1JURUQAQUNDRVBURUQATk9UX0lNUExFTUVOVEVEAExPT1BfREVURUNURUQASFBFX0NSX0VYUEVDVEVEAEhQRV9MRl9FWFBFQ1RFRABDUkVBVEVEAElNX1VTRUQASFBFX1BBVVNFRABUSU1FT1VUX09DQ1VSRUQAUEFZTUVOVF9SRVFVSVJFRABQUkVDT05ESVRJT05fUkVRVUlSRUQAUFJPWFlfQVVUSEVOVElDQVRJT05fUkVRVUlSRUQATkVUV09SS19BVVRIRU5USUNBVElPTl9SRVFVSVJFRABMRU5HVEhfUkVRVUlSRUQAU1NMX0NFUlRJRklDQVRFX1JFUVVJUkVEAFVQR1JBREVfUkVRVUlSRUQAUEFHRV9FWFBJUkVEAFBSRUNPTkRJVElPTl9GQUlMRUQARVhQRUNUQVRJT05fRkFJTEVEAFJFVkFMSURBVElPTl9GQUlMRUQAU1NMX0hBTkRTSEFLRV9GQUlMRUQATE9DS0VEAFRSQU5TRk9STUFUSU9OX0FQUExJRUQATk9UX01PRElGSUVEAE5PVF9FWFRFTkRFRABCQU5EV0lEVEhfTElNSVRfRVhDRUVERUQAU0lURV9JU19PVkVSTE9BREVEAEhFQUQARXhwZWN0ZWQgSFRUUC8AAF4TAAAmEwAAMBAAAPAXAACdEwAAFRIAADkXAADwEgAAChAAAHUSAACtEgAAghMAAE8UAAB/EAAAoBUAACMUAACJEgAAixQAAE0VAADUEQAAzxQAABAYAADJFgAA3BYAAMERAADgFwAAuxQAAHQUAAB8FQAA5RQAAAgXAAAfEAAAZRUAAKMUAAAoFQAAAhUAAJkVAAAsEAAAixkAAE8PAADUDgAAahAAAM4QAAACFwAAiQ4AAG4TAAAcEwAAZhQAAFYXAADBEwAAzRMAAGwTAABoFwAAZhcAAF8XAAAiEwAAzg8AAGkOAADYDgAAYxYAAMsTAACqDgAAKBcAACYXAADFEwAAXRYAAOgRAABnEwAAZRMAAPIWAABzEwAAHRcAAPkWAADzEQAAzw4AAM4VAAAMEgAAsxEAAKURAABhEAAAMhcAALsTAEH5NQsBAQBBkDYL4AEBAQIBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQBB/TcLAQEAQZE4C14CAwICAgICAAACAgACAgACAgICAgICAgICAAQAAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAAgACAEH9OQsBAQBBkToLXgIAAgICAgIAAAICAAICAAICAgICAgICAgIAAwAEAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgACAAIAQfA7Cw1sb3NlZWVwLWFsaXZlAEGJPAsBAQBBoDwL4AEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQBBiT4LAQEAQaA+C+cBAQEBAQEBAQEBAQEBAgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQFjaHVua2VkAEGwwAALXwEBAAEBAQEBAAABAQABAQABAQEBAQEBAQEBAAAAAAAAAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQABAEGQwgALIWVjdGlvbmVudC1sZW5ndGhvbnJveHktY29ubmVjdGlvbgBBwMIACy1yYW5zZmVyLWVuY29kaW5ncGdyYWRlDQoNCg0KU00NCg0KVFRQL0NFL1RTUC8AQfnCAAsFAQIAAQMAQZDDAAvgAQQBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAEH5xAALBQECAAEDAEGQxQAL4AEEAQEFAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQBB+cYACwQBAAABAEGRxwAL3wEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAEH6yAALBAEAAAIAQZDJAAtfAwQAAAQEBAQEBAQEBAQEBQQEBAQEBAQEBAQEBAAEAAYHBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQABAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAQAQfrKAAsEAQAAAQBBkMsACwEBAEGqywALQQIAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAEH6zAALBAEAAAEAQZDNAAsBAQBBms0ACwYCAAAAAAIAQbHNAAs6AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwBB8M4AC5YBTk9VTkNFRUNLT1VUTkVDVEVURUNSSUJFTFVTSEVURUFEU0VBUkNIUkdFQ1RJVklUWUxFTkRBUlZFT1RJRllQVElPTlNDSFNFQVlTVEFUQ0hHRU9SRElSRUNUT1JUUkNIUEFSQU1FVEVSVVJDRUJTQ1JJQkVBUkRPV05BQ0VJTkROS0NLVUJTQ1JJQkVIVFRQL0FEVFAv', 'base64');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js":
/*!************************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  Buffer\n} = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nmodule.exports = Buffer.from('', 'base64');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.enumToMap = void 0;\nfunction enumToMap(obj) {\n  const res = {};\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (typeof value === 'number') {\n      res[key] = value;\n    }\n  });\n  return res;\n}\nexports.enumToMap = enumToMap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9sbGh0dHAvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUssQ0FBQztBQUMxQixTQUFTRSxTQUFTQSxDQUFDQyxHQUFHLEVBQUU7RUFDcEIsTUFBTUMsR0FBRyxHQUFHLENBQUMsQ0FBQztFQUNkTixNQUFNLENBQUNPLElBQUksQ0FBQ0YsR0FBRyxDQUFDLENBQUNHLE9BQU8sQ0FBRUMsR0FBRyxJQUFLO0lBQzlCLE1BQU1OLEtBQUssR0FBR0UsR0FBRyxDQUFDSSxHQUFHLENBQUM7SUFDdEIsSUFBSSxPQUFPTixLQUFLLEtBQUssUUFBUSxFQUFFO01BQzNCRyxHQUFHLENBQUNHLEdBQUcsQ0FBQyxHQUFHTixLQUFLO0lBQ3BCO0VBQ0osQ0FBQyxDQUFDO0VBQ0YsT0FBT0csR0FBRztBQUNkO0FBQ0FKLGlCQUFpQixHQUFHRSxTQUFTIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvbGxodHRwL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbnVtVG9NYXAgPSB2b2lkIDA7XG5mdW5jdGlvbiBlbnVtVG9NYXAob2JqKSB7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJlc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5lbnVtVG9NYXAgPSBlbnVtVG9NYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtVG9NYXAiLCJvYmoiLCJyZXMiLCJrZXlzIiwiZm9yRWFjaCIsImtleSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-agent.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-agent.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  kClients\n} = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst Agent = __webpack_require__(/*! ../dispatcher/agent */ \"(ssr)/./node_modules/undici/lib/dispatcher/agent.js\");\nconst {\n  kAgent,\n  kMockAgentSet,\n  kMockAgentGet,\n  kDispatches,\n  kIsMockActive,\n  kNetConnect,\n  kGetNetConnect,\n  kOptions,\n  kFactory\n} = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst MockClient = __webpack_require__(/*! ./mock-client */ \"(ssr)/./node_modules/undici/lib/mock/mock-client.js\");\nconst MockPool = __webpack_require__(/*! ./mock-pool */ \"(ssr)/./node_modules/undici/lib/mock/mock-pool.js\");\nconst {\n  matchValue,\n  buildMockOptions\n} = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst {\n  InvalidArgumentError,\n  UndiciError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst Dispatcher = __webpack_require__(/*! ../dispatcher/dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher/dispatcher.js\");\nconst Pluralizer = __webpack_require__(/*! ./pluralizer */ \"(ssr)/./node_modules/undici/lib/mock/pluralizer.js\");\nconst PendingInterceptorsFormatter = __webpack_require__(/*! ./pending-interceptors-formatter */ \"(ssr)/./node_modules/undici/lib/mock/pending-interceptors-formatter.js\");\nclass MockAgent extends Dispatcher {\n  constructor(opts) {\n    super(opts);\n    this[kNetConnect] = true;\n    this[kIsMockActive] = true;\n\n    // Instantiate Agent and encapsulate\n    if (opts?.agent && typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent');\n    }\n    const agent = opts?.agent ? opts.agent : new Agent(opts);\n    this[kAgent] = agent;\n    this[kClients] = agent[kClients];\n    this[kOptions] = buildMockOptions(opts);\n  }\n  get(origin) {\n    let dispatcher = this[kMockAgentGet](origin);\n    if (!dispatcher) {\n      dispatcher = this[kFactory](origin);\n      this[kMockAgentSet](origin, dispatcher);\n    }\n    return dispatcher;\n  }\n  dispatch(opts, handler) {\n    // Call MockAgent.get to perform additional setup before dispatching as normal\n    this.get(opts.origin);\n    return this[kAgent].dispatch(opts, handler);\n  }\n  async close() {\n    await this[kAgent].close();\n    this[kClients].clear();\n  }\n  deactivate() {\n    this[kIsMockActive] = false;\n  }\n  activate() {\n    this[kIsMockActive] = true;\n  }\n  enableNetConnect(matcher) {\n    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n      if (Array.isArray(this[kNetConnect])) {\n        this[kNetConnect].push(matcher);\n      } else {\n        this[kNetConnect] = [matcher];\n      }\n    } else if (typeof matcher === 'undefined') {\n      this[kNetConnect] = true;\n    } else {\n      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.');\n    }\n  }\n  disableNetConnect() {\n    this[kNetConnect] = false;\n  }\n\n  // This is required to bypass issues caused by using global symbols - see:\n  // https://github.com/nodejs/undici/issues/1447\n  get isMockActive() {\n    return this[kIsMockActive];\n  }\n  [kMockAgentSet](origin, dispatcher) {\n    this[kClients].set(origin, dispatcher);\n  }\n  [kFactory](origin) {\n    const mockOptions = Object.assign({\n      agent: this\n    }, this[kOptions]);\n    return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);\n  }\n  [kMockAgentGet](origin) {\n    // First check if we can immediately find it\n    const client = this[kClients].get(origin);\n    if (client) {\n      return client;\n    }\n\n    // If the origin is not a string create a dummy parent pool and return to user\n    if (typeof origin !== 'string') {\n      const dispatcher = this[kFactory]('http://localhost:9999');\n      this[kMockAgentSet](origin, dispatcher);\n      return dispatcher;\n    }\n\n    // If we match, create a pool and assign the same dispatches\n    for (const [keyMatcher, nonExplicitDispatcher] of Array.from(this[kClients])) {\n      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n        const dispatcher = this[kFactory](origin);\n        this[kMockAgentSet](origin, dispatcher);\n        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];\n        return dispatcher;\n      }\n    }\n  }\n  [kGetNetConnect]() {\n    return this[kNetConnect];\n  }\n  pendingInterceptors() {\n    const mockAgentClients = this[kClients];\n    return Array.from(mockAgentClients.entries()).flatMap(_ref => {\n      let [origin, scope] = _ref;\n      return scope[kDispatches].map(dispatch => ({\n        ...dispatch,\n        origin\n      }));\n    }).filter(_ref2 => {\n      let {\n        pending\n      } = _ref2;\n      return pending;\n    });\n  }\n  assertNoPendingInterceptors() {\n    let {\n      pendingInterceptorsFormatter = new PendingInterceptorsFormatter()\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const pending = this.pendingInterceptors();\n    if (pending.length === 0) {\n      return;\n    }\n    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length);\n    throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim());\n  }\n}\nmodule.exports = MockAgent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-client.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-client.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  promisify\n} = __webpack_require__(/*! node:util */ \"node:util\");\nconst Client = __webpack_require__(/*! ../dispatcher/client */ \"(ssr)/./node_modules/undici/lib/dispatcher/client.js\");\nconst {\n  buildMockDispatch\n} = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst {\n  kDispatches,\n  kMockAgent,\n  kClose,\n  kOriginalClose,\n  kOrigin,\n  kOriginalDispatch,\n  kConnected\n} = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst {\n  MockInterceptor\n} = __webpack_require__(/*! ./mock-interceptor */ \"(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js\");\nconst Symbols = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst {\n  InvalidArgumentError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\n\n/**\n * MockClient provides an API that extends the Client to influence the mockDispatches.\n */\nclass MockClient extends Client {\n  constructor(origin, opts) {\n    super(origin, opts);\n    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent');\n    }\n    this[kMockAgent] = opts.agent;\n    this[kOrigin] = origin;\n    this[kDispatches] = [];\n    this[kConnected] = 1;\n    this[kOriginalDispatch] = this.dispatch;\n    this[kOriginalClose] = this.close.bind(this);\n    this.dispatch = buildMockDispatch.call(this);\n    this.close = this[kClose];\n  }\n  get [Symbols.kConnected]() {\n    return this[kConnected];\n  }\n\n  /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */\n  intercept(opts) {\n    return new MockInterceptor(opts, this[kDispatches]);\n  }\n  async [kClose]() {\n    await promisify(this[kOriginalClose])();\n    this[kConnected] = 0;\n    this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);\n  }\n}\nmodule.exports = MockClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLE1BQU07RUFBRUE7QUFBVSxDQUFDLEdBQUdDLG1CQUFPLENBQUMsNEJBQVcsQ0FBQztBQUMxQyxNQUFNQyxNQUFNLEdBQUdELG1CQUFPLENBQUMsa0ZBQXNCLENBQUM7QUFDOUMsTUFBTTtFQUFFRTtBQUFrQixDQUFDLEdBQUdGLG1CQUFPLENBQUMsd0VBQWMsQ0FBQztBQUNyRCxNQUFNO0VBQ0pHLFdBQVc7RUFDWEMsVUFBVTtFQUNWQyxNQUFNO0VBQ05DLGNBQWM7RUFDZEMsT0FBTztFQUNQQyxpQkFBaUI7RUFDakJDO0FBQ0YsQ0FBQyxHQUFHVCxtQkFBTyxDQUFDLDRFQUFnQixDQUFDO0FBQzdCLE1BQU07RUFBRVU7QUFBZ0IsQ0FBQyxHQUFHVixtQkFBTyxDQUFDLG9GQUFvQixDQUFDO0FBQ3pELE1BQU1XLE9BQU8sR0FBR1gsbUJBQU8sQ0FBQyx3RUFBaUIsQ0FBQztBQUMxQyxNQUFNO0VBQUVZO0FBQXFCLENBQUMsR0FBR1osbUJBQU8sQ0FBQyxzRUFBZ0IsQ0FBQzs7QUFFMUQ7QUFDQTtBQUNBO0FBQ0EsTUFBTWEsVUFBVSxTQUFTWixNQUFNLENBQUM7RUFDOUJhLFdBQVdBLENBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFO0lBQ3pCLEtBQUssQ0FBQ0QsTUFBTSxFQUFFQyxJQUFJLENBQUM7SUFFbkIsSUFBSSxDQUFDQSxJQUFJLElBQUksQ0FBQ0EsSUFBSSxDQUFDQyxLQUFLLElBQUksT0FBT0QsSUFBSSxDQUFDQyxLQUFLLENBQUNDLFFBQVEsS0FBSyxVQUFVLEVBQUU7TUFDckUsTUFBTSxJQUFJTixvQkFBb0IsQ0FBQywwQ0FBMEMsQ0FBQztJQUM1RTtJQUVBLElBQUksQ0FBQ1IsVUFBVSxDQUFDLEdBQUdZLElBQUksQ0FBQ0MsS0FBSztJQUM3QixJQUFJLENBQUNWLE9BQU8sQ0FBQyxHQUFHUSxNQUFNO0lBQ3RCLElBQUksQ0FBQ1osV0FBVyxDQUFDLEdBQUcsRUFBRTtJQUN0QixJQUFJLENBQUNNLFVBQVUsQ0FBQyxHQUFHLENBQUM7SUFDcEIsSUFBSSxDQUFDRCxpQkFBaUIsQ0FBQyxHQUFHLElBQUksQ0FBQ1UsUUFBUTtJQUN2QyxJQUFJLENBQUNaLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQ2EsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBRTVDLElBQUksQ0FBQ0YsUUFBUSxHQUFHaEIsaUJBQWlCLENBQUNtQixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzVDLElBQUksQ0FBQ0YsS0FBSyxHQUFHLElBQUksQ0FBQ2QsTUFBTSxDQUFDO0VBQzNCO0VBRUEsS0FBS00sT0FBTyxDQUFDRixVQUFVLElBQUs7SUFDMUIsT0FBTyxJQUFJLENBQUNBLFVBQVUsQ0FBQztFQUN6Qjs7RUFFQTtBQUNGO0FBQ0E7RUFDRWEsU0FBU0EsQ0FBRU4sSUFBSSxFQUFFO0lBQ2YsT0FBTyxJQUFJTixlQUFlLENBQUNNLElBQUksRUFBRSxJQUFJLENBQUNiLFdBQVcsQ0FBQyxDQUFDO0VBQ3JEO0VBRUEsT0FBT0UsTUFBTSxJQUFLO0lBQ2hCLE1BQU1OLFNBQVMsQ0FBQyxJQUFJLENBQUNPLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxJQUFJLENBQUNHLFVBQVUsQ0FBQyxHQUFHLENBQUM7SUFDcEIsSUFBSSxDQUFDTCxVQUFVLENBQUMsQ0FBQ08sT0FBTyxDQUFDWSxRQUFRLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQ2pCLE9BQU8sQ0FBQyxDQUFDO0VBQzFEO0FBQ0Y7QUFFQWtCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHYixVQUFVIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvbW9jay9tb2NrLWNsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBwcm9taXNpZnkgfSA9IHJlcXVpcmUoJ25vZGU6dXRpbCcpXG5jb25zdCBDbGllbnQgPSByZXF1aXJlKCcuLi9kaXNwYXRjaGVyL2NsaWVudCcpXG5jb25zdCB7IGJ1aWxkTW9ja0Rpc3BhdGNoIH0gPSByZXF1aXJlKCcuL21vY2stdXRpbHMnKVxuY29uc3Qge1xuICBrRGlzcGF0Y2hlcyxcbiAga01vY2tBZ2VudCxcbiAga0Nsb3NlLFxuICBrT3JpZ2luYWxDbG9zZSxcbiAga09yaWdpbixcbiAga09yaWdpbmFsRGlzcGF0Y2gsXG4gIGtDb25uZWN0ZWRcbn0gPSByZXF1aXJlKCcuL21vY2stc3ltYm9scycpXG5jb25zdCB7IE1vY2tJbnRlcmNlcHRvciB9ID0gcmVxdWlyZSgnLi9tb2NrLWludGVyY2VwdG9yJylcbmNvbnN0IFN5bWJvbHMgPSByZXF1aXJlKCcuLi9jb3JlL3N5bWJvbHMnKVxuY29uc3QgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuXG4vKipcbiAqIE1vY2tDbGllbnQgcHJvdmlkZXMgYW4gQVBJIHRoYXQgZXh0ZW5kcyB0aGUgQ2xpZW50IHRvIGluZmx1ZW5jZSB0aGUgbW9ja0Rpc3BhdGNoZXMuXG4gKi9cbmNsYXNzIE1vY2tDbGllbnQgZXh0ZW5kcyBDbGllbnQge1xuICBjb25zdHJ1Y3RvciAob3JpZ2luLCBvcHRzKSB7XG4gICAgc3VwZXIob3JpZ2luLCBvcHRzKVxuXG4gICAgaWYgKCFvcHRzIHx8ICFvcHRzLmFnZW50IHx8IHR5cGVvZiBvcHRzLmFnZW50LmRpc3BhdGNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0FyZ3VtZW50IG9wdHMuYWdlbnQgbXVzdCBpbXBsZW1lbnQgQWdlbnQnKVxuICAgIH1cblxuICAgIHRoaXNba01vY2tBZ2VudF0gPSBvcHRzLmFnZW50XG4gICAgdGhpc1trT3JpZ2luXSA9IG9yaWdpblxuICAgIHRoaXNba0Rpc3BhdGNoZXNdID0gW11cbiAgICB0aGlzW2tDb25uZWN0ZWRdID0gMVxuICAgIHRoaXNba09yaWdpbmFsRGlzcGF0Y2hdID0gdGhpcy5kaXNwYXRjaFxuICAgIHRoaXNba09yaWdpbmFsQ2xvc2VdID0gdGhpcy5jbG9zZS5iaW5kKHRoaXMpXG5cbiAgICB0aGlzLmRpc3BhdGNoID0gYnVpbGRNb2NrRGlzcGF0Y2guY2FsbCh0aGlzKVxuICAgIHRoaXMuY2xvc2UgPSB0aGlzW2tDbG9zZV1cbiAgfVxuXG4gIGdldCBbU3ltYm9scy5rQ29ubmVjdGVkXSAoKSB7XG4gICAgcmV0dXJuIHRoaXNba0Nvbm5lY3RlZF1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoZSBiYXNlIGludGVyY2VwdG9yIGZvciBtb2NraW5nIHJlcGxpZXMgZnJvbSB1bmRpY2kuXG4gICAqL1xuICBpbnRlcmNlcHQgKG9wdHMpIHtcbiAgICByZXR1cm4gbmV3IE1vY2tJbnRlcmNlcHRvcihvcHRzLCB0aGlzW2tEaXNwYXRjaGVzXSlcbiAgfVxuXG4gIGFzeW5jIFtrQ2xvc2VdICgpIHtcbiAgICBhd2FpdCBwcm9taXNpZnkodGhpc1trT3JpZ2luYWxDbG9zZV0pKClcbiAgICB0aGlzW2tDb25uZWN0ZWRdID0gMFxuICAgIHRoaXNba01vY2tBZ2VudF1bU3ltYm9scy5rQ2xpZW50c10uZGVsZXRlKHRoaXNba09yaWdpbl0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb2NrQ2xpZW50XG4iXSwibmFtZXMiOlsicHJvbWlzaWZ5IiwicmVxdWlyZSIsIkNsaWVudCIsImJ1aWxkTW9ja0Rpc3BhdGNoIiwia0Rpc3BhdGNoZXMiLCJrTW9ja0FnZW50Iiwia0Nsb3NlIiwia09yaWdpbmFsQ2xvc2UiLCJrT3JpZ2luIiwia09yaWdpbmFsRGlzcGF0Y2giLCJrQ29ubmVjdGVkIiwiTW9ja0ludGVyY2VwdG9yIiwiU3ltYm9scyIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiTW9ja0NsaWVudCIsImNvbnN0cnVjdG9yIiwib3JpZ2luIiwib3B0cyIsImFnZW50IiwiZGlzcGF0Y2giLCJjbG9zZSIsImJpbmQiLCJjYWxsIiwiaW50ZXJjZXB0Iiwia0NsaWVudHMiLCJkZWxldGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-errors.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  UndiciError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nclass MockNotMatchedError extends UndiciError {\n  constructor(message) {\n    super(message);\n    Error.captureStackTrace(this, MockNotMatchedError);\n    this.name = 'MockNotMatchedError';\n    this.message = message || 'The request does not match any registered mock dispatches';\n    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED';\n  }\n}\nmodule.exports = {\n  MockNotMatchedError\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLE1BQU07RUFBRUE7QUFBWSxDQUFDLEdBQUdDLG1CQUFPLENBQUMsc0VBQWdCLENBQUM7QUFFakQsTUFBTUMsbUJBQW1CLFNBQVNGLFdBQVcsQ0FBQztFQUM1Q0csV0FBV0EsQ0FBRUMsT0FBTyxFQUFFO0lBQ3BCLEtBQUssQ0FBQ0EsT0FBTyxDQUFDO0lBQ2RDLEtBQUssQ0FBQ0MsaUJBQWlCLENBQUMsSUFBSSxFQUFFSixtQkFBbUIsQ0FBQztJQUNsRCxJQUFJLENBQUNLLElBQUksR0FBRyxxQkFBcUI7SUFDakMsSUFBSSxDQUFDSCxPQUFPLEdBQUdBLE9BQU8sSUFBSSwyREFBMkQ7SUFDckYsSUFBSSxDQUFDSSxJQUFJLEdBQUcsK0JBQStCO0VBQzdDO0FBQ0Y7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZlI7QUFDRixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvbW9jay9tb2NrLWVycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBVbmRpY2lFcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuXG5jbGFzcyBNb2NrTm90TWF0Y2hlZEVycm9yIGV4dGVuZHMgVW5kaWNpRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgTW9ja05vdE1hdGNoZWRFcnJvcilcbiAgICB0aGlzLm5hbWUgPSAnTW9ja05vdE1hdGNoZWRFcnJvcidcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdUaGUgcmVxdWVzdCBkb2VzIG5vdCBtYXRjaCBhbnkgcmVnaXN0ZXJlZCBtb2NrIGRpc3BhdGNoZXMnXG4gICAgdGhpcy5jb2RlID0gJ1VORF9NT0NLX0VSUl9NT0NLX05PVF9NQVRDSEVEJ1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBNb2NrTm90TWF0Y2hlZEVycm9yXG59XG4iXSwibmFtZXMiOlsiVW5kaWNpRXJyb3IiLCJyZXF1aXJlIiwiTW9ja05vdE1hdGNoZWRFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJuYW1lIiwiY29kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-interceptor.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  getResponseData,\n  buildKey,\n  addMockDispatch\n} = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst {\n  kDispatches,\n  kDispatchKey,\n  kDefaultHeaders,\n  kDefaultTrailers,\n  kContentLength,\n  kMockDispatch\n} = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst {\n  InvalidArgumentError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst {\n  buildURL\n} = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\n\n/**\n * Defines the scope API for an interceptor reply\n */\nclass MockScope {\n  constructor(mockDispatch) {\n    this[kMockDispatch] = mockDispatch;\n  }\n\n  /**\n   * Delay a reply by a set amount in ms.\n   */\n  delay(waitInMs) {\n    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n      throw new InvalidArgumentError('waitInMs must be a valid integer > 0');\n    }\n    this[kMockDispatch].delay = waitInMs;\n    return this;\n  }\n\n  /**\n   * For a defined reply, never mark as consumed.\n   */\n  persist() {\n    this[kMockDispatch].persist = true;\n    return this;\n  }\n\n  /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */\n  times(repeatTimes) {\n    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0');\n    }\n    this[kMockDispatch].times = repeatTimes;\n    return this;\n  }\n}\n\n/**\n * Defines an interceptor for a Mock\n */\nclass MockInterceptor {\n  constructor(opts, mockDispatches) {\n    if (typeof opts !== 'object') {\n      throw new InvalidArgumentError('opts must be an object');\n    }\n    if (typeof opts.path === 'undefined') {\n      throw new InvalidArgumentError('opts.path must be defined');\n    }\n    if (typeof opts.method === 'undefined') {\n      opts.method = 'GET';\n    }\n    // See https://github.com/nodejs/undici/issues/1245\n    // As per RFC 3986, clients are not supposed to send URI\n    // fragments to servers when they retrieve a document,\n    if (typeof opts.path === 'string') {\n      if (opts.query) {\n        opts.path = buildURL(opts.path, opts.query);\n      } else {\n        // Matches https://github.com/nodejs/undici/blob/main/lib/web/fetch/index.js#L1811\n        const parsedURL = new URL(opts.path, 'data://');\n        opts.path = parsedURL.pathname + parsedURL.search;\n      }\n    }\n    if (typeof opts.method === 'string') {\n      opts.method = opts.method.toUpperCase();\n    }\n    this[kDispatchKey] = buildKey(opts);\n    this[kDispatches] = mockDispatches;\n    this[kDefaultHeaders] = {};\n    this[kDefaultTrailers] = {};\n    this[kContentLength] = false;\n  }\n  createMockScopeDispatchData(_ref) {\n    let {\n      statusCode,\n      data,\n      responseOptions\n    } = _ref;\n    const responseData = getResponseData(data);\n    const contentLength = this[kContentLength] ? {\n      'content-length': responseData.length\n    } : {};\n    const headers = {\n      ...this[kDefaultHeaders],\n      ...contentLength,\n      ...responseOptions.headers\n    };\n    const trailers = {\n      ...this[kDefaultTrailers],\n      ...responseOptions.trailers\n    };\n    return {\n      statusCode,\n      data,\n      headers,\n      trailers\n    };\n  }\n  validateReplyParameters(replyParameters) {\n    if (typeof replyParameters.statusCode === 'undefined') {\n      throw new InvalidArgumentError('statusCode must be defined');\n    }\n    if (typeof replyParameters.responseOptions !== 'object' || replyParameters.responseOptions === null) {\n      throw new InvalidArgumentError('responseOptions must be an object');\n    }\n  }\n\n  /**\n   * Mock an undici request with a defined reply.\n   */\n  reply(replyOptionsCallbackOrStatusCode) {\n    // Values of reply aren't available right now as they\n    // can only be available when the reply callback is invoked.\n    if (typeof replyOptionsCallbackOrStatusCode === 'function') {\n      // We'll first wrap the provided callback in another function,\n      // this function will properly resolve the data from the callback\n      // when invoked.\n      const wrappedDefaultsCallback = opts => {\n        // Our reply options callback contains the parameter for statusCode, data and options.\n        const resolvedData = replyOptionsCallbackOrStatusCode(opts);\n\n        // Check if it is in the right format\n        if (typeof resolvedData !== 'object' || resolvedData === null) {\n          throw new InvalidArgumentError('reply options callback must return an object');\n        }\n        const replyParameters = {\n          data: '',\n          responseOptions: {},\n          ...resolvedData\n        };\n        this.validateReplyParameters(replyParameters);\n        // Since the values can be obtained immediately we return them\n        // from this higher order function that will be resolved later.\n        return {\n          ...this.createMockScopeDispatchData(replyParameters)\n        };\n      };\n\n      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);\n      return new MockScope(newMockDispatch);\n    }\n\n    // We can have either one or three parameters, if we get here,\n    // we should have 1-3 parameters. So we spread the arguments of\n    // this function to obtain the parameters, since replyData will always\n    // just be the statusCode.\n    const replyParameters = {\n      statusCode: replyOptionsCallbackOrStatusCode,\n      data: arguments[1] === undefined ? '' : arguments[1],\n      responseOptions: arguments[2] === undefined ? {} : arguments[2]\n    };\n    this.validateReplyParameters(replyParameters);\n\n    // Send in-already provided data like usual\n    const dispatchData = this.createMockScopeDispatchData(replyParameters);\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);\n    return new MockScope(newMockDispatch);\n  }\n\n  /**\n   * Mock an undici request with a defined error.\n   */\n  replyWithError(error) {\n    if (typeof error === 'undefined') {\n      throw new InvalidArgumentError('error must be defined');\n    }\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], {\n      error\n    });\n    return new MockScope(newMockDispatch);\n  }\n\n  /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */\n  defaultReplyHeaders(headers) {\n    if (typeof headers === 'undefined') {\n      throw new InvalidArgumentError('headers must be defined');\n    }\n    this[kDefaultHeaders] = headers;\n    return this;\n  }\n\n  /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */\n  defaultReplyTrailers(trailers) {\n    if (typeof trailers === 'undefined') {\n      throw new InvalidArgumentError('trailers must be defined');\n    }\n    this[kDefaultTrailers] = trailers;\n    return this;\n  }\n\n  /**\n   * Set reply content length header for replies on the interceptor\n   */\n  replyContentLength() {\n    this[kContentLength] = true;\n    return this;\n  }\n}\nmodule.exports.MockInterceptor = MockInterceptor;\nmodule.exports.MockScope = MockScope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-pool.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-pool.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  promisify\n} = __webpack_require__(/*! node:util */ \"node:util\");\nconst Pool = __webpack_require__(/*! ../dispatcher/pool */ \"(ssr)/./node_modules/undici/lib/dispatcher/pool.js\");\nconst {\n  buildMockDispatch\n} = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst {\n  kDispatches,\n  kMockAgent,\n  kClose,\n  kOriginalClose,\n  kOrigin,\n  kOriginalDispatch,\n  kConnected\n} = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst {\n  MockInterceptor\n} = __webpack_require__(/*! ./mock-interceptor */ \"(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js\");\nconst Symbols = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst {\n  InvalidArgumentError\n} = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\n\n/**\n * MockPool provides an API that extends the Pool to influence the mockDispatches.\n */\nclass MockPool extends Pool {\n  constructor(origin, opts) {\n    super(origin, opts);\n    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent');\n    }\n    this[kMockAgent] = opts.agent;\n    this[kOrigin] = origin;\n    this[kDispatches] = [];\n    this[kConnected] = 1;\n    this[kOriginalDispatch] = this.dispatch;\n    this[kOriginalClose] = this.close.bind(this);\n    this.dispatch = buildMockDispatch.call(this);\n    this.close = this[kClose];\n  }\n  get [Symbols.kConnected]() {\n    return this[kConnected];\n  }\n\n  /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */\n  intercept(opts) {\n    return new MockInterceptor(opts, this[kDispatches]);\n  }\n  async [kClose]() {\n    await promisify(this[kOriginalClose])();\n    this[kConnected] = 0;\n    this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);\n  }\n}\nmodule.exports = MockPool;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stcG9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixNQUFNO0VBQUVBO0FBQVUsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLDRCQUFXLENBQUM7QUFDMUMsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLDhFQUFvQixDQUFDO0FBQzFDLE1BQU07RUFBRUU7QUFBa0IsQ0FBQyxHQUFHRixtQkFBTyxDQUFDLHdFQUFjLENBQUM7QUFDckQsTUFBTTtFQUNKRyxXQUFXO0VBQ1hDLFVBQVU7RUFDVkMsTUFBTTtFQUNOQyxjQUFjO0VBQ2RDLE9BQU87RUFDUEMsaUJBQWlCO0VBQ2pCQztBQUNGLENBQUMsR0FBR1QsbUJBQU8sQ0FBQyw0RUFBZ0IsQ0FBQztBQUM3QixNQUFNO0VBQUVVO0FBQWdCLENBQUMsR0FBR1YsbUJBQU8sQ0FBQyxvRkFBb0IsQ0FBQztBQUN6RCxNQUFNVyxPQUFPLEdBQUdYLG1CQUFPLENBQUMsd0VBQWlCLENBQUM7QUFDMUMsTUFBTTtFQUFFWTtBQUFxQixDQUFDLEdBQUdaLG1CQUFPLENBQUMsc0VBQWdCLENBQUM7O0FBRTFEO0FBQ0E7QUFDQTtBQUNBLE1BQU1hLFFBQVEsU0FBU1osSUFBSSxDQUFDO0VBQzFCYSxXQUFXQSxDQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRTtJQUN6QixLQUFLLENBQUNELE1BQU0sRUFBRUMsSUFBSSxDQUFDO0lBRW5CLElBQUksQ0FBQ0EsSUFBSSxJQUFJLENBQUNBLElBQUksQ0FBQ0MsS0FBSyxJQUFJLE9BQU9ELElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxRQUFRLEtBQUssVUFBVSxFQUFFO01BQ3JFLE1BQU0sSUFBSU4sb0JBQW9CLENBQUMsMENBQTBDLENBQUM7SUFDNUU7SUFFQSxJQUFJLENBQUNSLFVBQVUsQ0FBQyxHQUFHWSxJQUFJLENBQUNDLEtBQUs7SUFDN0IsSUFBSSxDQUFDVixPQUFPLENBQUMsR0FBR1EsTUFBTTtJQUN0QixJQUFJLENBQUNaLFdBQVcsQ0FBQyxHQUFHLEVBQUU7SUFDdEIsSUFBSSxDQUFDTSxVQUFVLENBQUMsR0FBRyxDQUFDO0lBQ3BCLElBQUksQ0FBQ0QsaUJBQWlCLENBQUMsR0FBRyxJQUFJLENBQUNVLFFBQVE7SUFDdkMsSUFBSSxDQUFDWixjQUFjLENBQUMsR0FBRyxJQUFJLENBQUNhLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztJQUU1QyxJQUFJLENBQUNGLFFBQVEsR0FBR2hCLGlCQUFpQixDQUFDbUIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUM1QyxJQUFJLENBQUNGLEtBQUssR0FBRyxJQUFJLENBQUNkLE1BQU0sQ0FBQztFQUMzQjtFQUVBLEtBQUtNLE9BQU8sQ0FBQ0YsVUFBVSxJQUFLO0lBQzFCLE9BQU8sSUFBSSxDQUFDQSxVQUFVLENBQUM7RUFDekI7O0VBRUE7QUFDRjtBQUNBO0VBQ0VhLFNBQVNBLENBQUVOLElBQUksRUFBRTtJQUNmLE9BQU8sSUFBSU4sZUFBZSxDQUFDTSxJQUFJLEVBQUUsSUFBSSxDQUFDYixXQUFXLENBQUMsQ0FBQztFQUNyRDtFQUVBLE9BQU9FLE1BQU0sSUFBSztJQUNoQixNQUFNTixTQUFTLENBQUMsSUFBSSxDQUFDTyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsSUFBSSxDQUFDRyxVQUFVLENBQUMsR0FBRyxDQUFDO0lBQ3BCLElBQUksQ0FBQ0wsVUFBVSxDQUFDLENBQUNPLE9BQU8sQ0FBQ1ksUUFBUSxDQUFDLENBQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUNqQixPQUFPLENBQUMsQ0FBQztFQUMxRDtBQUNGO0FBRUFrQixNQUFNLENBQUNDLE9BQU8sR0FBR2IsUUFBUSIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL21vY2svbW9jay1wb29sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IHByb21pc2lmeSB9ID0gcmVxdWlyZSgnbm9kZTp1dGlsJylcbmNvbnN0IFBvb2wgPSByZXF1aXJlKCcuLi9kaXNwYXRjaGVyL3Bvb2wnKVxuY29uc3QgeyBidWlsZE1vY2tEaXNwYXRjaCB9ID0gcmVxdWlyZSgnLi9tb2NrLXV0aWxzJylcbmNvbnN0IHtcbiAga0Rpc3BhdGNoZXMsXG4gIGtNb2NrQWdlbnQsXG4gIGtDbG9zZSxcbiAga09yaWdpbmFsQ2xvc2UsXG4gIGtPcmlnaW4sXG4gIGtPcmlnaW5hbERpc3BhdGNoLFxuICBrQ29ubmVjdGVkXG59ID0gcmVxdWlyZSgnLi9tb2NrLXN5bWJvbHMnKVxuY29uc3QgeyBNb2NrSW50ZXJjZXB0b3IgfSA9IHJlcXVpcmUoJy4vbW9jay1pbnRlcmNlcHRvcicpXG5jb25zdCBTeW1ib2xzID0gcmVxdWlyZSgnLi4vY29yZS9zeW1ib2xzJylcbmNvbnN0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IgfSA9IHJlcXVpcmUoJy4uL2NvcmUvZXJyb3JzJylcblxuLyoqXG4gKiBNb2NrUG9vbCBwcm92aWRlcyBhbiBBUEkgdGhhdCBleHRlbmRzIHRoZSBQb29sIHRvIGluZmx1ZW5jZSB0aGUgbW9ja0Rpc3BhdGNoZXMuXG4gKi9cbmNsYXNzIE1vY2tQb29sIGV4dGVuZHMgUG9vbCB7XG4gIGNvbnN0cnVjdG9yIChvcmlnaW4sIG9wdHMpIHtcbiAgICBzdXBlcihvcmlnaW4sIG9wdHMpXG5cbiAgICBpZiAoIW9wdHMgfHwgIW9wdHMuYWdlbnQgfHwgdHlwZW9mIG9wdHMuYWdlbnQuZGlzcGF0Y2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignQXJndW1lbnQgb3B0cy5hZ2VudCBtdXN0IGltcGxlbWVudCBBZ2VudCcpXG4gICAgfVxuXG4gICAgdGhpc1trTW9ja0FnZW50XSA9IG9wdHMuYWdlbnRcbiAgICB0aGlzW2tPcmlnaW5dID0gb3JpZ2luXG4gICAgdGhpc1trRGlzcGF0Y2hlc10gPSBbXVxuICAgIHRoaXNba0Nvbm5lY3RlZF0gPSAxXG4gICAgdGhpc1trT3JpZ2luYWxEaXNwYXRjaF0gPSB0aGlzLmRpc3BhdGNoXG4gICAgdGhpc1trT3JpZ2luYWxDbG9zZV0gPSB0aGlzLmNsb3NlLmJpbmQodGhpcylcblxuICAgIHRoaXMuZGlzcGF0Y2ggPSBidWlsZE1vY2tEaXNwYXRjaC5jYWxsKHRoaXMpXG4gICAgdGhpcy5jbG9zZSA9IHRoaXNba0Nsb3NlXVxuICB9XG5cbiAgZ2V0IFtTeW1ib2xzLmtDb25uZWN0ZWRdICgpIHtcbiAgICByZXR1cm4gdGhpc1trQ29ubmVjdGVkXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgdGhlIGJhc2UgaW50ZXJjZXB0b3IgZm9yIG1vY2tpbmcgcmVwbGllcyBmcm9tIHVuZGljaS5cbiAgICovXG4gIGludGVyY2VwdCAob3B0cykge1xuICAgIHJldHVybiBuZXcgTW9ja0ludGVyY2VwdG9yKG9wdHMsIHRoaXNba0Rpc3BhdGNoZXNdKVxuICB9XG5cbiAgYXN5bmMgW2tDbG9zZV0gKCkge1xuICAgIGF3YWl0IHByb21pc2lmeSh0aGlzW2tPcmlnaW5hbENsb3NlXSkoKVxuICAgIHRoaXNba0Nvbm5lY3RlZF0gPSAwXG4gICAgdGhpc1trTW9ja0FnZW50XVtTeW1ib2xzLmtDbGllbnRzXS5kZWxldGUodGhpc1trT3JpZ2luXSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vY2tQb29sXG4iXSwibmFtZXMiOlsicHJvbWlzaWZ5IiwicmVxdWlyZSIsIlBvb2wiLCJidWlsZE1vY2tEaXNwYXRjaCIsImtEaXNwYXRjaGVzIiwia01vY2tBZ2VudCIsImtDbG9zZSIsImtPcmlnaW5hbENsb3NlIiwia09yaWdpbiIsImtPcmlnaW5hbERpc3BhdGNoIiwia0Nvbm5lY3RlZCIsIk1vY2tJbnRlcmNlcHRvciIsIlN5bWJvbHMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIk1vY2tQb29sIiwiY29uc3RydWN0b3IiLCJvcmlnaW4iLCJvcHRzIiwiYWdlbnQiLCJkaXNwYXRjaCIsImNsb3NlIiwiYmluZCIsImNhbGwiLCJpbnRlcmNlcHQiLCJrQ2xpZW50cyIsImRlbGV0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-symbols.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-symbols.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n  kAgent: Symbol('agent'),\n  kOptions: Symbol('options'),\n  kFactory: Symbol('factory'),\n  kDispatches: Symbol('dispatches'),\n  kDispatchKey: Symbol('dispatch key'),\n  kDefaultHeaders: Symbol('default headers'),\n  kDefaultTrailers: Symbol('default trailers'),\n  kContentLength: Symbol('content length'),\n  kMockAgent: Symbol('mock agent'),\n  kMockAgentSet: Symbol('mock agent set'),\n  kMockAgentGet: Symbol('mock agent get'),\n  kMockDispatch: Symbol('mock dispatch'),\n  kClose: Symbol('close'),\n  kOriginalClose: Symbol('original agent close'),\n  kOrigin: Symbol('origin'),\n  kIsMockActive: Symbol('is mock active'),\n  kNetConnect: Symbol('net connect'),\n  kGetNetConnect: Symbol('get net connect'),\n  kConnected: Symbol('connected')\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsTUFBTSxFQUFFQyxNQUFNLENBQUMsT0FBTyxDQUFDO0VBQ3ZCQyxRQUFRLEVBQUVELE1BQU0sQ0FBQyxTQUFTLENBQUM7RUFDM0JFLFFBQVEsRUFBRUYsTUFBTSxDQUFDLFNBQVMsQ0FBQztFQUMzQkcsV0FBVyxFQUFFSCxNQUFNLENBQUMsWUFBWSxDQUFDO0VBQ2pDSSxZQUFZLEVBQUVKLE1BQU0sQ0FBQyxjQUFjLENBQUM7RUFDcENLLGVBQWUsRUFBRUwsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0VBQzFDTSxnQkFBZ0IsRUFBRU4sTUFBTSxDQUFDLGtCQUFrQixDQUFDO0VBQzVDTyxjQUFjLEVBQUVQLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztFQUN4Q1EsVUFBVSxFQUFFUixNQUFNLENBQUMsWUFBWSxDQUFDO0VBQ2hDUyxhQUFhLEVBQUVULE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztFQUN2Q1UsYUFBYSxFQUFFVixNQUFNLENBQUMsZ0JBQWdCLENBQUM7RUFDdkNXLGFBQWEsRUFBRVgsTUFBTSxDQUFDLGVBQWUsQ0FBQztFQUN0Q1ksTUFBTSxFQUFFWixNQUFNLENBQUMsT0FBTyxDQUFDO0VBQ3ZCYSxjQUFjLEVBQUViLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztFQUM5Q2MsT0FBTyxFQUFFZCxNQUFNLENBQUMsUUFBUSxDQUFDO0VBQ3pCZSxhQUFhLEVBQUVmLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztFQUN2Q2dCLFdBQVcsRUFBRWhCLE1BQU0sQ0FBQyxhQUFhLENBQUM7RUFDbENpQixjQUFjLEVBQUVqQixNQUFNLENBQUMsaUJBQWlCLENBQUM7RUFDekNrQixVQUFVLEVBQUVsQixNQUFNLENBQUMsV0FBVztBQUNoQyxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvbW9jay9tb2NrLXN5bWJvbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBrQWdlbnQ6IFN5bWJvbCgnYWdlbnQnKSxcbiAga09wdGlvbnM6IFN5bWJvbCgnb3B0aW9ucycpLFxuICBrRmFjdG9yeTogU3ltYm9sKCdmYWN0b3J5JyksXG4gIGtEaXNwYXRjaGVzOiBTeW1ib2woJ2Rpc3BhdGNoZXMnKSxcbiAga0Rpc3BhdGNoS2V5OiBTeW1ib2woJ2Rpc3BhdGNoIGtleScpLFxuICBrRGVmYXVsdEhlYWRlcnM6IFN5bWJvbCgnZGVmYXVsdCBoZWFkZXJzJyksXG4gIGtEZWZhdWx0VHJhaWxlcnM6IFN5bWJvbCgnZGVmYXVsdCB0cmFpbGVycycpLFxuICBrQ29udGVudExlbmd0aDogU3ltYm9sKCdjb250ZW50IGxlbmd0aCcpLFxuICBrTW9ja0FnZW50OiBTeW1ib2woJ21vY2sgYWdlbnQnKSxcbiAga01vY2tBZ2VudFNldDogU3ltYm9sKCdtb2NrIGFnZW50IHNldCcpLFxuICBrTW9ja0FnZW50R2V0OiBTeW1ib2woJ21vY2sgYWdlbnQgZ2V0JyksXG4gIGtNb2NrRGlzcGF0Y2g6IFN5bWJvbCgnbW9jayBkaXNwYXRjaCcpLFxuICBrQ2xvc2U6IFN5bWJvbCgnY2xvc2UnKSxcbiAga09yaWdpbmFsQ2xvc2U6IFN5bWJvbCgnb3JpZ2luYWwgYWdlbnQgY2xvc2UnKSxcbiAga09yaWdpbjogU3ltYm9sKCdvcmlnaW4nKSxcbiAga0lzTW9ja0FjdGl2ZTogU3ltYm9sKCdpcyBtb2NrIGFjdGl2ZScpLFxuICBrTmV0Q29ubmVjdDogU3ltYm9sKCduZXQgY29ubmVjdCcpLFxuICBrR2V0TmV0Q29ubmVjdDogU3ltYm9sKCdnZXQgbmV0IGNvbm5lY3QnKSxcbiAga0Nvbm5lY3RlZDogU3ltYm9sKCdjb25uZWN0ZWQnKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJrQWdlbnQiLCJTeW1ib2wiLCJrT3B0aW9ucyIsImtGYWN0b3J5Iiwia0Rpc3BhdGNoZXMiLCJrRGlzcGF0Y2hLZXkiLCJrRGVmYXVsdEhlYWRlcnMiLCJrRGVmYXVsdFRyYWlsZXJzIiwia0NvbnRlbnRMZW5ndGgiLCJrTW9ja0FnZW50Iiwia01vY2tBZ2VudFNldCIsImtNb2NrQWdlbnRHZXQiLCJrTW9ja0Rpc3BhdGNoIiwia0Nsb3NlIiwia09yaWdpbmFsQ2xvc2UiLCJrT3JpZ2luIiwia0lzTW9ja0FjdGl2ZSIsImtOZXRDb25uZWN0Iiwia0dldE5ldENvbm5lY3QiLCJrQ29ubmVjdGVkIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-utils.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-utils.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  MockNotMatchedError\n} = __webpack_require__(/*! ./mock-errors */ \"(ssr)/./node_modules/undici/lib/mock/mock-errors.js\");\nconst {\n  kDispatches,\n  kMockAgent,\n  kOriginalDispatch,\n  kOrigin,\n  kGetNetConnect\n} = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst {\n  buildURL\n} = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  STATUS_CODES\n} = __webpack_require__(/*! node:http */ \"node:http\");\nconst {\n  types: {\n    isPromise\n  }\n} = __webpack_require__(/*! node:util */ \"node:util\");\nfunction matchValue(match, value) {\n  if (typeof match === 'string') {\n    return match === value;\n  }\n  if (match instanceof RegExp) {\n    return match.test(value);\n  }\n  if (typeof match === 'function') {\n    return match(value) === true;\n  }\n  return false;\n}\nfunction lowerCaseEntries(headers) {\n  return Object.fromEntries(Object.entries(headers).map(_ref => {\n    let [headerName, headerValue] = _ref;\n    return [headerName.toLocaleLowerCase(), headerValue];\n  }));\n}\n\n/**\n * @param {import('../../index').Headers|string[]|Record<string, string>} headers\n * @param {string} key\n */\nfunction getHeaderByName(headers, key) {\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {\n        return headers[i + 1];\n      }\n    }\n    return undefined;\n  } else if (typeof headers.get === 'function') {\n    return headers.get(key);\n  } else {\n    return lowerCaseEntries(headers)[key.toLocaleLowerCase()];\n  }\n}\n\n/** @param {string[]} headers */\nfunction buildHeadersFromArray(headers) {\n  // fetch HeadersList\n  const clone = headers.slice();\n  const entries = [];\n  for (let index = 0; index < clone.length; index += 2) {\n    entries.push([clone[index], clone[index + 1]]);\n  }\n  return Object.fromEntries(entries);\n}\nfunction matchHeaders(mockDispatch, headers) {\n  if (typeof mockDispatch.headers === 'function') {\n    if (Array.isArray(headers)) {\n      // fetch HeadersList\n      headers = buildHeadersFromArray(headers);\n    }\n    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {});\n  }\n  if (typeof mockDispatch.headers === 'undefined') {\n    return true;\n  }\n  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {\n    return false;\n  }\n  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {\n    const headerValue = getHeaderByName(headers, matchHeaderName);\n    if (!matchValue(matchHeaderValue, headerValue)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction safeUrl(path) {\n  if (typeof path !== 'string') {\n    return path;\n  }\n  const pathSegments = path.split('?');\n  if (pathSegments.length !== 2) {\n    return path;\n  }\n  const qp = new URLSearchParams(pathSegments.pop());\n  qp.sort();\n  return [...pathSegments, qp.toString()].join('?');\n}\nfunction matchKey(mockDispatch, _ref2) {\n  let {\n    path,\n    method,\n    body,\n    headers\n  } = _ref2;\n  const pathMatch = matchValue(mockDispatch.path, path);\n  const methodMatch = matchValue(mockDispatch.method, method);\n  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true;\n  const headersMatch = matchHeaders(mockDispatch, headers);\n  return pathMatch && methodMatch && bodyMatch && headersMatch;\n}\nfunction getResponseData(data) {\n  if (Buffer.isBuffer(data)) {\n    return data;\n  } else if (typeof data === 'object') {\n    return JSON.stringify(data);\n  } else {\n    return data.toString();\n  }\n}\nfunction getMockDispatch(mockDispatches, key) {\n  const basePath = key.query ? buildURL(key.path, key.query) : key.path;\n  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath;\n\n  // Match path\n  let matchedMockDispatches = mockDispatches.filter(_ref3 => {\n    let {\n      consumed\n    } = _ref3;\n    return !consumed;\n  }).filter(_ref4 => {\n    let {\n      path\n    } = _ref4;\n    return matchValue(safeUrl(path), resolvedPath);\n  });\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);\n  }\n\n  // Match method\n  matchedMockDispatches = matchedMockDispatches.filter(_ref5 => {\n    let {\n      method\n    } = _ref5;\n    return matchValue(method, key.method);\n  });\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}' on path '${resolvedPath}'`);\n  }\n\n  // Match body\n  matchedMockDispatches = matchedMockDispatches.filter(_ref6 => {\n    let {\n      body\n    } = _ref6;\n    return typeof body !== 'undefined' ? matchValue(body, key.body) : true;\n  });\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}' on path '${resolvedPath}'`);\n  }\n\n  // Match headers\n  matchedMockDispatches = matchedMockDispatches.filter(mockDispatch => matchHeaders(mockDispatch, key.headers));\n  if (matchedMockDispatches.length === 0) {\n    const headers = typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers;\n    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${headers}' on path '${resolvedPath}'`);\n  }\n  return matchedMockDispatches[0];\n}\nfunction addMockDispatch(mockDispatches, key, data) {\n  const baseData = {\n    timesInvoked: 0,\n    times: 1,\n    persist: false,\n    consumed: false\n  };\n  const replyData = typeof data === 'function' ? {\n    callback: data\n  } : {\n    ...data\n  };\n  const newMockDispatch = {\n    ...baseData,\n    ...key,\n    pending: true,\n    data: {\n      error: null,\n      ...replyData\n    }\n  };\n  mockDispatches.push(newMockDispatch);\n  return newMockDispatch;\n}\nfunction deleteMockDispatch(mockDispatches, key) {\n  const index = mockDispatches.findIndex(dispatch => {\n    if (!dispatch.consumed) {\n      return false;\n    }\n    return matchKey(dispatch, key);\n  });\n  if (index !== -1) {\n    mockDispatches.splice(index, 1);\n  }\n}\nfunction buildKey(opts) {\n  const {\n    path,\n    method,\n    body,\n    headers,\n    query\n  } = opts;\n  return {\n    path,\n    method,\n    body,\n    headers,\n    query\n  };\n}\nfunction generateKeyValues(data) {\n  const keys = Object.keys(data);\n  const result = [];\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    const value = data[key];\n    const name = Buffer.from(`${key}`);\n    if (Array.isArray(value)) {\n      for (let j = 0; j < value.length; ++j) {\n        result.push(name, Buffer.from(`${value[j]}`));\n      }\n    } else {\n      result.push(name, Buffer.from(`${value}`));\n    }\n  }\n  return result;\n}\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n * @param {number} statusCode\n */\nfunction getStatusText(statusCode) {\n  return STATUS_CODES[statusCode] || 'unknown';\n}\nasync function getResponse(body) {\n  const buffers = [];\n  for await (const data of body) {\n    buffers.push(data);\n  }\n  return Buffer.concat(buffers).toString('utf8');\n}\n\n/**\n * Mock dispatch function used to simulate undici dispatches\n */\nfunction mockDispatch(opts, handler) {\n  // Get mock dispatch from built key\n  const key = buildKey(opts);\n  const mockDispatch = getMockDispatch(this[kDispatches], key);\n  mockDispatch.timesInvoked++;\n\n  // Here's where we resolve a callback if a callback is present for the dispatch data.\n  if (mockDispatch.data.callback) {\n    mockDispatch.data = {\n      ...mockDispatch.data,\n      ...mockDispatch.data.callback(opts)\n    };\n  }\n\n  // Parse mockDispatch data\n  const {\n    data: {\n      statusCode,\n      data,\n      headers,\n      trailers,\n      error\n    },\n    delay,\n    persist\n  } = mockDispatch;\n  const {\n    timesInvoked,\n    times\n  } = mockDispatch;\n\n  // If it's used up and not persistent, mark as consumed\n  mockDispatch.consumed = !persist && timesInvoked >= times;\n  mockDispatch.pending = timesInvoked < times;\n\n  // If specified, trigger dispatch error\n  if (error !== null) {\n    deleteMockDispatch(this[kDispatches], key);\n    handler.onError(error);\n    return true;\n  }\n\n  // Handle the request with a delay if necessary\n  if (typeof delay === 'number' && delay > 0) {\n    setTimeout(() => {\n      handleReply(this[kDispatches]);\n    }, delay);\n  } else {\n    handleReply(this[kDispatches]);\n  }\n  function handleReply(mockDispatches) {\n    let _data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : data;\n    // fetch's HeadersList is a 1D string array\n    const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;\n    const body = typeof _data === 'function' ? _data({\n      ...opts,\n      headers: optsHeaders\n    }) : _data;\n\n    // util.types.isPromise is likely needed for jest.\n    if (isPromise(body)) {\n      // If handleReply is asynchronous, throwing an error\n      // in the callback will reject the promise, rather than\n      // synchronously throw the error, which breaks some tests.\n      // Rather, we wait for the callback to resolve if it is a\n      // promise, and then re-run handleReply with the new body.\n      body.then(newData => handleReply(mockDispatches, newData));\n      return;\n    }\n    const responseData = getResponseData(body);\n    const responseHeaders = generateKeyValues(headers);\n    const responseTrailers = generateKeyValues(trailers);\n    handler.onConnect?.(err => handler.onError(err), null);\n    handler.onHeaders?.(statusCode, responseHeaders, resume, getStatusText(statusCode));\n    handler.onData?.(Buffer.from(responseData));\n    handler.onComplete?.(responseTrailers);\n    deleteMockDispatch(mockDispatches, key);\n  }\n  function resume() {}\n  return true;\n}\nfunction buildMockDispatch() {\n  const agent = this[kMockAgent];\n  const origin = this[kOrigin];\n  const originalDispatch = this[kOriginalDispatch];\n  return function dispatch(opts, handler) {\n    if (agent.isMockActive) {\n      try {\n        mockDispatch.call(this, opts, handler);\n      } catch (error) {\n        if (error instanceof MockNotMatchedError) {\n          const netConnect = agent[kGetNetConnect]();\n          if (netConnect === false) {\n            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);\n          }\n          if (checkNetConnect(netConnect, origin)) {\n            originalDispatch.call(this, opts, handler);\n          } else {\n            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);\n          }\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      originalDispatch.call(this, opts, handler);\n    }\n  };\n}\nfunction checkNetConnect(netConnect, origin) {\n  const url = new URL(origin);\n  if (netConnect === true) {\n    return true;\n  } else if (Array.isArray(netConnect) && netConnect.some(matcher => matchValue(matcher, url.host))) {\n    return true;\n  }\n  return false;\n}\nfunction buildMockOptions(opts) {\n  if (opts) {\n    const {\n      agent,\n      ...mockOptions\n    } = opts;\n    return mockOptions;\n  }\n}\nmodule.exports = {\n  getResponseData,\n  getMockDispatch,\n  addMockDispatch,\n  deleteMockDispatch,\n  buildKey,\n  generateKeyValues,\n  matchValue,\n  getResponse,\n  getStatusText,\n  mockDispatch,\n  buildMockDispatch,\n  checkNetConnect,\n  buildMockOptions,\n  getHeaderByName,\n  buildHeadersFromArray\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/pending-interceptors-formatter.js":
/*!************************************************************************!*\
  !*** ./node_modules/undici/lib/mock/pending-interceptors-formatter.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  Transform\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst {\n  Console\n} = __webpack_require__(/*! node:console */ \"node:console\");\nconst PERSISTENT = process.versions.icu ? '✅' : 'Y ';\nconst NOT_PERSISTENT = process.versions.icu ? '❌' : 'N ';\n\n/**\n * Gets the output of `console.table(…)` as a string.\n */\nmodule.exports = class PendingInterceptorsFormatter {\n  constructor() {\n    let {\n      disableColors\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.transform = new Transform({\n      transform(chunk, _enc, cb) {\n        cb(null, chunk);\n      }\n    });\n    this.logger = new Console({\n      stdout: this.transform,\n      inspectOptions: {\n        colors: !disableColors && !process.env.CI\n      }\n    });\n  }\n  format(pendingInterceptors) {\n    const withPrettyHeaders = pendingInterceptors.map(_ref => {\n      let {\n        method,\n        path,\n        data: {\n          statusCode\n        },\n        persist,\n        times,\n        timesInvoked,\n        origin\n      } = _ref;\n      return {\n        Method: method,\n        Origin: origin,\n        Path: path,\n        'Status code': statusCode,\n        Persistent: persist ? PERSISTENT : NOT_PERSISTENT,\n        Invocations: timesInvoked,\n        Remaining: persist ? Infinity : times - timesInvoked\n      };\n    });\n    this.logger.table(withPrettyHeaders);\n    return this.transform.read().toString();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL3BlbmRpbmctaW50ZXJjZXB0b3JzLWZvcm1hdHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixNQUFNO0VBQUVBO0FBQVUsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLGdDQUFhLENBQUM7QUFDNUMsTUFBTTtFQUFFQztBQUFRLENBQUMsR0FBR0QsbUJBQU8sQ0FBQyxrQ0FBYyxDQUFDO0FBRTNDLE1BQU1FLFVBQVUsR0FBR0MsT0FBTyxDQUFDQyxRQUFRLENBQUNDLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSTtBQUNwRCxNQUFNQyxjQUFjLEdBQUdILE9BQU8sQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUk7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxNQUFNQyw0QkFBNEIsQ0FBQztFQUNsREMsV0FBV0EsQ0FBQSxFQUEwQjtJQUFBLElBQXhCO01BQUVDO0lBQWMsQ0FBQyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7SUFDakMsSUFBSSxDQUFDRyxTQUFTLEdBQUcsSUFBSWhCLFNBQVMsQ0FBQztNQUM3QmdCLFNBQVNBLENBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxFQUFFLEVBQUU7UUFDMUJBLEVBQUUsQ0FBQyxJQUFJLEVBQUVGLEtBQUssQ0FBQztNQUNqQjtJQUNGLENBQUMsQ0FBQztJQUVGLElBQUksQ0FBQ0csTUFBTSxHQUFHLElBQUlsQixPQUFPLENBQUM7TUFDeEJtQixNQUFNLEVBQUUsSUFBSSxDQUFDTCxTQUFTO01BQ3RCTSxjQUFjLEVBQUU7UUFDZEMsTUFBTSxFQUFFLENBQUNYLGFBQWEsSUFBSSxDQUFDUixPQUFPLENBQUNvQixHQUFHLENBQUNDO01BQ3pDO0lBQ0YsQ0FBQyxDQUFDO0VBQ0o7RUFFQUMsTUFBTUEsQ0FBRUMsbUJBQW1CLEVBQUU7SUFDM0IsTUFBTUMsaUJBQWlCLEdBQUdELG1CQUFtQixDQUFDRSxHQUFHLENBQy9DQyxJQUFBO01BQUEsSUFBQztRQUFFQyxNQUFNO1FBQUVDLElBQUk7UUFBRUMsSUFBSSxFQUFFO1VBQUVDO1FBQVcsQ0FBQztRQUFFQyxPQUFPO1FBQUVDLEtBQUs7UUFBRUMsWUFBWTtRQUFFQztNQUFPLENBQUMsR0FBQVIsSUFBQTtNQUFBLE9BQU07UUFDakZTLE1BQU0sRUFBRVIsTUFBTTtRQUNkUyxNQUFNLEVBQUVGLE1BQU07UUFDZEcsSUFBSSxFQUFFVCxJQUFJO1FBQ1YsYUFBYSxFQUFFRSxVQUFVO1FBQ3pCUSxVQUFVLEVBQUVQLE9BQU8sR0FBR2hDLFVBQVUsR0FBR0ksY0FBYztRQUNqRG9DLFdBQVcsRUFBRU4sWUFBWTtRQUN6Qk8sU0FBUyxFQUFFVCxPQUFPLEdBQUdVLFFBQVEsR0FBR1QsS0FBSyxHQUFHQztNQUMxQyxDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBRUwsSUFBSSxDQUFDakIsTUFBTSxDQUFDMEIsS0FBSyxDQUFDbEIsaUJBQWlCLENBQUM7SUFDcEMsT0FBTyxJQUFJLENBQUNaLFNBQVMsQ0FBQytCLElBQUksQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxDQUFDO0VBQ3pDO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL21vY2svcGVuZGluZy1pbnRlcmNlcHRvcnMtZm9ybWF0dGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IFRyYW5zZm9ybSB9ID0gcmVxdWlyZSgnbm9kZTpzdHJlYW0nKVxuY29uc3QgeyBDb25zb2xlIH0gPSByZXF1aXJlKCdub2RlOmNvbnNvbGUnKVxuXG5jb25zdCBQRVJTSVNURU5UID0gcHJvY2Vzcy52ZXJzaW9ucy5pY3UgPyAn4pyFJyA6ICdZICdcbmNvbnN0IE5PVF9QRVJTSVNURU5UID0gcHJvY2Vzcy52ZXJzaW9ucy5pY3UgPyAn4p2MJyA6ICdOICdcblxuLyoqXG4gKiBHZXRzIHRoZSBvdXRwdXQgb2YgYGNvbnNvbGUudGFibGUo4oCmKWAgYXMgYSBzdHJpbmcuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUGVuZGluZ0ludGVyY2VwdG9yc0Zvcm1hdHRlciB7XG4gIGNvbnN0cnVjdG9yICh7IGRpc2FibGVDb2xvcnMgfSA9IHt9KSB7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHtcbiAgICAgIHRyYW5zZm9ybSAoY2h1bmssIF9lbmMsIGNiKSB7XG4gICAgICAgIGNiKG51bGwsIGNodW5rKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmxvZ2dlciA9IG5ldyBDb25zb2xlKHtcbiAgICAgIHN0ZG91dDogdGhpcy50cmFuc2Zvcm0sXG4gICAgICBpbnNwZWN0T3B0aW9uczoge1xuICAgICAgICBjb2xvcnM6ICFkaXNhYmxlQ29sb3JzICYmICFwcm9jZXNzLmVudi5DSVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmb3JtYXQgKHBlbmRpbmdJbnRlcmNlcHRvcnMpIHtcbiAgICBjb25zdCB3aXRoUHJldHR5SGVhZGVycyA9IHBlbmRpbmdJbnRlcmNlcHRvcnMubWFwKFxuICAgICAgKHsgbWV0aG9kLCBwYXRoLCBkYXRhOiB7IHN0YXR1c0NvZGUgfSwgcGVyc2lzdCwgdGltZXMsIHRpbWVzSW52b2tlZCwgb3JpZ2luIH0pID0+ICh7XG4gICAgICAgIE1ldGhvZDogbWV0aG9kLFxuICAgICAgICBPcmlnaW46IG9yaWdpbixcbiAgICAgICAgUGF0aDogcGF0aCxcbiAgICAgICAgJ1N0YXR1cyBjb2RlJzogc3RhdHVzQ29kZSxcbiAgICAgICAgUGVyc2lzdGVudDogcGVyc2lzdCA/IFBFUlNJU1RFTlQgOiBOT1RfUEVSU0lTVEVOVCxcbiAgICAgICAgSW52b2NhdGlvbnM6IHRpbWVzSW52b2tlZCxcbiAgICAgICAgUmVtYWluaW5nOiBwZXJzaXN0ID8gSW5maW5pdHkgOiB0aW1lcyAtIHRpbWVzSW52b2tlZFxuICAgICAgfSkpXG5cbiAgICB0aGlzLmxvZ2dlci50YWJsZSh3aXRoUHJldHR5SGVhZGVycylcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ucmVhZCgpLnRvU3RyaW5nKClcbiAgfVxufVxuIl0sIm5hbWVzIjpbIlRyYW5zZm9ybSIsInJlcXVpcmUiLCJDb25zb2xlIiwiUEVSU0lTVEVOVCIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsImljdSIsIk5PVF9QRVJTSVNURU5UIiwibW9kdWxlIiwiZXhwb3J0cyIsIlBlbmRpbmdJbnRlcmNlcHRvcnNGb3JtYXR0ZXIiLCJjb25zdHJ1Y3RvciIsImRpc2FibGVDb2xvcnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJ0cmFuc2Zvcm0iLCJjaHVuayIsIl9lbmMiLCJjYiIsImxvZ2dlciIsInN0ZG91dCIsImluc3BlY3RPcHRpb25zIiwiY29sb3JzIiwiZW52IiwiQ0kiLCJmb3JtYXQiLCJwZW5kaW5nSW50ZXJjZXB0b3JzIiwid2l0aFByZXR0eUhlYWRlcnMiLCJtYXAiLCJfcmVmIiwibWV0aG9kIiwicGF0aCIsImRhdGEiLCJzdGF0dXNDb2RlIiwicGVyc2lzdCIsInRpbWVzIiwidGltZXNJbnZva2VkIiwib3JpZ2luIiwiTWV0aG9kIiwiT3JpZ2luIiwiUGF0aCIsIlBlcnNpc3RlbnQiLCJJbnZvY2F0aW9ucyIsIlJlbWFpbmluZyIsIkluZmluaXR5IiwidGFibGUiLCJyZWFkIiwidG9TdHJpbmciXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/pending-interceptors-formatter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/pluralizer.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/mock/pluralizer.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst singulars = {\n  pronoun: 'it',\n  is: 'is',\n  was: 'was',\n  this: 'this'\n};\nconst plurals = {\n  pronoun: 'they',\n  is: 'are',\n  was: 'were',\n  this: 'these'\n};\nmodule.exports = class Pluralizer {\n  constructor(singular, plural) {\n    this.singular = singular;\n    this.plural = plural;\n  }\n  pluralize(count) {\n    const one = count === 1;\n    const keys = one ? singulars : plurals;\n    const noun = one ? this.singular : this.plural;\n    return {\n      ...keys,\n      count,\n      noun\n    };\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL3BsdXJhbGl6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosTUFBTUEsU0FBUyxHQUFHO0VBQ2hCQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxFQUFFLEVBQUUsSUFBSTtFQUNSQyxHQUFHLEVBQUUsS0FBSztFQUNWQyxJQUFJLEVBQUU7QUFDUixDQUFDO0FBRUQsTUFBTUMsT0FBTyxHQUFHO0VBQ2RKLE9BQU8sRUFBRSxNQUFNO0VBQ2ZDLEVBQUUsRUFBRSxLQUFLO0VBQ1RDLEdBQUcsRUFBRSxNQUFNO0VBQ1hDLElBQUksRUFBRTtBQUNSLENBQUM7QUFFREUsTUFBTSxDQUFDQyxPQUFPLEdBQUcsTUFBTUMsVUFBVSxDQUFDO0VBQ2hDQyxXQUFXQSxDQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRTtJQUM3QixJQUFJLENBQUNELFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtFQUN0QjtFQUVBQyxTQUFTQSxDQUFFQyxLQUFLLEVBQUU7SUFDaEIsTUFBTUMsR0FBRyxHQUFHRCxLQUFLLEtBQUssQ0FBQztJQUN2QixNQUFNRSxJQUFJLEdBQUdELEdBQUcsR0FBR2QsU0FBUyxHQUFHSyxPQUFPO0lBQ3RDLE1BQU1XLElBQUksR0FBR0YsR0FBRyxHQUFHLElBQUksQ0FBQ0osUUFBUSxHQUFHLElBQUksQ0FBQ0MsTUFBTTtJQUM5QyxPQUFPO01BQUUsR0FBR0ksSUFBSTtNQUFFRixLQUFLO01BQUVHO0lBQUssQ0FBQztFQUNqQztBQUNGLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL3BsdXJhbGl6ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHNpbmd1bGFycyA9IHtcbiAgcHJvbm91bjogJ2l0JyxcbiAgaXM6ICdpcycsXG4gIHdhczogJ3dhcycsXG4gIHRoaXM6ICd0aGlzJ1xufVxuXG5jb25zdCBwbHVyYWxzID0ge1xuICBwcm9ub3VuOiAndGhleScsXG4gIGlzOiAnYXJlJyxcbiAgd2FzOiAnd2VyZScsXG4gIHRoaXM6ICd0aGVzZSdcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBQbHVyYWxpemVyIHtcbiAgY29uc3RydWN0b3IgKHNpbmd1bGFyLCBwbHVyYWwpIHtcbiAgICB0aGlzLnNpbmd1bGFyID0gc2luZ3VsYXJcbiAgICB0aGlzLnBsdXJhbCA9IHBsdXJhbFxuICB9XG5cbiAgcGx1cmFsaXplIChjb3VudCkge1xuICAgIGNvbnN0IG9uZSA9IGNvdW50ID09PSAxXG4gICAgY29uc3Qga2V5cyA9IG9uZSA/IHNpbmd1bGFycyA6IHBsdXJhbHNcbiAgICBjb25zdCBub3VuID0gb25lID8gdGhpcy5zaW5ndWxhciA6IHRoaXMucGx1cmFsXG4gICAgcmV0dXJuIHsgLi4ua2V5cywgY291bnQsIG5vdW4gfVxuICB9XG59XG4iXSwibmFtZXMiOlsic2luZ3VsYXJzIiwicHJvbm91biIsImlzIiwid2FzIiwidGhpcyIsInBsdXJhbHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiUGx1cmFsaXplciIsImNvbnN0cnVjdG9yIiwic2luZ3VsYXIiLCJwbHVyYWwiLCJwbHVyYWxpemUiLCJjb3VudCIsIm9uZSIsImtleXMiLCJub3VuIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/pluralizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/util/timers.js":
/*!************************************************!*\
  !*** ./node_modules/undici/lib/util/timers.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst TICK_MS = 499;\nlet fastNow = Date.now();\nlet fastNowTimeout;\nconst fastTimers = [];\nfunction onTimeout() {\n  fastNow = Date.now();\n  let len = fastTimers.length;\n  let idx = 0;\n  while (idx < len) {\n    const timer = fastTimers[idx];\n    if (timer.state === 0) {\n      timer.state = fastNow + timer.delay - TICK_MS;\n    } else if (timer.state > 0 && fastNow >= timer.state) {\n      timer.state = -1;\n      timer.callback(timer.opaque);\n    }\n    if (timer.state === -1) {\n      timer.state = -2;\n      if (idx !== len - 1) {\n        fastTimers[idx] = fastTimers.pop();\n      } else {\n        fastTimers.pop();\n      }\n      len -= 1;\n    } else {\n      idx += 1;\n    }\n  }\n  if (fastTimers.length > 0) {\n    refreshTimeout();\n  }\n}\nfunction refreshTimeout() {\n  if (fastNowTimeout?.refresh) {\n    fastNowTimeout.refresh();\n  } else {\n    clearTimeout(fastNowTimeout);\n    fastNowTimeout = setTimeout(onTimeout, TICK_MS);\n    if (fastNowTimeout.unref) {\n      fastNowTimeout.unref();\n    }\n  }\n}\nclass Timeout {\n  constructor(callback, delay, opaque) {\n    this.callback = callback;\n    this.delay = delay;\n    this.opaque = opaque;\n\n    //  -2 not in timer list\n    //  -1 in timer list but inactive\n    //   0 in timer list waiting for time\n    // > 0 in timer list waiting for time to expire\n    this.state = -2;\n    this.refresh();\n  }\n  refresh() {\n    if (this.state === -2) {\n      fastTimers.push(this);\n      if (!fastNowTimeout || fastTimers.length === 1) {\n        refreshTimeout();\n      }\n    }\n    this.state = 0;\n  }\n  clear() {\n    this.state = -1;\n  }\n}\nmodule.exports = {\n  setTimeout(callback, delay, opaque) {\n    return delay <= 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);\n  },\n  clearTimeout(timeout) {\n    if (timeout instanceof Timeout) {\n      timeout.clear();\n    } else {\n      clearTimeout(timeout);\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi91dGlsL3RpbWVycy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixNQUFNQSxPQUFPLEdBQUcsR0FBRztBQUVuQixJQUFJQyxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUM7QUFDeEIsSUFBSUMsY0FBYztBQUVsQixNQUFNQyxVQUFVLEdBQUcsRUFBRTtBQUVyQixTQUFTQyxTQUFTQSxDQUFBLEVBQUk7RUFDcEJMLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQztFQUVwQixJQUFJSSxHQUFHLEdBQUdGLFVBQVUsQ0FBQ0csTUFBTTtFQUMzQixJQUFJQyxHQUFHLEdBQUcsQ0FBQztFQUNYLE9BQU9BLEdBQUcsR0FBR0YsR0FBRyxFQUFFO0lBQ2hCLE1BQU1HLEtBQUssR0FBR0wsVUFBVSxDQUFDSSxHQUFHLENBQUM7SUFFN0IsSUFBSUMsS0FBSyxDQUFDQyxLQUFLLEtBQUssQ0FBQyxFQUFFO01BQ3JCRCxLQUFLLENBQUNDLEtBQUssR0FBR1YsT0FBTyxHQUFHUyxLQUFLLENBQUNFLEtBQUssR0FBR1osT0FBTztJQUMvQyxDQUFDLE1BQU0sSUFBSVUsS0FBSyxDQUFDQyxLQUFLLEdBQUcsQ0FBQyxJQUFJVixPQUFPLElBQUlTLEtBQUssQ0FBQ0MsS0FBSyxFQUFFO01BQ3BERCxLQUFLLENBQUNDLEtBQUssR0FBRyxDQUFDLENBQUM7TUFDaEJELEtBQUssQ0FBQ0csUUFBUSxDQUFDSCxLQUFLLENBQUNJLE1BQU0sQ0FBQztJQUM5QjtJQUVBLElBQUlKLEtBQUssQ0FBQ0MsS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO01BQ3RCRCxLQUFLLENBQUNDLEtBQUssR0FBRyxDQUFDLENBQUM7TUFDaEIsSUFBSUYsR0FBRyxLQUFLRixHQUFHLEdBQUcsQ0FBQyxFQUFFO1FBQ25CRixVQUFVLENBQUNJLEdBQUcsQ0FBQyxHQUFHSixVQUFVLENBQUNVLEdBQUcsQ0FBQyxDQUFDO01BQ3BDLENBQUMsTUFBTTtRQUNMVixVQUFVLENBQUNVLEdBQUcsQ0FBQyxDQUFDO01BQ2xCO01BQ0FSLEdBQUcsSUFBSSxDQUFDO0lBQ1YsQ0FBQyxNQUFNO01BQ0xFLEdBQUcsSUFBSSxDQUFDO0lBQ1Y7RUFDRjtFQUVBLElBQUlKLFVBQVUsQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBRTtJQUN6QlEsY0FBYyxDQUFDLENBQUM7RUFDbEI7QUFDRjtBQUVBLFNBQVNBLGNBQWNBLENBQUEsRUFBSTtFQUN6QixJQUFJWixjQUFjLEVBQUVhLE9BQU8sRUFBRTtJQUMzQmIsY0FBYyxDQUFDYSxPQUFPLENBQUMsQ0FBQztFQUMxQixDQUFDLE1BQU07SUFDTEMsWUFBWSxDQUFDZCxjQUFjLENBQUM7SUFDNUJBLGNBQWMsR0FBR2UsVUFBVSxDQUFDYixTQUFTLEVBQUVOLE9BQU8sQ0FBQztJQUMvQyxJQUFJSSxjQUFjLENBQUNnQixLQUFLLEVBQUU7TUFDeEJoQixjQUFjLENBQUNnQixLQUFLLENBQUMsQ0FBQztJQUN4QjtFQUNGO0FBQ0Y7QUFFQSxNQUFNQyxPQUFPLENBQUM7RUFDWkMsV0FBV0EsQ0FBRVQsUUFBUSxFQUFFRCxLQUFLLEVBQUVFLE1BQU0sRUFBRTtJQUNwQyxJQUFJLENBQUNELFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNELEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUNFLE1BQU0sR0FBR0EsTUFBTTs7SUFFcEI7SUFDQTtJQUNBO0lBQ0E7SUFDQSxJQUFJLENBQUNILEtBQUssR0FBRyxDQUFDLENBQUM7SUFFZixJQUFJLENBQUNNLE9BQU8sQ0FBQyxDQUFDO0VBQ2hCO0VBRUFBLE9BQU9BLENBQUEsRUFBSTtJQUNULElBQUksSUFBSSxDQUFDTixLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7TUFDckJOLFVBQVUsQ0FBQ2tCLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDckIsSUFBSSxDQUFDbkIsY0FBYyxJQUFJQyxVQUFVLENBQUNHLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDOUNRLGNBQWMsQ0FBQyxDQUFDO01BQ2xCO0lBQ0Y7SUFFQSxJQUFJLENBQUNMLEtBQUssR0FBRyxDQUFDO0VBQ2hCO0VBRUFhLEtBQUtBLENBQUEsRUFBSTtJQUNQLElBQUksQ0FBQ2IsS0FBSyxHQUFHLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFjLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZQLFVBQVVBLENBQUVOLFFBQVEsRUFBRUQsS0FBSyxFQUFFRSxNQUFNLEVBQUU7SUFDbkMsT0FBT0YsS0FBSyxJQUFJLEdBQUcsR0FDZk8sVUFBVSxDQUFDTixRQUFRLEVBQUVELEtBQUssRUFBRUUsTUFBTSxDQUFDLEdBQ25DLElBQUlPLE9BQU8sQ0FBQ1IsUUFBUSxFQUFFRCxLQUFLLEVBQUVFLE1BQU0sQ0FBQztFQUMxQyxDQUFDO0VBQ0RJLFlBQVlBLENBQUVTLE9BQU8sRUFBRTtJQUNyQixJQUFJQSxPQUFPLFlBQVlOLE9BQU8sRUFBRTtNQUM5Qk0sT0FBTyxDQUFDSCxLQUFLLENBQUMsQ0FBQztJQUNqQixDQUFDLE1BQU07TUFDTE4sWUFBWSxDQUFDUyxPQUFPLENBQUM7SUFDdkI7RUFDRjtBQUNGLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi91dGlsL3RpbWVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgVElDS19NUyA9IDQ5OVxuXG5sZXQgZmFzdE5vdyA9IERhdGUubm93KClcbmxldCBmYXN0Tm93VGltZW91dFxuXG5jb25zdCBmYXN0VGltZXJzID0gW11cblxuZnVuY3Rpb24gb25UaW1lb3V0ICgpIHtcbiAgZmFzdE5vdyA9IERhdGUubm93KClcblxuICBsZXQgbGVuID0gZmFzdFRpbWVycy5sZW5ndGhcbiAgbGV0IGlkeCA9IDBcbiAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgIGNvbnN0IHRpbWVyID0gZmFzdFRpbWVyc1tpZHhdXG5cbiAgICBpZiAodGltZXIuc3RhdGUgPT09IDApIHtcbiAgICAgIHRpbWVyLnN0YXRlID0gZmFzdE5vdyArIHRpbWVyLmRlbGF5IC0gVElDS19NU1xuICAgIH0gZWxzZSBpZiAodGltZXIuc3RhdGUgPiAwICYmIGZhc3ROb3cgPj0gdGltZXIuc3RhdGUpIHtcbiAgICAgIHRpbWVyLnN0YXRlID0gLTFcbiAgICAgIHRpbWVyLmNhbGxiYWNrKHRpbWVyLm9wYXF1ZSlcbiAgICB9XG5cbiAgICBpZiAodGltZXIuc3RhdGUgPT09IC0xKSB7XG4gICAgICB0aW1lci5zdGF0ZSA9IC0yXG4gICAgICBpZiAoaWR4ICE9PSBsZW4gLSAxKSB7XG4gICAgICAgIGZhc3RUaW1lcnNbaWR4XSA9IGZhc3RUaW1lcnMucG9wKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZhc3RUaW1lcnMucG9wKClcbiAgICAgIH1cbiAgICAgIGxlbiAtPSAxXG4gICAgfSBlbHNlIHtcbiAgICAgIGlkeCArPSAxXG4gICAgfVxuICB9XG5cbiAgaWYgKGZhc3RUaW1lcnMubGVuZ3RoID4gMCkge1xuICAgIHJlZnJlc2hUaW1lb3V0KClcbiAgfVxufVxuXG5mdW5jdGlvbiByZWZyZXNoVGltZW91dCAoKSB7XG4gIGlmIChmYXN0Tm93VGltZW91dD8ucmVmcmVzaCkge1xuICAgIGZhc3ROb3dUaW1lb3V0LnJlZnJlc2goKVxuICB9IGVsc2Uge1xuICAgIGNsZWFyVGltZW91dChmYXN0Tm93VGltZW91dClcbiAgICBmYXN0Tm93VGltZW91dCA9IHNldFRpbWVvdXQob25UaW1lb3V0LCBUSUNLX01TKVxuICAgIGlmIChmYXN0Tm93VGltZW91dC51bnJlZikge1xuICAgICAgZmFzdE5vd1RpbWVvdXQudW5yZWYoKVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBUaW1lb3V0IHtcbiAgY29uc3RydWN0b3IgKGNhbGxiYWNrLCBkZWxheSwgb3BhcXVlKSB7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgdGhpcy5kZWxheSA9IGRlbGF5XG4gICAgdGhpcy5vcGFxdWUgPSBvcGFxdWVcblxuICAgIC8vICAtMiBub3QgaW4gdGltZXIgbGlzdFxuICAgIC8vICAtMSBpbiB0aW1lciBsaXN0IGJ1dCBpbmFjdGl2ZVxuICAgIC8vICAgMCBpbiB0aW1lciBsaXN0IHdhaXRpbmcgZm9yIHRpbWVcbiAgICAvLyA+IDAgaW4gdGltZXIgbGlzdCB3YWl0aW5nIGZvciB0aW1lIHRvIGV4cGlyZVxuICAgIHRoaXMuc3RhdGUgPSAtMlxuXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgfVxuXG4gIHJlZnJlc2ggKCkge1xuICAgIGlmICh0aGlzLnN0YXRlID09PSAtMikge1xuICAgICAgZmFzdFRpbWVycy5wdXNoKHRoaXMpXG4gICAgICBpZiAoIWZhc3ROb3dUaW1lb3V0IHx8IGZhc3RUaW1lcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJlZnJlc2hUaW1lb3V0KClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0gMFxuICB9XG5cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMuc3RhdGUgPSAtMVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXRUaW1lb3V0IChjYWxsYmFjaywgZGVsYXksIG9wYXF1ZSkge1xuICAgIHJldHVybiBkZWxheSA8PSAxZTNcbiAgICAgID8gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXksIG9wYXF1ZSlcbiAgICAgIDogbmV3IFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5LCBvcGFxdWUpXG4gIH0sXG4gIGNsZWFyVGltZW91dCAodGltZW91dCkge1xuICAgIGlmICh0aW1lb3V0IGluc3RhbmNlb2YgVGltZW91dCkge1xuICAgICAgdGltZW91dC5jbGVhcigpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIlRJQ0tfTVMiLCJmYXN0Tm93IiwiRGF0ZSIsIm5vdyIsImZhc3ROb3dUaW1lb3V0IiwiZmFzdFRpbWVycyIsIm9uVGltZW91dCIsImxlbiIsImxlbmd0aCIsImlkeCIsInRpbWVyIiwic3RhdGUiLCJkZWxheSIsImNhbGxiYWNrIiwib3BhcXVlIiwicG9wIiwicmVmcmVzaFRpbWVvdXQiLCJyZWZyZXNoIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInVucmVmIiwiVGltZW91dCIsImNvbnN0cnVjdG9yIiwicHVzaCIsImNsZWFyIiwibW9kdWxlIiwiZXhwb3J0cyIsInRpbWVvdXQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/util/timers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cache/cache.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/web/cache/cache.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  kConstruct\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/cache/symbols.js\");\nconst {\n  urlEquals,\n  getFieldValues\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/cache/util.js\");\nconst {\n  kEnumerableProperty,\n  isDisturbed\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  Response,\n  cloneResponse,\n  fromInnerResponse\n} = __webpack_require__(/*! ../fetch/response */ \"(ssr)/./node_modules/undici/lib/web/fetch/response.js\");\nconst {\n  Request,\n  fromInnerRequest\n} = __webpack_require__(/*! ../fetch/request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\");\nconst {\n  kState\n} = __webpack_require__(/*! ../fetch/symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst {\n  fetching\n} = __webpack_require__(/*! ../fetch/index */ \"(ssr)/./node_modules/undici/lib/web/fetch/index.js\");\nconst {\n  urlIsHttpHttpsScheme,\n  createDeferredPromise,\n  readAllBytes\n} = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation\n * @typedef {Object} CacheBatchOperation\n * @property {'delete' | 'put'} type\n * @property {any} request\n * @property {any} response\n * @property {import('../../types/cache').CacheQueryOptions} options\n */\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list\n * @typedef {[any, any][]} requestResponseList\n */\nvar _relevantRequestResponseList = /*#__PURE__*/new WeakMap();\nvar _Cache_brand = /*#__PURE__*/new WeakSet();\nclass Cache {\n  constructor() {\n    /**\n     * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm\n     * @param {CacheBatchOperation[]} operations\n     * @returns {requestResponseList}\n     */\n    _classPrivateMethodInitSpec(this, _Cache_brand);\n    /**\n     * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list\n     * @type {requestResponseList}\n     */\n    _classPrivateFieldInitSpec(this, _relevantRequestResponseList, void 0);\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor();\n    }\n    _classPrivateFieldSet(_relevantRequestResponseList, this, arguments[1]);\n  }\n  async match(request) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.match';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    request = webidl.converters.RequestInfo(request, prefix, 'request');\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n    const p = _assertClassBrand(_Cache_brand, this, _internalMatchAll).call(this, request, options, 1);\n    if (p.length === 0) {\n      return;\n    }\n    return p[0];\n  }\n  async matchAll() {\n    let request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.matchAll';\n    if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request');\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n    return _assertClassBrand(_Cache_brand, this, _internalMatchAll).call(this, request, options);\n  }\n  async add(request) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.add';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    request = webidl.converters.RequestInfo(request, prefix, 'request');\n\n    // 1.\n    const requests = [request];\n\n    // 2.\n    const responseArrayPromise = this.addAll(requests);\n\n    // 3.\n    return await responseArrayPromise;\n  }\n  async addAll(requests) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.addAll';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n\n    // 1.\n    const responsePromises = [];\n\n    // 2.\n    const requestList = [];\n\n    // 3.\n    for (let request of requests) {\n      if (request === undefined) {\n        throw webidl.errors.conversionFailed({\n          prefix,\n          argument: 'Argument 1',\n          types: ['undefined is not allowed']\n        });\n      }\n      request = webidl.converters.RequestInfo(request);\n      if (typeof request === 'string') {\n        continue;\n      }\n\n      // 3.1\n      const r = request[kState];\n\n      // 3.2\n      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {\n        throw webidl.errors.exception({\n          header: prefix,\n          message: 'Expected http/s scheme when method is not GET.'\n        });\n      }\n    }\n\n    // 4.\n    /** @type {ReturnType<typeof fetching>[]} */\n    const fetchControllers = [];\n\n    // 5.\n    for (const request of requests) {\n      // 5.1\n      const r = new Request(request)[kState];\n\n      // 5.2\n      if (!urlIsHttpHttpsScheme(r.url)) {\n        throw webidl.errors.exception({\n          header: prefix,\n          message: 'Expected http/s scheme.'\n        });\n      }\n\n      // 5.4\n      r.initiator = 'fetch';\n      r.destination = 'subresource';\n\n      // 5.5\n      requestList.push(r);\n\n      // 5.6\n      const responsePromise = createDeferredPromise();\n\n      // 5.7\n      fetchControllers.push(fetching({\n        request: r,\n        processResponse(response) {\n          // 1.\n          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {\n            responsePromise.reject(webidl.errors.exception({\n              header: 'Cache.addAll',\n              message: 'Received an invalid status code or the request failed.'\n            }));\n          } else if (response.headersList.contains('vary')) {\n            // 2.\n            // 2.1\n            const fieldValues = getFieldValues(response.headersList.get('vary'));\n\n            // 2.2\n            for (const fieldValue of fieldValues) {\n              // 2.2.1\n              if (fieldValue === '*') {\n                responsePromise.reject(webidl.errors.exception({\n                  header: 'Cache.addAll',\n                  message: 'invalid vary field value'\n                }));\n                for (const controller of fetchControllers) {\n                  controller.abort();\n                }\n                return;\n              }\n            }\n          }\n        },\n        processResponseEndOfBody(response) {\n          // 1.\n          if (response.aborted) {\n            responsePromise.reject(new DOMException('aborted', 'AbortError'));\n            return;\n          }\n\n          // 2.\n          responsePromise.resolve(response);\n        }\n      }));\n\n      // 5.8\n      responsePromises.push(responsePromise.promise);\n    }\n\n    // 6.\n    const p = Promise.all(responsePromises);\n\n    // 7.\n    const responses = await p;\n\n    // 7.1\n    const operations = [];\n\n    // 7.2\n    let index = 0;\n\n    // 7.3\n    for (const response of responses) {\n      // 7.3.1\n      /** @type {CacheBatchOperation} */\n      const operation = {\n        type: 'put',\n        // 7.3.2\n        request: requestList[index],\n        // 7.3.3\n        response // 7.3.4\n      };\n      operations.push(operation); // 7.3.5\n\n      index++; // 7.3.6\n    }\n\n    // 7.5\n    const cacheJobPromise = createDeferredPromise();\n\n    // 7.6.1\n    let errorData = null;\n\n    // 7.6.2\n    try {\n      _assertClassBrand(_Cache_brand, this, _batchCacheOperations).call(this, operations);\n    } catch (e) {\n      errorData = e;\n    }\n\n    // 7.6.3\n    queueMicrotask(() => {\n      // 7.6.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve(undefined);\n      } else {\n        // 7.6.3.2\n        cacheJobPromise.reject(errorData);\n      }\n    });\n\n    // 7.7\n    return cacheJobPromise.promise;\n  }\n  async put(request, response) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.put';\n    webidl.argumentLengthCheck(arguments, 2, prefix);\n    request = webidl.converters.RequestInfo(request, prefix, 'request');\n    response = webidl.converters.Response(response, prefix, 'response');\n\n    // 1.\n    let innerRequest = null;\n\n    // 2.\n    if (request instanceof Request) {\n      innerRequest = request[kState];\n    } else {\n      // 3.\n      innerRequest = new Request(request)[kState];\n    }\n\n    // 4.\n    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: 'Expected an http/s scheme when method is not GET'\n      });\n    }\n\n    // 5.\n    const innerResponse = response[kState];\n\n    // 6.\n    if (innerResponse.status === 206) {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: 'Got 206 status'\n      });\n    }\n\n    // 7.\n    if (innerResponse.headersList.contains('vary')) {\n      // 7.1.\n      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'));\n\n      // 7.2.\n      for (const fieldValue of fieldValues) {\n        // 7.2.1\n        if (fieldValue === '*') {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: 'Got * vary field value'\n          });\n        }\n      }\n    }\n\n    // 8.\n    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: 'Response body is locked or disturbed'\n      });\n    }\n\n    // 9.\n    const clonedResponse = cloneResponse(innerResponse);\n\n    // 10.\n    const bodyReadPromise = createDeferredPromise();\n\n    // 11.\n    if (innerResponse.body != null) {\n      // 11.1\n      const stream = innerResponse.body.stream;\n\n      // 11.2\n      const reader = stream.getReader();\n\n      // 11.3\n      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);\n    } else {\n      bodyReadPromise.resolve(undefined);\n    }\n\n    // 12.\n    /** @type {CacheBatchOperation[]} */\n    const operations = [];\n\n    // 13.\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'put',\n      // 14.\n      request: innerRequest,\n      // 15.\n      response: clonedResponse // 16.\n    };\n\n    // 17.\n    operations.push(operation);\n\n    // 19.\n    const bytes = await bodyReadPromise.promise;\n    if (clonedResponse.body != null) {\n      clonedResponse.body.source = bytes;\n    }\n\n    // 19.1\n    const cacheJobPromise = createDeferredPromise();\n\n    // 19.2.1\n    let errorData = null;\n\n    // 19.2.2\n    try {\n      _assertClassBrand(_Cache_brand, this, _batchCacheOperations).call(this, operations);\n    } catch (e) {\n      errorData = e;\n    }\n\n    // 19.2.3\n    queueMicrotask(() => {\n      // 19.2.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve();\n      } else {\n        // 19.2.3.2\n        cacheJobPromise.reject(errorData);\n      }\n    });\n    return cacheJobPromise.promise;\n  }\n  async delete(request) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.delete';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    request = webidl.converters.RequestInfo(request, prefix, 'request');\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n\n    /**\n     * @type {Request}\n     */\n    let r = null;\n    if (request instanceof Request) {\n      r = request[kState];\n      if (r.method !== 'GET' && !options.ignoreMethod) {\n        return false;\n      }\n    } else {\n      assert(typeof request === 'string');\n      r = new Request(request)[kState];\n    }\n\n    /** @type {CacheBatchOperation[]} */\n    const operations = [];\n\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'delete',\n      request: r,\n      options\n    };\n    operations.push(operation);\n    const cacheJobPromise = createDeferredPromise();\n    let errorData = null;\n    let requestResponses;\n    try {\n      requestResponses = _assertClassBrand(_Cache_brand, this, _batchCacheOperations).call(this, operations);\n    } catch (e) {\n      errorData = e;\n    }\n    queueMicrotask(() => {\n      if (errorData === null) {\n        cacheJobPromise.resolve(!!requestResponses?.length);\n      } else {\n        cacheJobPromise.reject(errorData);\n      }\n    });\n    return cacheJobPromise.promise;\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys\n   * @param {any} request\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @returns {Promise<readonly Request[]>}\n   */\n  async keys() {\n    let request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.keys';\n    if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request');\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n\n    // 1.\n    let r = null;\n\n    // 2.\n    if (request !== undefined) {\n      // 2.1\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState];\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return [];\n        }\n      } else if (typeof request === 'string') {\n        // 2.2\n        r = new Request(request)[kState];\n      }\n    }\n\n    // 4.\n    const promise = createDeferredPromise();\n\n    // 5.\n    // 5.1\n    const requests = [];\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of _classPrivateFieldGet(_relevantRequestResponseList, this)) {\n        // 5.2.1.1\n        requests.push(requestResponse[0]);\n      }\n    } else {\n      // 5.3\n      // 5.3.1\n      const requestResponses = _assertClassBrand(_Cache_brand, this, _queryCache).call(this, r, options);\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        // 5.3.2.1\n        requests.push(requestResponse[0]);\n      }\n    }\n\n    // 5.4\n    queueMicrotask(() => {\n      // 5.4.1\n      const requestList = [];\n\n      // 5.4.2\n      for (const request of requests) {\n        const requestObject = fromInnerRequest(request, new AbortController().signal, 'immutable');\n        // 5.4.2.1\n        requestList.push(requestObject);\n      }\n\n      // 5.4.3\n      promise.resolve(Object.freeze(requestList));\n    });\n    return promise.promise;\n  }\n}\nfunction _batchCacheOperations(operations) {\n  // 1.\n  const cache = _classPrivateFieldGet(_relevantRequestResponseList, this);\n\n  // 2.\n  const backupCache = [...cache];\n\n  // 3.\n  const addedItems = [];\n\n  // 4.1\n  const resultList = [];\n  try {\n    // 4.2\n    for (const operation of operations) {\n      // 4.2.1\n      if (operation.type !== 'delete' && operation.type !== 'put') {\n        throw webidl.errors.exception({\n          header: 'Cache.#batchCacheOperations',\n          message: 'operation type does not match \"delete\" or \"put\"'\n        });\n      }\n\n      // 4.2.2\n      if (operation.type === 'delete' && operation.response != null) {\n        throw webidl.errors.exception({\n          header: 'Cache.#batchCacheOperations',\n          message: 'delete operation should not have an associated response'\n        });\n      }\n\n      // 4.2.3\n      if (_assertClassBrand(_Cache_brand, this, _queryCache).call(this, operation.request, operation.options, addedItems).length) {\n        throw new DOMException('???', 'InvalidStateError');\n      }\n\n      // 4.2.4\n      let requestResponses;\n\n      // 4.2.5\n      if (operation.type === 'delete') {\n        // 4.2.5.1\n        requestResponses = _assertClassBrand(_Cache_brand, this, _queryCache).call(this, operation.request, operation.options);\n\n        // TODO: the spec is wrong, this is needed to pass WPTs\n        if (requestResponses.length === 0) {\n          return [];\n        }\n\n        // 4.2.5.2\n        for (const requestResponse of requestResponses) {\n          const idx = cache.indexOf(requestResponse);\n          assert(idx !== -1);\n\n          // 4.2.5.2.1\n          cache.splice(idx, 1);\n        }\n      } else if (operation.type === 'put') {\n        // 4.2.6\n        // 4.2.6.1\n        if (operation.response == null) {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'put operation should have an associated response'\n          });\n        }\n\n        // 4.2.6.2\n        const r = operation.request;\n\n        // 4.2.6.3\n        if (!urlIsHttpHttpsScheme(r.url)) {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'expected http or https scheme'\n          });\n        }\n\n        // 4.2.6.4\n        if (r.method !== 'GET') {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'not get method'\n          });\n        }\n\n        // 4.2.6.5\n        if (operation.options != null) {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'options must not be defined'\n          });\n        }\n\n        // 4.2.6.6\n        requestResponses = _assertClassBrand(_Cache_brand, this, _queryCache).call(this, operation.request);\n\n        // 4.2.6.7\n        for (const requestResponse of requestResponses) {\n          const idx = cache.indexOf(requestResponse);\n          assert(idx !== -1);\n\n          // 4.2.6.7.1\n          cache.splice(idx, 1);\n        }\n\n        // 4.2.6.8\n        cache.push([operation.request, operation.response]);\n\n        // 4.2.6.10\n        addedItems.push([operation.request, operation.response]);\n      }\n\n      // 4.2.7\n      resultList.push([operation.request, operation.response]);\n    }\n\n    // 4.3\n    return resultList;\n  } catch (e) {\n    // 5.\n    // 5.1\n    _classPrivateFieldGet(_relevantRequestResponseList, this).length = 0;\n\n    // 5.2\n    _classPrivateFieldSet(_relevantRequestResponseList, this, backupCache);\n\n    // 5.3\n    throw e;\n  }\n}\n/**\n * @see https://w3c.github.io/ServiceWorker/#query-cache\n * @param {any} requestQuery\n * @param {import('../../types/cache').CacheQueryOptions} options\n * @param {requestResponseList} targetStorage\n * @returns {requestResponseList}\n */\nfunction _queryCache(requestQuery, options, targetStorage) {\n  /** @type {requestResponseList} */\n  const resultList = [];\n  const storage = targetStorage ?? _classPrivateFieldGet(_relevantRequestResponseList, this);\n  for (const requestResponse of storage) {\n    const [cachedRequest, cachedResponse] = requestResponse;\n    if (_assertClassBrand(_Cache_brand, this, _requestMatchesCachedItem).call(this, requestQuery, cachedRequest, cachedResponse, options)) {\n      resultList.push(requestResponse);\n    }\n  }\n  return resultList;\n}\n/**\n * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm\n * @param {any} requestQuery\n * @param {any} request\n * @param {any | null} response\n * @param {import('../../types/cache').CacheQueryOptions | undefined} options\n * @returns {boolean}\n */\nfunction _requestMatchesCachedItem(requestQuery, request) {\n  let response = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let options = arguments.length > 3 ? arguments[3] : undefined;\n  // if (options?.ignoreMethod === false && request.method === 'GET') {\n  //   return false\n  // }\n\n  const queryURL = new URL(requestQuery.url);\n  const cachedURL = new URL(request.url);\n  if (options?.ignoreSearch) {\n    cachedURL.search = '';\n    queryURL.search = '';\n  }\n  if (!urlEquals(queryURL, cachedURL, true)) {\n    return false;\n  }\n  if (response == null || options?.ignoreVary || !response.headersList.contains('vary')) {\n    return true;\n  }\n  const fieldValues = getFieldValues(response.headersList.get('vary'));\n  for (const fieldValue of fieldValues) {\n    if (fieldValue === '*') {\n      return false;\n    }\n    const requestValue = request.headersList.get(fieldValue);\n    const queryValue = requestQuery.headersList.get(fieldValue);\n\n    // If one has the header and the other doesn't, or one has\n    // a different value than the other, return false\n    if (requestValue !== queryValue) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction _internalMatchAll(request, options) {\n  let maxResponses = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  // 1.\n  let r = null;\n\n  // 2.\n  if (request !== undefined) {\n    if (request instanceof Request) {\n      // 2.1.1\n      r = request[kState];\n\n      // 2.1.2\n      if (r.method !== 'GET' && !options.ignoreMethod) {\n        return [];\n      }\n    } else if (typeof request === 'string') {\n      // 2.2.1\n      r = new Request(request)[kState];\n    }\n  }\n\n  // 5.\n  // 5.1\n  const responses = [];\n\n  // 5.2\n  if (request === undefined) {\n    // 5.2.1\n    for (const requestResponse of _classPrivateFieldGet(_relevantRequestResponseList, this)) {\n      responses.push(requestResponse[1]);\n    }\n  } else {\n    // 5.3\n    // 5.3.1\n    const requestResponses = _assertClassBrand(_Cache_brand, this, _queryCache).call(this, r, options);\n\n    // 5.3.2\n    for (const requestResponse of requestResponses) {\n      responses.push(requestResponse[1]);\n    }\n  }\n\n  // 5.4\n  // We don't implement CORs so we don't need to loop over the responses, yay!\n\n  // 5.5.1\n  const responseList = [];\n\n  // 5.5.2\n  for (const response of responses) {\n    // 5.5.2.1\n    const responseObject = fromInnerResponse(response, 'immutable');\n    responseList.push(responseObject.clone());\n    if (responseList.length >= maxResponses) {\n      break;\n    }\n  }\n\n  // 6.\n  return Object.freeze(responseList);\n}\nObject.defineProperties(Cache.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'Cache',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  matchAll: kEnumerableProperty,\n  add: kEnumerableProperty,\n  addAll: kEnumerableProperty,\n  put: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n});\nconst cacheQueryOptionConverters = [{\n  key: 'ignoreSearch',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'ignoreMethod',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'ignoreVary',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}];\nwebidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);\nwebidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([...cacheQueryOptionConverters, {\n  key: 'cacheName',\n  converter: webidl.converters.DOMString\n}]);\nwebidl.converters.Response = webidl.interfaceConverter(Response);\nwebidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(webidl.converters.RequestInfo);\nmodule.exports = {\n  Cache\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cache/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cache/cachestorage.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/web/cache/cachestorage.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  kConstruct\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/cache/symbols.js\");\nconst {\n  Cache\n} = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/undici/lib/web/cache/cache.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  kEnumerableProperty\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nvar _caches = /*#__PURE__*/new WeakMap();\nclass CacheStorage {\n  constructor() {\n    /**\n     * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map\n     * @type {Map<string, import('./cache').requestResponseList}\n     */\n    _classPrivateFieldInitSpec(this, _caches, new Map());\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor();\n    }\n  }\n  async match(request) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    webidl.brandCheck(this, CacheStorage);\n    webidl.argumentLengthCheck(arguments, 1, 'CacheStorage.match');\n    request = webidl.converters.RequestInfo(request);\n    options = webidl.converters.MultiCacheQueryOptions(options);\n\n    // 1.\n    if (options.cacheName != null) {\n      // 1.1.1.1\n      if (_classPrivateFieldGet(_caches, this).has(options.cacheName)) {\n        // 1.1.1.1.1\n        const cacheList = _classPrivateFieldGet(_caches, this).get(options.cacheName);\n        const cache = new Cache(kConstruct, cacheList);\n        return await cache.match(request, options);\n      }\n    } else {\n      // 2.\n      // 2.2\n      for (const cacheList of _classPrivateFieldGet(_caches, this).values()) {\n        const cache = new Cache(kConstruct, cacheList);\n\n        // 2.2.1.2\n        const response = await cache.match(request, options);\n        if (response !== undefined) {\n          return response;\n        }\n      }\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async has(cacheName) {\n    webidl.brandCheck(this, CacheStorage);\n    const prefix = 'CacheStorage.has';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName');\n\n    // 2.1.1\n    // 2.2\n    return _classPrivateFieldGet(_caches, this).has(cacheName);\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open\n   * @param {string} cacheName\n   * @returns {Promise<Cache>}\n   */\n  async open(cacheName) {\n    webidl.brandCheck(this, CacheStorage);\n    const prefix = 'CacheStorage.open';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName');\n\n    // 2.1\n    if (_classPrivateFieldGet(_caches, this).has(cacheName)) {\n      // await caches.open('v1') !== await caches.open('v1')\n\n      // 2.1.1\n      const cache = _classPrivateFieldGet(_caches, this).get(cacheName);\n\n      // 2.1.1.1\n      return new Cache(kConstruct, cache);\n    }\n\n    // 2.2\n    const cache = [];\n\n    // 2.3\n    _classPrivateFieldGet(_caches, this).set(cacheName, cache);\n\n    // 2.4\n    return new Cache(kConstruct, cache);\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async delete(cacheName) {\n    webidl.brandCheck(this, CacheStorage);\n    const prefix = 'CacheStorage.delete';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    cacheName = webidl.converters.DOMString(cacheName, prefix, 'cacheName');\n    return _classPrivateFieldGet(_caches, this).delete(cacheName);\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys\n   * @returns {Promise<string[]>}\n   */\n  async keys() {\n    webidl.brandCheck(this, CacheStorage);\n\n    // 2.1\n    const keys = _classPrivateFieldGet(_caches, this).keys();\n\n    // 2.2\n    return [...keys];\n  }\n}\nObject.defineProperties(CacheStorage.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'CacheStorage',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  has: kEnumerableProperty,\n  open: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n});\nmodule.exports = {\n  CacheStorage\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cache/cachestorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cache/symbols.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/cache/symbols.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = {\n  kConstruct: (__webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\").kConstruct)\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvY2FjaGUvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsVUFBVSxFQUFFQyw2R0FBd0NEO0FBQ3RELENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvY2FjaGUvc3ltYm9scy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtDb25zdHJ1Y3Q6IHJlcXVpcmUoJy4uLy4uL2NvcmUvc3ltYm9scycpLmtDb25zdHJ1Y3Rcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwia0NvbnN0cnVjdCIsInJlcXVpcmUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cache/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cache/util.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/web/cache/util.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  URLSerializer\n} = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  isValidHeaderName\n} = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\n\n/**\n * @see https://url.spec.whatwg.org/#concept-url-equals\n * @param {URL} A\n * @param {URL} B\n * @param {boolean | undefined} excludeFragment\n * @returns {boolean}\n */\nfunction urlEquals(A, B) {\n  let excludeFragment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const serializedA = URLSerializer(A, excludeFragment);\n  const serializedB = URLSerializer(B, excludeFragment);\n  return serializedA === serializedB;\n}\n\n/**\n * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262\n * @param {string} header\n */\nfunction getFieldValues(header) {\n  assert(header !== null);\n  const values = [];\n  for (let value of header.split(',')) {\n    value = value.trim();\n    if (isValidHeaderName(value)) {\n      values.push(value);\n    }\n  }\n  return values;\n}\nmodule.exports = {\n  urlEquals,\n  getFieldValues\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvY2FjaGUvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixNQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsZ0NBQWEsQ0FBQztBQUNyQyxNQUFNO0VBQUVDO0FBQWMsQ0FBQyxHQUFHRCxtQkFBTyxDQUFDLGdGQUFtQixDQUFDO0FBQ3RELE1BQU07RUFBRUU7QUFBa0IsQ0FBQyxHQUFHRixtQkFBTyxDQUFDLHdFQUFlLENBQUM7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0csU0FBU0EsQ0FBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQTJCO0VBQUEsSUFBekJDLGVBQWUsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsS0FBSztFQUMvQyxNQUFNRyxXQUFXLEdBQUdULGFBQWEsQ0FBQ0csQ0FBQyxFQUFFRSxlQUFlLENBQUM7RUFFckQsTUFBTUssV0FBVyxHQUFHVixhQUFhLENBQUNJLENBQUMsRUFBRUMsZUFBZSxDQUFDO0VBRXJELE9BQU9JLFdBQVcsS0FBS0MsV0FBVztBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGNBQWNBLENBQUVDLE1BQU0sRUFBRTtFQUMvQmQsTUFBTSxDQUFDYyxNQUFNLEtBQUssSUFBSSxDQUFDO0VBRXZCLE1BQU1DLE1BQU0sR0FBRyxFQUFFO0VBRWpCLEtBQUssSUFBSUMsS0FBSyxJQUFJRixNQUFNLENBQUNHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNuQ0QsS0FBSyxHQUFHQSxLQUFLLENBQUNFLElBQUksQ0FBQyxDQUFDO0lBRXBCLElBQUlmLGlCQUFpQixDQUFDYSxLQUFLLENBQUMsRUFBRTtNQUM1QkQsTUFBTSxDQUFDSSxJQUFJLENBQUNILEtBQUssQ0FBQztJQUNwQjtFQUNGO0VBRUEsT0FBT0QsTUFBTTtBQUNmO0FBRUFLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZqQixTQUFTO0VBQ1RTO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL3dlYi9jYWNoZS91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdub2RlOmFzc2VydCcpXG5jb25zdCB7IFVSTFNlcmlhbGl6ZXIgfSA9IHJlcXVpcmUoJy4uL2ZldGNoL2RhdGEtdXJsJylcbmNvbnN0IHsgaXNWYWxpZEhlYWRlck5hbWUgfSA9IHJlcXVpcmUoJy4uL2ZldGNoL3V0aWwnKVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LXVybC1lcXVhbHNcbiAqIEBwYXJhbSB7VVJMfSBBXG4gKiBAcGFyYW0ge1VSTH0gQlxuICogQHBhcmFtIHtib29sZWFuIHwgdW5kZWZpbmVkfSBleGNsdWRlRnJhZ21lbnRcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiB1cmxFcXVhbHMgKEEsIEIsIGV4Y2x1ZGVGcmFnbWVudCA9IGZhbHNlKSB7XG4gIGNvbnN0IHNlcmlhbGl6ZWRBID0gVVJMU2VyaWFsaXplcihBLCBleGNsdWRlRnJhZ21lbnQpXG5cbiAgY29uc3Qgc2VyaWFsaXplZEIgPSBVUkxTZXJpYWxpemVyKEIsIGV4Y2x1ZGVGcmFnbWVudClcblxuICByZXR1cm4gc2VyaWFsaXplZEEgPT09IHNlcmlhbGl6ZWRCXG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hyb21pdW0vY2hyb21pdW0vYmxvYi82OTRkMjBkMTM0Y2I1NTNkOGQ4OWU1NTAwYjkxNDgwMTJiMWJhMjk5L2NvbnRlbnQvYnJvd3Nlci9jYWNoZV9zdG9yYWdlL2NhY2hlX3N0b3JhZ2VfY2FjaGUuY2MjTDI2MC1MMjYyXG4gKiBAcGFyYW0ge3N0cmluZ30gaGVhZGVyXG4gKi9cbmZ1bmN0aW9uIGdldEZpZWxkVmFsdWVzIChoZWFkZXIpIHtcbiAgYXNzZXJ0KGhlYWRlciAhPT0gbnVsbClcblxuICBjb25zdCB2YWx1ZXMgPSBbXVxuXG4gIGZvciAobGV0IHZhbHVlIG9mIGhlYWRlci5zcGxpdCgnLCcpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKClcblxuICAgIGlmIChpc1ZhbGlkSGVhZGVyTmFtZSh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZXNcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHVybEVxdWFscyxcbiAgZ2V0RmllbGRWYWx1ZXNcbn1cbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiVVJMU2VyaWFsaXplciIsImlzVmFsaWRIZWFkZXJOYW1lIiwidXJsRXF1YWxzIiwiQSIsIkIiLCJleGNsdWRlRnJhZ21lbnQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJzZXJpYWxpemVkQSIsInNlcmlhbGl6ZWRCIiwiZ2V0RmllbGRWYWx1ZXMiLCJoZWFkZXIiLCJ2YWx1ZXMiLCJ2YWx1ZSIsInNwbGl0IiwidHJpbSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cache/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cookies/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/web/cookies/constants.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size\nconst maxAttributeValueSize = 1024;\n\n// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size\nconst maxNameValuePairSize = 4096;\nmodule.exports = {\n  maxAttributeValueSize,\n  maxNameValuePairSize\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvY29va2llcy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQSxNQUFNQSxxQkFBcUIsR0FBRyxJQUFJOztBQUVsQztBQUNBLE1BQU1DLG9CQUFvQixHQUFHLElBQUk7QUFFakNDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZILHFCQUFxQjtFQUNyQkM7QUFDRixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvd2ViL2Nvb2tpZXMvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vLyBodHRwczovL3dpY2cuZ2l0aHViLmlvL2Nvb2tpZS1zdG9yZS8jY29va2llLW1heGltdW0tYXR0cmlidXRlLXZhbHVlLXNpemVcbmNvbnN0IG1heEF0dHJpYnV0ZVZhbHVlU2l6ZSA9IDEwMjRcblxuLy8gaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9jb29raWUtc3RvcmUvI2Nvb2tpZS1tYXhpbXVtLW5hbWUtdmFsdWUtcGFpci1zaXplXG5jb25zdCBtYXhOYW1lVmFsdWVQYWlyU2l6ZSA9IDQwOTZcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1heEF0dHJpYnV0ZVZhbHVlU2l6ZSxcbiAgbWF4TmFtZVZhbHVlUGFpclNpemVcbn1cbiJdLCJuYW1lcyI6WyJtYXhBdHRyaWJ1dGVWYWx1ZVNpemUiLCJtYXhOYW1lVmFsdWVQYWlyU2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cookies/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cookies/index.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/cookies/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  parseSetCookie\n} = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/undici/lib/web/cookies/parse.js\");\nconst {\n  stringify\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/cookies/util.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  Headers\n} = __webpack_require__(/*! ../fetch/headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\n\n/**\n * @typedef {Object} Cookie\n * @property {string} name\n * @property {string} value\n * @property {Date|number|undefined} expires\n * @property {number|undefined} maxAge\n * @property {string|undefined} domain\n * @property {string|undefined} path\n * @property {boolean|undefined} secure\n * @property {boolean|undefined} httpOnly\n * @property {'Strict'|'Lax'|'None'} sameSite\n * @property {string[]} unparsed\n */\n\n/**\n * @param {Headers} headers\n * @returns {Record<string, string>}\n */\nfunction getCookies(headers) {\n  webidl.argumentLengthCheck(arguments, 1, 'getCookies');\n  webidl.brandCheck(headers, Headers, {\n    strict: false\n  });\n  const cookie = headers.get('cookie');\n  const out = {};\n  if (!cookie) {\n    return out;\n  }\n  for (const piece of cookie.split(';')) {\n    const [name, ...value] = piece.split('=');\n    out[name.trim()] = value.join('=');\n  }\n  return out;\n}\n\n/**\n * @param {Headers} headers\n * @param {string} name\n * @param {{ path?: string, domain?: string }|undefined} attributes\n * @returns {void}\n */\nfunction deleteCookie(headers, name, attributes) {\n  webidl.brandCheck(headers, Headers, {\n    strict: false\n  });\n  const prefix = 'deleteCookie';\n  webidl.argumentLengthCheck(arguments, 2, prefix);\n  name = webidl.converters.DOMString(name, prefix, 'name');\n  attributes = webidl.converters.DeleteCookieAttributes(attributes);\n\n  // Matches behavior of\n  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278\n  setCookie(headers, {\n    name,\n    value: '',\n    expires: new Date(0),\n    ...attributes\n  });\n}\n\n/**\n * @param {Headers} headers\n * @returns {Cookie[]}\n */\nfunction getSetCookies(headers) {\n  webidl.argumentLengthCheck(arguments, 1, 'getSetCookies');\n  webidl.brandCheck(headers, Headers, {\n    strict: false\n  });\n  const cookies = headers.getSetCookie();\n  if (!cookies) {\n    return [];\n  }\n  return cookies.map(pair => parseSetCookie(pair));\n}\n\n/**\n * @param {Headers} headers\n * @param {Cookie} cookie\n * @returns {void}\n */\nfunction setCookie(headers, cookie) {\n  webidl.argumentLengthCheck(arguments, 2, 'setCookie');\n  webidl.brandCheck(headers, Headers, {\n    strict: false\n  });\n  cookie = webidl.converters.Cookie(cookie);\n  const str = stringify(cookie);\n  if (str) {\n    headers.append('Set-Cookie', str);\n  }\n}\nwebidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([{\n  converter: webidl.nullableConverter(webidl.converters.DOMString),\n  key: 'path',\n  defaultValue: () => null\n}, {\n  converter: webidl.nullableConverter(webidl.converters.DOMString),\n  key: 'domain',\n  defaultValue: () => null\n}]);\nwebidl.converters.Cookie = webidl.dictionaryConverter([{\n  converter: webidl.converters.DOMString,\n  key: 'name'\n}, {\n  converter: webidl.converters.DOMString,\n  key: 'value'\n}, {\n  converter: webidl.nullableConverter(value => {\n    if (typeof value === 'number') {\n      return webidl.converters['unsigned long long'](value);\n    }\n    return new Date(value);\n  }),\n  key: 'expires',\n  defaultValue: () => null\n}, {\n  converter: webidl.nullableConverter(webidl.converters['long long']),\n  key: 'maxAge',\n  defaultValue: () => null\n}, {\n  converter: webidl.nullableConverter(webidl.converters.DOMString),\n  key: 'domain',\n  defaultValue: () => null\n}, {\n  converter: webidl.nullableConverter(webidl.converters.DOMString),\n  key: 'path',\n  defaultValue: () => null\n}, {\n  converter: webidl.nullableConverter(webidl.converters.boolean),\n  key: 'secure',\n  defaultValue: () => null\n}, {\n  converter: webidl.nullableConverter(webidl.converters.boolean),\n  key: 'httpOnly',\n  defaultValue: () => null\n}, {\n  converter: webidl.converters.USVString,\n  key: 'sameSite',\n  allowedValues: ['Strict', 'Lax', 'None']\n}, {\n  converter: webidl.sequenceConverter(webidl.converters.DOMString),\n  key: 'unparsed',\n  defaultValue: () => new Array(0)\n}]);\nmodule.exports = {\n  getCookies,\n  deleteCookie,\n  getSetCookies,\n  setCookie\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cookies/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cookies/parse.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/cookies/parse.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  maxNameValuePairSize,\n  maxAttributeValueSize\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/cookies/constants.js\");\nconst {\n  isCTLExcludingHtab\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/cookies/util.js\");\nconst {\n  collectASequenceOfCodePointsFast\n} = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\n\n/**\n * @description Parses the field-value attributes of a set-cookie header string.\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} header\n * @returns if the header is invalid, null will be returned\n */\nfunction parseSetCookie(header) {\n  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F\n  //    character (CTL characters excluding HTAB): Abort these steps and\n  //    ignore the set-cookie-string entirely.\n  if (isCTLExcludingHtab(header)) {\n    return null;\n  }\n  let nameValuePair = '';\n  let unparsedAttributes = '';\n  let name = '';\n  let value = '';\n\n  // 2. If the set-cookie-string contains a %x3B (\";\") character:\n  if (header.includes(';')) {\n    // 1. The name-value-pair string consists of the characters up to,\n    //    but not including, the first %x3B (\";\"), and the unparsed-\n    //    attributes consist of the remainder of the set-cookie-string\n    //    (including the %x3B (\";\") in question).\n    const position = {\n      position: 0\n    };\n    nameValuePair = collectASequenceOfCodePointsFast(';', header, position);\n    unparsedAttributes = header.slice(position.position);\n  } else {\n    // Otherwise:\n\n    // 1. The name-value-pair string consists of all the characters\n    //    contained in the set-cookie-string, and the unparsed-\n    //    attributes is the empty string.\n    nameValuePair = header;\n  }\n\n  // 3. If the name-value-pair string lacks a %x3D (\"=\") character, then\n  //    the name string is empty, and the value string is the value of\n  //    name-value-pair.\n  if (!nameValuePair.includes('=')) {\n    value = nameValuePair;\n  } else {\n    //    Otherwise, the name string consists of the characters up to, but\n    //    not including, the first %x3D (\"=\") character, and the (possibly\n    //    empty) value string consists of the characters after the first\n    //    %x3D (\"=\") character.\n    const position = {\n      position: 0\n    };\n    name = collectASequenceOfCodePointsFast('=', nameValuePair, position);\n    value = nameValuePair.slice(position.position + 1);\n  }\n\n  // 4. Remove any leading or trailing WSP characters from the name\n  //    string and the value string.\n  name = name.trim();\n  value = value.trim();\n\n  // 5. If the sum of the lengths of the name string and the value string\n  //    is more than 4096 octets, abort these steps and ignore the set-\n  //    cookie-string entirely.\n  if (name.length + value.length > maxNameValuePairSize) {\n    return null;\n  }\n\n  // 6. The cookie-name is the name string, and the cookie-value is the\n  //    value string.\n  return {\n    name,\n    value,\n    ...parseUnparsedAttributes(unparsedAttributes)\n  };\n}\n\n/**\n * Parses the remaining attributes of a set-cookie header\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} unparsedAttributes\n * @param {[Object.<string, unknown>]={}} cookieAttributeList\n */\nfunction parseUnparsedAttributes(unparsedAttributes) {\n  let cookieAttributeList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // 1. If the unparsed-attributes string is empty, skip the rest of\n  //    these steps.\n  if (unparsedAttributes.length === 0) {\n    return cookieAttributeList;\n  }\n\n  // 2. Discard the first character of the unparsed-attributes (which\n  //    will be a %x3B (\";\") character).\n  assert(unparsedAttributes[0] === ';');\n  unparsedAttributes = unparsedAttributes.slice(1);\n  let cookieAv = '';\n\n  // 3. If the remaining unparsed-attributes contains a %x3B (\";\")\n  //    character:\n  if (unparsedAttributes.includes(';')) {\n    // 1. Consume the characters of the unparsed-attributes up to, but\n    //    not including, the first %x3B (\";\") character.\n    cookieAv = collectASequenceOfCodePointsFast(';', unparsedAttributes, {\n      position: 0\n    });\n    unparsedAttributes = unparsedAttributes.slice(cookieAv.length);\n  } else {\n    // Otherwise:\n\n    // 1. Consume the remainder of the unparsed-attributes.\n    cookieAv = unparsedAttributes;\n    unparsedAttributes = '';\n  }\n\n  // Let the cookie-av string be the characters consumed in this step.\n\n  let attributeName = '';\n  let attributeValue = '';\n\n  // 4. If the cookie-av string contains a %x3D (\"=\") character:\n  if (cookieAv.includes('=')) {\n    // 1. The (possibly empty) attribute-name string consists of the\n    //    characters up to, but not including, the first %x3D (\"=\")\n    //    character, and the (possibly empty) attribute-value string\n    //    consists of the characters after the first %x3D (\"=\")\n    //    character.\n    const position = {\n      position: 0\n    };\n    attributeName = collectASequenceOfCodePointsFast('=', cookieAv, position);\n    attributeValue = cookieAv.slice(position.position + 1);\n  } else {\n    // Otherwise:\n\n    // 1. The attribute-name string consists of the entire cookie-av\n    //    string, and the attribute-value string is empty.\n    attributeName = cookieAv;\n  }\n\n  // 5. Remove any leading or trailing WSP characters from the attribute-\n  //    name string and the attribute-value string.\n  attributeName = attributeName.trim();\n  attributeValue = attributeValue.trim();\n\n  // 6. If the attribute-value is longer than 1024 octets, ignore the\n  //    cookie-av string and return to Step 1 of this algorithm.\n  if (attributeValue.length > maxAttributeValueSize) {\n    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n  }\n\n  // 7. Process the attribute-name and attribute-value according to the\n  //    requirements in the following subsections.  (Notice that\n  //    attributes with unrecognized attribute-names are ignored.)\n  const attributeNameLowercase = attributeName.toLowerCase();\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1\n  // If the attribute-name case-insensitively matches the string\n  // \"Expires\", the user agent MUST process the cookie-av as follows.\n  if (attributeNameLowercase === 'expires') {\n    // 1. Let the expiry-time be the result of parsing the attribute-value\n    //    as cookie-date (see Section 5.1.1).\n    const expiryTime = new Date(attributeValue);\n\n    // 2. If the attribute-value failed to parse as a cookie date, ignore\n    //    the cookie-av.\n\n    cookieAttributeList.expires = expiryTime;\n  } else if (attributeNameLowercase === 'max-age') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2\n    // If the attribute-name case-insensitively matches the string \"Max-\n    // Age\", the user agent MUST process the cookie-av as follows.\n\n    // 1. If the first character of the attribute-value is not a DIGIT or a\n    //    \"-\" character, ignore the cookie-av.\n    const charCode = attributeValue.charCodeAt(0);\n    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {\n      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n    }\n\n    // 2. If the remainder of attribute-value contains a non-DIGIT\n    //    character, ignore the cookie-av.\n    if (!/^\\d+$/.test(attributeValue)) {\n      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n    }\n\n    // 3. Let delta-seconds be the attribute-value converted to an integer.\n    const deltaSeconds = Number(attributeValue);\n\n    // 4. Let cookie-age-limit be the maximum age of the cookie (which\n    //    SHOULD be 400 days or less, see Section 4.1.2.2).\n\n    // 5. Set delta-seconds to the smaller of its present value and cookie-\n    //    age-limit.\n    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)\n\n    // 6. If delta-seconds is less than or equal to zero (0), let expiry-\n    //    time be the earliest representable date and time.  Otherwise, let\n    //    the expiry-time be the current date and time plus delta-seconds\n    //    seconds.\n    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds\n\n    // 7. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Max-Age and an attribute-value of expiry-time.\n    cookieAttributeList.maxAge = deltaSeconds;\n  } else if (attributeNameLowercase === 'domain') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3\n    // If the attribute-name case-insensitively matches the string \"Domain\",\n    // the user agent MUST process the cookie-av as follows.\n\n    // 1. Let cookie-domain be the attribute-value.\n    let cookieDomain = attributeValue;\n\n    // 2. If cookie-domain starts with %x2E (\".\"), let cookie-domain be\n    //    cookie-domain without its leading %x2E (\".\").\n    if (cookieDomain[0] === '.') {\n      cookieDomain = cookieDomain.slice(1);\n    }\n\n    // 3. Convert the cookie-domain to lower case.\n    cookieDomain = cookieDomain.toLowerCase();\n\n    // 4. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Domain and an attribute-value of cookie-domain.\n    cookieAttributeList.domain = cookieDomain;\n  } else if (attributeNameLowercase === 'path') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4\n    // If the attribute-name case-insensitively matches the string \"Path\",\n    // the user agent MUST process the cookie-av as follows.\n\n    // 1. If the attribute-value is empty or if the first character of the\n    //    attribute-value is not %x2F (\"/\"):\n    let cookiePath = '';\n    if (attributeValue.length === 0 || attributeValue[0] !== '/') {\n      // 1. Let cookie-path be the default-path.\n      cookiePath = '/';\n    } else {\n      // Otherwise:\n\n      // 1. Let cookie-path be the attribute-value.\n      cookiePath = attributeValue;\n    }\n\n    // 2. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Path and an attribute-value of cookie-path.\n    cookieAttributeList.path = cookiePath;\n  } else if (attributeNameLowercase === 'secure') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5\n    // If the attribute-name case-insensitively matches the string \"Secure\",\n    // the user agent MUST append an attribute to the cookie-attribute-list\n    // with an attribute-name of Secure and an empty attribute-value.\n\n    cookieAttributeList.secure = true;\n  } else if (attributeNameLowercase === 'httponly') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6\n    // If the attribute-name case-insensitively matches the string\n    // \"HttpOnly\", the user agent MUST append an attribute to the cookie-\n    // attribute-list with an attribute-name of HttpOnly and an empty\n    // attribute-value.\n\n    cookieAttributeList.httpOnly = true;\n  } else if (attributeNameLowercase === 'samesite') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7\n    // If the attribute-name case-insensitively matches the string\n    // \"SameSite\", the user agent MUST process the cookie-av as follows:\n\n    // 1. Let enforcement be \"Default\".\n    let enforcement = 'Default';\n    const attributeValueLowercase = attributeValue.toLowerCase();\n    // 2. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"None\", set enforcement to \"None\".\n    if (attributeValueLowercase.includes('none')) {\n      enforcement = 'None';\n    }\n\n    // 3. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"Strict\", set enforcement to \"Strict\".\n    if (attributeValueLowercase.includes('strict')) {\n      enforcement = 'Strict';\n    }\n\n    // 4. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"Lax\", set enforcement to \"Lax\".\n    if (attributeValueLowercase.includes('lax')) {\n      enforcement = 'Lax';\n    }\n\n    // 5. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of \"SameSite\" and an attribute-value of\n    //    enforcement.\n    cookieAttributeList.sameSite = enforcement;\n  } else {\n    cookieAttributeList.unparsed ??= [];\n    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);\n  }\n\n  // 8. Return to Step 1 of this algorithm.\n  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n}\nmodule.exports = {\n  parseSetCookie,\n  parseUnparsedAttributes\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cookies/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/cookies/util.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/web/cookies/util.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isCTLExcludingHtab(value) {\n  for (let i = 0; i < value.length; ++i) {\n    const code = value.charCodeAt(i);\n    if (code >= 0x00 && code <= 0x08 || code >= 0x0A && code <= 0x1F || code === 0x7F) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */\nfunction validateCookieName(name) {\n  for (let i = 0; i < name.length; ++i) {\n    const code = name.charCodeAt(i);\n    if (code < 0x21 ||\n    // exclude CTLs (0-31), SP and HT\n    code > 0x7E ||\n    // exclude non-ascii and DEL\n    code === 0x22 ||\n    // \"\n    code === 0x28 ||\n    // (\n    code === 0x29 ||\n    // )\n    code === 0x3C ||\n    // <\n    code === 0x3E ||\n    // >\n    code === 0x40 ||\n    // @\n    code === 0x2C ||\n    // ,\n    code === 0x3B ||\n    // ;\n    code === 0x3A ||\n    // :\n    code === 0x5C ||\n    // \\\n    code === 0x2F ||\n    // /\n    code === 0x5B ||\n    // [\n    code === 0x5D ||\n    // ]\n    code === 0x3F ||\n    // ?\n    code === 0x3D ||\n    // =\n    code === 0x7B ||\n    // {\n    code === 0x7D // }\n    ) {\n      throw new Error('Invalid cookie name');\n    }\n  }\n}\n\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */\nfunction validateCookieValue(value) {\n  let len = value.length;\n  let i = 0;\n\n  // if the value is wrapped in DQUOTE\n  if (value[0] === '\"') {\n    if (len === 1 || value[len - 1] !== '\"') {\n      throw new Error('Invalid cookie value');\n    }\n    --len;\n    ++i;\n  }\n  while (i < len) {\n    const code = value.charCodeAt(i++);\n    if (code < 0x21 ||\n    // exclude CTLs (0-31)\n    code > 0x7E ||\n    // non-ascii and DEL (127)\n    code === 0x22 ||\n    // \"\n    code === 0x2C ||\n    // ,\n    code === 0x3B ||\n    // ;\n    code === 0x5C // \\\n    ) {\n      throw new Error('Invalid cookie value');\n    }\n  }\n}\n\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */\nfunction validateCookiePath(path) {\n  for (let i = 0; i < path.length; ++i) {\n    const code = path.charCodeAt(i);\n    if (code < 0x20 ||\n    // exclude CTLs (0-31)\n    code === 0x7F ||\n    // DEL\n    code === 0x3B // ;\n    ) {\n      throw new Error('Invalid cookie path');\n    }\n  }\n}\n\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */\nfunction validateCookieDomain(domain) {\n  if (domain.startsWith('-') || domain.endsWith('.') || domain.endsWith('-')) {\n    throw new Error('Invalid cookie domain');\n  }\n}\nconst IMFDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst IMFMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst IMFPaddedNumbers = Array(61).fill(0).map((_, i) => i.toString().padStart(2, '0'));\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */\nfunction toIMFDate(date) {\n  if (typeof date === 'number') {\n    date = new Date(date);\n  }\n  return `${IMFDays[date.getUTCDay()]}, ${IMFPaddedNumbers[date.getUTCDate()]} ${IMFMonths[date.getUTCMonth()]} ${date.getUTCFullYear()} ${IMFPaddedNumbers[date.getUTCHours()]}:${IMFPaddedNumbers[date.getUTCMinutes()]}:${IMFPaddedNumbers[date.getUTCSeconds()]} GMT`;\n}\n\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */\nfunction validateCookieMaxAge(maxAge) {\n  if (maxAge < 0) {\n    throw new Error('Invalid cookie max-age');\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */\nfunction stringify(cookie) {\n  if (cookie.name.length === 0) {\n    return null;\n  }\n  validateCookieName(cookie.name);\n  validateCookieValue(cookie.value);\n  const out = [`${cookie.name}=${cookie.value}`];\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n  if (cookie.name.startsWith('__Secure-')) {\n    cookie.secure = true;\n  }\n  if (cookie.name.startsWith('__Host-')) {\n    cookie.secure = true;\n    cookie.domain = null;\n    cookie.path = '/';\n  }\n  if (cookie.secure) {\n    out.push('Secure');\n  }\n  if (cookie.httpOnly) {\n    out.push('HttpOnly');\n  }\n  if (typeof cookie.maxAge === 'number') {\n    validateCookieMaxAge(cookie.maxAge);\n    out.push(`Max-Age=${cookie.maxAge}`);\n  }\n  if (cookie.domain) {\n    validateCookieDomain(cookie.domain);\n    out.push(`Domain=${cookie.domain}`);\n  }\n  if (cookie.path) {\n    validateCookiePath(cookie.path);\n    out.push(`Path=${cookie.path}`);\n  }\n  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {\n    out.push(`Expires=${toIMFDate(cookie.expires)}`);\n  }\n  if (cookie.sameSite) {\n    out.push(`SameSite=${cookie.sameSite}`);\n  }\n  for (const part of cookie.unparsed) {\n    if (!part.includes('=')) {\n      throw new Error('Invalid unparsed');\n    }\n    const [key, ...value] = part.split('=');\n    out.push(`${key.trim()}=${value.join('=')}`);\n  }\n  return out.join('; ');\n}\nmodule.exports = {\n  isCTLExcludingHtab,\n  validateCookieName,\n  validateCookiePath,\n  validateCookieValue,\n  toIMFDate,\n  stringify\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/cookies/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/eventsource/eventsource-stream.js":
/*!***********************************************************************!*\
  !*** ./node_modules/undici/lib/web/eventsource/eventsource-stream.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nconst {\n  Transform\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst {\n  isASCIINumber,\n  isValidLastEventId\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/eventsource/util.js\");\n\n/**\n * @type {number[]} BOM\n */\nconst BOM = [0xEF, 0xBB, 0xBF];\n/**\n * @type {10} LF\n */\nconst LF = 0x0A;\n/**\n * @type {13} CR\n */\nconst CR = 0x0D;\n/**\n * @type {58} COLON\n */\nconst COLON = 0x3A;\n/**\n * @type {32} SPACE\n */\nconst SPACE = 0x20;\n\n/**\n * @typedef {object} EventSourceStreamEvent\n * @type {object}\n * @property {string} [event] The event type.\n * @property {string} [data] The data of the message.\n * @property {string} [id] A unique ID for the event.\n * @property {string} [retry] The reconnection time, in milliseconds.\n */\n\n/**\n * @typedef eventSourceSettings\n * @type {object}\n * @property {string} lastEventId The last event ID received from the server.\n * @property {string} origin The origin of the event source.\n * @property {number} reconnectionTime The reconnection time, in milliseconds.\n */\n\nclass EventSourceStream extends Transform {\n  /**\n   * @param {object} options\n   * @param {eventSourceSettings} options.eventSourceSettings\n   * @param {Function} [options.push]\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Enable object mode as EventSourceStream emits objects of shape\n    // EventSourceStreamEvent\n    options.readableObjectMode = true;\n    super(options);\n    /**\n     * @type {eventSourceSettings}\n     */\n    _defineProperty(this, \"state\", null);\n    /**\n     * Leading byte-order-mark check.\n     * @type {boolean}\n     */\n    _defineProperty(this, \"checkBOM\", true);\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"crlfCheck\", false);\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"eventEndCheck\", false);\n    /**\n     * @type {Buffer}\n     */\n    _defineProperty(this, \"buffer\", null);\n    _defineProperty(this, \"pos\", 0);\n    _defineProperty(this, \"event\", {\n      data: undefined,\n      event: undefined,\n      id: undefined,\n      retry: undefined\n    });\n    this.state = options.eventSourceSettings || {};\n    if (options.push) {\n      this.push = options.push;\n    }\n  }\n\n  /**\n   * @param {Buffer} chunk\n   * @param {string} _encoding\n   * @param {Function} callback\n   * @returns {void}\n   */\n  _transform(chunk, _encoding, callback) {\n    if (chunk.length === 0) {\n      callback();\n      return;\n    }\n\n    // Cache the chunk in the buffer, as the data might not be complete while\n    // processing it\n    // TODO: Investigate if there is a more performant way to handle\n    // incoming chunks\n    // see: https://github.com/nodejs/undici/issues/2630\n    if (this.buffer) {\n      this.buffer = Buffer.concat([this.buffer, chunk]);\n    } else {\n      this.buffer = chunk;\n    }\n\n    // Strip leading byte-order-mark if we opened the stream and started\n    // the processing of the incoming data\n    if (this.checkBOM) {\n      switch (this.buffer.length) {\n        case 1:\n          // Check if the first byte is the same as the first byte of the BOM\n          if (this.buffer[0] === BOM[0]) {\n            // If it is, we need to wait for more data\n            callback();\n            return;\n          }\n          // Set the checkBOM flag to false as we don't need to check for the\n          // BOM anymore\n          this.checkBOM = false;\n\n          // The buffer only contains one byte so we need to wait for more data\n          callback();\n          return;\n        case 2:\n          // Check if the first two bytes are the same as the first two bytes\n          // of the BOM\n          if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1]) {\n            // If it is, we need to wait for more data, because the third byte\n            // is needed to determine if it is the BOM or not\n            callback();\n            return;\n          }\n\n          // Set the checkBOM flag to false as we don't need to check for the\n          // BOM anymore\n          this.checkBOM = false;\n          break;\n        case 3:\n          // Check if the first three bytes are the same as the first three\n          // bytes of the BOM\n          if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) {\n            // If it is, we can drop the buffered data, as it is only the BOM\n            this.buffer = Buffer.alloc(0);\n            // Set the checkBOM flag to false as we don't need to check for the\n            // BOM anymore\n            this.checkBOM = false;\n\n            // Await more data\n            callback();\n            return;\n          }\n          // If it is not the BOM, we can start processing the data\n          this.checkBOM = false;\n          break;\n        default:\n          // The buffer is longer than 3 bytes, so we can drop the BOM if it is\n          // present\n          if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) {\n            // Remove the BOM from the buffer\n            this.buffer = this.buffer.subarray(3);\n          }\n\n          // Set the checkBOM flag to false as we don't need to check for the\n          this.checkBOM = false;\n          break;\n      }\n    }\n    while (this.pos < this.buffer.length) {\n      // If the previous line ended with an end-of-line, we need to check\n      // if the next character is also an end-of-line.\n      if (this.eventEndCheck) {\n        // If the the current character is an end-of-line, then the event\n        // is finished and we can process it\n\n        // If the previous line ended with a carriage return, we need to\n        // check if the current character is a line feed and remove it\n        // from the buffer.\n        if (this.crlfCheck) {\n          // If the current character is a line feed, we can remove it\n          // from the buffer and reset the crlfCheck flag\n          if (this.buffer[this.pos] === LF) {\n            this.buffer = this.buffer.subarray(this.pos + 1);\n            this.pos = 0;\n            this.crlfCheck = false;\n\n            // It is possible that the line feed is not the end of the\n            // event. We need to check if the next character is an\n            // end-of-line character to determine if the event is\n            // finished. We simply continue the loop to check the next\n            // character.\n\n            // As we removed the line feed from the buffer and set the\n            // crlfCheck flag to false, we basically don't make any\n            // distinction between a line feed and a carriage return.\n            continue;\n          }\n          this.crlfCheck = false;\n        }\n        if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {\n          // If the current character is a carriage return, we need to\n          // set the crlfCheck flag to true, as we need to check if the\n          // next character is a line feed so we can remove it from the\n          // buffer\n          if (this.buffer[this.pos] === CR) {\n            this.crlfCheck = true;\n          }\n          this.buffer = this.buffer.subarray(this.pos + 1);\n          this.pos = 0;\n          if (this.event.data !== undefined || this.event.event || this.event.id || this.event.retry) {\n            this.processEvent(this.event);\n          }\n          this.clearEvent();\n          continue;\n        }\n        // If the current character is not an end-of-line, then the event\n        // is not finished and we have to reset the eventEndCheck flag\n        this.eventEndCheck = false;\n        continue;\n      }\n\n      // If the current character is an end-of-line, we can process the\n      // line\n      if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {\n        // If the current character is a carriage return, we need to\n        // set the crlfCheck flag to true, as we need to check if the\n        // next character is a line feed\n        if (this.buffer[this.pos] === CR) {\n          this.crlfCheck = true;\n        }\n\n        // In any case, we can process the line as we reached an\n        // end-of-line character\n        this.parseLine(this.buffer.subarray(0, this.pos), this.event);\n\n        // Remove the processed line from the buffer\n        this.buffer = this.buffer.subarray(this.pos + 1);\n        // Reset the position as we removed the processed line from the buffer\n        this.pos = 0;\n        // A line was processed and this could be the end of the event. We need\n        // to check if the next line is empty to determine if the event is\n        // finished.\n        this.eventEndCheck = true;\n        continue;\n      }\n      this.pos++;\n    }\n    callback();\n  }\n\n  /**\n   * @param {Buffer} line\n   * @param {EventStreamEvent} event\n   */\n  parseLine(line, event) {\n    // If the line is empty (a blank line)\n    // Dispatch the event, as defined below.\n    // This will be handled in the _transform method\n    if (line.length === 0) {\n      return;\n    }\n\n    // If the line starts with a U+003A COLON character (:)\n    // Ignore the line.\n    const colonPosition = line.indexOf(COLON);\n    if (colonPosition === 0) {\n      return;\n    }\n    let field = '';\n    let value = '';\n\n    // If the line contains a U+003A COLON character (:)\n    if (colonPosition !== -1) {\n      // Collect the characters on the line before the first U+003A COLON\n      // character (:), and let field be that string.\n      // TODO: Investigate if there is a more performant way to extract the\n      // field\n      // see: https://github.com/nodejs/undici/issues/2630\n      field = line.subarray(0, colonPosition).toString('utf8');\n\n      // Collect the characters on the line after the first U+003A COLON\n      // character (:), and let value be that string.\n      // If value starts with a U+0020 SPACE character, remove it from value.\n      let valueStart = colonPosition + 1;\n      if (line[valueStart] === SPACE) {\n        ++valueStart;\n      }\n      // TODO: Investigate if there is a more performant way to extract the\n      // value\n      // see: https://github.com/nodejs/undici/issues/2630\n      value = line.subarray(valueStart).toString('utf8');\n\n      // Otherwise, the string is not empty but does not contain a U+003A COLON\n      // character (:)\n    } else {\n      // Process the field using the steps described below, using the whole\n      // line as the field name, and the empty string as the field value.\n      field = line.toString('utf8');\n      value = '';\n    }\n\n    // Modify the event with the field name and value. The value is also\n    // decoded as UTF-8\n    switch (field) {\n      case 'data':\n        if (event[field] === undefined) {\n          event[field] = value;\n        } else {\n          event[field] += `\\n${value}`;\n        }\n        break;\n      case 'retry':\n        if (isASCIINumber(value)) {\n          event[field] = value;\n        }\n        break;\n      case 'id':\n        if (isValidLastEventId(value)) {\n          event[field] = value;\n        }\n        break;\n      case 'event':\n        if (value.length > 0) {\n          event[field] = value;\n        }\n        break;\n    }\n  }\n\n  /**\n   * @param {EventSourceStreamEvent} event\n   */\n  processEvent(event) {\n    if (event.retry && isASCIINumber(event.retry)) {\n      this.state.reconnectionTime = parseInt(event.retry, 10);\n    }\n    if (event.id && isValidLastEventId(event.id)) {\n      this.state.lastEventId = event.id;\n    }\n\n    // only dispatch event, when data is provided\n    if (event.data !== undefined) {\n      this.push({\n        type: event.event || 'message',\n        options: {\n          data: event.data,\n          lastEventId: this.state.lastEventId,\n          origin: this.state.origin\n        }\n      });\n    }\n  }\n  clearEvent() {\n    this.event = {\n      data: undefined,\n      event: undefined,\n      id: undefined,\n      retry: undefined\n    };\n  }\n}\nmodule.exports = {\n  EventSourceStream\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/eventsource/eventsource-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/eventsource/eventsource.js":
/*!****************************************************************!*\
  !*** ./node_modules/undici/lib/web/eventsource/eventsource.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  pipeline\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst {\n  fetching\n} = __webpack_require__(/*! ../fetch */ \"(ssr)/./node_modules/undici/lib/web/fetch/index.js\");\nconst {\n  makeRequest\n} = __webpack_require__(/*! ../fetch/request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  EventSourceStream\n} = __webpack_require__(/*! ./eventsource-stream */ \"(ssr)/./node_modules/undici/lib/web/eventsource/eventsource-stream.js\");\nconst {\n  parseMIMEType\n} = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  createFastMessageEvent\n} = __webpack_require__(/*! ../websocket/events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nconst {\n  isNetworkError\n} = __webpack_require__(/*! ../fetch/response */ \"(ssr)/./node_modules/undici/lib/web/fetch/response.js\");\nconst {\n  delay\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/eventsource/util.js\");\nconst {\n  kEnumerableProperty\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  environmentSettingsObject\n} = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nlet experimentalWarned = false;\n\n/**\n * A reconnection time, in milliseconds. This must initially be an implementation-defined value,\n * probably in the region of a few seconds.\n *\n * In Comparison:\n * - Chrome uses 3000ms.\n * - Deno uses 5000ms.\n *\n * @type {3000}\n */\nconst defaultReconnectionTime = 3000;\n\n/**\n * The readyState attribute represents the state of the connection.\n * @enum\n * @readonly\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-readystate-dev\n */\n\n/**\n * The connection has not yet been established, or it was closed and the user\n * agent is reconnecting.\n * @type {0}\n */\nconst CONNECTING = 0;\n\n/**\n * The user agent has an open connection and is dispatching events as it\n * receives them.\n * @type {1}\n */\nconst OPEN = 1;\n\n/**\n * The connection is not open, and the user agent is not trying to reconnect.\n * @type {2}\n */\nconst CLOSED = 2;\n\n/**\n * Requests for the element will have their mode set to \"cors\" and their credentials mode set to \"same-origin\".\n * @type {'anonymous'}\n */\nconst ANONYMOUS = 'anonymous';\n\n/**\n * Requests for the element will have their mode set to \"cors\" and their credentials mode set to \"include\".\n * @type {'use-credentials'}\n */\nconst USE_CREDENTIALS = 'use-credentials';\n\n/**\n * The EventSource interface is used to receive server-sent events. It\n * connects to a server over HTTP and receives events in text/event-stream\n * format without closing the connection.\n * @extends {EventTarget}\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events\n * @api public\n */\nvar _events = /*#__PURE__*/new WeakMap();\nvar _url = /*#__PURE__*/new WeakMap();\nvar _withCredentials = /*#__PURE__*/new WeakMap();\nvar _readyState = /*#__PURE__*/new WeakMap();\nvar _request = /*#__PURE__*/new WeakMap();\nvar _controller = /*#__PURE__*/new WeakMap();\nvar _dispatcher = /*#__PURE__*/new WeakMap();\nvar _state = /*#__PURE__*/new WeakMap();\nvar _EventSource_brand = /*#__PURE__*/new WeakSet();\nclass EventSource extends EventTarget {\n  /**\n   * Creates a new EventSource object.\n   * @param {string} url\n   * @param {EventSourceInit} [eventSourceInitDict]\n   * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface\n   */\n  constructor(url) {\n    let eventSourceInitDict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // 1. Let ev be a new EventSource object.\n    super();\n    _classPrivateMethodInitSpec(this, _EventSource_brand);\n    _classPrivateFieldInitSpec(this, _events, {\n      open: null,\n      error: null,\n      message: null\n    });\n    _classPrivateFieldInitSpec(this, _url, null);\n    _classPrivateFieldInitSpec(this, _withCredentials, false);\n    _classPrivateFieldInitSpec(this, _readyState, CONNECTING);\n    _classPrivateFieldInitSpec(this, _request, null);\n    _classPrivateFieldInitSpec(this, _controller, null);\n    _classPrivateFieldInitSpec(this, _dispatcher, void 0);\n    /**\n     * @type {import('./eventsource-stream').eventSourceSettings}\n     */\n    _classPrivateFieldInitSpec(this, _state, void 0);\n    const prefix = 'EventSource constructor';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    if (!experimentalWarned) {\n      experimentalWarned = true;\n      process.emitWarning('EventSource is experimental, expect them to change at any time.', {\n        code: 'UNDICI-ES'\n      });\n    }\n    url = webidl.converters.USVString(url, prefix, 'url');\n    eventSourceInitDict = webidl.converters.EventSourceInitDict(eventSourceInitDict, prefix, 'eventSourceInitDict');\n    _classPrivateFieldSet(_dispatcher, this, eventSourceInitDict.dispatcher);\n    _classPrivateFieldSet(_state, this, {\n      lastEventId: '',\n      reconnectionTime: defaultReconnectionTime\n    });\n\n    // 2. Let settings be ev's relevant settings object.\n    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n    const settings = environmentSettingsObject;\n    let urlRecord;\n    try {\n      // 3. Let urlRecord be the result of encoding-parsing a URL given url, relative to settings.\n      urlRecord = new URL(url, settings.settingsObject.baseUrl);\n      _classPrivateFieldGet(_state, this).origin = urlRecord.origin;\n    } catch (e) {\n      // 4. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n      throw new DOMException(e, 'SyntaxError');\n    }\n\n    // 5. Set ev's url to urlRecord.\n    _classPrivateFieldSet(_url, this, urlRecord.href);\n\n    // 6. Let corsAttributeState be Anonymous.\n    let corsAttributeState = ANONYMOUS;\n\n    // 7. If the value of eventSourceInitDict's withCredentials member is true,\n    // then set corsAttributeState to Use Credentials and set ev's\n    // withCredentials attribute to true.\n    if (eventSourceInitDict.withCredentials) {\n      corsAttributeState = USE_CREDENTIALS;\n      _classPrivateFieldSet(_withCredentials, this, true);\n    }\n\n    // 8. Let request be the result of creating a potential-CORS request given\n    // urlRecord, the empty string, and corsAttributeState.\n    const initRequest = {\n      redirect: 'follow',\n      keepalive: true,\n      // @see https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-settings-attributes\n      mode: 'cors',\n      credentials: corsAttributeState === 'anonymous' ? 'same-origin' : 'omit',\n      referrer: 'no-referrer'\n    };\n\n    // 9. Set request's client to settings.\n    initRequest.client = environmentSettingsObject.settingsObject;\n\n    // 10. User agents may set (`Accept`, `text/event-stream`) in request's header list.\n    initRequest.headersList = [['accept', {\n      name: 'accept',\n      value: 'text/event-stream'\n    }]];\n\n    // 11. Set request's cache mode to \"no-store\".\n    initRequest.cache = 'no-store';\n\n    // 12. Set request's initiator type to \"other\".\n    initRequest.initiator = 'other';\n    initRequest.urlList = [new URL(_classPrivateFieldGet(_url, this))];\n\n    // 13. Set ev's request to request.\n    _classPrivateFieldSet(_request, this, makeRequest(initRequest));\n    _assertClassBrand(_EventSource_brand, this, _connect).call(this);\n  }\n\n  /**\n   * Returns the state of this EventSource object's connection. It can have the\n   * values described below.\n   * @returns {0|1|2}\n   * @readonly\n   */\n  get readyState() {\n    return _classPrivateFieldGet(_readyState, this);\n  }\n\n  /**\n   * Returns the URL providing the event stream.\n   * @readonly\n   * @returns {string}\n   */\n  get url() {\n    return _classPrivateFieldGet(_url, this);\n  }\n\n  /**\n   * Returns a boolean indicating whether the EventSource object was\n   * instantiated with CORS credentials set (true), or not (false, the default).\n   */\n  get withCredentials() {\n    return _classPrivateFieldGet(_withCredentials, this);\n  }\n  /**\n   * Closes the connection, if any, and sets the readyState attribute to\n   * CLOSED.\n   */\n  close() {\n    webidl.brandCheck(this, EventSource);\n    if (_classPrivateFieldGet(_readyState, this) === CLOSED) return;\n    _classPrivateFieldSet(_readyState, this, CLOSED);\n    _classPrivateFieldGet(_controller, this).abort();\n    _classPrivateFieldSet(_request, this, null);\n  }\n  get onopen() {\n    return _classPrivateFieldGet(_events, this).open;\n  }\n  set onopen(fn) {\n    if (_classPrivateFieldGet(_events, this).open) {\n      this.removeEventListener('open', _classPrivateFieldGet(_events, this).open);\n    }\n    if (typeof fn === 'function') {\n      _classPrivateFieldGet(_events, this).open = fn;\n      this.addEventListener('open', fn);\n    } else {\n      _classPrivateFieldGet(_events, this).open = null;\n    }\n  }\n  get onmessage() {\n    return _classPrivateFieldGet(_events, this).message;\n  }\n  set onmessage(fn) {\n    if (_classPrivateFieldGet(_events, this).message) {\n      this.removeEventListener('message', _classPrivateFieldGet(_events, this).message);\n    }\n    if (typeof fn === 'function') {\n      _classPrivateFieldGet(_events, this).message = fn;\n      this.addEventListener('message', fn);\n    } else {\n      _classPrivateFieldGet(_events, this).message = null;\n    }\n  }\n  get onerror() {\n    return _classPrivateFieldGet(_events, this).error;\n  }\n  set onerror(fn) {\n    if (_classPrivateFieldGet(_events, this).error) {\n      this.removeEventListener('error', _classPrivateFieldGet(_events, this).error);\n    }\n    if (typeof fn === 'function') {\n      _classPrivateFieldGet(_events, this).error = fn;\n      this.addEventListener('error', fn);\n    } else {\n      _classPrivateFieldGet(_events, this).error = null;\n    }\n  }\n}\nfunction _connect() {\n  if (_classPrivateFieldGet(_readyState, this) === CLOSED) return;\n  _classPrivateFieldSet(_readyState, this, CONNECTING);\n  const fetchParams = {\n    request: _classPrivateFieldGet(_request, this),\n    dispatcher: _classPrivateFieldGet(_dispatcher, this)\n  };\n\n  // 14. Let processEventSourceEndOfBody given response res be the following step: if res is not a network error, then reestablish the connection.\n  const processEventSourceEndOfBody = response => {\n    if (isNetworkError(response)) {\n      this.dispatchEvent(new Event('error'));\n      this.close();\n    }\n    _assertClassBrand(_EventSource_brand, this, _reconnect).call(this);\n  };\n\n  // 15. Fetch request, with processResponseEndOfBody set to processEventSourceEndOfBody...\n  fetchParams.processResponseEndOfBody = processEventSourceEndOfBody;\n\n  // and processResponse set to the following steps given response res:\n  fetchParams.processResponse = response => {\n    // 1. If res is an aborted network error, then fail the connection.\n\n    if (isNetworkError(response)) {\n      // 1. When a user agent is to fail the connection, the user agent\n      // must queue a task which, if the readyState attribute is set to a\n      // value other than CLOSED, sets the readyState attribute to CLOSED\n      // and fires an event named error at the EventSource object. Once the\n      // user agent has failed the connection, it does not attempt to\n      // reconnect.\n      if (response.aborted) {\n        this.close();\n        this.dispatchEvent(new Event('error'));\n        return;\n        // 2. Otherwise, if res is a network error, then reestablish the\n        // connection, unless the user agent knows that to be futile, in\n        // which case the user agent may fail the connection.\n      } else {\n        _assertClassBrand(_EventSource_brand, this, _reconnect).call(this);\n        return;\n      }\n    }\n\n    // 3. Otherwise, if res's status is not 200, or if res's `Content-Type`\n    // is not `text/event-stream`, then fail the connection.\n    const contentType = response.headersList.get('content-type', true);\n    const mimeType = contentType !== null ? parseMIMEType(contentType) : 'failure';\n    const contentTypeValid = mimeType !== 'failure' && mimeType.essence === 'text/event-stream';\n    if (response.status !== 200 || contentTypeValid === false) {\n      this.close();\n      this.dispatchEvent(new Event('error'));\n      return;\n    }\n\n    // 4. Otherwise, announce the connection and interpret res's body\n    // line by line.\n\n    // When a user agent is to announce the connection, the user agent\n    // must queue a task which, if the readyState attribute is set to a\n    // value other than CLOSED, sets the readyState attribute to OPEN\n    // and fires an event named open at the EventSource object.\n    // @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model\n    _classPrivateFieldSet(_readyState, this, OPEN);\n    this.dispatchEvent(new Event('open'));\n\n    // If redirected to a different origin, set the origin to the new origin.\n    _classPrivateFieldGet(_state, this).origin = response.urlList[response.urlList.length - 1].origin;\n    const eventSourceStream = new EventSourceStream({\n      eventSourceSettings: _classPrivateFieldGet(_state, this),\n      push: event => {\n        this.dispatchEvent(createFastMessageEvent(event.type, event.options));\n      }\n    });\n    pipeline(response.body.stream, eventSourceStream, error => {\n      if (error?.aborted === false) {\n        this.close();\n        this.dispatchEvent(new Event('error'));\n      }\n    });\n  };\n  _classPrivateFieldSet(_controller, this, fetching(fetchParams));\n}\n/**\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model\n * @returns {Promise<void>}\n */\nasync function _reconnect() {\n  // When a user agent is to reestablish the connection, the user agent must\n  // run the following steps. These steps are run in parallel, not as part of\n  // a task. (The tasks that it queues, of course, are run like normal tasks\n  // and not themselves in parallel.)\n\n  // 1. Queue a task to run the following steps:\n\n  //   1. If the readyState attribute is set to CLOSED, abort the task.\n  if (_classPrivateFieldGet(_readyState, this) === CLOSED) return;\n\n  //   2. Set the readyState attribute to CONNECTING.\n  _classPrivateFieldSet(_readyState, this, CONNECTING);\n\n  //   3. Fire an event named error at the EventSource object.\n  this.dispatchEvent(new Event('error'));\n\n  // 2. Wait a delay equal to the reconnection time of the event source.\n  await delay(_classPrivateFieldGet(_state, this).reconnectionTime);\n\n  // 5. Queue a task to run the following steps:\n\n  //   1. If the EventSource object's readyState attribute is not set to\n  //      CONNECTING, then return.\n  if (_classPrivateFieldGet(_readyState, this) !== CONNECTING) return;\n\n  //   2. Let request be the EventSource object's request.\n  //   3. If the EventSource object's last event ID string is not the empty\n  //      string, then:\n  //      1. Let lastEventIDValue be the EventSource object's last event ID\n  //         string, encoded as UTF-8.\n  //      2. Set (`Last-Event-ID`, lastEventIDValue) in request's header\n  //         list.\n  if (_classPrivateFieldGet(_state, this).lastEventId.length) {\n    _classPrivateFieldGet(_request, this).headersList.set('last-event-id', _classPrivateFieldGet(_state, this).lastEventId, true);\n  }\n\n  //   4. Fetch request and process the response obtained in this fashion, if any, as described earlier in this section.\n  _assertClassBrand(_EventSource_brand, this, _connect).call(this);\n}\nconst constantsPropertyDescriptors = {\n  CONNECTING: {\n    __proto__: null,\n    configurable: false,\n    enumerable: true,\n    value: CONNECTING,\n    writable: false\n  },\n  OPEN: {\n    __proto__: null,\n    configurable: false,\n    enumerable: true,\n    value: OPEN,\n    writable: false\n  },\n  CLOSED: {\n    __proto__: null,\n    configurable: false,\n    enumerable: true,\n    value: CLOSED,\n    writable: false\n  }\n};\nObject.defineProperties(EventSource, constantsPropertyDescriptors);\nObject.defineProperties(EventSource.prototype, constantsPropertyDescriptors);\nObject.defineProperties(EventSource.prototype, {\n  close: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onmessage: kEnumerableProperty,\n  onopen: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  url: kEnumerableProperty,\n  withCredentials: kEnumerableProperty\n});\nwebidl.converters.EventSourceInitDict = webidl.dictionaryConverter([{\n  key: 'withCredentials',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'dispatcher',\n  // undici only\n  converter: webidl.converters.any\n}]);\nmodule.exports = {\n  EventSource,\n  defaultReconnectionTime\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/eventsource/eventsource.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/eventsource/util.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/web/eventsource/util.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Checks if the given value is a valid LastEventId.\n * @param {string} value\n * @returns {boolean}\n */\nfunction isValidLastEventId(value) {\n  // LastEventId should not contain U+0000 NULL\n  return value.indexOf('\\u0000') === -1;\n}\n\n/**\n * Checks if the given value is a base 10 digit.\n * @param {string} value\n * @returns {boolean}\n */\nfunction isASCIINumber(value) {\n  if (value.length === 0) return false;\n  for (let i = 0; i < value.length; i++) {\n    if (value.charCodeAt(i) < 0x30 || value.charCodeAt(i) > 0x39) return false;\n  }\n  return true;\n}\n\n// https://github.com/nodejs/undici/issues/2664\nfunction delay(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms).unref();\n  });\n}\nmodule.exports = {\n  isValidLastEventId,\n  isASCIINumber,\n  delay\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZXZlbnRzb3VyY2UvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Esa0JBQWtCQSxDQUFFQyxLQUFLLEVBQUU7RUFDbEM7RUFDQSxPQUFPQSxLQUFLLENBQUNDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGFBQWFBLENBQUVGLEtBQUssRUFBRTtFQUM3QixJQUFJQSxLQUFLLENBQUNHLE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBTyxLQUFLO0VBQ3BDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSixLQUFLLENBQUNHLE1BQU0sRUFBRUMsQ0FBQyxFQUFFLEVBQUU7SUFDckMsSUFBSUosS0FBSyxDQUFDSyxVQUFVLENBQUNELENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSUosS0FBSyxDQUFDSyxVQUFVLENBQUNELENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxPQUFPLEtBQUs7RUFDNUU7RUFDQSxPQUFPLElBQUk7QUFDYjs7QUFFQTtBQUNBLFNBQVNFLEtBQUtBLENBQUVDLEVBQUUsRUFBRTtFQUNsQixPQUFPLElBQUlDLE9BQU8sQ0FBRUMsT0FBTyxJQUFLO0lBQzlCQyxVQUFVLENBQUNELE9BQU8sRUFBRUYsRUFBRSxDQUFDLENBQUNJLEtBQUssQ0FBQyxDQUFDO0VBQ2pDLENBQUMsQ0FBQztBQUNKO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZkLGtCQUFrQjtFQUNsQkcsYUFBYTtFQUNiSTtBQUNGLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZXZlbnRzb3VyY2UvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgdmFsaWQgTGFzdEV2ZW50SWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkTGFzdEV2ZW50SWQgKHZhbHVlKSB7XG4gIC8vIExhc3RFdmVudElkIHNob3VsZCBub3QgY29udGFpbiBVKzAwMDAgTlVMTFxuICByZXR1cm4gdmFsdWUuaW5kZXhPZignXFx1MDAwMCcpID09PSAtMVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBiYXNlIDEwIGRpZ2l0LlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNBU0NJSU51bWJlciAodmFsdWUpIHtcbiAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodmFsdWUuY2hhckNvZGVBdChpKSA8IDB4MzAgfHwgdmFsdWUuY2hhckNvZGVBdChpKSA+IDB4MzkpIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvdW5kaWNpL2lzc3Vlcy8yNjY0XG5mdW5jdGlvbiBkZWxheSAobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCBtcykudW5yZWYoKVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNWYWxpZExhc3RFdmVudElkLFxuICBpc0FTQ0lJTnVtYmVyLFxuICBkZWxheVxufVxuIl0sIm5hbWVzIjpbImlzVmFsaWRMYXN0RXZlbnRJZCIsInZhbHVlIiwiaW5kZXhPZiIsImlzQVNDSUlOdW1iZXIiLCJsZW5ndGgiLCJpIiwiY2hhckNvZGVBdCIsImRlbGF5IiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJ1bnJlZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/eventsource/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/body.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/body.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst util = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  ReadableStreamFrom,\n  isBlobLike,\n  isReadableStreamLike,\n  readableStreamClose,\n  createDeferredPromise,\n  fullyReadBody,\n  extractMimeType,\n  utf8DecodeBytes\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst {\n  FormData\n} = __webpack_require__(/*! ./formdata */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\");\nconst {\n  kState\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  Blob\n} = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  isErrored\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  isArrayBuffer\n} = __webpack_require__(/*! node:util/types */ \"node:util/types\");\nconst {\n  serializeAMimeType\n} = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  multipartFormDataParser\n} = __webpack_require__(/*! ./formdata-parser */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata-parser.js\");\nconst textEncoder = new TextEncoder();\n\n// https://fetch.spec.whatwg.org/#concept-bodyinit-extract\nfunction extractBody(object) {\n  let keepalive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // 1. Let stream be null.\n  let stream = null;\n\n  // 2. If object is a ReadableStream object, then set stream to object.\n  if (object instanceof ReadableStream) {\n    stream = object;\n  } else if (isBlobLike(object)) {\n    // 3. Otherwise, if object is a Blob object, set stream to the\n    //    result of running object’s get stream.\n    stream = object.stream();\n  } else {\n    // 4. Otherwise, set stream to a new ReadableStream object, and set\n    //    up stream with byte reading support.\n    stream = new ReadableStream({\n      async pull(controller) {\n        const buffer = typeof source === 'string' ? textEncoder.encode(source) : source;\n        if (buffer.byteLength) {\n          controller.enqueue(buffer);\n        }\n        queueMicrotask(() => readableStreamClose(controller));\n      },\n      start() {},\n      type: 'bytes'\n    });\n  }\n\n  // 5. Assert: stream is a ReadableStream object.\n  assert(isReadableStreamLike(stream));\n\n  // 6. Let action be null.\n  let action = null;\n\n  // 7. Let source be null.\n  let source = null;\n\n  // 8. Let length be null.\n  let length = null;\n\n  // 9. Let type be null.\n  let type = null;\n\n  // 10. Switch on object:\n  if (typeof object === 'string') {\n    // Set source to the UTF-8 encoding of object.\n    // Note: setting source to a Uint8Array here breaks some mocking assumptions.\n    source = object;\n\n    // Set type to `text/plain;charset=UTF-8`.\n    type = 'text/plain;charset=UTF-8';\n  } else if (object instanceof URLSearchParams) {\n    // URLSearchParams\n\n    // spec says to run application/x-www-form-urlencoded on body.list\n    // this is implemented in Node.js as apart of an URLSearchParams instance toString method\n    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490\n    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100\n\n    // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.\n    source = object.toString();\n\n    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.\n    type = 'application/x-www-form-urlencoded;charset=UTF-8';\n  } else if (isArrayBuffer(object)) {\n    // BufferSource/ArrayBuffer\n\n    // Set source to a copy of the bytes held by object.\n    source = new Uint8Array(object.slice());\n  } else if (ArrayBuffer.isView(object)) {\n    // BufferSource/ArrayBufferView\n\n    // Set source to a copy of the bytes held by object.\n    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));\n  } else if (util.isFormDataLike(object)) {\n    const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`;\n    const prefix = `--${boundary}\\r\\nContent-Disposition: form-data`;\n\n    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n    const escape = str => str.replace(/\\n/g, '%0A').replace(/\\r/g, '%0D').replace(/\"/g, '%22');\n    const normalizeLinefeeds = value => value.replace(/\\r?\\n|\\r/g, '\\r\\n');\n\n    // Set action to this step: run the multipart/form-data\n    // encoding algorithm, with object’s entry list and UTF-8.\n    // - This ensures that the body is immutable and can't be changed afterwords\n    // - That the content-length is calculated in advance.\n    // - And that all parts are pre-encoded and ready to be sent.\n\n    const blobParts = [];\n    const rn = new Uint8Array([13, 10]); // '\\r\\n'\n    length = 0;\n    let hasUnknownSizeValue = false;\n    for (const [name, value] of object) {\n      if (typeof value === 'string') {\n        const chunk = textEncoder.encode(prefix + `; name=\"${escape(normalizeLinefeeds(name))}\"` + `\\r\\n\\r\\n${normalizeLinefeeds(value)}\\r\\n`);\n        blobParts.push(chunk);\n        length += chunk.byteLength;\n      } else {\n        const chunk = textEncoder.encode(`${prefix}; name=\"${escape(normalizeLinefeeds(name))}\"` + (value.name ? `; filename=\"${escape(value.name)}\"` : '') + '\\r\\n' + `Content-Type: ${value.type || 'application/octet-stream'}\\r\\n\\r\\n`);\n        blobParts.push(chunk, value, rn);\n        if (typeof value.size === 'number') {\n          length += chunk.byteLength + value.size + rn.byteLength;\n        } else {\n          hasUnknownSizeValue = true;\n        }\n      }\n    }\n    const chunk = textEncoder.encode(`--${boundary}--`);\n    blobParts.push(chunk);\n    length += chunk.byteLength;\n    if (hasUnknownSizeValue) {\n      length = null;\n    }\n\n    // Set source to object.\n    source = object;\n    action = async function* () {\n      for (const part of blobParts) {\n        if (part.stream) {\n          yield* part.stream();\n        } else {\n          yield part;\n        }\n      }\n    };\n\n    // Set type to `multipart/form-data; boundary=`,\n    // followed by the multipart/form-data boundary string generated\n    // by the multipart/form-data encoding algorithm.\n    type = `multipart/form-data; boundary=${boundary}`;\n  } else if (isBlobLike(object)) {\n    // Blob\n\n    // Set source to object.\n    source = object;\n\n    // Set length to object’s size.\n    length = object.size;\n\n    // If object’s type attribute is not the empty byte sequence, set\n    // type to its value.\n    if (object.type) {\n      type = object.type;\n    }\n  } else if (typeof object[Symbol.asyncIterator] === 'function') {\n    // If keepalive is true, then throw a TypeError.\n    if (keepalive) {\n      throw new TypeError('keepalive');\n    }\n\n    // If object is disturbed or locked, then throw a TypeError.\n    if (util.isDisturbed(object) || object.locked) {\n      throw new TypeError('Response body object should not be disturbed or locked');\n    }\n    stream = object instanceof ReadableStream ? object : ReadableStreamFrom(object);\n  }\n\n  // 11. If source is a byte sequence, then set action to a\n  // step that returns source and length to source’s length.\n  if (typeof source === 'string' || util.isBuffer(source)) {\n    length = Buffer.byteLength(source);\n  }\n\n  // 12. If action is non-null, then run these steps in in parallel:\n  if (action != null) {\n    // Run action.\n    let iterator;\n    stream = new ReadableStream({\n      async start() {\n        iterator = action(object)[Symbol.asyncIterator]();\n      },\n      async pull(controller) {\n        const {\n          value,\n          done\n        } = await iterator.next();\n        if (done) {\n          // When running action is done, close stream.\n          queueMicrotask(() => {\n            controller.close();\n            controller.byobRequest?.respond(0);\n          });\n        } else {\n          // Whenever one or more bytes are available and stream is not errored,\n          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available\n          // bytes into stream.\n          if (!isErrored(stream)) {\n            const buffer = new Uint8Array(value);\n            if (buffer.byteLength) {\n              controller.enqueue(buffer);\n            }\n          }\n        }\n        return controller.desiredSize > 0;\n      },\n      async cancel(reason) {\n        await iterator.return();\n      },\n      type: 'bytes'\n    });\n  }\n\n  // 13. Let body be a body whose stream is stream, source is source,\n  // and length is length.\n  const body = {\n    stream,\n    source,\n    length\n  };\n\n  // 14. Return (body, type).\n  return [body, type];\n}\n\n// https://fetch.spec.whatwg.org/#bodyinit-safely-extract\nfunction safelyExtractBody(object) {\n  let keepalive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // To safely extract a body and a `Content-Type` value from\n  // a byte sequence or BodyInit object object, run these steps:\n\n  // 1. If object is a ReadableStream object, then:\n  if (object instanceof ReadableStream) {\n    // Assert: object is neither disturbed nor locked.\n    // istanbul ignore next\n    assert(!util.isDisturbed(object), 'The body has already been consumed.');\n    // istanbul ignore next\n    assert(!object.locked, 'The stream is locked.');\n  }\n\n  // 2. Return the results of extracting object.\n  return extractBody(object, keepalive);\n}\nfunction cloneBody(body) {\n  // To clone a body body, run these steps:\n\n  // https://fetch.spec.whatwg.org/#concept-body-clone\n\n  // 1. Let « out1, out2 » be the result of teeing body’s stream.\n  const [out1, out2] = body.stream.tee();\n\n  // 2. Set body’s stream to out1.\n  body.stream = out1;\n\n  // 3. Return a body whose stream is out2 and other members are copied from body.\n  return {\n    stream: out2,\n    length: body.length,\n    source: body.source\n  };\n}\nfunction throwIfAborted(state) {\n  if (state.aborted) {\n    throw new DOMException('The operation was aborted.', 'AbortError');\n  }\n}\nfunction bodyMixinMethods(instance) {\n  const methods = {\n    blob() {\n      // The blob() method steps are to return the result of\n      // running consume body with this and the following step\n      // given a byte sequence bytes: return a Blob whose\n      // contents are bytes and whose type attribute is this’s\n      // MIME type.\n      return consumeBody(this, bytes => {\n        let mimeType = bodyMimeType(this);\n        if (mimeType === null) {\n          mimeType = '';\n        } else if (mimeType) {\n          mimeType = serializeAMimeType(mimeType);\n        }\n\n        // Return a Blob whose contents are bytes and type attribute\n        // is mimeType.\n        return new Blob([bytes], {\n          type: mimeType\n        });\n      }, instance);\n    },\n    arrayBuffer() {\n      // The arrayBuffer() method steps are to return the result\n      // of running consume body with this and the following step\n      // given a byte sequence bytes: return a new ArrayBuffer\n      // whose contents are bytes.\n      return consumeBody(this, bytes => {\n        return new Uint8Array(bytes).buffer;\n      }, instance);\n    },\n    text() {\n      // The text() method steps are to return the result of running\n      // consume body with this and UTF-8 decode.\n      return consumeBody(this, utf8DecodeBytes, instance);\n    },\n    json() {\n      // The json() method steps are to return the result of running\n      // consume body with this and parse JSON from bytes.\n      return consumeBody(this, parseJSONFromBytes, instance);\n    },\n    formData() {\n      // The formData() method steps are to return the result of running\n      // consume body with this and the following step given a byte sequence bytes:\n      return consumeBody(this, value => {\n        // 1. Let mimeType be the result of get the MIME type with this.\n        const mimeType = bodyMimeType(this);\n\n        // 2. If mimeType is non-null, then switch on mimeType’s essence and run\n        //    the corresponding steps:\n        if (mimeType !== null) {\n          switch (mimeType.essence) {\n            case 'multipart/form-data':\n              {\n                // 1. ... [long step]\n                const parsed = multipartFormDataParser(value, mimeType);\n\n                // 2. If that fails for some reason, then throw a TypeError.\n                if (parsed === 'failure') {\n                  throw new TypeError('Failed to parse body as FormData.');\n                }\n\n                // 3. Return a new FormData object, appending each entry,\n                //    resulting from the parsing operation, to its entry list.\n                const fd = new FormData();\n                fd[kState] = parsed;\n                return fd;\n              }\n            case 'application/x-www-form-urlencoded':\n              {\n                // 1. Let entries be the result of parsing bytes.\n                const entries = new URLSearchParams(value.toString());\n\n                // 2. If entries is failure, then throw a TypeError.\n\n                // 3. Return a new FormData object whose entry list is entries.\n                const fd = new FormData();\n                for (const [name, value] of entries) {\n                  fd.append(name, value);\n                }\n                return fd;\n              }\n          }\n        }\n\n        // 3. Throw a TypeError.\n        throw new TypeError('Content-Type was not one of \"multipart/form-data\" or \"application/x-www-form-urlencoded\".');\n      }, instance);\n    },\n    bytes() {\n      // The bytes() method steps are to return the result of running consume body\n      // with this and the following step given a byte sequence bytes: return the\n      // result of creating a Uint8Array from bytes in this’s relevant realm.\n      return consumeBody(this, bytes => {\n        return new Uint8Array(bytes);\n      }, instance);\n    }\n  };\n  return methods;\n}\nfunction mixinBody(prototype) {\n  Object.assign(prototype.prototype, bodyMixinMethods(prototype));\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-consume-body\n * @param {Response|Request} object\n * @param {(value: unknown) => unknown} convertBytesToJSValue\n * @param {Response|Request} instance\n */\nasync function consumeBody(object, convertBytesToJSValue, instance) {\n  webidl.brandCheck(object, instance);\n\n  // 1. If object is unusable, then return a promise rejected\n  //    with a TypeError.\n  if (bodyUnusable(object[kState].body)) {\n    throw new TypeError('Body is unusable: Body has already been read');\n  }\n  throwIfAborted(object[kState]);\n\n  // 2. Let promise be a new promise.\n  const promise = createDeferredPromise();\n\n  // 3. Let errorSteps given error be to reject promise with error.\n  const errorSteps = error => promise.reject(error);\n\n  // 4. Let successSteps given a byte sequence data be to resolve\n  //    promise with the result of running convertBytesToJSValue\n  //    with data. If that threw an exception, then run errorSteps\n  //    with that exception.\n  const successSteps = data => {\n    try {\n      promise.resolve(convertBytesToJSValue(data));\n    } catch (e) {\n      errorSteps(e);\n    }\n  };\n\n  // 5. If object’s body is null, then run successSteps with an\n  //    empty byte sequence.\n  if (object[kState].body == null) {\n    successSteps(Buffer.allocUnsafe(0));\n    return promise.promise;\n  }\n\n  // 6. Otherwise, fully read object’s body given successSteps,\n  //    errorSteps, and object’s relevant global object.\n  await fullyReadBody(object[kState].body, successSteps, errorSteps);\n\n  // 7. Return promise.\n  return promise.promise;\n}\n\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction bodyUnusable(body) {\n  // An object including the Body interface mixin is\n  // said to be unusable if its body is non-null and\n  // its body’s stream is disturbed or locked.\n  return body != null && (body.stream.locked || util.isDisturbed(body.stream));\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value\n * @param {Uint8Array} bytes\n */\nfunction parseJSONFromBytes(bytes) {\n  return JSON.parse(utf8DecodeBytes(bytes));\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-mime-type\n * @param {import('./response').Response|import('./request').Request} requestOrResponse\n */\nfunction bodyMimeType(requestOrResponse) {\n  // 1. Let headers be null.\n  // 2. If requestOrResponse is a Request object, then set headers to requestOrResponse’s request’s header list.\n  // 3. Otherwise, set headers to requestOrResponse’s response’s header list.\n  /** @type {import('./headers').HeadersList} */\n  const headers = requestOrResponse[kState].headersList;\n\n  // 4. Let mimeType be the result of extracting a MIME type from headers.\n  const mimeType = extractMimeType(headers);\n\n  // 5. If mimeType is failure, then return null.\n  if (mimeType === 'failure') {\n    return null;\n  }\n\n  // 6. Return mimeType.\n  return mimeType;\n}\nmodule.exports = {\n  extractBody,\n  safelyExtractBody,\n  cloneBody,\n  mixinBody\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/body.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/constants.js":
/*!********************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/constants.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst corsSafeListedMethods = ['GET', 'HEAD', 'POST'];\nconst corsSafeListedMethodsSet = new Set(corsSafeListedMethods);\nconst nullBodyStatus = [101, 204, 205, 304];\nconst redirectStatus = [301, 302, 303, 307, 308];\nconst redirectStatusSet = new Set(redirectStatus);\n\n// https://fetch.spec.whatwg.org/#block-bad-port\nconst badPorts = ['1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79', '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137', '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532', '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723', '2049', '3659', '4045', '4190', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6679', '6697', '10080'];\nconst badPortsSet = new Set(badPorts);\n\n// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\nconst referrerPolicy = ['', 'no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin', 'unsafe-url'];\nconst referrerPolicySet = new Set(referrerPolicy);\nconst requestRedirect = ['follow', 'manual', 'error'];\nconst safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE'];\nconst safeMethodsSet = new Set(safeMethods);\nconst requestMode = ['navigate', 'same-origin', 'no-cors', 'cors'];\nconst requestCredentials = ['omit', 'same-origin', 'include'];\nconst requestCache = ['default', 'no-store', 'reload', 'no-cache', 'force-cache', 'only-if-cached'];\n\n// https://fetch.spec.whatwg.org/#request-body-header-name\nconst requestBodyHeader = ['content-encoding', 'content-language', 'content-location', 'content-type',\n// See https://github.com/nodejs/undici/issues/2021\n// 'Content-Length' is a forbidden header name, which is typically\n// removed in the Headers implementation. However, undici doesn't\n// filter out headers, so we add it here.\n'content-length'];\n\n// https://fetch.spec.whatwg.org/#enumdef-requestduplex\nconst requestDuplex = ['half'];\n\n// http://fetch.spec.whatwg.org/#forbidden-method\nconst forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK'];\nconst forbiddenMethodsSet = new Set(forbiddenMethods);\nconst subresource = ['audio', 'audioworklet', 'font', 'image', 'manifest', 'paintworklet', 'script', 'style', 'track', 'video', 'xslt', ''];\nconst subresourceSet = new Set(subresource);\nmodule.exports = {\n  subresource,\n  forbiddenMethods,\n  requestBodyHeader,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  redirectStatus,\n  corsSafeListedMethods,\n  nullBodyStatus,\n  safeMethods,\n  badPorts,\n  requestDuplex,\n  subresourceSet,\n  badPortsSet,\n  redirectStatusSet,\n  corsSafeListedMethodsSet,\n  safeMethodsSet,\n  forbiddenMethodsSet,\n  referrerPolicySet\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/data-url.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/data-url.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst encoder = new TextEncoder();\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-token-code-point\n */\nconst HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+\\-.^_|~A-Za-z0-9]+$/;\nconst HTTP_WHITESPACE_REGEX = /[\\u000A\\u000D\\u0009\\u0020]/; // eslint-disable-line\nconst ASCII_WHITESPACE_REPLACE_REGEX = /[\\u0009\\u000A\\u000C\\u000D\\u0020]/g; // eslint-disable-line\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point\n */\nconst HTTP_QUOTED_STRING_TOKENS = /^[\\u0009\\u0020-\\u007E\\u0080-\\u00FF]+$/; // eslint-disable-line\n\n// https://fetch.spec.whatwg.org/#data-url-processor\n/** @param {URL} dataURL */\nfunction dataURLProcessor(dataURL) {\n  // 1. Assert: dataURL’s scheme is \"data\".\n  assert(dataURL.protocol === 'data:');\n\n  // 2. Let input be the result of running the URL\n  // serializer on dataURL with exclude fragment\n  // set to true.\n  let input = URLSerializer(dataURL, true);\n\n  // 3. Remove the leading \"data:\" string from input.\n  input = input.slice(5);\n\n  // 4. Let position point at the start of input.\n  const position = {\n    position: 0\n  };\n\n  // 5. Let mimeType be the result of collecting a\n  // sequence of code points that are not equal\n  // to U+002C (,), given position.\n  let mimeType = collectASequenceOfCodePointsFast(',', input, position);\n\n  // 6. Strip leading and trailing ASCII whitespace\n  // from mimeType.\n  // Undici implementation note: we need to store the\n  // length because if the mimetype has spaces removed,\n  // the wrong amount will be sliced from the input in\n  // step #9\n  const mimeTypeLength = mimeType.length;\n  mimeType = removeASCIIWhitespace(mimeType, true, true);\n\n  // 7. If position is past the end of input, then\n  // return failure\n  if (position.position >= input.length) {\n    return 'failure';\n  }\n\n  // 8. Advance position by 1.\n  position.position++;\n\n  // 9. Let encodedBody be the remainder of input.\n  const encodedBody = input.slice(mimeTypeLength + 1);\n\n  // 10. Let body be the percent-decoding of encodedBody.\n  let body = stringPercentDecode(encodedBody);\n\n  // 11. If mimeType ends with U+003B (;), followed by\n  // zero or more U+0020 SPACE, followed by an ASCII\n  // case-insensitive match for \"base64\", then:\n  if (/;(\\u0020){0,}base64$/i.test(mimeType)) {\n    // 1. Let stringBody be the isomorphic decode of body.\n    const stringBody = isomorphicDecode(body);\n\n    // 2. Set body to the forgiving-base64 decode of\n    // stringBody.\n    body = forgivingBase64(stringBody);\n\n    // 3. If body is failure, then return failure.\n    if (body === 'failure') {\n      return 'failure';\n    }\n\n    // 4. Remove the last 6 code points from mimeType.\n    mimeType = mimeType.slice(0, -6);\n\n    // 5. Remove trailing U+0020 SPACE code points from mimeType,\n    // if any.\n    mimeType = mimeType.replace(/(\\u0020)+$/, '');\n\n    // 6. Remove the last U+003B (;) code point from mimeType.\n    mimeType = mimeType.slice(0, -1);\n  }\n\n  // 12. If mimeType starts with U+003B (;), then prepend\n  // \"text/plain\" to mimeType.\n  if (mimeType.startsWith(';')) {\n    mimeType = 'text/plain' + mimeType;\n  }\n\n  // 13. Let mimeTypeRecord be the result of parsing\n  // mimeType.\n  let mimeTypeRecord = parseMIMEType(mimeType);\n\n  // 14. If mimeTypeRecord is failure, then set\n  // mimeTypeRecord to text/plain;charset=US-ASCII.\n  if (mimeTypeRecord === 'failure') {\n    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII');\n  }\n\n  // 15. Return a new data: URL struct whose MIME\n  // type is mimeTypeRecord and body is body.\n  // https://fetch.spec.whatwg.org/#data-url-struct\n  return {\n    mimeType: mimeTypeRecord,\n    body\n  };\n}\n\n// https://url.spec.whatwg.org/#concept-url-serializer\n/**\n * @param {URL} url\n * @param {boolean} excludeFragment\n */\nfunction URLSerializer(url) {\n  let excludeFragment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!excludeFragment) {\n    return url.href;\n  }\n  const href = url.href;\n  const hashLength = url.hash.length;\n  const serialized = hashLength === 0 ? href : href.substring(0, href.length - hashLength);\n  if (!hashLength && href.endsWith('#')) {\n    return serialized.slice(0, -1);\n  }\n  return serialized;\n}\n\n// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points\n/**\n * @param {(char: string) => boolean} condition\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePoints(condition, input, position) {\n  // 1. Let result be the empty string.\n  let result = '';\n\n  // 2. While position doesn’t point past the end of input and the\n  // code point at position within input meets the condition condition:\n  while (position.position < input.length && condition(input[position.position])) {\n    // 1. Append that code point to the end of result.\n    result += input[position.position];\n\n    // 2. Advance position by 1.\n    position.position++;\n  }\n\n  // 3. Return result.\n  return result;\n}\n\n/**\n * A faster collectASequenceOfCodePoints that only works when comparing a single character.\n * @param {string} char\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePointsFast(char, input, position) {\n  const idx = input.indexOf(char, position.position);\n  const start = position.position;\n  if (idx === -1) {\n    position.position = input.length;\n    return input.slice(start);\n  }\n  position.position = idx;\n  return input.slice(start, position.position);\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\n/** @param {string} input */\nfunction stringPercentDecode(input) {\n  // 1. Let bytes be the UTF-8 encoding of input.\n  const bytes = encoder.encode(input);\n\n  // 2. Return the percent-decoding of bytes.\n  return percentDecode(bytes);\n}\n\n/**\n * @param {number} byte\n */\nfunction isHexCharByte(byte) {\n  // 0-9 A-F a-f\n  return byte >= 0x30 && byte <= 0x39 || byte >= 0x41 && byte <= 0x46 || byte >= 0x61 && byte <= 0x66;\n}\n\n/**\n * @param {number} byte\n */\nfunction hexByteToNumber(byte) {\n  return (\n    // 0-9\n    byte >= 0x30 && byte <= 0x39 ? byte - 48\n    // Convert to uppercase\n    // ((byte & 0xDF) - 65) + 10\n    : (byte & 0xDF) - 55\n  );\n}\n\n// https://url.spec.whatwg.org/#percent-decode\n/** @param {Uint8Array} input */\nfunction percentDecode(input) {\n  const length = input.length;\n  // 1. Let output be an empty byte sequence.\n  /** @type {Uint8Array} */\n  const output = new Uint8Array(length);\n  let j = 0;\n  // 2. For each byte byte in input:\n  for (let i = 0; i < length; ++i) {\n    const byte = input[i];\n\n    // 1. If byte is not 0x25 (%), then append byte to output.\n    if (byte !== 0x25) {\n      output[j++] = byte;\n\n      // 2. Otherwise, if byte is 0x25 (%) and the next two bytes\n      // after byte in input are not in the ranges\n      // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),\n      // and 0x61 (a) to 0x66 (f), all inclusive, append byte\n      // to output.\n    } else if (byte === 0x25 && !(isHexCharByte(input[i + 1]) && isHexCharByte(input[i + 2]))) {\n      output[j++] = 0x25;\n\n      // 3. Otherwise:\n    } else {\n      // 1. Let bytePoint be the two bytes after byte in input,\n      // decoded, and then interpreted as hexadecimal number.\n      // 2. Append a byte whose value is bytePoint to output.\n      output[j++] = hexByteToNumber(input[i + 1]) << 4 | hexByteToNumber(input[i + 2]);\n\n      // 3. Skip the next two bytes in input.\n      i += 2;\n    }\n  }\n\n  // 3. Return output.\n  return length === j ? output : output.subarray(0, j);\n}\n\n// https://mimesniff.spec.whatwg.org/#parse-a-mime-type\n/** @param {string} input */\nfunction parseMIMEType(input) {\n  // 1. Remove any leading and trailing HTTP whitespace\n  // from input.\n  input = removeHTTPWhitespace(input, true, true);\n\n  // 2. Let position be a position variable for input,\n  // initially pointing at the start of input.\n  const position = {\n    position: 0\n  };\n\n  // 3. Let type be the result of collecting a sequence\n  // of code points that are not U+002F (/) from\n  // input, given position.\n  const type = collectASequenceOfCodePointsFast('/', input, position);\n\n  // 4. If type is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  // https://mimesniff.spec.whatwg.org/#http-token-code-point\n  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {\n    return 'failure';\n  }\n\n  // 5. If position is past the end of input, then return\n  // failure\n  if (position.position > input.length) {\n    return 'failure';\n  }\n\n  // 6. Advance position by 1. (This skips past U+002F (/).)\n  position.position++;\n\n  // 7. Let subtype be the result of collecting a sequence of\n  // code points that are not U+003B (;) from input, given\n  // position.\n  let subtype = collectASequenceOfCodePointsFast(';', input, position);\n\n  // 8. Remove any trailing HTTP whitespace from subtype.\n  subtype = removeHTTPWhitespace(subtype, false, true);\n\n  // 9. If subtype is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {\n    return 'failure';\n  }\n  const typeLowercase = type.toLowerCase();\n  const subtypeLowercase = subtype.toLowerCase();\n\n  // 10. Let mimeType be a new MIME type record whose type\n  // is type, in ASCII lowercase, and subtype is subtype,\n  // in ASCII lowercase.\n  // https://mimesniff.spec.whatwg.org/#mime-type\n  const mimeType = {\n    type: typeLowercase,\n    subtype: subtypeLowercase,\n    /** @type {Map<string, string>} */\n    parameters: new Map(),\n    // https://mimesniff.spec.whatwg.org/#mime-type-essence\n    essence: `${typeLowercase}/${subtypeLowercase}`\n  };\n\n  // 11. While position is not past the end of input:\n  while (position.position < input.length) {\n    // 1. Advance position by 1. (This skips past U+003B (;).)\n    position.position++;\n\n    // 2. Collect a sequence of code points that are HTTP\n    // whitespace from input given position.\n    collectASequenceOfCodePoints(\n    // https://fetch.spec.whatwg.org/#http-whitespace\n    char => HTTP_WHITESPACE_REGEX.test(char), input, position);\n\n    // 3. Let parameterName be the result of collecting a\n    // sequence of code points that are not U+003B (;)\n    // or U+003D (=) from input, given position.\n    let parameterName = collectASequenceOfCodePoints(char => char !== ';' && char !== '=', input, position);\n\n    // 4. Set parameterName to parameterName, in ASCII\n    // lowercase.\n    parameterName = parameterName.toLowerCase();\n\n    // 5. If position is not past the end of input, then:\n    if (position.position < input.length) {\n      // 1. If the code point at position within input is\n      // U+003B (;), then continue.\n      if (input[position.position] === ';') {\n        continue;\n      }\n\n      // 2. Advance position by 1. (This skips past U+003D (=).)\n      position.position++;\n    }\n\n    // 6. If position is past the end of input, then break.\n    if (position.position > input.length) {\n      break;\n    }\n\n    // 7. Let parameterValue be null.\n    let parameterValue = null;\n\n    // 8. If the code point at position within input is\n    // U+0022 (\"), then:\n    if (input[position.position] === '\"') {\n      // 1. Set parameterValue to the result of collecting\n      // an HTTP quoted string from input, given position\n      // and the extract-value flag.\n      parameterValue = collectAnHTTPQuotedString(input, position, true);\n\n      // 2. Collect a sequence of code points that are not\n      // U+003B (;) from input, given position.\n      collectASequenceOfCodePointsFast(';', input, position);\n\n      // 9. Otherwise:\n    } else {\n      // 1. Set parameterValue to the result of collecting\n      // a sequence of code points that are not U+003B (;)\n      // from input, given position.\n      parameterValue = collectASequenceOfCodePointsFast(';', input, position);\n\n      // 2. Remove any trailing HTTP whitespace from parameterValue.\n      parameterValue = removeHTTPWhitespace(parameterValue, false, true);\n\n      // 3. If parameterValue is the empty string, then continue.\n      if (parameterValue.length === 0) {\n        continue;\n      }\n    }\n\n    // 10. If all of the following are true\n    // - parameterName is not the empty string\n    // - parameterName solely contains HTTP token code points\n    // - parameterValue solely contains HTTP quoted-string token code points\n    // - mimeType’s parameters[parameterName] does not exist\n    // then set mimeType’s parameters[parameterName] to parameterValue.\n    if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {\n      mimeType.parameters.set(parameterName, parameterValue);\n    }\n  }\n\n  // 12. Return mimeType.\n  return mimeType;\n}\n\n// https://infra.spec.whatwg.org/#forgiving-base64-decode\n/** @param {string} data */\nfunction forgivingBase64(data) {\n  // 1. Remove all ASCII whitespace from data.\n  data = data.replace(ASCII_WHITESPACE_REPLACE_REGEX, ''); // eslint-disable-line\n\n  let dataLength = data.length;\n  // 2. If data’s code point length divides by 4 leaving\n  // no remainder, then:\n  if (dataLength % 4 === 0) {\n    // 1. If data ends with one or two U+003D (=) code points,\n    // then remove them from data.\n    if (data.charCodeAt(dataLength - 1) === 0x003D) {\n      --dataLength;\n      if (data.charCodeAt(dataLength - 1) === 0x003D) {\n        --dataLength;\n      }\n    }\n  }\n\n  // 3. If data’s code point length divides by 4 leaving\n  // a remainder of 1, then return failure.\n  if (dataLength % 4 === 1) {\n    return 'failure';\n  }\n\n  // 4. If data contains a code point that is not one of\n  //  U+002B (+)\n  //  U+002F (/)\n  //  ASCII alphanumeric\n  // then return failure.\n  if (/[^+/0-9A-Za-z]/.test(data.length === dataLength ? data : data.substring(0, dataLength))) {\n    return 'failure';\n  }\n  const buffer = Buffer.from(data, 'base64');\n  return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n\n// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string\n// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string\n/**\n * @param {string} input\n * @param {{ position: number }} position\n * @param {boolean?} extractValue\n */\nfunction collectAnHTTPQuotedString(input, position, extractValue) {\n  // 1. Let positionStart be position.\n  const positionStart = position.position;\n\n  // 2. Let value be the empty string.\n  let value = '';\n\n  // 3. Assert: the code point at position within input\n  // is U+0022 (\").\n  assert(input[position.position] === '\"');\n\n  // 4. Advance position by 1.\n  position.position++;\n\n  // 5. While true:\n  while (true) {\n    // 1. Append the result of collecting a sequence of code points\n    // that are not U+0022 (\") or U+005C (\\) from input, given\n    // position, to value.\n    value += collectASequenceOfCodePoints(char => char !== '\"' && char !== '\\\\', input, position);\n\n    // 2. If position is past the end of input, then break.\n    if (position.position >= input.length) {\n      break;\n    }\n\n    // 3. Let quoteOrBackslash be the code point at position within\n    // input.\n    const quoteOrBackslash = input[position.position];\n\n    // 4. Advance position by 1.\n    position.position++;\n\n    // 5. If quoteOrBackslash is U+005C (\\), then:\n    if (quoteOrBackslash === '\\\\') {\n      // 1. If position is past the end of input, then append\n      // U+005C (\\) to value and break.\n      if (position.position >= input.length) {\n        value += '\\\\';\n        break;\n      }\n\n      // 2. Append the code point at position within input to value.\n      value += input[position.position];\n\n      // 3. Advance position by 1.\n      position.position++;\n\n      // 6. Otherwise:\n    } else {\n      // 1. Assert: quoteOrBackslash is U+0022 (\").\n      assert(quoteOrBackslash === '\"');\n\n      // 2. Break.\n      break;\n    }\n  }\n\n  // 6. If the extract-value flag is set, then return value.\n  if (extractValue) {\n    return value;\n  }\n\n  // 7. Return the code points from positionStart to position,\n  // inclusive, within input.\n  return input.slice(positionStart, position.position);\n}\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type\n */\nfunction serializeAMimeType(mimeType) {\n  assert(mimeType !== 'failure');\n  const {\n    parameters,\n    essence\n  } = mimeType;\n\n  // 1. Let serialization be the concatenation of mimeType’s\n  //    type, U+002F (/), and mimeType’s subtype.\n  let serialization = essence;\n\n  // 2. For each name → value of mimeType’s parameters:\n  for (let [name, value] of parameters.entries()) {\n    // 1. Append U+003B (;) to serialization.\n    serialization += ';';\n\n    // 2. Append name to serialization.\n    serialization += name;\n\n    // 3. Append U+003D (=) to serialization.\n    serialization += '=';\n\n    // 4. If value does not solely contain HTTP token code\n    //    points or value is the empty string, then:\n    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {\n      // 1. Precede each occurrence of U+0022 (\") or\n      //    U+005C (\\) in value with U+005C (\\).\n      value = value.replace(/(\\\\|\")/g, '\\\\$1');\n\n      // 2. Prepend U+0022 (\") to value.\n      value = '\"' + value;\n\n      // 3. Append U+0022 (\") to value.\n      value += '\"';\n    }\n\n    // 5. Append value to serialization.\n    serialization += value;\n  }\n\n  // 3. Return serialization.\n  return serialization;\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {number} char\n */\nfunction isHTTPWhiteSpace(char) {\n  // \"\\r\\n\\t \"\n  return char === 0x00d || char === 0x00a || char === 0x009 || char === 0x020;\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} str\n * @param {boolean} [leading=true]\n * @param {boolean} [trailing=true]\n */\nfunction removeHTTPWhitespace(str) {\n  let leading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let trailing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return removeChars(str, leading, trailing, isHTTPWhiteSpace);\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n * @param {number} char\n */\nfunction isASCIIWhitespace(char) {\n  // \"\\r\\n\\t\\f \"\n  return char === 0x00d || char === 0x00a || char === 0x009 || char === 0x00c || char === 0x020;\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\n * @param {string} str\n * @param {boolean} [leading=true]\n * @param {boolean} [trailing=true]\n */\nfunction removeASCIIWhitespace(str) {\n  let leading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let trailing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return removeChars(str, leading, trailing, isASCIIWhitespace);\n}\n\n/**\n * @param {string} str\n * @param {boolean} leading\n * @param {boolean} trailing\n * @param {(charCode: number) => boolean} predicate\n * @returns\n */\nfunction removeChars(str, leading, trailing, predicate) {\n  let lead = 0;\n  let trail = str.length - 1;\n  if (leading) {\n    while (lead < str.length && predicate(str.charCodeAt(lead))) lead++;\n  }\n  if (trailing) {\n    while (trail > 0 && predicate(str.charCodeAt(trail))) trail--;\n  }\n  return lead === 0 && trail === str.length - 1 ? str : str.slice(lead, trail + 1);\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-decode\n * @param {Uint8Array} input\n * @returns {string}\n */\nfunction isomorphicDecode(input) {\n  // 1. To isomorphic decode a byte sequence input, return a string whose code point\n  //    length is equal to input’s length and whose code points have the same values\n  //    as the values of input’s bytes, in the same order.\n  const length = input.length;\n  if ((2 << 15) - 1 > length) {\n    return String.fromCharCode.apply(null, input);\n  }\n  let result = '';\n  let i = 0;\n  let addition = (2 << 15) - 1;\n  while (i < length) {\n    if (i + addition > length) {\n      addition = length - i;\n    }\n    result += String.fromCharCode.apply(null, input.subarray(i, i += addition));\n  }\n  return result;\n}\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#minimize-a-supported-mime-type\n * @param {Exclude<ReturnType<typeof parseMIMEType>, 'failure'>} mimeType\n */\nfunction minimizeSupportedMimeType(mimeType) {\n  switch (mimeType.essence) {\n    case 'application/ecmascript':\n    case 'application/javascript':\n    case 'application/x-ecmascript':\n    case 'application/x-javascript':\n    case 'text/ecmascript':\n    case 'text/javascript':\n    case 'text/javascript1.0':\n    case 'text/javascript1.1':\n    case 'text/javascript1.2':\n    case 'text/javascript1.3':\n    case 'text/javascript1.4':\n    case 'text/javascript1.5':\n    case 'text/jscript':\n    case 'text/livescript':\n    case 'text/x-ecmascript':\n    case 'text/x-javascript':\n      // 1. If mimeType is a JavaScript MIME type, then return \"text/javascript\".\n      return 'text/javascript';\n    case 'application/json':\n    case 'text/json':\n      // 2. If mimeType is a JSON MIME type, then return \"application/json\".\n      return 'application/json';\n    case 'image/svg+xml':\n      // 3. If mimeType’s essence is \"image/svg+xml\", then return \"image/svg+xml\".\n      return 'image/svg+xml';\n    case 'text/xml':\n    case 'application/xml':\n      // 4. If mimeType is an XML MIME type, then return \"application/xml\".\n      return 'application/xml';\n  }\n\n  // 2. If mimeType is a JSON MIME type, then return \"application/json\".\n  if (mimeType.subtype.endsWith('+json')) {\n    return 'application/json';\n  }\n\n  // 4. If mimeType is an XML MIME type, then return \"application/xml\".\n  if (mimeType.subtype.endsWith('+xml')) {\n    return 'application/xml';\n  }\n\n  // 5. If mimeType is supported by the user agent, then return mimeType’s essence.\n  // Technically, node doesn't support any mimetypes.\n\n  // 6. Return the empty string.\n  return '';\n}\nmodule.exports = {\n  dataURLProcessor,\n  URLSerializer,\n  collectASequenceOfCodePoints,\n  collectASequenceOfCodePointsFast,\n  stringPercentDecode,\n  parseMIMEType,\n  collectAnHTTPQuotedString,\n  serializeAMimeType,\n  removeChars,\n  removeHTTPWhitespace,\n  minimizeSupportedMimeType,\n  HTTP_TOKEN_CODEPOINTS,\n  isomorphicDecode\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvZGF0YS11cmwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosTUFBTUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLGdDQUFhLENBQUM7QUFFckMsTUFBTUMsT0FBTyxHQUFHLElBQUlDLFdBQVcsQ0FBQyxDQUFDOztBQUVqQztBQUNBO0FBQ0E7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRywrQkFBK0I7QUFDN0QsTUFBTUMscUJBQXFCLEdBQUcsNEJBQTRCLEVBQUM7QUFDM0QsTUFBTUMsOEJBQThCLEdBQUcsbUNBQW1DLEVBQUM7QUFDM0U7QUFDQTtBQUNBO0FBQ0EsTUFBTUMseUJBQXlCLEdBQUcsdUNBQXVDLEVBQUM7O0FBRTFFO0FBQ0E7QUFDQSxTQUFTQyxnQkFBZ0JBLENBQUVDLE9BQU8sRUFBRTtFQUNsQztFQUNBVCxNQUFNLENBQUNTLE9BQU8sQ0FBQ0MsUUFBUSxLQUFLLE9BQU8sQ0FBQzs7RUFFcEM7RUFDQTtFQUNBO0VBQ0EsSUFBSUMsS0FBSyxHQUFHQyxhQUFhLENBQUNILE9BQU8sRUFBRSxJQUFJLENBQUM7O0VBRXhDO0VBQ0FFLEtBQUssR0FBR0EsS0FBSyxDQUFDRSxLQUFLLENBQUMsQ0FBQyxDQUFDOztFQUV0QjtFQUNBLE1BQU1DLFFBQVEsR0FBRztJQUFFQSxRQUFRLEVBQUU7RUFBRSxDQUFDOztFQUVoQztFQUNBO0VBQ0E7RUFDQSxJQUFJQyxRQUFRLEdBQUdDLGdDQUFnQyxDQUM3QyxHQUFHLEVBQ0hMLEtBQUssRUFDTEcsUUFDRixDQUFDOztFQUVEO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLE1BQU1HLGNBQWMsR0FBR0YsUUFBUSxDQUFDRyxNQUFNO0VBQ3RDSCxRQUFRLEdBQUdJLHFCQUFxQixDQUFDSixRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQzs7RUFFdEQ7RUFDQTtFQUNBLElBQUlELFFBQVEsQ0FBQ0EsUUFBUSxJQUFJSCxLQUFLLENBQUNP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O0VBQzNCOztFQUVBO0VBQ0EsSUFBSXpCLFFBQVEsQ0FBQzhDLE9BQU8sQ0FBQ3JCLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtJQUNyQyxPQUFPLGlCQUFpQjtFQUMxQjs7RUFFQTtFQUNBOztFQUVBO0VBQ0EsT0FBTyxFQUFFO0FBQ1g7QUFFQStELE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZoRyxnQkFBZ0I7RUFDaEJJLGFBQWE7RUFDYjZCLDRCQUE0QjtFQUM1QnpCLGdDQUFnQztFQUNoQ00sbUJBQW1CO0VBQ25CUSxhQUFhO0VBQ2J3Qyx5QkFBeUI7RUFDekJlLGtCQUFrQjtFQUNsQlEsV0FBVztFQUNYbEMsb0JBQW9CO0VBQ3BCMkMseUJBQXlCO0VBQ3pCbEcscUJBQXFCO0VBQ3JCcUI7QUFDRixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvd2ViL2ZldGNoL2RhdGEtdXJsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdub2RlOmFzc2VydCcpXG5cbmNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9taW1lc25pZmYuc3BlYy53aGF0d2cub3JnLyNodHRwLXRva2VuLWNvZGUtcG9pbnRcbiAqL1xuY29uc3QgSFRUUF9UT0tFTl9DT0RFUE9JTlRTID0gL15bISMkJSYnKitcXC0uXl98fkEtWmEtejAtOV0rJC9cbmNvbnN0IEhUVFBfV0hJVEVTUEFDRV9SRUdFWCA9IC9bXFx1MDAwQVxcdTAwMERcXHUwMDA5XFx1MDAyMF0vIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbmNvbnN0IEFTQ0lJX1dISVRFU1BBQ0VfUkVQTEFDRV9SRUdFWCA9IC9bXFx1MDAwOVxcdTAwMEFcXHUwMDBDXFx1MDAwRFxcdTAwMjBdL2cgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbWltZXNuaWZmLnNwZWMud2hhdHdnLm9yZy8jaHR0cC1xdW90ZWQtc3RyaW5nLXRva2VuLWNvZGUtcG9pbnRcbiAqL1xuY29uc3QgSFRUUF9RVU9URURfU1RSSU5HX1RPS0VOUyA9IC9eW1xcdTAwMDlcXHUwMDIwLVxcdTAwN0VcXHUwMDgwLVxcdTAwRkZdKyQvIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RhdGEtdXJsLXByb2Nlc3NvclxuLyoqIEBwYXJhbSB7VVJMfSBkYXRhVVJMICovXG5mdW5jdGlvbiBkYXRhVVJMUHJvY2Vzc29yIChkYXRhVVJMKSB7XG4gIC8vIDEuIEFzc2VydDogZGF0YVVSTOKAmXMgc2NoZW1lIGlzIFwiZGF0YVwiLlxuICBhc3NlcnQoZGF0YVVSTC5wcm90b2NvbCA9PT0gJ2RhdGE6JylcblxuICAvLyAyLiBMZXQgaW5wdXQgYmUgdGhlIHJlc3VsdCBvZiBydW5uaW5nIHRoZSBVUkxcbiAgLy8gc2VyaWFsaXplciBvbiBkYXRhVVJMIHdpdGggZXhjbHVkZSBmcmFnbWVudFxuICAvLyBzZXQgdG8gdHJ1ZS5cbiAgbGV0IGlucHV0ID0gVVJMU2VyaWFsaXplcihkYXRhVVJMLCB0cnVlKVxuXG4gIC8vIDMuIFJlbW92ZSB0aGUgbGVhZGluZyBcImRhdGE6XCIgc3RyaW5nIGZyb20gaW5wdXQuXG4gIGlucHV0ID0gaW5wdXQuc2xpY2UoNSlcblxuICAvLyA0LiBMZXQgcG9zaXRpb24gcG9pbnQgYXQgdGhlIHN0YXJ0IG9mIGlucHV0LlxuICBjb25zdCBwb3NpdGlvbiA9IHsgcG9zaXRpb246IDAgfVxuXG4gIC8vIDUuIExldCBtaW1lVHlwZSBiZSB0aGUgcmVzdWx0IG9mIGNvbGxlY3RpbmcgYVxuICAvLyBzZXF1ZW5jZSBvZiBjb2RlIHBvaW50cyB0aGF0IGFyZSBub3QgZXF1YWxcbiAgLy8gdG8gVSswMDJDICgsKSwgZ2l2ZW4gcG9zaXRpb24uXG4gIGxldCBtaW1lVHlwZSA9IGNvbGxlY3RBU2VxdWVuY2VPZkNvZGVQb2ludHNGYXN0KFxuICAgICcsJyxcbiAgICBpbnB1dCxcbiAgICBwb3NpdGlvblxuICApXG5cbiAgLy8gNi4gU3RyaXAgbGVhZGluZyBhbmQgdHJhaWxpbmcgQVNDSUkgd2hpdGVzcGFjZVxuICAvLyBmcm9tIG1pbWVUeXBlLlxuICAvLyBVbmRpY2kgaW1wbGVtZW50YXRpb24gbm90ZTogd2UgbmVlZCB0byBzdG9yZSB0aGVcbiAgLy8gbGVuZ3RoIGJlY2F1c2UgaWYgdGhlIG1pbWV0eXBlIGhhcyBzcGFjZXMgcmVtb3ZlZCxcbiAgLy8gdGhlIHdyb25nIGFtb3VudCB3aWxsIGJlIHNsaWNlZCBmcm9tIHRoZSBpbnB1dCBpblxuICAvLyBzdGVwICM5XG4gIGNvbnN0IG1pbWVUeXBlTGVuZ3RoID0gbWltZVR5cGUubGVuZ3RoXG4gIG1pbWVUeXBlID0gcmVtb3ZlQVNDSUlXaGl0ZXNwYWNlKG1pbWVUeXBlLCB0cnVlLCB0cnVlKVxuXG4gIC8vIDcuIElmIHBvc2l0aW9uIGlzIHBhc3QgdGhlIGVuZCBvZiBpbnB1dCwgdGhlblxuICAvLyByZXR1cm4gZmFpbHVyZVxuICBpZiAocG9zaXRpb24ucG9zaXRpb24gPj0gaW5wdXQubGVuZ3RoKSB7XG4gICAgcmV0dXJuICdmYWlsdXJlJ1xuICB9XG5cbiAgLy8gOC4gQWR2YW5jZSBwb3NpdGlvbiBieSAxLlxuICBwb3NpdGlvbi5wb3NpdGlvbisrXG5cbiAgLy8gOS4gTGV0IGVuY29kZWRCb2R5IGJlIHRoZSByZW1haW5kZXIgb2YgaW5wdXQuXG4gIGNvbnN0IGVuY29kZWRCb2R5ID0gaW5wdXQuc2xpY2UobWltZVR5cGVMZW5ndGggKyAxKVxuXG4gIC8vIDEwLiBMZXQgYm9keSBiZSB0aGUgcGVyY2VudC1kZWNvZGluZyBvZiBlbmNvZGVkQm9keS5cbiAgbGV0IGJvZHkgPSBzdHJpbmdQZXJjZW50RGVjb2RlKGVuY29kZWRCb2R5KVxuXG4gIC8vIDExLiBJZiBtaW1lVHlwZSBlbmRzIHdpdGggVSswMDNCICg7KSwgZm9sbG93ZWQgYnlcbiAgLy8gemVybyBvciBtb3JlIFUrMDAyMCBTUEFDRSwgZm9sbG93ZWQgYnkgYW4gQVNDSUlcbiAgLy8gY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaCBmb3IgXCJiYXNlNjRcIiwgdGhlbjpcbiAgaWYgKC87KFxcdTAwMjApezAsfWJhc2U2NCQvaS50ZXN0KG1pbWVUeXBlKSkge1xuICAgIC8vIDEuIExldCBzdHJpbmdCb2R5IGJlIHRoZSBpc29tb3JwaGljIGRlY29kZSBvZiBib2R5LlxuICAgIGNvbnN0IHN0cmluZ0JvZHkgPSBpc29tb3JwaGljRGVjb2RlKGJvZHkpXG5cbiAgICAvLyAyLiBTZXQgYm9keSB0byB0aGUgZm9yZ2l2aW5nLWJhc2U2NCBkZWNvZGUgb2ZcbiAgICAvLyBzdHJpbmdCb2R5LlxuICAgIGJvZHkgPSBmb3JnaXZpbmdCYXNlNjQoc3RyaW5nQm9keSlcblxuICAgIC8vIDMuIElmIGJvZHkgaXMgZmFpbHVyZSwgdGhlbiByZXR1cm4gZmFpbHVyZS5cbiAgICBpZiAoYm9keSA9PT0gJ2ZhaWx1cmUnKSB7XG4gICAgICByZXR1cm4gJ2ZhaWx1cmUnXG4gICAgfVxuXG4gICAgLy8gNC4gUmVtb3ZlIHRoZSBsYXN0IDYgY29kZSBwb2ludHMgZnJvbSBtaW1lVHlwZS5cbiAgICBtaW1lVHlwZSA9IG1pbWVUeXBlLnNsaWNlKDAsIC02KVxuXG4gICAgLy8gNS4gUmVtb3ZlIHRyYWlsaW5nIFUrMDAyMCBTUEFDRSBjb2RlIHBvaW50cyBmcm9tIG1pbWVUeXBlLFxuICAgIC8vIGlmIGFueS5cbiAgICBtaW1lVHlwZSA9IG1pbWVUeXBlLnJlcGxhY2UoLyhcXHUwMDIwKSskLywgJycpXG5cbiAgICAvLyA2LiBSZW1vdmUgdGhlIGxhc3QgVSswMDNCICg7KSBjb2RlIHBvaW50IGZyb20gbWltZVR5cGUuXG4gICAgbWltZVR5cGUgPSBtaW1lVHlwZS5zbGljZSgwLCAtMSlcbiAgfVxuXG4gIC8vIDEyLiBJZiBtaW1lVHlwZSBzdGFydHMgd2l0aCBVKzAwM0IgKDspLCB0aGVuIHByZXBlbmRcbiAgLy8gXCJ0ZXh0L3BsYWluXCIgdG8gbWltZVR5cGUuXG4gIGlmIChtaW1lVHlwZS5zdGFydHNXaXRoKCc7JykpIHtcbiAgICBtaW1lVHlwZSA9ICd0ZXh0L3BsYWluJyArIG1pbWVUeXBlXG4gIH1cblxuICAvLyAxMy4gTGV0IG1pbWVUeXBlUmVjb3JkIGJlIHRoZSByZXN1bHQgb2YgcGFyc2luZ1xuICAvLyBtaW1lVHlwZS5cbiAgbGV0IG1pbWVUeXBlUmVjb3JkID0gcGFyc2VNSU1FVHlwZShtaW1lVHlwZSlcblxuICAvLyAxNC4gSWYgbWltZVR5cGVSZWNvcmQgaXMgZmFpbHVyZSwgdGhlbiBzZXRcbiAgLy8gbWltZVR5cGVSZWNvcmQgdG8gdGV4dC9wbGFpbjtjaGFyc2V0PVVTLUFTQ0lJLlxuICBpZiAobWltZVR5cGVSZWNvcmQgPT09ICdmYWlsdXJlJykge1xuICAgIG1pbWVUeXBlUmVjb3JkID0gcGFyc2VNSU1FVHlwZSgndGV4dC9wbGFpbjtjaGFyc2V0PVVTLUFTQ0lJJylcbiAgfVxuXG4gIC8vIDE1LiBSZXR1cm4gYSBuZXcgZGF0YTogVVJMIHN0cnVjdCB3aG9zZSBNSU1FXG4gIC8vIHR5cGUgaXMgbWltZVR5cGVSZWNvcmQgYW5kIGJvZHkgaXMgYm9keS5cbiAgLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RhdGEtdXJsLXN0cnVjdFxuICByZXR1cm4geyBtaW1lVHlwZTogbWltZVR5cGVSZWNvcmQsIGJvZHkgfVxufVxuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtdXJsLXNlcmlhbGl6ZXJcbi8qKlxuICogQHBhcmFtIHtVUkx9IHVybFxuICogQHBhcmFtIHtib29sZWFufSBleGNsdWRlRnJhZ21lbnRcbiAqL1xuZnVuY3Rpb24gVVJMU2VyaWFsaXplciAodXJsLCBleGNsdWRlRnJhZ21lbnQgPSBmYWxzZSkge1xuICBpZiAoIWV4Y2x1ZGVGcmFnbWVudCkge1xuICAgIHJldHVybiB1cmwuaHJlZlxuICB9XG5cbiAgY29uc3QgaHJlZiA9IHVybC5ocmVmXG4gIGNvbnN0IGhhc2hMZW5ndGggPSB1cmwuaGFzaC5sZW5ndGhcblxuICBjb25zdCBzZXJpYWxpemVkID0gaGFzaExlbmd0aCA9PT0gMCA/IGhyZWYgOiBocmVmLnN1YnN0cmluZygwLCBocmVmLmxlbmd0aCAtIGhhc2hMZW5ndGgpXG5cbiAgaWYgKCFoYXNoTGVuZ3RoICYmIGhyZWYuZW5kc1dpdGgoJyMnKSkge1xuICAgIHJldHVybiBzZXJpYWxpemVkLnNsaWNlKDAsIC0xKVxuICB9XG5cbiAgcmV0dXJuIHNlcmlhbGl6ZWRcbn1cblxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI2NvbGxlY3QtYS1zZXF1ZW5jZS1vZi1jb2RlLXBvaW50c1xuLyoqXG4gKiBAcGFyYW0geyhjaGFyOiBzdHJpbmcpID0+IGJvb2xlYW59IGNvbmRpdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gKiBAcGFyYW0ge3sgcG9zaXRpb246IG51bWJlciB9fSBwb3NpdGlvblxuICovXG5mdW5jdGlvbiBjb2xsZWN0QVNlcXVlbmNlT2ZDb2RlUG9pbnRzIChjb25kaXRpb24sIGlucHV0LCBwb3NpdGlvbikge1xuICAvLyAxLiBMZXQgcmVzdWx0IGJlIHRoZSBlbXB0eSBzdHJpbmcuXG4gIGxldCByZXN1bHQgPSAnJ1xuXG4gIC8vIDIuIFdoaWxlIHBvc2l0aW9uIGRvZXNu4oCZdCBwb2ludCBwYXN0IHRoZSBlbmQgb2YgaW5wdXQgYW5kIHRoZVxuICAvLyBjb2RlIHBvaW50IGF0IHBvc2l0aW9uIHdpdGhpbiBpbnB1dCBtZWV0cyB0aGUgY29uZGl0aW9uIGNvbmRpdGlvbjpcbiAgd2hpbGUgKHBvc2l0aW9uLnBvc2l0aW9uIDwgaW5wdXQubGVuZ3RoICYmIGNvbmRpdGlvbihpbnB1dFtwb3NpdGlvbi5wb3NpdGlvbl0pKSB7XG4gICAgLy8gMS4gQXBwZW5kIHRoYXQgY29kZSBwb2ludCB0byB0aGUgZW5kIG9mIHJlc3VsdC5cbiAgICByZXN1bHQgKz0gaW5wdXRbcG9zaXRpb24ucG9zaXRpb25dXG5cbiAgICAvLyAyLiBBZHZhbmNlIHBvc2l0aW9uIGJ5IDEuXG4gICAgcG9zaXRpb24ucG9zaXRpb24rK1xuICB9XG5cbiAgLy8gMy4gUmV0dXJuIHJlc3VsdC5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIEEgZmFzdGVyIGNvbGxlY3RBU2VxdWVuY2VPZkNvZGVQb2ludHMgdGhhdCBvbmx5IHdvcmtzIHdoZW4gY29tcGFyaW5nIGEgc2luZ2xlIGNoYXJhY3Rlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRcbiAqIEBwYXJhbSB7eyBwb3NpdGlvbjogbnVtYmVyIH19IHBvc2l0aW9uXG4gKi9cbmZ1bmN0aW9uIGNvbGxlY3RBU2VxdWVuY2VPZkNvZGVQb2ludHNGYXN0IChjaGFyLCBpbnB1dCwgcG9zaXRpb24pIHtcbiAgY29uc3QgaWR4ID0gaW5wdXQuaW5kZXhPZihjaGFyLCBwb3NpdGlvbi5wb3NpdGlvbilcbiAgY29uc3Qgc3RhcnQgPSBwb3NpdGlvbi5wb3NpdGlvblxuXG4gIGlmIChpZHggPT09IC0xKSB7XG4gICAgcG9zaXRpb24ucG9zaXRpb24gPSBpbnB1dC5sZW5ndGhcbiAgICByZXR1cm4gaW5wdXQuc2xpY2Uoc3RhcnQpXG4gIH1cblxuICBwb3NpdGlvbi5wb3NpdGlvbiA9IGlkeFxuICByZXR1cm4gaW5wdXQuc2xpY2Uoc3RhcnQsIHBvc2l0aW9uLnBvc2l0aW9uKVxufVxuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3N0cmluZy1wZXJjZW50LWRlY29kZVxuLyoqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCAqL1xuZnVuY3Rpb24gc3RyaW5nUGVyY2VudERlY29kZSAoaW5wdXQpIHtcbiAgLy8gMS4gTGV0IGJ5dGVzIGJlIHRoZSBVVEYtOCBlbmNvZGluZyBvZiBpbnB1dC5cbiAgY29uc3QgYnl0ZXMgPSBlbmNvZGVyLmVuY29kZShpbnB1dClcblxuICAvLyAyLiBSZXR1cm4gdGhlIHBlcmNlbnQtZGVjb2Rpbmcgb2YgYnl0ZXMuXG4gIHJldHVybiBwZXJjZW50RGVjb2RlKGJ5dGVzKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlXG4gKi9cbmZ1bmN0aW9uIGlzSGV4Q2hhckJ5dGUgKGJ5dGUpIHtcbiAgLy8gMC05IEEtRiBhLWZcbiAgcmV0dXJuIChieXRlID49IDB4MzAgJiYgYnl0ZSA8PSAweDM5KSB8fCAoYnl0ZSA+PSAweDQxICYmIGJ5dGUgPD0gMHg0NikgfHwgKGJ5dGUgPj0gMHg2MSAmJiBieXRlIDw9IDB4NjYpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVcbiAqL1xuZnVuY3Rpb24gaGV4Qnl0ZVRvTnVtYmVyIChieXRlKSB7XG4gIHJldHVybiAoXG4gICAgLy8gMC05XG4gICAgYnl0ZSA+PSAweDMwICYmIGJ5dGUgPD0gMHgzOVxuICAgICAgPyAoYnl0ZSAtIDQ4KVxuICAgIC8vIENvbnZlcnQgdG8gdXBwZXJjYXNlXG4gICAgLy8gKChieXRlICYgMHhERikgLSA2NSkgKyAxMFxuICAgICAgOiAoKGJ5dGUgJiAweERGKSAtIDU1KVxuICApXG59XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jcGVyY2VudC1kZWNvZGVcbi8qKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGlucHV0ICovXG5mdW5jdGlvbiBwZXJjZW50RGVjb2RlIChpbnB1dCkge1xuICBjb25zdCBsZW5ndGggPSBpbnB1dC5sZW5ndGhcbiAgLy8gMS4gTGV0IG91dHB1dCBiZSBhbiBlbXB0eSBieXRlIHNlcXVlbmNlLlxuICAvKiogQHR5cGUge1VpbnQ4QXJyYXl9ICovXG4gIGNvbnN0IG91dHB1dCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgbGV0IGogPSAwXG4gIC8vIDIuIEZvciBlYWNoIGJ5dGUgYnl0ZSBpbiBpbnB1dDpcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGJ5dGUgPSBpbnB1dFtpXVxuXG4gICAgLy8gMS4gSWYgYnl0ZSBpcyBub3QgMHgyNSAoJSksIHRoZW4gYXBwZW5kIGJ5dGUgdG8gb3V0cHV0LlxuICAgIGlmIChieXRlICE9PSAweDI1KSB7XG4gICAgICBvdXRwdXRbaisrXSA9IGJ5dGVcblxuICAgIC8vIDIuIE90aGVyd2lzZSwgaWYgYnl0ZSBpcyAweDI1ICglKSBhbmQgdGhlIG5leHQgdHdvIGJ5dGVzXG4gICAgLy8gYWZ0ZXIgYnl0ZSBpbiBpbnB1dCBhcmUgbm90IGluIHRoZSByYW5nZXNcbiAgICAvLyAweDMwICgwKSB0byAweDM5ICg5KSwgMHg0MSAoQSkgdG8gMHg0NiAoRiksXG4gICAgLy8gYW5kIDB4NjEgKGEpIHRvIDB4NjYgKGYpLCBhbGwgaW5jbHVzaXZlLCBhcHBlbmQgYnl0ZVxuICAgIC8vIHRvIG91dHB1dC5cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYnl0ZSA9PT0gMHgyNSAmJlxuICAgICAgIShpc0hleENoYXJCeXRlKGlucHV0W2kgKyAxXSkgJiYgaXNIZXhDaGFyQnl0ZShpbnB1dFtpICsgMl0pKVxuICAgICkge1xuICAgICAgb3V0cHV0W2orK10gPSAweDI1XG5cbiAgICAvLyAzLiBPdGhlcndpc2U6XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIDEuIExldCBieXRlUG9pbnQgYmUgdGhlIHR3byBieXRlcyBhZnRlciBieXRlIGluIGlucHV0LFxuICAgICAgLy8gZGVjb2RlZCwgYW5kIHRoZW4gaW50ZXJwcmV0ZWQgYXMgaGV4YWRlY2ltYWwgbnVtYmVyLlxuICAgICAgLy8gMi4gQXBwZW5kIGEgYnl0ZSB3aG9zZSB2YWx1ZSBpcyBieXRlUG9pbnQgdG8gb3V0cHV0LlxuICAgICAgb3V0cHV0W2orK10gPSAoaGV4Qnl0ZVRvTnVtYmVyKGlucHV0W2kgKyAxXSkgPDwgNCkgfCBoZXhCeXRlVG9OdW1iZXIoaW5wdXRbaSArIDJdKVxuXG4gICAgICAvLyAzLiBTa2lwIHRoZSBuZXh0IHR3byBieXRlcyBpbiBpbnB1dC5cbiAgICAgIGkgKz0gMlxuICAgIH1cbiAgfVxuXG4gIC8vIDMuIFJldHVybiBvdXRwdXQuXG4gIHJldHVybiBsZW5ndGggPT09IGogPyBvdXRwdXQgOiBvdXRwdXQuc3ViYXJyYXkoMCwgailcbn1cblxuLy8gaHR0cHM6Ly9taW1lc25pZmYuc3BlYy53aGF0d2cub3JnLyNwYXJzZS1hLW1pbWUtdHlwZVxuLyoqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCAqL1xuZnVuY3Rpb24gcGFyc2VNSU1FVHlwZSAoaW5wdXQpIHtcbiAgLy8gMS4gUmVtb3ZlIGFueSBsZWFkaW5nIGFuZCB0cmFpbGluZyBIVFRQIHdoaXRlc3BhY2VcbiAgLy8gZnJvbSBpbnB1dC5cbiAgaW5wdXQgPSByZW1vdmVIVFRQV2hpdGVzcGFjZShpbnB1dCwgdHJ1ZSwgdHJ1ZSlcblxuICAvLyAyLiBMZXQgcG9zaXRpb24gYmUgYSBwb3NpdGlvbiB2YXJpYWJsZSBmb3IgaW5wdXQsXG4gIC8vIGluaXRpYWxseSBwb2ludGluZyBhdCB0aGUgc3RhcnQgb2YgaW5wdXQuXG4gIGNvbnN0IHBvc2l0aW9uID0geyBwb3NpdGlvbjogMCB9XG5cbiAgLy8gMy4gTGV0IHR5cGUgYmUgdGhlIHJlc3VsdCBvZiBjb2xsZWN0aW5nIGEgc2VxdWVuY2VcbiAgLy8gb2YgY29kZSBwb2ludHMgdGhhdCBhcmUgbm90IFUrMDAyRiAoLykgZnJvbVxuICAvLyBpbnB1dCwgZ2l2ZW4gcG9zaXRpb24uXG4gIGNvbnN0IHR5cGUgPSBjb2xsZWN0QVNlcXVlbmNlT2ZDb2RlUG9pbnRzRmFzdChcbiAgICAnLycsXG4gICAgaW5wdXQsXG4gICAgcG9zaXRpb25cbiAgKVxuXG4gIC8vIDQuIElmIHR5cGUgaXMgdGhlIGVtcHR5IHN0cmluZyBvciBkb2VzIG5vdCBzb2xlbHlcbiAgLy8gY29udGFpbiBIVFRQIHRva2VuIGNvZGUgcG9pbnRzLCB0aGVuIHJldHVybiBmYWlsdXJlLlxuICAvLyBodHRwczovL21pbWVzbmlmZi5zcGVjLndoYXR3Zy5vcmcvI2h0dHAtdG9rZW4tY29kZS1wb2ludFxuICBpZiAodHlwZS5sZW5ndGggPT09IDAgfHwgIUhUVFBfVE9LRU5fQ09ERVBPSU5UUy50ZXN0KHR5cGUpKSB7XG4gICAgcmV0dXJuICdmYWlsdXJlJ1xuICB9XG5cbiAgLy8gNS4gSWYgcG9zaXRpb24gaXMgcGFzdCB0aGUgZW5kIG9mIGlucHV0LCB0aGVuIHJldHVyblxuICAvLyBmYWlsdXJlXG4gIGlmIChwb3NpdGlvbi5wb3NpdGlvbiA+IGlucHV0Lmxlbmd0aCkge1xuICAgIHJldHVybiAnZmFpbHVyZSdcbiAgfVxuXG4gIC8vIDYuIEFkdmFuY2UgcG9zaXRpb24gYnkgMS4gKFRoaXMgc2tpcHMgcGFzdCBVKzAwMkYgKC8pLilcbiAgcG9zaXRpb24ucG9zaXRpb24rK1xuXG4gIC8vIDcuIExldCBzdWJ0eXBlIGJlIHRoZSByZXN1bHQgb2YgY29sbGVjdGluZyBhIHNlcXVlbmNlIG9mXG4gIC8vIGNvZGUgcG9pbnRzIHRoYXQgYXJlIG5vdCBVKzAwM0IgKDspIGZyb20gaW5wdXQsIGdpdmVuXG4gIC8vIHBvc2l0aW9uLlxuICBsZXQgc3VidHlwZSA9IGNvbGxlY3RBU2VxdWVuY2VPZkNvZGVQb2ludHNGYXN0KFxuICAgICc7JyxcbiAgICBpbnB1dCxcbiAgICBwb3NpdGlvblxuICApXG5cbiAgLy8gOC4gUmVtb3ZlIGFueSB0cmFpbGluZyBIVFRQIHdoaXRlc3BhY2UgZnJvbSBzdWJ0eXBlLlxuICBzdWJ0eXBlID0gcmVtb3ZlSFRUUFdoaXRlc3BhY2Uoc3VidHlwZSwgZmFsc2UsIHRydWUpXG5cbiAgLy8gOS4gSWYgc3VidHlwZSBpcyB0aGUgZW1wdHkgc3RyaW5nIG9yIGRvZXMgbm90IHNvbGVseVxuICAvLyBjb250YWluIEhUVFAgdG9rZW4gY29kZSBwb2ludHMsIHRoZW4gcmV0dXJuIGZhaWx1cmUuXG4gIGlmIChzdWJ0eXBlLmxlbmd0aCA9PT0gMCB8fCAhSFRUUF9UT0tFTl9DT0RFUE9JTlRTLnRlc3Qoc3VidHlwZSkpIHtcbiAgICByZXR1cm4gJ2ZhaWx1cmUnXG4gIH1cblxuICBjb25zdCB0eXBlTG93ZXJjYXNlID0gdHlwZS50b0xvd2VyQ2FzZSgpXG4gIGNvbnN0IHN1YnR5cGVMb3dlcmNhc2UgPSBzdWJ0eXBlLnRvTG93ZXJDYXNlKClcblxuICAvLyAxMC4gTGV0IG1pbWVUeXBlIGJlIGEgbmV3IE1JTUUgdHlwZSByZWNvcmQgd2hvc2UgdHlwZVxuICAvLyBpcyB0eXBlLCBpbiBBU0NJSSBsb3dlcmNhc2UsIGFuZCBzdWJ0eXBlIGlzIHN1YnR5cGUsXG4gIC8vIGluIEFTQ0lJIGxvd2VyY2FzZS5cbiAgLy8gaHR0cHM6Ly9taW1lc25pZmYuc3BlYy53aGF0d2cub3JnLyNtaW1lLXR5cGVcbiAgY29uc3QgbWltZVR5cGUgPSB7XG4gICAgdHlwZTogdHlwZUxvd2VyY2FzZSxcbiAgICBzdWJ0eXBlOiBzdWJ0eXBlTG93ZXJjYXNlLFxuICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZywgc3RyaW5nPn0gKi9cbiAgICBwYXJhbWV0ZXJzOiBuZXcgTWFwKCksXG4gICAgLy8gaHR0cHM6Ly9taW1lc25pZmYuc3BlYy53aGF0d2cub3JnLyNtaW1lLXR5cGUtZXNzZW5jZVxuICAgIGVzc2VuY2U6IGAke3R5cGVMb3dlcmNhc2V9LyR7c3VidHlwZUxvd2VyY2FzZX1gXG4gIH1cblxuICAvLyAxMS4gV2hpbGUgcG9zaXRpb24gaXMgbm90IHBhc3QgdGhlIGVuZCBvZiBpbnB1dDpcbiAgd2hpbGUgKHBvc2l0aW9uLnBvc2l0aW9uIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgLy8gMS4gQWR2YW5jZSBwb3NpdGlvbiBieSAxLiAoVGhpcyBza2lwcyBwYXN0IFUrMDAzQiAoOykuKVxuICAgIHBvc2l0aW9uLnBvc2l0aW9uKytcblxuICAgIC8vIDIuIENvbGxlY3QgYSBzZXF1ZW5jZSBvZiBjb2RlIHBvaW50cyB0aGF0IGFyZSBIVFRQXG4gICAgLy8gd2hpdGVzcGFjZSBmcm9tIGlucHV0IGdpdmVuIHBvc2l0aW9uLlxuICAgIGNvbGxlY3RBU2VxdWVuY2VPZkNvZGVQb2ludHMoXG4gICAgICAvLyBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jaHR0cC13aGl0ZXNwYWNlXG4gICAgICBjaGFyID0+IEhUVFBfV0hJVEVTUEFDRV9SRUdFWC50ZXN0KGNoYXIpLFxuICAgICAgaW5wdXQsXG4gICAgICBwb3NpdGlvblxuICAgIClcblxuICAgIC8vIDMuIExldCBwYXJhbWV0ZXJOYW1lIGJlIHRoZSByZXN1bHQgb2YgY29sbGVjdGluZyBhXG4gICAgLy8gc2VxdWVuY2Ugb2YgY29kZSBwb2ludHMgdGhhdCBhcmUgbm90IFUrMDAzQiAoOylcbiAgICAvLyBvciBVKzAwM0QgKD0pIGZyb20gaW5wdXQsIGdpdmVuIHBvc2l0aW9uLlxuICAgIGxldCBwYXJhbWV0ZXJOYW1lID0gY29sbGVjdEFTZXF1ZW5jZU9mQ29kZVBvaW50cyhcbiAgICAgIChjaGFyKSA9PiBjaGFyICE9PSAnOycgJiYgY2hhciAhPT0gJz0nLFxuICAgICAgaW5wdXQsXG4gICAgICBwb3NpdGlvblxuICAgIClcblxuICAgIC8vIDQuIFNldCBwYXJhbWV0ZXJOYW1lIHRvIHBhcmFtZXRlck5hbWUsIGluIEFTQ0lJXG4gICAgLy8gbG93ZXJjYXNlLlxuICAgIHBhcmFtZXRlck5hbWUgPSBwYXJhbWV0ZXJOYW1lLnRvTG93ZXJDYXNlKClcblxuICAgIC8vIDUuIElmIHBvc2l0aW9uIGlzIG5vdCBwYXN0IHRoZSBlbmQgb2YgaW5wdXQsIHRoZW46XG4gICAgaWYgKHBvc2l0aW9uLnBvc2l0aW9uIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAvLyAxLiBJZiB0aGUgY29kZSBwb2ludCBhdCBwb3NpdGlvbiB3aXRoaW4gaW5wdXQgaXNcbiAgICAgIC8vIFUrMDAzQiAoOyksIHRoZW4gY29udGludWUuXG4gICAgICBpZiAoaW5wdXRbcG9zaXRpb24ucG9zaXRpb25dID09PSAnOycpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMi4gQWR2YW5jZSBwb3NpdGlvbiBieSAxLiAoVGhpcyBza2lwcyBwYXN0IFUrMDAzRCAoPSkuKVxuICAgICAgcG9zaXRpb24ucG9zaXRpb24rK1xuICAgIH1cblxuICAgIC8vIDYuIElmIHBvc2l0aW9uIGlzIHBhc3QgdGhlIGVuZCBvZiBpbnB1dCwgdGhlbiBicmVhay5cbiAgICBpZiAocG9zaXRpb24ucG9zaXRpb24gPiBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgLy8gNy4gTGV0IHBhcmFtZXRlclZhbHVlIGJlIG51bGwuXG4gICAgbGV0IHBhcmFtZXRlclZhbHVlID0gbnVsbFxuXG4gICAgLy8gOC4gSWYgdGhlIGNvZGUgcG9pbnQgYXQgcG9zaXRpb24gd2l0aGluIGlucHV0IGlzXG4gICAgLy8gVSswMDIyIChcIiksIHRoZW46XG4gICAgaWYgKGlucHV0W3Bvc2l0aW9uLnBvc2l0aW9uXSA9PT0gJ1wiJykge1xuICAgICAgLy8gMS4gU2V0IHBhcmFtZXRlclZhbHVlIHRvIHRoZSByZXN1bHQgb2YgY29sbGVjdGluZ1xuICAgICAgLy8gYW4gSFRUUCBxdW90ZWQgc3RyaW5nIGZyb20gaW5wdXQsIGdpdmVuIHBvc2l0aW9uXG4gICAgICAvLyBhbmQgdGhlIGV4dHJhY3QtdmFsdWUgZmxhZy5cbiAgICAgIHBhcmFtZXRlclZhbHVlID0gY29sbGVjdEFuSFRUUFF1b3RlZFN0cmluZyhpbnB1dCwgcG9zaXRpb24sIHRydWUpXG5cbiAgICAgIC8vIDIuIENvbGxlY3QgYSBzZXF1ZW5jZSBvZiBjb2RlIHBvaW50cyB0aGF0IGFyZSBub3RcbiAgICAgIC8vIFUrMDAzQiAoOykgZnJvbSBpbnB1dCwgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICBjb2xsZWN0QVNlcXVlbmNlT2ZDb2RlUG9pbnRzRmFzdChcbiAgICAgICAgJzsnLFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgcG9zaXRpb25cbiAgICAgIClcblxuICAgIC8vIDkuIE90aGVyd2lzZTpcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gMS4gU2V0IHBhcmFtZXRlclZhbHVlIHRvIHRoZSByZXN1bHQgb2YgY29sbGVjdGluZ1xuICAgICAgLy8gYSBzZXF1ZW5jZSBvZiBjb2RlIHBvaW50cyB0aGF0IGFyZSBub3QgVSswMDNCICg7KVxuICAgICAgLy8gZnJvbSBpbnB1dCwgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICBwYXJhbWV0ZXJWYWx1ZSA9IGNvbGxlY3RBU2VxdWVuY2VPZkNvZGVQb2ludHNGYXN0KFxuICAgICAgICAnOycsXG4gICAgICAgIGlucHV0LFxuICAgICAgICBwb3NpdGlvblxuICAgICAgKVxuXG4gICAgICAvLyAyLiBSZW1vdmUgYW55IHRyYWlsaW5nIEhUVFAgd2hpdGVzcGFjZSBmcm9tIHBhcmFtZXRlclZhbHVlLlxuICAgICAgcGFyYW1ldGVyVmFsdWUgPSByZW1vdmVIVFRQV2hpdGVzcGFjZShwYXJhbWV0ZXJWYWx1ZSwgZmFsc2UsIHRydWUpXG5cbiAgICAgIC8vIDMuIElmIHBhcmFtZXRlclZhbHVlIGlzIHRoZSBlbXB0eSBzdHJpbmcsIHRoZW4gY29udGludWUuXG4gICAgICBpZiAocGFyYW1ldGVyVmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gMTAuIElmIGFsbCBvZiB0aGUgZm9sbG93aW5nIGFyZSB0cnVlXG4gICAgLy8gLSBwYXJhbWV0ZXJOYW1lIGlzIG5vdCB0aGUgZW1wdHkgc3RyaW5nXG4gICAgLy8gLSBwYXJhbWV0ZXJOYW1lIHNvbGVseSBjb250YWlucyBIVFRQIHRva2VuIGNvZGUgcG9pbnRzXG4gICAgLy8gLSBwYXJhbWV0ZXJWYWx1ZSBzb2xlbHkgY29udGFpbnMgSFRUUCBxdW90ZWQtc3RyaW5nIHRva2VuIGNvZGUgcG9pbnRzXG4gICAgLy8gLSBtaW1lVHlwZeKAmXMgcGFyYW1ldGVyc1twYXJhbWV0ZXJOYW1lXSBkb2VzIG5vdCBleGlzdFxuICAgIC8vIHRoZW4gc2V0IG1pbWVUeXBl4oCZcyBwYXJhbWV0ZXJzW3BhcmFtZXRlck5hbWVdIHRvIHBhcmFtZXRlclZhbHVlLlxuICAgIGlmIChcbiAgICAgIHBhcmFtZXRlck5hbWUubGVuZ3RoICE9PSAwICYmXG4gICAgICBIVFRQX1RPS0VOX0NPREVQT0lOVFMudGVzdChwYXJhbWV0ZXJOYW1lKSAmJlxuICAgICAgKHBhcmFtZXRlclZhbHVlLmxlbmd0aCA9PT0gMCB8fCBIVFRQX1FVT1RFRF9TVFJJTkdfVE9LRU5TLnRlc3QocGFyYW1ldGVyVmFsdWUpKSAmJlxuICAgICAgIW1pbWVUeXBlLnBhcmFtZXRlcnMuaGFzKHBhcmFtZXRlck5hbWUpXG4gICAgKSB7XG4gICAgICBtaW1lVHlwZS5wYXJhbWV0ZXJzLnNldChwYXJhbWV0ZXJOYW1lLCBwYXJhbWV0ZXJWYWx1ZSlcbiAgICB9XG4gIH1cblxuICAvLyAxMi4gUmV0dXJuIG1pbWVUeXBlLlxuICByZXR1cm4gbWltZVR5cGVcbn1cblxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI2ZvcmdpdmluZy1iYXNlNjQtZGVjb2RlXG4vKiogQHBhcmFtIHtzdHJpbmd9IGRhdGEgKi9cbmZ1bmN0aW9uIGZvcmdpdmluZ0Jhc2U2NCAoZGF0YSkge1xuICAvLyAxLiBSZW1vdmUgYWxsIEFTQ0lJIHdoaXRlc3BhY2UgZnJvbSBkYXRhLlxuICBkYXRhID0gZGF0YS5yZXBsYWNlKEFTQ0lJX1dISVRFU1BBQ0VfUkVQTEFDRV9SRUdFWCwgJycpICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgbGV0IGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aFxuICAvLyAyLiBJZiBkYXRh4oCZcyBjb2RlIHBvaW50IGxlbmd0aCBkaXZpZGVzIGJ5IDQgbGVhdmluZ1xuICAvLyBubyByZW1haW5kZXIsIHRoZW46XG4gIGlmIChkYXRhTGVuZ3RoICUgNCA9PT0gMCkge1xuICAgIC8vIDEuIElmIGRhdGEgZW5kcyB3aXRoIG9uZSBvciB0d28gVSswMDNEICg9KSBjb2RlIHBvaW50cyxcbiAgICAvLyB0aGVuIHJlbW92ZSB0aGVtIGZyb20gZGF0YS5cbiAgICBpZiAoZGF0YS5jaGFyQ29kZUF0KGRhdGFMZW5ndGggLSAxKSA9PT0gMHgwMDNEKSB7XG4gICAgICAtLWRhdGFMZW5ndGhcbiAgICAgIGlmIChkYXRhLmNoYXJDb2RlQXQoZGF0YUxlbmd0aCAtIDEpID09PSAweDAwM0QpIHtcbiAgICAgICAgLS1kYXRhTGVuZ3RoXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gMy4gSWYgZGF0YeKAmXMgY29kZSBwb2ludCBsZW5ndGggZGl2aWRlcyBieSA0IGxlYXZpbmdcbiAgLy8gYSByZW1haW5kZXIgb2YgMSwgdGhlbiByZXR1cm4gZmFpbHVyZS5cbiAgaWYgKGRhdGFMZW5ndGggJSA0ID09PSAxKSB7XG4gICAgcmV0dXJuICdmYWlsdXJlJ1xuICB9XG5cbiAgLy8gNC4gSWYgZGF0YSBjb250YWlucyBhIGNvZGUgcG9pbnQgdGhhdCBpcyBub3Qgb25lIG9mXG4gIC8vICBVKzAwMkIgKCspXG4gIC8vICBVKzAwMkYgKC8pXG4gIC8vICBBU0NJSSBhbHBoYW51bWVyaWNcbiAgLy8gdGhlbiByZXR1cm4gZmFpbHVyZS5cbiAgaWYgKC9bXisvMC05QS1aYS16XS8udGVzdChkYXRhLmxlbmd0aCA9PT0gZGF0YUxlbmd0aCA/IGRhdGEgOiBkYXRhLnN1YnN0cmluZygwLCBkYXRhTGVuZ3RoKSkpIHtcbiAgICByZXR1cm4gJ2ZhaWx1cmUnXG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShkYXRhLCAnYmFzZTY0JylcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5ieXRlT2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aClcbn1cblxuLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbGxlY3QtYW4taHR0cC1xdW90ZWQtc3RyaW5nXG4vLyB0ZXN0czogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2V4YW1wbGUtaHR0cC1xdW90ZWQtc3RyaW5nXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFxuICogQHBhcmFtIHt7IHBvc2l0aW9uOiBudW1iZXIgfX0gcG9zaXRpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGV4dHJhY3RWYWx1ZVxuICovXG5mdW5jdGlvbiBjb2xsZWN0QW5IVFRQUXVvdGVkU3RyaW5nIChpbnB1dCwgcG9zaXRpb24sIGV4dHJhY3RWYWx1ZSkge1xuICAvLyAxLiBMZXQgcG9zaXRpb25TdGFydCBiZSBwb3NpdGlvbi5cbiAgY29uc3QgcG9zaXRpb25TdGFydCA9IHBvc2l0aW9uLnBvc2l0aW9uXG5cbiAgLy8gMi4gTGV0IHZhbHVlIGJlIHRoZSBlbXB0eSBzdHJpbmcuXG4gIGxldCB2YWx1ZSA9ICcnXG5cbiAgLy8gMy4gQXNzZXJ0OiB0aGUgY29kZSBwb2ludCBhdCBwb3NpdGlvbiB3aXRoaW4gaW5wdXRcbiAgLy8gaXMgVSswMDIyIChcIikuXG4gIGFzc2VydChpbnB1dFtwb3NpdGlvbi5wb3NpdGlvbl0gPT09ICdcIicpXG5cbiAgLy8gNC4gQWR2YW5jZSBwb3NpdGlvbiBieSAxLlxuICBwb3NpdGlvbi5wb3NpdGlvbisrXG5cbiAgLy8gNS4gV2hpbGUgdHJ1ZTpcbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyAxLiBBcHBlbmQgdGhlIHJlc3VsdCBvZiBjb2xsZWN0aW5nIGEgc2VxdWVuY2Ugb2YgY29kZSBwb2ludHNcbiAgICAvLyB0aGF0IGFyZSBub3QgVSswMDIyIChcIikgb3IgVSswMDVDIChcXCkgZnJvbSBpbnB1dCwgZ2l2ZW5cbiAgICAvLyBwb3NpdGlvbiwgdG8gdmFsdWUuXG4gICAgdmFsdWUgKz0gY29sbGVjdEFTZXF1ZW5jZU9mQ29kZVBvaW50cyhcbiAgICAgIChjaGFyKSA9PiBjaGFyICE9PSAnXCInICYmIGNoYXIgIT09ICdcXFxcJyxcbiAgICAgIGlucHV0LFxuICAgICAgcG9zaXRpb25cbiAgICApXG5cbiAgICAvLyAyLiBJZiBwb3NpdGlvbiBpcyBwYXN0IHRoZSBlbmQgb2YgaW5wdXQsIHRoZW4gYnJlYWsuXG4gICAgaWYgKHBvc2l0aW9uLnBvc2l0aW9uID49IGlucHV0Lmxlbmd0aCkge1xuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICAvLyAzLiBMZXQgcXVvdGVPckJhY2tzbGFzaCBiZSB0aGUgY29kZSBwb2ludCBhdCBwb3NpdGlvbiB3aXRoaW5cbiAgICAvLyBpbnB1dC5cbiAgICBjb25zdCBxdW90ZU9yQmFja3NsYXNoID0gaW5wdXRbcG9zaXRpb24ucG9zaXRpb25dXG5cbiAgICAvLyA0LiBBZHZhbmNlIHBvc2l0aW9uIGJ5IDEuXG4gICAgcG9zaXRpb24ucG9zaXRpb24rK1xuXG4gICAgLy8gNS4gSWYgcXVvdGVPckJhY2tzbGFzaCBpcyBVKzAwNUMgKFxcKSwgdGhlbjpcbiAgICBpZiAocXVvdGVPckJhY2tzbGFzaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAvLyAxLiBJZiBwb3NpdGlvbiBpcyBwYXN0IHRoZSBlbmQgb2YgaW5wdXQsIHRoZW4gYXBwZW5kXG4gICAgICAvLyBVKzAwNUMgKFxcKSB0byB2YWx1ZSBhbmQgYnJlYWsuXG4gICAgICBpZiAocG9zaXRpb24ucG9zaXRpb24gPj0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlICs9ICdcXFxcJ1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICAvLyAyLiBBcHBlbmQgdGhlIGNvZGUgcG9pbnQgYXQgcG9zaXRpb24gd2l0aGluIGlucHV0IHRvIHZhbHVlLlxuICAgICAgdmFsdWUgKz0gaW5wdXRbcG9zaXRpb24ucG9zaXRpb25dXG5cbiAgICAgIC8vIDMuIEFkdmFuY2UgcG9zaXRpb24gYnkgMS5cbiAgICAgIHBvc2l0aW9uLnBvc2l0aW9uKytcblxuICAgIC8vIDYuIE90aGVyd2lzZTpcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gMS4gQXNzZXJ0OiBxdW90ZU9yQmFja3NsYXNoIGlzIFUrMDAyMiAoXCIpLlxuICAgICAgYXNzZXJ0KHF1b3RlT3JCYWNrc2xhc2ggPT09ICdcIicpXG5cbiAgICAgIC8vIDIuIEJyZWFrLlxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyA2LiBJZiB0aGUgZXh0cmFjdC12YWx1ZSBmbGFnIGlzIHNldCwgdGhlbiByZXR1cm4gdmFsdWUuXG4gIGlmIChleHRyYWN0VmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIDcuIFJldHVybiB0aGUgY29kZSBwb2ludHMgZnJvbSBwb3NpdGlvblN0YXJ0IHRvIHBvc2l0aW9uLFxuICAvLyBpbmNsdXNpdmUsIHdpdGhpbiBpbnB1dC5cbiAgcmV0dXJuIGlucHV0LnNsaWNlKHBvc2l0aW9uU3RhcnQsIHBvc2l0aW9uLnBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9taW1lc25pZmYuc3BlYy53aGF0d2cub3JnLyNzZXJpYWxpemUtYS1taW1lLXR5cGVcbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXplQU1pbWVUeXBlIChtaW1lVHlwZSkge1xuICBhc3NlcnQobWltZVR5cGUgIT09ICdmYWlsdXJlJylcbiAgY29uc3QgeyBwYXJhbWV0ZXJzLCBlc3NlbmNlIH0gPSBtaW1lVHlwZVxuXG4gIC8vIDEuIExldCBzZXJpYWxpemF0aW9uIGJlIHRoZSBjb25jYXRlbmF0aW9uIG9mIG1pbWVUeXBl4oCZc1xuICAvLyAgICB0eXBlLCBVKzAwMkYgKC8pLCBhbmQgbWltZVR5cGXigJlzIHN1YnR5cGUuXG4gIGxldCBzZXJpYWxpemF0aW9uID0gZXNzZW5jZVxuXG4gIC8vIDIuIEZvciBlYWNoIG5hbWUg4oaSIHZhbHVlIG9mIG1pbWVUeXBl4oCZcyBwYXJhbWV0ZXJzOlxuICBmb3IgKGxldCBbbmFtZSwgdmFsdWVdIG9mIHBhcmFtZXRlcnMuZW50cmllcygpKSB7XG4gICAgLy8gMS4gQXBwZW5kIFUrMDAzQiAoOykgdG8gc2VyaWFsaXphdGlvbi5cbiAgICBzZXJpYWxpemF0aW9uICs9ICc7J1xuXG4gICAgLy8gMi4gQXBwZW5kIG5hbWUgdG8gc2VyaWFsaXphdGlvbi5cbiAgICBzZXJpYWxpemF0aW9uICs9IG5hbWVcblxuICAgIC8vIDMuIEFwcGVuZCBVKzAwM0QgKD0pIHRvIHNlcmlhbGl6YXRpb24uXG4gICAgc2VyaWFsaXphdGlvbiArPSAnPSdcblxuICAgIC8vIDQuIElmIHZhbHVlIGRvZXMgbm90IHNvbGVseSBjb250YWluIEhUVFAgdG9rZW4gY29kZVxuICAgIC8vICAgIHBvaW50cyBvciB2YWx1ZSBpcyB0aGUgZW1wdHkgc3RyaW5nLCB0aGVuOlxuICAgIGlmICghSFRUUF9UT0tFTl9DT0RFUE9JTlRTLnRlc3QodmFsdWUpKSB7XG4gICAgICAvLyAxLiBQcmVjZWRlIGVhY2ggb2NjdXJyZW5jZSBvZiBVKzAwMjIgKFwiKSBvclxuICAgICAgLy8gICAgVSswMDVDIChcXCkgaW4gdmFsdWUgd2l0aCBVKzAwNUMgKFxcKS5cbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvKFxcXFx8XCIpL2csICdcXFxcJDEnKVxuXG4gICAgICAvLyAyLiBQcmVwZW5kIFUrMDAyMiAoXCIpIHRvIHZhbHVlLlxuICAgICAgdmFsdWUgPSAnXCInICsgdmFsdWVcblxuICAgICAgLy8gMy4gQXBwZW5kIFUrMDAyMiAoXCIpIHRvIHZhbHVlLlxuICAgICAgdmFsdWUgKz0gJ1wiJ1xuICAgIH1cblxuICAgIC8vIDUuIEFwcGVuZCB2YWx1ZSB0byBzZXJpYWxpemF0aW9uLlxuICAgIHNlcmlhbGl6YXRpb24gKz0gdmFsdWVcbiAgfVxuXG4gIC8vIDMuIFJldHVybiBzZXJpYWxpemF0aW9uLlxuICByZXR1cm4gc2VyaWFsaXphdGlvblxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2h0dHAtd2hpdGVzcGFjZVxuICogQHBhcmFtIHtudW1iZXJ9IGNoYXJcbiAqL1xuZnVuY3Rpb24gaXNIVFRQV2hpdGVTcGFjZSAoY2hhcikge1xuICAvLyBcIlxcclxcblxcdCBcIlxuICByZXR1cm4gY2hhciA9PT0gMHgwMGQgfHwgY2hhciA9PT0gMHgwMGEgfHwgY2hhciA9PT0gMHgwMDkgfHwgY2hhciA9PT0gMHgwMjBcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNodHRwLXdoaXRlc3BhY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2xlYWRpbmc9dHJ1ZV1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3RyYWlsaW5nPXRydWVdXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUhUVFBXaGl0ZXNwYWNlIChzdHIsIGxlYWRpbmcgPSB0cnVlLCB0cmFpbGluZyA9IHRydWUpIHtcbiAgcmV0dXJuIHJlbW92ZUNoYXJzKHN0ciwgbGVhZGluZywgdHJhaWxpbmcsIGlzSFRUUFdoaXRlU3BhY2UpXG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jYXNjaWktd2hpdGVzcGFjZVxuICogQHBhcmFtIHtudW1iZXJ9IGNoYXJcbiAqL1xuZnVuY3Rpb24gaXNBU0NJSVdoaXRlc3BhY2UgKGNoYXIpIHtcbiAgLy8gXCJcXHJcXG5cXHRcXGYgXCJcbiAgcmV0dXJuIGNoYXIgPT09IDB4MDBkIHx8IGNoYXIgPT09IDB4MDBhIHx8IGNoYXIgPT09IDB4MDA5IHx8IGNoYXIgPT09IDB4MDBjIHx8IGNoYXIgPT09IDB4MDIwXG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtbGVhZGluZy1hbmQtdHJhaWxpbmctYXNjaWktd2hpdGVzcGFjZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtib29sZWFufSBbbGVhZGluZz10cnVlXVxuICogQHBhcmFtIHtib29sZWFufSBbdHJhaWxpbmc9dHJ1ZV1cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQVNDSUlXaGl0ZXNwYWNlIChzdHIsIGxlYWRpbmcgPSB0cnVlLCB0cmFpbGluZyA9IHRydWUpIHtcbiAgcmV0dXJuIHJlbW92ZUNoYXJzKHN0ciwgbGVhZGluZywgdHJhaWxpbmcsIGlzQVNDSUlXaGl0ZXNwYWNlKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbGVhZGluZ1xuICogQHBhcmFtIHtib29sZWFufSB0cmFpbGluZ1xuICogQHBhcmFtIHsoY2hhckNvZGU6IG51bWJlcikgPT4gYm9vbGVhbn0gcHJlZGljYXRlXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiByZW1vdmVDaGFycyAoc3RyLCBsZWFkaW5nLCB0cmFpbGluZywgcHJlZGljYXRlKSB7XG4gIGxldCBsZWFkID0gMFxuICBsZXQgdHJhaWwgPSBzdHIubGVuZ3RoIC0gMVxuXG4gIGlmIChsZWFkaW5nKSB7XG4gICAgd2hpbGUgKGxlYWQgPCBzdHIubGVuZ3RoICYmIHByZWRpY2F0ZShzdHIuY2hhckNvZGVBdChsZWFkKSkpIGxlYWQrK1xuICB9XG5cbiAgaWYgKHRyYWlsaW5nKSB7XG4gICAgd2hpbGUgKHRyYWlsID4gMCAmJiBwcmVkaWNhdGUoc3RyLmNoYXJDb2RlQXQodHJhaWwpKSkgdHJhaWwtLVxuICB9XG5cbiAgcmV0dXJuIGxlYWQgPT09IDAgJiYgdHJhaWwgPT09IHN0ci5sZW5ndGggLSAxID8gc3RyIDogc3RyLnNsaWNlKGxlYWQsIHRyYWlsICsgMSlcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNpc29tb3JwaGljLWRlY29kZVxuICogQHBhcmFtIHtVaW50OEFycmF5fSBpbnB1dFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaXNvbW9ycGhpY0RlY29kZSAoaW5wdXQpIHtcbiAgLy8gMS4gVG8gaXNvbW9ycGhpYyBkZWNvZGUgYSBieXRlIHNlcXVlbmNlIGlucHV0LCByZXR1cm4gYSBzdHJpbmcgd2hvc2UgY29kZSBwb2ludFxuICAvLyAgICBsZW5ndGggaXMgZXF1YWwgdG8gaW5wdXTigJlzIGxlbmd0aCBhbmQgd2hvc2UgY29kZSBwb2ludHMgaGF2ZSB0aGUgc2FtZSB2YWx1ZXNcbiAgLy8gICAgYXMgdGhlIHZhbHVlcyBvZiBpbnB1dOKAmXMgYnl0ZXMsIGluIHRoZSBzYW1lIG9yZGVyLlxuICBjb25zdCBsZW5ndGggPSBpbnB1dC5sZW5ndGhcbiAgaWYgKCgyIDw8IDE1KSAtIDEgPiBsZW5ndGgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBpbnB1dClcbiAgfVxuICBsZXQgcmVzdWx0ID0gJyc7IGxldCBpID0gMFxuICBsZXQgYWRkaXRpb24gPSAoMiA8PCAxNSkgLSAxXG4gIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgaWYgKGkgKyBhZGRpdGlvbiA+IGxlbmd0aCkge1xuICAgICAgYWRkaXRpb24gPSBsZW5ndGggLSBpXG4gICAgfVxuICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGlucHV0LnN1YmFycmF5KGksIGkgKz0gYWRkaXRpb24pKVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbWltZXNuaWZmLnNwZWMud2hhdHdnLm9yZy8jbWluaW1pemUtYS1zdXBwb3J0ZWQtbWltZS10eXBlXG4gKiBAcGFyYW0ge0V4Y2x1ZGU8UmV0dXJuVHlwZTx0eXBlb2YgcGFyc2VNSU1FVHlwZT4sICdmYWlsdXJlJz59IG1pbWVUeXBlXG4gKi9cbmZ1bmN0aW9uIG1pbmltaXplU3VwcG9ydGVkTWltZVR5cGUgKG1pbWVUeXBlKSB7XG4gIHN3aXRjaCAobWltZVR5cGUuZXNzZW5jZSkge1xuICAgIGNhc2UgJ2FwcGxpY2F0aW9uL2VjbWFzY3JpcHQnOlxuICAgIGNhc2UgJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnOlxuICAgIGNhc2UgJ2FwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdCc6XG4gICAgY2FzZSAnYXBwbGljYXRpb24veC1qYXZhc2NyaXB0JzpcbiAgICBjYXNlICd0ZXh0L2VjbWFzY3JpcHQnOlxuICAgIGNhc2UgJ3RleHQvamF2YXNjcmlwdCc6XG4gICAgY2FzZSAndGV4dC9qYXZhc2NyaXB0MS4wJzpcbiAgICBjYXNlICd0ZXh0L2phdmFzY3JpcHQxLjEnOlxuICAgIGNhc2UgJ3RleHQvamF2YXNjcmlwdDEuMic6XG4gICAgY2FzZSAndGV4dC9qYXZhc2NyaXB0MS4zJzpcbiAgICBjYXNlICd0ZXh0L2phdmFzY3JpcHQxLjQnOlxuICAgIGNhc2UgJ3RleHQvamF2YXNjcmlwdDEuNSc6XG4gICAgY2FzZSAndGV4dC9qc2NyaXB0JzpcbiAgICBjYXNlICd0ZXh0L2xpdmVzY3JpcHQnOlxuICAgIGNhc2UgJ3RleHQveC1lY21hc2NyaXB0JzpcbiAgICBjYXNlICd0ZXh0L3gtamF2YXNjcmlwdCc6XG4gICAgICAvLyAxLiBJZiBtaW1lVHlwZSBpcyBhIEphdmFTY3JpcHQgTUlNRSB0eXBlLCB0aGVuIHJldHVybiBcInRleHQvamF2YXNjcmlwdFwiLlxuICAgICAgcmV0dXJuICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgY2FzZSAnYXBwbGljYXRpb24vanNvbic6XG4gICAgY2FzZSAndGV4dC9qc29uJzpcbiAgICAgIC8vIDIuIElmIG1pbWVUeXBlIGlzIGEgSlNPTiBNSU1FIHR5cGUsIHRoZW4gcmV0dXJuIFwiYXBwbGljYXRpb24vanNvblwiLlxuICAgICAgcmV0dXJuICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIGNhc2UgJ2ltYWdlL3N2Zyt4bWwnOlxuICAgICAgLy8gMy4gSWYgbWltZVR5cGXigJlzIGVzc2VuY2UgaXMgXCJpbWFnZS9zdmcreG1sXCIsIHRoZW4gcmV0dXJuIFwiaW1hZ2Uvc3ZnK3htbFwiLlxuICAgICAgcmV0dXJuICdpbWFnZS9zdmcreG1sJ1xuICAgIGNhc2UgJ3RleHQveG1sJzpcbiAgICBjYXNlICdhcHBsaWNhdGlvbi94bWwnOlxuICAgICAgLy8gNC4gSWYgbWltZVR5cGUgaXMgYW4gWE1MIE1JTUUgdHlwZSwgdGhlbiByZXR1cm4gXCJhcHBsaWNhdGlvbi94bWxcIi5cbiAgICAgIHJldHVybiAnYXBwbGljYXRpb24veG1sJ1xuICB9XG5cbiAgLy8gMi4gSWYgbWltZVR5cGUgaXMgYSBKU09OIE1JTUUgdHlwZSwgdGhlbiByZXR1cm4gXCJhcHBsaWNhdGlvbi9qc29uXCIuXG4gIGlmIChtaW1lVHlwZS5zdWJ0eXBlLmVuZHNXaXRoKCcranNvbicpKSB7XG4gICAgcmV0dXJuICdhcHBsaWNhdGlvbi9qc29uJ1xuICB9XG5cbiAgLy8gNC4gSWYgbWltZVR5cGUgaXMgYW4gWE1MIE1JTUUgdHlwZSwgdGhlbiByZXR1cm4gXCJhcHBsaWNhdGlvbi94bWxcIi5cbiAgaWYgKG1pbWVUeXBlLnN1YnR5cGUuZW5kc1dpdGgoJyt4bWwnKSkge1xuICAgIHJldHVybiAnYXBwbGljYXRpb24veG1sJ1xuICB9XG5cbiAgLy8gNS4gSWYgbWltZVR5cGUgaXMgc3VwcG9ydGVkIGJ5IHRoZSB1c2VyIGFnZW50LCB0aGVuIHJldHVybiBtaW1lVHlwZeKAmXMgZXNzZW5jZS5cbiAgLy8gVGVjaG5pY2FsbHksIG5vZGUgZG9lc24ndCBzdXBwb3J0IGFueSBtaW1ldHlwZXMuXG5cbiAgLy8gNi4gUmV0dXJuIHRoZSBlbXB0eSBzdHJpbmcuXG4gIHJldHVybiAnJ1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGF0YVVSTFByb2Nlc3NvcixcbiAgVVJMU2VyaWFsaXplcixcbiAgY29sbGVjdEFTZXF1ZW5jZU9mQ29kZVBvaW50cyxcbiAgY29sbGVjdEFTZXF1ZW5jZU9mQ29kZVBvaW50c0Zhc3QsXG4gIHN0cmluZ1BlcmNlbnREZWNvZGUsXG4gIHBhcnNlTUlNRVR5cGUsXG4gIGNvbGxlY3RBbkhUVFBRdW90ZWRTdHJpbmcsXG4gIHNlcmlhbGl6ZUFNaW1lVHlwZSxcbiAgcmVtb3ZlQ2hhcnMsXG4gIHJlbW92ZUhUVFBXaGl0ZXNwYWNlLFxuICBtaW5pbWl6ZVN1cHBvcnRlZE1pbWVUeXBlLFxuICBIVFRQX1RPS0VOX0NPREVQT0lOVFMsXG4gIGlzb21vcnBoaWNEZWNvZGVcbn1cbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwiSFRUUF9UT0tFTl9DT0RFUE9JTlRTIiwiSFRUUF9XSElURVNQQUNFX1JFR0VYIiwiQVNDSUlfV0hJVEVTUEFDRV9SRVBMQUNFX1JFR0VYIiwiSFRUUF9RVU9URURfU1RSSU5HX1RPS0VOUyIsImRhdGFVUkxQcm9jZXNzb3IiLCJkYXRhVVJMIiwicHJvdG9jb2wiLCJpbnB1dCIsIlVSTFNlcmlhbGl6ZXIiLCJzbGljZSIsInBvc2l0aW9uIiwibWltZVR5cGUiLCJjb2xsZWN0QVNlcXVlbmNlT2ZDb2RlUG9pbnRzRmFzdCIsIm1pbWVUeXBlTGVuZ3RoIiwibGVuZ3RoIiwicmVtb3ZlQVNDSUlXaGl0ZXNwYWNlIiwiZW5jb2RlZEJvZHkiLCJib2R5Iiwic3RyaW5nUGVyY2VudERlY29kZSIsInRlc3QiLCJzdHJpbmdCb2R5IiwiaXNvbW9ycGhpY0RlY29kZSIsImZvcmdpdmluZ0Jhc2U2NCIsInJlcGxhY2UiLCJzdGFydHNXaXRoIiwibWltZVR5cGVSZWNvcmQiLCJwYXJzZU1JTUVUeXBlIiwidXJsIiwiZXhjbHVkZUZyYWdtZW50IiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiaHJlZiIsImhhc2hMZW5ndGgiLCJoYXNoIiwic2VyaWFsaXplZCIsInN1YnN0cmluZyIsImVuZHNXaXRoIiwiY29sbGVjdEFTZXF1ZW5jZU9mQ29kZVBvaW50cyIsImNvbmRpdGlvbiIsInJlc3VsdCIsImNoYXIiLCJpZHgiLCJpbmRleE9mIiwic3RhcnQiLCJieXRlcyIsImVuY29kZSIsInBlcmNlbnREZWNvZGUiLCJpc0hleENoYXJCeXRlIiwiYnl0ZSIsImhleEJ5dGVUb051bWJlciIsIm91dHB1dCIsIlVpbnQ4QXJyYXkiLCJqIiwiaSIsInN1YmFycmF5IiwicmVtb3ZlSFRUUFdoaXRlc3BhY2UiLCJ0eXBlIiwic3VidHlwZSIsInR5cGVMb3dlcmNhc2UiLCJ0b0xvd2VyQ2FzZSIsInN1YnR5cGVMb3dlcmNhc2UiLCJwYXJhbWV0ZXJzIiwiTWFwIiwiZXNzZW5jZSIsInBhcmFtZXRlck5hbWUiLCJwYXJhbWV0ZXJWYWx1ZSIsImNvbGxlY3RBbkhUVFBRdW90ZWRTdHJpbmciLCJoYXMiLCJzZXQiLCJkYXRhIiwiZGF0YUxlbmd0aCIsImNoYXJDb2RlQXQiLCJidWZmZXIiLCJCdWZmZXIiLCJmcm9tIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJleHRyYWN0VmFsdWUiLCJwb3NpdGlvblN0YXJ0IiwidmFsdWUiLCJxdW90ZU9yQmFja3NsYXNoIiwic2VyaWFsaXplQU1pbWVUeXBlIiwic2VyaWFsaXphdGlvbiIsIm5hbWUiLCJlbnRyaWVzIiwiaXNIVFRQV2hpdGVTcGFjZSIsInN0ciIsImxlYWRpbmciLCJ0cmFpbGluZyIsInJlbW92ZUNoYXJzIiwiaXNBU0NJSVdoaXRlc3BhY2UiLCJwcmVkaWNhdGUiLCJsZWFkIiwidHJhaWwiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImFkZGl0aW9uIiwibWluaW1pemVTdXBwb3J0ZWRNaW1lVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/dispatcher-weakref.js":
/*!*****************************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/dispatcher-weakref.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  kConnected,\n  kSize\n} = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nclass CompatWeakRef {\n  constructor(value) {\n    this.value = value;\n  }\n  deref() {\n    return this.value[kConnected] === 0 && this.value[kSize] === 0 ? undefined : this.value;\n  }\n}\nclass CompatFinalizer {\n  constructor(finalizer) {\n    this.finalizer = finalizer;\n  }\n  register(dispatcher, key) {\n    if (dispatcher.on) {\n      dispatcher.on('disconnect', () => {\n        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {\n          this.finalizer(key);\n        }\n      });\n    }\n  }\n  unregister(key) {}\n}\nmodule.exports = function () {\n  // FIXME: remove workaround when the Node bug is backported to v18\n  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\n  if (process.env.NODE_V8_COVERAGE && process.version.startsWith('v18')) {\n    process._rawDebug('Using compatibility WeakRef and FinalizationRegistry');\n    return {\n      WeakRef: CompatWeakRef,\n      FinalizationRegistry: CompatFinalizer\n    };\n  }\n  return {\n    WeakRef,\n    FinalizationRegistry\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvZGlzcGF0Y2hlci13ZWFrcmVmLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLE1BQU07RUFBRUEsVUFBVTtFQUFFQztBQUFNLENBQUMsR0FBR0MsbUJBQU8sQ0FBQywyRUFBb0IsQ0FBQztBQUUzRCxNQUFNQyxhQUFhLENBQUM7RUFDbEJDLFdBQVdBLENBQUVDLEtBQUssRUFBRTtJQUNsQixJQUFJLENBQUNBLEtBQUssR0FBR0EsS0FBSztFQUNwQjtFQUVBQyxLQUFLQSxDQUFBLEVBQUk7SUFDUCxPQUFPLElBQUksQ0FBQ0QsS0FBSyxDQUFDTCxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDSyxLQUFLLENBQUNKLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FDMURNLFNBQVMsR0FDVCxJQUFJLENBQUNGLEtBQUs7RUFDaEI7QUFDRjtBQUVBLE1BQU1HLGVBQWUsQ0FBQztFQUNwQkosV0FBV0EsQ0FBRUssU0FBUyxFQUFFO0lBQ3RCLElBQUksQ0FBQ0EsU0FBUyxHQUFHQSxTQUFTO0VBQzVCO0VBRUFDLFFBQVFBLENBQUVDLFVBQVUsRUFBRUMsR0FBRyxFQUFFO0lBQ3pCLElBQUlELFVBQVUsQ0FBQ0UsRUFBRSxFQUFFO01BQ2pCRixVQUFVLENBQUNFLEVBQUUsQ0FBQyxZQUFZLEVBQUUsTUFBTTtRQUNoQyxJQUFJRixVQUFVLENBQUNYLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSVcsVUFBVSxDQUFDVixLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7VUFDM0QsSUFBSSxDQUFDUSxTQUFTLENBQUNHLEdBQUcsQ0FBQztRQUNyQjtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0Y7RUFFQUUsVUFBVUEsQ0FBRUYsR0FBRyxFQUFFLENBQUM7QUFDcEI7QUFFQUcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsWUFBWTtFQUMzQjtFQUNBO0VBQ0EsSUFBSUMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLGdCQUFnQixJQUFJRixPQUFPLENBQUNHLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ3JFSixPQUFPLENBQUNLLFNBQVMsQ0FBQyxzREFBc0QsQ0FBQztJQUN6RSxPQUFPO01BQ0xDLE9BQU8sRUFBRXBCLGFBQWE7TUFDdEJxQixvQkFBb0IsRUFBRWhCO0lBQ3hCLENBQUM7RUFDSDtFQUNBLE9BQU87SUFBRWUsT0FBTztJQUFFQztFQUFxQixDQUFDO0FBQzFDLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvZGlzcGF0Y2hlci13ZWFrcmVmLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IGtDb25uZWN0ZWQsIGtTaXplIH0gPSByZXF1aXJlKCcuLi8uLi9jb3JlL3N5bWJvbHMnKVxuXG5jbGFzcyBDb21wYXRXZWFrUmVmIHtcbiAgY29uc3RydWN0b3IgKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gIH1cblxuICBkZXJlZiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVba0Nvbm5lY3RlZF0gPT09IDAgJiYgdGhpcy52YWx1ZVtrU2l6ZV0gPT09IDBcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IHRoaXMudmFsdWVcbiAgfVxufVxuXG5jbGFzcyBDb21wYXRGaW5hbGl6ZXIge1xuICBjb25zdHJ1Y3RvciAoZmluYWxpemVyKSB7XG4gICAgdGhpcy5maW5hbGl6ZXIgPSBmaW5hbGl6ZXJcbiAgfVxuXG4gIHJlZ2lzdGVyIChkaXNwYXRjaGVyLCBrZXkpIHtcbiAgICBpZiAoZGlzcGF0Y2hlci5vbikge1xuICAgICAgZGlzcGF0Y2hlci5vbignZGlzY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgaWYgKGRpc3BhdGNoZXJba0Nvbm5lY3RlZF0gPT09IDAgJiYgZGlzcGF0Y2hlcltrU2l6ZV0gPT09IDApIHtcbiAgICAgICAgICB0aGlzLmZpbmFsaXplcihrZXkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgdW5yZWdpc3RlciAoa2V5KSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gRklYTUU6IHJlbW92ZSB3b3JrYXJvdW5kIHdoZW4gdGhlIE5vZGUgYnVnIGlzIGJhY2twb3J0ZWQgdG8gdjE4XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvNDkzNDQjaXNzdWVjb21tZW50LTE3NDE3NzYzMDhcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfVjhfQ09WRVJBR0UgJiYgcHJvY2Vzcy52ZXJzaW9uLnN0YXJ0c1dpdGgoJ3YxOCcpKSB7XG4gICAgcHJvY2Vzcy5fcmF3RGVidWcoJ1VzaW5nIGNvbXBhdGliaWxpdHkgV2Vha1JlZiBhbmQgRmluYWxpemF0aW9uUmVnaXN0cnknKVxuICAgIHJldHVybiB7XG4gICAgICBXZWFrUmVmOiBDb21wYXRXZWFrUmVmLFxuICAgICAgRmluYWxpemF0aW9uUmVnaXN0cnk6IENvbXBhdEZpbmFsaXplclxuICAgIH1cbiAgfVxuICByZXR1cm4geyBXZWFrUmVmLCBGaW5hbGl6YXRpb25SZWdpc3RyeSB9XG59XG4iXSwibmFtZXMiOlsia0Nvbm5lY3RlZCIsImtTaXplIiwicmVxdWlyZSIsIkNvbXBhdFdlYWtSZWYiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZGVyZWYiLCJ1bmRlZmluZWQiLCJDb21wYXRGaW5hbGl6ZXIiLCJmaW5hbGl6ZXIiLCJyZWdpc3RlciIsImRpc3BhdGNoZXIiLCJrZXkiLCJvbiIsInVucmVnaXN0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvY2VzcyIsImVudiIsIk5PREVfVjhfQ09WRVJBR0UiLCJ2ZXJzaW9uIiwic3RhcnRzV2l0aCIsIl9yYXdEZWJ1ZyIsIldlYWtSZWYiLCJGaW5hbGl6YXRpb25SZWdpc3RyeSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/dispatcher-weakref.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/file.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/file.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  Blob,\n  File\n} = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst {\n  kState\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\n\n// TODO(@KhafraDev): remove\nclass FileLike {\n  constructor(blobLike, fileName) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName;\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type;\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now();\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    };\n  }\n  stream() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.stream(...arguments);\n  }\n  arrayBuffer() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.arrayBuffer(...arguments);\n  }\n  slice() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.slice(...arguments);\n  }\n  text() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.text(...arguments);\n  }\n  get size() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.size;\n  }\n  get type() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.type;\n  }\n  get name() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].name;\n  }\n  get lastModified() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].lastModified;\n  }\n  get [Symbol.toStringTag]() {\n    return 'File';\n  }\n}\nwebidl.converters.Blob = webidl.interfaceConverter(Blob);\n\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike(object) {\n  return object instanceof File || object && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && object[Symbol.toStringTag] === 'File';\n}\nmodule.exports = {\n  FileLike,\n  isFileLike\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/formdata-parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/formdata-parser.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  isUSVString,\n  bufferToLowerCasedHeaderName\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  utf8DecodeBytes\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst {\n  HTTP_TOKEN_CODEPOINTS,\n  isomorphicDecode\n} = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  isFileLike\n} = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/undici/lib/web/fetch/file.js\");\nconst {\n  makeEntry\n} = __webpack_require__(/*! ./formdata */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  File: NodeFile\n} = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst File = globalThis.File ?? NodeFile;\nconst formDataNameBuffer = Buffer.from('form-data; name=\"');\nconst filenameBuffer = Buffer.from('; filename');\nconst dd = Buffer.from('--');\nconst ddcrlf = Buffer.from('--\\r\\n');\n\n/**\n * @param {string} chars\n */\nfunction isAsciiString(chars) {\n  for (let i = 0; i < chars.length; ++i) {\n    if ((chars.charCodeAt(i) & ~0x7F) !== 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @see https://andreubotella.github.io/multipart-form-data/#multipart-form-data-boundary\n * @param {string} boundary\n */\nfunction validateBoundary(boundary) {\n  const length = boundary.length;\n\n  // - its length is greater or equal to 27 and lesser or equal to 70, and\n  if (length < 27 || length > 70) {\n    return false;\n  }\n\n  // - it is composed by bytes in the ranges 0x30 to 0x39, 0x41 to 0x5A, or\n  //   0x61 to 0x7A, inclusive (ASCII alphanumeric), or which are 0x27 ('),\n  //   0x2D (-) or 0x5F (_).\n  for (let i = 0; i < length; ++i) {\n    const cp = boundary.charCodeAt(i);\n    if (!(cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x5a || cp >= 0x61 && cp <= 0x7a || cp === 0x27 || cp === 0x2d || cp === 0x5f)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @see https://andreubotella.github.io/multipart-form-data/#multipart-form-data-parser\n * @param {Buffer} input\n * @param {ReturnType<import('./data-url')['parseMIMEType']>} mimeType\n */\nfunction multipartFormDataParser(input, mimeType) {\n  // 1. Assert: mimeType’s essence is \"multipart/form-data\".\n  assert(mimeType !== 'failure' && mimeType.essence === 'multipart/form-data');\n  const boundaryString = mimeType.parameters.get('boundary');\n\n  // 2. If mimeType’s parameters[\"boundary\"] does not exist, return failure.\n  //    Otherwise, let boundary be the result of UTF-8 decoding mimeType’s\n  //    parameters[\"boundary\"].\n  if (boundaryString === undefined) {\n    return 'failure';\n  }\n  const boundary = Buffer.from(`--${boundaryString}`, 'utf8');\n\n  // 3. Let entry list be an empty entry list.\n  const entryList = [];\n\n  // 4. Let position be a pointer to a byte in input, initially pointing at\n  //    the first byte.\n  const position = {\n    position: 0\n  };\n\n  // Note: undici addition, allow \\r\\n before the body.\n  if (input[0] === 0x0d && input[1] === 0x0a) {\n    position.position += 2;\n  }\n\n  // 5. While true:\n  while (true) {\n    // 5.1. If position points to a sequence of bytes starting with 0x2D 0x2D\n    //      (`--`) followed by boundary, advance position by 2 + the length of\n    //      boundary. Otherwise, return failure.\n    // Note: boundary is padded with 2 dashes already, no need to add 2.\n    if (input.subarray(position.position, position.position + boundary.length).equals(boundary)) {\n      position.position += boundary.length;\n    } else {\n      return 'failure';\n    }\n\n    // 5.2. If position points to the sequence of bytes 0x2D 0x2D 0x0D 0x0A\n    //      (`--` followed by CR LF) followed by the end of input, return entry list.\n    // Note: a body does NOT need to end with CRLF. It can end with --.\n    if (position.position === input.length - 2 && bufferStartsWith(input, dd, position) || position.position === input.length - 4 && bufferStartsWith(input, ddcrlf, position)) {\n      return entryList;\n    }\n\n    // 5.3. If position does not point to a sequence of bytes starting with 0x0D\n    //      0x0A (CR LF), return failure.\n    if (input[position.position] !== 0x0d || input[position.position + 1] !== 0x0a) {\n      return 'failure';\n    }\n\n    // 5.4. Advance position by 2. (This skips past the newline.)\n    position.position += 2;\n\n    // 5.5. Let name, filename and contentType be the result of parsing\n    //      multipart/form-data headers on input and position, if the result\n    //      is not failure. Otherwise, return failure.\n    const result = parseMultipartFormDataHeaders(input, position);\n    if (result === 'failure') {\n      return 'failure';\n    }\n    let {\n      name,\n      filename,\n      contentType,\n      encoding\n    } = result;\n\n    // 5.6. Advance position by 2. (This skips past the empty line that marks\n    //      the end of the headers.)\n    position.position += 2;\n\n    // 5.7. Let body be the empty byte sequence.\n    let body;\n\n    // 5.8. Body loop: While position is not past the end of input:\n    // TODO: the steps here are completely wrong\n    {\n      const boundaryIndex = input.indexOf(boundary.subarray(2), position.position);\n      if (boundaryIndex === -1) {\n        return 'failure';\n      }\n      body = input.subarray(position.position, boundaryIndex - 4);\n      position.position += body.length;\n\n      // Note: position must be advanced by the body's length before being\n      // decoded, otherwise the parsing will fail.\n      if (encoding === 'base64') {\n        body = Buffer.from(body.toString(), 'base64');\n      }\n    }\n\n    // 5.9. If position does not point to a sequence of bytes starting with\n    //      0x0D 0x0A (CR LF), return failure. Otherwise, advance position by 2.\n    if (input[position.position] !== 0x0d || input[position.position + 1] !== 0x0a) {\n      return 'failure';\n    } else {\n      position.position += 2;\n    }\n\n    // 5.10. If filename is not null:\n    let value;\n    if (filename !== null) {\n      // 5.10.1. If contentType is null, set contentType to \"text/plain\".\n      contentType ??= 'text/plain';\n\n      // 5.10.2. If contentType is not an ASCII string, set contentType to the empty string.\n\n      // Note: `buffer.isAscii` can be used at zero-cost, but converting a string to a buffer is a high overhead.\n      // Content-Type is a relatively small string, so it is faster to use `String#charCodeAt`.\n      if (!isAsciiString(contentType)) {\n        contentType = '';\n      }\n\n      // 5.10.3. Let value be a new File object with name filename, type contentType, and body body.\n      value = new File([body], filename, {\n        type: contentType\n      });\n    } else {\n      // 5.11. Otherwise:\n\n      // 5.11.1. Let value be the UTF-8 decoding without BOM of body.\n      value = utf8DecodeBytes(Buffer.from(body));\n    }\n\n    // 5.12. Assert: name is a scalar value string and value is either a scalar value string or a File object.\n    assert(isUSVString(name));\n    assert(typeof value === 'string' && isUSVString(value) || isFileLike(value));\n\n    // 5.13. Create an entry with name and value, and append it to entry list.\n    entryList.push(makeEntry(name, value, filename));\n  }\n}\n\n/**\n * @see https://andreubotella.github.io/multipart-form-data/#parse-multipart-form-data-headers\n * @param {Buffer} input\n * @param {{ position: number }} position\n */\nfunction parseMultipartFormDataHeaders(input, position) {\n  // 1. Let name, filename and contentType be null.\n  let name = null;\n  let filename = null;\n  let contentType = null;\n  let encoding = null;\n\n  // 2. While true:\n  while (true) {\n    // 2.1. If position points to a sequence of bytes starting with 0x0D 0x0A (CR LF):\n    if (input[position.position] === 0x0d && input[position.position + 1] === 0x0a) {\n      // 2.1.1. If name is null, return failure.\n      if (name === null) {\n        return 'failure';\n      }\n\n      // 2.1.2. Return name, filename and contentType.\n      return {\n        name,\n        filename,\n        contentType,\n        encoding\n      };\n    }\n\n    // 2.2. Let header name be the result of collecting a sequence of bytes that are\n    //      not 0x0A (LF), 0x0D (CR) or 0x3A (:), given position.\n    let headerName = collectASequenceOfBytes(char => char !== 0x0a && char !== 0x0d && char !== 0x3a, input, position);\n\n    // 2.3. Remove any HTTP tab or space bytes from the start or end of header name.\n    headerName = removeChars(headerName, true, true, char => char === 0x9 || char === 0x20);\n\n    // 2.4. If header name does not match the field-name token production, return failure.\n    if (!HTTP_TOKEN_CODEPOINTS.test(headerName.toString())) {\n      return 'failure';\n    }\n\n    // 2.5. If the byte at position is not 0x3A (:), return failure.\n    if (input[position.position] !== 0x3a) {\n      return 'failure';\n    }\n\n    // 2.6. Advance position by 1.\n    position.position++;\n\n    // 2.7. Collect a sequence of bytes that are HTTP tab or space bytes given position.\n    //      (Do nothing with those bytes.)\n    collectASequenceOfBytes(char => char === 0x20 || char === 0x09, input, position);\n\n    // 2.8. Byte-lowercase header name and switch on the result:\n    switch (bufferToLowerCasedHeaderName(headerName)) {\n      case 'content-disposition':\n        {\n          // 1. Set name and filename to null.\n          name = filename = null;\n\n          // 2. If position does not point to a sequence of bytes starting with\n          //    `form-data; name=\"`, return failure.\n          if (!bufferStartsWith(input, formDataNameBuffer, position)) {\n            return 'failure';\n          }\n\n          // 3. Advance position so it points at the byte after the next 0x22 (\")\n          //    byte (the one in the sequence of bytes matched above).\n          position.position += 17;\n\n          // 4. Set name to the result of parsing a multipart/form-data name given\n          //    input and position, if the result is not failure. Otherwise, return\n          //    failure.\n          name = parseMultipartFormDataName(input, position);\n          if (name === null) {\n            return 'failure';\n          }\n\n          // 5. If position points to a sequence of bytes starting with `; filename=\"`:\n          if (bufferStartsWith(input, filenameBuffer, position)) {\n            // Note: undici also handles filename*\n            let check = position.position + filenameBuffer.length;\n            if (input[check] === 0x2a) {\n              position.position += 1;\n              check += 1;\n            }\n            if (input[check] !== 0x3d || input[check + 1] !== 0x22) {\n              // =\"\n              return 'failure';\n            }\n\n            // 1. Advance position so it points at the byte after the next 0x22 (\") byte\n            //    (the one in the sequence of bytes matched above).\n            position.position += 12;\n\n            // 2. Set filename to the result of parsing a multipart/form-data name given\n            //    input and position, if the result is not failure. Otherwise, return failure.\n            filename = parseMultipartFormDataName(input, position);\n            if (filename === null) {\n              return 'failure';\n            }\n          }\n          break;\n        }\n      case 'content-type':\n        {\n          // 1. Let header value be the result of collecting a sequence of bytes that are\n          //    not 0x0A (LF) or 0x0D (CR), given position.\n          let headerValue = collectASequenceOfBytes(char => char !== 0x0a && char !== 0x0d, input, position);\n\n          // 2. Remove any HTTP tab or space bytes from the end of header value.\n          headerValue = removeChars(headerValue, false, true, char => char === 0x9 || char === 0x20);\n\n          // 3. Set contentType to the isomorphic decoding of header value.\n          contentType = isomorphicDecode(headerValue);\n          break;\n        }\n      case 'content-transfer-encoding':\n        {\n          let headerValue = collectASequenceOfBytes(char => char !== 0x0a && char !== 0x0d, input, position);\n          headerValue = removeChars(headerValue, false, true, char => char === 0x9 || char === 0x20);\n          encoding = isomorphicDecode(headerValue);\n          break;\n        }\n      default:\n        {\n          // Collect a sequence of bytes that are not 0x0A (LF) or 0x0D (CR), given position.\n          // (Do nothing with those bytes.)\n          collectASequenceOfBytes(char => char !== 0x0a && char !== 0x0d, input, position);\n        }\n    }\n\n    // 2.9. If position does not point to a sequence of bytes starting with 0x0D 0x0A\n    //      (CR LF), return failure. Otherwise, advance position by 2 (past the newline).\n    if (input[position.position] !== 0x0d && input[position.position + 1] !== 0x0a) {\n      return 'failure';\n    } else {\n      position.position += 2;\n    }\n  }\n}\n\n/**\n * @see https://andreubotella.github.io/multipart-form-data/#parse-a-multipart-form-data-name\n * @param {Buffer} input\n * @param {{ position: number }} position\n */\nfunction parseMultipartFormDataName(input, position) {\n  // 1. Assert: The byte at (position - 1) is 0x22 (\").\n  assert(input[position.position - 1] === 0x22);\n\n  // 2. Let name be the result of collecting a sequence of bytes that are not 0x0A (LF), 0x0D (CR) or 0x22 (\"), given position.\n  /** @type {string | Buffer} */\n  let name = collectASequenceOfBytes(char => char !== 0x0a && char !== 0x0d && char !== 0x22, input, position);\n\n  // 3. If the byte at position is not 0x22 (\"), return failure. Otherwise, advance position by 1.\n  if (input[position.position] !== 0x22) {\n    return null; // name could be 'failure'\n  } else {\n    position.position++;\n  }\n\n  // 4. Replace any occurrence of the following subsequences in name with the given byte:\n  // - `%0A`: 0x0A (LF)\n  // - `%0D`: 0x0D (CR)\n  // - `%22`: 0x22 (\")\n  name = new TextDecoder().decode(name).replace(/%0A/ig, '\\n').replace(/%0D/ig, '\\r').replace(/%22/g, '\"');\n\n  // 5. Return the UTF-8 decoding without BOM of name.\n  return name;\n}\n\n/**\n * @param {(char: number) => boolean} condition\n * @param {Buffer} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfBytes(condition, input, position) {\n  let start = position.position;\n  while (start < input.length && condition(input[start])) {\n    ++start;\n  }\n  return input.subarray(position.position, position.position = start);\n}\n\n/**\n * @param {Buffer} buf\n * @param {boolean} leading\n * @param {boolean} trailing\n * @param {(charCode: number) => boolean} predicate\n * @returns {Buffer}\n */\nfunction removeChars(buf, leading, trailing, predicate) {\n  let lead = 0;\n  let trail = buf.length - 1;\n  if (leading) {\n    while (lead < buf.length && predicate(buf[lead])) lead++;\n  }\n  if (trailing) {\n    while (trail > 0 && predicate(buf[trail])) trail--;\n  }\n  return lead === 0 && trail === buf.length - 1 ? buf : buf.subarray(lead, trail + 1);\n}\n\n/**\n * Checks if {@param buffer} starts with {@param start}\n * @param {Buffer} buffer\n * @param {Buffer} start\n * @param {{ position: number }} position\n */\nfunction bufferStartsWith(buffer, start, position) {\n  if (buffer.length < start.length) {\n    return false;\n  }\n  for (let i = 0; i < start.length; i++) {\n    if (start[i] !== buffer[position.position + i]) {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = {\n  multipartFormDataParser,\n  validateBoundary\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/formdata-parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/formdata.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/formdata.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  isBlobLike,\n  iteratorMixin\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst {\n  kState\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst {\n  kEnumerableProperty\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  FileLike,\n  isFileLike\n} = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/undici/lib/web/fetch/file.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  File: NativeFile\n} = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst nodeUtil = __webpack_require__(/*! node:util */ \"node:util\");\n\n/** @type {globalThis['File']} */\nconst File = globalThis.File ?? NativeFile;\n\n// https://xhr.spec.whatwg.org/#formdata\nclass FormData {\n  constructor(form) {\n    if (form !== undefined) {\n      throw webidl.errors.conversionFailed({\n        prefix: 'FormData constructor',\n        argument: 'Argument 1',\n        types: ['undefined']\n      });\n    }\n    this[kState] = [];\n  }\n  append(name, value) {\n    let filename = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    webidl.brandCheck(this, FormData);\n    const prefix = 'FormData.append';\n    webidl.argumentLengthCheck(arguments, 2, prefix);\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\");\n    }\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name, prefix, 'name');\n    value = isBlobLike(value) ? webidl.converters.Blob(value, prefix, 'value', {\n      strict: false\n    }) : webidl.converters.USVString(value, prefix, 'value');\n    filename = arguments.length === 3 ? webidl.converters.USVString(filename, prefix, 'filename') : undefined;\n\n    // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n    const entry = makeEntry(name, value, filename);\n\n    // 3. Append entry to this’s entry list.\n    this[kState].push(entry);\n  }\n  delete(name) {\n    webidl.brandCheck(this, FormData);\n    const prefix = 'FormData.delete';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    name = webidl.converters.USVString(name, prefix, 'name');\n\n    // The delete(name) method steps are to remove all entries whose name\n    // is name from this’s entry list.\n    this[kState] = this[kState].filter(entry => entry.name !== name);\n  }\n  get(name) {\n    webidl.brandCheck(this, FormData);\n    const prefix = 'FormData.get';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    name = webidl.converters.USVString(name, prefix, 'name');\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return null.\n    const idx = this[kState].findIndex(entry => entry.name === name);\n    if (idx === -1) {\n      return null;\n    }\n\n    // 2. Return the value of the first entry whose name is name from\n    // this’s entry list.\n    return this[kState][idx].value;\n  }\n  getAll(name) {\n    webidl.brandCheck(this, FormData);\n    const prefix = 'FormData.getAll';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    name = webidl.converters.USVString(name, prefix, 'name');\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this’s entry list.\n    return this[kState].filter(entry => entry.name === name).map(entry => entry.value);\n  }\n  has(name) {\n    webidl.brandCheck(this, FormData);\n    const prefix = 'FormData.has';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    name = webidl.converters.USVString(name, prefix, 'name');\n\n    // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this’s entry list; otherwise false.\n    return this[kState].findIndex(entry => entry.name === name) !== -1;\n  }\n  set(name, value) {\n    let filename = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    webidl.brandCheck(this, FormData);\n    const prefix = 'FormData.set';\n    webidl.argumentLengthCheck(arguments, 2, prefix);\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\");\n    }\n\n    // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name, prefix, 'name');\n    value = isBlobLike(value) ? webidl.converters.Blob(value, prefix, 'name', {\n      strict: false\n    }) : webidl.converters.USVString(value, prefix, 'name');\n    filename = arguments.length === 3 ? webidl.converters.USVString(filename, prefix, 'name') : undefined;\n\n    // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n    const entry = makeEntry(name, value, filename);\n\n    // 3. If there are entries in this’s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n    const idx = this[kState].findIndex(entry => entry.name === name);\n    if (idx !== -1) {\n      this[kState] = [...this[kState].slice(0, idx), entry, ...this[kState].slice(idx + 1).filter(entry => entry.name !== name)];\n    } else {\n      // 4. Otherwise, append entry to this’s entry list.\n      this[kState].push(entry);\n    }\n  }\n  [nodeUtil.inspect.custom](depth, options) {\n    const state = this[kState].reduce((a, b) => {\n      if (a[b.name]) {\n        if (Array.isArray(a[b.name])) {\n          a[b.name].push(b.value);\n        } else {\n          a[b.name] = [a[b.name], b.value];\n        }\n      } else {\n        a[b.name] = b.value;\n      }\n      return a;\n    }, {\n      __proto__: null\n    });\n    options.depth ??= depth;\n    options.colors ??= true;\n    const output = nodeUtil.formatWithOptions(options, state);\n\n    // remove [Object null prototype]\n    return `FormData ${output.slice(output.indexOf(']') + 2)}`;\n  }\n}\niteratorMixin('FormData', FormData, kState, 'name', 'value');\nObject.defineProperties(FormData.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  getAll: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'FormData',\n    configurable: true\n  }\n});\n\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */\nfunction makeEntry(name, value, filename) {\n  // 1. Set name to the result of converting name into a scalar value string.\n  // Note: This operation was done by the webidl converter USVString.\n\n  // 2. If value is a string, then set value to the result of converting\n  //    value into a scalar value string.\n  if (typeof value === 'string') {\n    // Note: This operation was done by the webidl converter USVString.\n  } else {\n    // 3. Otherwise:\n\n    // 1. If value is not a File object, then set value to a new File object,\n    //    representing the same bytes, whose name attribute value is \"blob\"\n    if (!isFileLike(value)) {\n      value = value instanceof Blob ? new File([value], 'blob', {\n        type: value.type\n      }) : new FileLike(value, 'blob', {\n        type: value.type\n      });\n    }\n\n    // 2. If filename is given, then set value to a new File object,\n    //    representing the same bytes, whose name attribute is filename.\n    if (filename !== undefined) {\n      /** @type {FilePropertyBag} */\n      const options = {\n        type: value.type,\n        lastModified: value.lastModified\n      };\n      value = value instanceof NativeFile ? new File([value], filename, options) : new FileLike(value, filename, options);\n    }\n  }\n\n  // 4. Return an entry whose name is name and whose value is value.\n  return {\n    name,\n    value\n  };\n}\nmodule.exports = {\n  FormData,\n  makeEntry\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/global.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/global.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// In case of breaking changes, increase the version\n// number to avoid conflicts.\nconst globalOrigin = Symbol.for('undici.globalOrigin.1');\nfunction getGlobalOrigin() {\n  return globalThis[globalOrigin];\n}\nfunction setGlobalOrigin(newOrigin) {\n  if (newOrigin === undefined) {\n    Object.defineProperty(globalThis, globalOrigin, {\n      value: undefined,\n      writable: true,\n      enumerable: false,\n      configurable: false\n    });\n    return;\n  }\n  const parsedURL = new URL(newOrigin);\n  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {\n    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);\n  }\n  Object.defineProperty(globalThis, globalOrigin, {\n    value: parsedURL,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  });\n}\nmodule.exports = {\n  getGlobalOrigin,\n  setGlobalOrigin\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvZ2xvYmFsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaO0FBQ0E7QUFDQSxNQUFNQSxZQUFZLEdBQUdDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLHVCQUF1QixDQUFDO0FBRXhELFNBQVNDLGVBQWVBLENBQUEsRUFBSTtFQUMxQixPQUFPQyxVQUFVLENBQUNKLFlBQVksQ0FBQztBQUNqQztBQUVBLFNBQVNLLGVBQWVBLENBQUVDLFNBQVMsRUFBRTtFQUNuQyxJQUFJQSxTQUFTLEtBQUtDLFNBQVMsRUFBRTtJQUMzQkMsTUFBTSxDQUFDQyxjQUFjLENBQUNMLFVBQVUsRUFBRUosWUFBWSxFQUFFO01BQzlDVSxLQUFLLEVBQUVILFNBQVM7TUFDaEJJLFFBQVEsRUFBRSxJQUFJO01BQ2RDLFVBQVUsRUFBRSxLQUFLO01BQ2pCQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQyxDQUFDO0lBRUY7RUFDRjtFQUVBLE1BQU1DLFNBQVMsR0FBRyxJQUFJQyxHQUFHLENBQUNULFNBQVMsQ0FBQztFQUVwQyxJQUFJUSxTQUFTLENBQUNFLFFBQVEsS0FBSyxPQUFPLElBQUlGLFNBQVMsQ0FBQ0UsUUFBUSxLQUFLLFFBQVEsRUFBRTtJQUNyRSxNQUFNLElBQUlDLFNBQVMsQ0FBQyxnREFBZ0RILFNBQVMsQ0FBQ0UsUUFBUSxFQUFFLENBQUM7RUFDM0Y7RUFFQVIsTUFBTSxDQUFDQyxjQUFjLENBQUNMLFVBQVUsRUFBRUosWUFBWSxFQUFFO0lBQzlDVSxLQUFLLEVBQUVJLFNBQVM7SUFDaEJILFFBQVEsRUFBRSxJQUFJO0lBQ2RDLFVBQVUsRUFBRSxLQUFLO0lBQ2pCQyxZQUFZLEVBQUU7RUFDaEIsQ0FBQyxDQUFDO0FBQ0o7QUFFQUssTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZmhCLGVBQWU7RUFDZkU7QUFDRixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvd2ViL2ZldGNoL2dsb2JhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLy8gSW4gY2FzZSBvZiBicmVha2luZyBjaGFuZ2VzLCBpbmNyZWFzZSB0aGUgdmVyc2lvblxuLy8gbnVtYmVyIHRvIGF2b2lkIGNvbmZsaWN0cy5cbmNvbnN0IGdsb2JhbE9yaWdpbiA9IFN5bWJvbC5mb3IoJ3VuZGljaS5nbG9iYWxPcmlnaW4uMScpXG5cbmZ1bmN0aW9uIGdldEdsb2JhbE9yaWdpbiAoKSB7XG4gIHJldHVybiBnbG9iYWxUaGlzW2dsb2JhbE9yaWdpbl1cbn1cblxuZnVuY3Rpb24gc2V0R2xvYmFsT3JpZ2luIChuZXdPcmlnaW4pIHtcbiAgaWYgKG5ld09yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbFRoaXMsIGdsb2JhbE9yaWdpbiwge1xuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgfSlcblxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgcGFyc2VkVVJMID0gbmV3IFVSTChuZXdPcmlnaW4pXG5cbiAgaWYgKHBhcnNlZFVSTC5wcm90b2NvbCAhPT0gJ2h0dHA6JyAmJiBwYXJzZWRVUkwucHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgT25seSBodHRwICYgaHR0cHMgdXJscyBhcmUgYWxsb3dlZCwgcmVjZWl2ZWQgJHtwYXJzZWRVUkwucHJvdG9jb2x9YClcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxUaGlzLCBnbG9iYWxPcmlnaW4sIHtcbiAgICB2YWx1ZTogcGFyc2VkVVJMLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEdsb2JhbE9yaWdpbixcbiAgc2V0R2xvYmFsT3JpZ2luXG59XG4iXSwibmFtZXMiOlsiZ2xvYmFsT3JpZ2luIiwiU3ltYm9sIiwiZm9yIiwiZ2V0R2xvYmFsT3JpZ2luIiwiZ2xvYmFsVGhpcyIsInNldEdsb2JhbE9yaWdpbiIsIm5ld09yaWdpbiIsInVuZGVmaW5lZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJwYXJzZWRVUkwiLCJVUkwiLCJwcm90b2NvbCIsIlR5cGVFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/headers.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/headers.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// https://github.com/Ethan-Arrowood/undici-fetch\n\n\n\nlet _util$inspect$custom;\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nconst {\n  kConstruct\n} = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst {\n  kEnumerableProperty\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  iteratorMixin,\n  isValidHeaderName,\n  isValidHeaderValue\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst kHeadersMap = Symbol('headers map');\nconst kHeadersSortedMap = Symbol('headers map sorted');\n\n/**\n * @param {number} code\n */\nfunction isHTTPWhiteSpaceCharCode(code) {\n  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020;\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize(potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n  let i = 0;\n  let j = potentialValue.length;\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i;\n  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);\n}\nfunction fill(headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; ++i) {\n      const header = object[i];\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        });\n      }\n\n      // 2. Append (header’s first item, header’s second item) to headers.\n      appendHeader(headers, header[0], header[1]);\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key → value in object,\n    //    append (key, value) to headers\n    const keys = Object.keys(object);\n    for (let i = 0; i < keys.length; ++i) {\n      appendHeader(headers, keys[i], object[keys[i]]);\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    });\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-headers-append\n */\nfunction appendHeader(headers, name, value) {\n  // 1. Normalize value.\n  value = headerValueNormalize(value);\n\n  // 2. If name is not a header name or value is not a\n  //    header value, then throw a TypeError.\n  if (!isValidHeaderName(name)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value: name,\n      type: 'header name'\n    });\n  } else if (!isValidHeaderValue(value)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value,\n      type: 'header value'\n    });\n  }\n\n  // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n  // 4. Otherwise, if headers’s guard is \"request\" and name is a\n  //    forbidden header name, return.\n  // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n  //    TODO\n  // Note: undici does not implement forbidden header names\n  if (getHeadersGuard(headers) === 'immutable') {\n    throw new TypeError('immutable');\n  }\n\n  // 6. Otherwise, if headers’s guard is \"response\" and name is a\n  //    forbidden response-header name, return.\n\n  // 7. Append (name, value) to headers’s header list.\n  return getHeadersList(headers).append(name, value, false);\n\n  // 8. If headers’s guard is \"request-no-cors\", then remove\n  //    privileged no-CORS request headers from headers\n}\nfunction compareHeaderName(a, b) {\n  return a[0] < b[0] ? -1 : 1;\n}\nclass HeadersList {\n  constructor(init) {\n    /** @type {[string, string][]|null} */\n    _defineProperty(this, \"cookies\", null);\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap]);\n      this[kHeadersSortedMap] = init[kHeadersSortedMap];\n      this.cookies = init.cookies === null ? null : [...init.cookies];\n    } else {\n      this[kHeadersMap] = new Map(init);\n      this[kHeadersSortedMap] = null;\n    }\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#header-list-contains\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   */\n  contains(name, isLowerCase) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n\n    return this[kHeadersMap].has(isLowerCase ? name : name.toLowerCase());\n  }\n  clear() {\n    this[kHeadersMap].clear();\n    this[kHeadersSortedMap] = null;\n    this.cookies = null;\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-append\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} isLowerCase\n   */\n  append(name, value, isLowerCase) {\n    this[kHeadersSortedMap] = null;\n\n    // 1. If list contains name, then set name to the first such\n    //    header’s name.\n    const lowercaseName = isLowerCase ? name : name.toLowerCase();\n    const exists = this[kHeadersMap].get(lowercaseName);\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      const delimiter = lowercaseName === 'cookie' ? '; ' : ', ';\n      this[kHeadersMap].set(lowercaseName, {\n        name: exists.name,\n        value: `${exists.value}${delimiter}${value}`\n      });\n    } else {\n      this[kHeadersMap].set(lowercaseName, {\n        name,\n        value\n      });\n    }\n    if (lowercaseName === 'set-cookie') {\n      (this.cookies ??= []).push(value);\n    }\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-set\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} isLowerCase\n   */\n  set(name, value, isLowerCase) {\n    this[kHeadersSortedMap] = null;\n    const lowercaseName = isLowerCase ? name : name.toLowerCase();\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [value];\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    this[kHeadersMap].set(lowercaseName, {\n      name,\n      value\n    });\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-delete\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   */\n  delete(name, isLowerCase) {\n    this[kHeadersSortedMap] = null;\n    if (!isLowerCase) name = name.toLowerCase();\n    if (name === 'set-cookie') {\n      this.cookies = null;\n    }\n    this[kHeadersMap].delete(name);\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-get\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   * @returns {string | null}\n   */\n  get(name, isLowerCase) {\n    // 1. If list does not contain name, then return null.\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return this[kHeadersMap].get(isLowerCase ? name : name.toLowerCase())?.value ?? null;\n  }\n  *[Symbol.iterator]() {\n    // use the lowercased name\n    for (const {\n      0: name,\n      1: {\n        value\n      }\n    } of this[kHeadersMap]) {\n      yield [name, value];\n    }\n  }\n  get entries() {\n    const headers = {};\n    if (this[kHeadersMap].size !== 0) {\n      for (const {\n        name,\n        value\n      } of this[kHeadersMap].values()) {\n        headers[name] = value;\n      }\n    }\n    return headers;\n  }\n  rawValues() {\n    return this[kHeadersMap].values();\n  }\n  get entriesList() {\n    const headers = [];\n    if (this[kHeadersMap].size !== 0) {\n      for (const {\n        0: lowerName,\n        1: {\n          name,\n          value\n        }\n      } of this[kHeadersMap]) {\n        if (lowerName === 'set-cookie') {\n          for (const cookie of this.cookies) {\n            headers.push([name, cookie]);\n          }\n        } else {\n          headers.push([name, value]);\n        }\n      }\n    }\n    return headers;\n  }\n\n  // https://fetch.spec.whatwg.org/#convert-header-names-to-a-sorted-lowercase-set\n  toSortedArray() {\n    const size = this[kHeadersMap].size;\n    const array = new Array(size);\n    // In most cases, you will use the fast-path.\n    // fast-path: Use binary insertion sort for small arrays.\n    if (size <= 32) {\n      if (size === 0) {\n        // If empty, it is an empty array. To avoid the first index assignment.\n        return array;\n      }\n      // Improve performance by unrolling loop and avoiding double-loop.\n      // Double-loop-less version of the binary insertion sort.\n      const iterator = this[kHeadersMap][Symbol.iterator]();\n      const firstValue = iterator.next().value;\n      // set [name, value] to first index.\n      array[0] = [firstValue[0], firstValue[1].value];\n      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n      // 3.2.2. Assert: value is non-null.\n      assert(firstValue[1].value !== null);\n      for (let i = 1, j = 0, right = 0, left = 0, pivot = 0, x, value; i < size; ++i) {\n        // get next value\n        value = iterator.next().value;\n        // set [name, value] to current index.\n        x = array[i] = [value[0], value[1].value];\n        // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n        // 3.2.2. Assert: value is non-null.\n        assert(x[1] !== null);\n        left = 0;\n        right = i;\n        // binary search\n        while (left < right) {\n          // middle index\n          pivot = left + (right - left >> 1);\n          // compare header name\n          if (array[pivot][0] <= x[0]) {\n            left = pivot + 1;\n          } else {\n            right = pivot;\n          }\n        }\n        if (i !== pivot) {\n          j = i;\n          while (j > left) {\n            array[j] = array[--j];\n          }\n          array[left] = x;\n        }\n      }\n      /* c8 ignore next 4 */\n      if (!iterator.next().done) {\n        // This is for debugging and will never be called.\n        throw new TypeError('Unreachable');\n      }\n      return array;\n    } else {\n      // This case would be a rare occurrence.\n      // slow-path: fallback\n      let i = 0;\n      for (const {\n        0: name,\n        1: {\n          value\n        }\n      } of this[kHeadersMap]) {\n        array[i++] = [name, value];\n        // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n        // 3.2.2. Assert: value is non-null.\n        assert(value !== null);\n      }\n      return array.sort(compareHeaderName);\n    }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nvar _guard = /*#__PURE__*/new WeakMap();\nvar _headersList = /*#__PURE__*/new WeakMap();\n_util$inspect$custom = util.inspect.custom;\nclass Headers {\n  constructor() {\n    let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    _classPrivateFieldInitSpec(this, _guard, void 0);\n    _classPrivateFieldInitSpec(this, _headersList, void 0);\n    if (init === kConstruct) {\n      return;\n    }\n    _classPrivateFieldSet(_headersList, this, new HeadersList());\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this’s guard to \"none\".\n    _classPrivateFieldSet(_guard, this, 'none');\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init, 'Headers contructor', 'init');\n      fill(this, init);\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append(name, value) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 2, 'Headers.append');\n    const prefix = 'Headers.append';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n    value = webidl.converters.ByteString(value, prefix, 'value');\n    return appendHeader(this, name, value);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, 'Headers.delete');\n    const prefix = 'Headers.delete';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. If this’s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this’s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (_classPrivateFieldGet(_guard, this) === 'immutable') {\n      throw new TypeError('immutable');\n    }\n\n    // 6. If this’s header list does not contain name, then\n    //    return.\n    if (!_classPrivateFieldGet(_headersList, this).contains(name, false)) {\n      return;\n    }\n\n    // 7. Delete name from this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    _classPrivateFieldGet(_headersList, this).delete(name, false);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, 'Headers.get');\n    const prefix = 'Headers.get';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. Return the result of getting name from this’s header\n    //    list.\n    return _classPrivateFieldGet(_headersList, this).get(name, false);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, 'Headers.has');\n    const prefix = 'Headers.has';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. Return true if this’s header list contains name;\n    //    otherwise false.\n    return _classPrivateFieldGet(_headersList, this).contains(name, false);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set(name, value) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 2, 'Headers.set');\n    const prefix = 'Headers.set';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n    value = webidl.converters.ByteString(value, prefix, 'value');\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value);\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value: name,\n        type: 'header name'\n      });\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value,\n        type: 'header value'\n      });\n    }\n\n    // 3. If this’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (_classPrivateFieldGet(_guard, this) === 'immutable') {\n      throw new TypeError('immutable');\n    }\n\n    // 7. Set (name, value) in this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    _classPrivateFieldGet(_headersList, this).set(name, value, false);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n  getSetCookie() {\n    webidl.brandCheck(this, Headers);\n\n    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».\n    // 2. Return the values of all headers in this’s header list whose name is\n    //    a byte-case-insensitive match for `Set-Cookie`, in order.\n\n    const list = _classPrivateFieldGet(_headersList, this).cookies;\n    if (list) {\n      return [...list];\n    }\n    return [];\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n  get [kHeadersSortedMap]() {\n    if (_classPrivateFieldGet(_headersList, this)[kHeadersSortedMap]) {\n      return _classPrivateFieldGet(_headersList, this)[kHeadersSortedMap];\n    }\n\n    // 1. Let headers be an empty list of headers with the key being the name\n    //    and value the value.\n    const headers = [];\n\n    // 2. Let names be the result of convert header names to a sorted-lowercase\n    //    set with all the names of the headers in list.\n    const names = _classPrivateFieldGet(_headersList, this).toSortedArray();\n    const cookies = _classPrivateFieldGet(_headersList, this).cookies;\n\n    // fast-path\n    if (cookies === null || cookies.length === 1) {\n      // Note: The non-null assertion of value has already been done by `HeadersList#toSortedArray`\n      return _classPrivateFieldGet(_headersList, this)[kHeadersSortedMap] = names;\n    }\n\n    // 3. For each name of names:\n    for (let i = 0; i < names.length; ++i) {\n      const {\n        0: name,\n        1: value\n      } = names[i];\n      // 1. If name is `set-cookie`, then:\n      if (name === 'set-cookie') {\n        // 1. Let values be a list of all values of headers in list whose name\n        //    is a byte-case-insensitive match for name, in order.\n\n        // 2. For each value of values:\n        // 1. Append (name, value) to headers.\n        for (let j = 0; j < cookies.length; ++j) {\n          headers.push([name, cookies[j]]);\n        }\n      } else {\n        // 2. Otherwise:\n\n        // 1. Let value be the result of getting name from list.\n\n        // 2. Assert: value is non-null.\n        // Note: This operation was done by `HeadersList#toSortedArray`.\n\n        // 3. Append (name, value) to headers.\n        headers.push([name, value]);\n      }\n    }\n\n    // 4. Return headers.\n    return _classPrivateFieldGet(_headersList, this)[kHeadersSortedMap] = headers;\n  }\n  [_util$inspect$custom](depth, options) {\n    options.depth ??= depth;\n    return `Headers ${util.formatWithOptions(options, _classPrivateFieldGet(_headersList, this).entries)}`;\n  }\n  static getHeadersGuard(o) {\n    return _classPrivateFieldGet(_guard, o);\n  }\n  static setHeadersGuard(o, guard) {\n    _classPrivateFieldSet(_guard, o, guard);\n  }\n  static getHeadersList(o) {\n    return _classPrivateFieldGet(_headersList, o);\n  }\n  static setHeadersList(o, list) {\n    _classPrivateFieldSet(_headersList, o, list);\n  }\n}\nconst {\n  getHeadersGuard,\n  setHeadersGuard,\n  getHeadersList,\n  setHeadersList\n} = Headers;\nReflect.deleteProperty(Headers, 'getHeadersGuard');\nReflect.deleteProperty(Headers, 'setHeadersGuard');\nReflect.deleteProperty(Headers, 'getHeadersList');\nReflect.deleteProperty(Headers, 'setHeadersList');\niteratorMixin('Headers', Headers, kHeadersSortedMap, 0, 1);\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  getSetCookie: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  },\n  [util.inspect.custom]: {\n    enumerable: false\n  }\n});\nwebidl.converters.HeadersInit = function (V, prefix, argument) {\n  if (webidl.util.Type(V) === 'Object') {\n    const iterator = Reflect.get(V, Symbol.iterator);\n\n    // A work-around to ensure we send the properly-cased Headers when V is a Headers object.\n    // Read https://github.com/nodejs/undici/pull/3159#issuecomment-2075537226 before touching, please.\n    if (!util.types.isProxy(V) && iterator === Headers.prototype.entries) {\n      // Headers object\n      try {\n        return getHeadersList(V).entriesList;\n      } catch {\n        // fall-through\n      }\n    }\n    if (typeof iterator === 'function') {\n      return webidl.converters['sequence<sequence<ByteString>>'](V, prefix, argument, iterator.bind(V));\n    }\n    return webidl.converters['record<ByteString, ByteString>'](V, prefix, argument);\n  }\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  });\n};\nmodule.exports = {\n  fill,\n  // for test.\n  compareHeaderName,\n  Headers,\n  HeadersList,\n  getHeadersGuard,\n  setHeadersGuard,\n  setHeadersList,\n  getHeadersList\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvaGVhZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFWTs7QUFBQSxJQUFBQSxvQkFBQTtBQUFBLFNBQUFDLDJCQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxJQUFBQywwQkFBQSxDQUFBSCxDQUFBLEVBQUFDLENBQUEsR0FBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFKLENBQUEsRUFBQUUsQ0FBQTtBQUFBLFNBQUFDLDJCQUFBSCxDQUFBLEVBQUFDLENBQUEsUUFBQUEsQ0FBQSxDQUFBSSxHQUFBLENBQUFMLENBQUEsYUFBQU0sU0FBQTtBQUFBLFNBQUFDLHNCQUFBQyxDQUFBLEVBQUFOLENBQUEsV0FBQU0sQ0FBQSxDQUFBQyxHQUFBLENBQUFDLGlCQUFBLENBQUFGLENBQUEsRUFBQU4sQ0FBQTtBQUFBLFNBQUFTLHNCQUFBSCxDQUFBLEVBQUFOLENBQUEsRUFBQVUsQ0FBQSxXQUFBSixDQUFBLENBQUFKLEdBQUEsQ0FBQU0saUJBQUEsQ0FBQUYsQ0FBQSxFQUFBTixDQUFBLEdBQUFVLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFGLGtCQUFBVixDQUFBLEVBQUFDLENBQUEsRUFBQVksQ0FBQSw2QkFBQWIsQ0FBQSxHQUFBQSxDQUFBLEtBQUFDLENBQUEsR0FBQUQsQ0FBQSxDQUFBSyxHQUFBLENBQUFKLENBQUEsVUFBQWEsU0FBQSxDQUFBQyxNQUFBLE9BQUFkLENBQUEsR0FBQVksQ0FBQSxZQUFBUCxTQUFBO0FBQUEsU0FBQVUsZ0JBQUFoQixDQUFBLEVBQUFZLENBQUEsRUFBQVgsQ0FBQSxZQUFBVyxDQUFBLEdBQUFLLGNBQUEsQ0FBQUwsQ0FBQSxNQUFBWixDQUFBLEdBQUFrQixNQUFBLENBQUFDLGNBQUEsQ0FBQW5CLENBQUEsRUFBQVksQ0FBQSxJQUFBUSxLQUFBLEVBQUFuQixDQUFBLEVBQUFvQixVQUFBLE1BQUFDLFlBQUEsTUFBQUMsUUFBQSxVQUFBdkIsQ0FB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Q0FBQ29CLENBQUMsRUFBRXRFLE1BQU0sRUFBRUMsUUFBUSxFQUFFd0IsUUFBUSxDQUFDZ0QsSUFBSSxDQUFDSCxDQUFDLENBQUMsQ0FBQztJQUNuRztJQUVBLE9BQU85RixNQUFNLENBQUMwRSxVQUFVLENBQUMsZ0NBQWdDLENBQUMsQ0FBQ29CLENBQUMsRUFBRXRFLE1BQU0sRUFBRUMsUUFBUSxDQUFDO0VBQ2pGO0VBRUEsTUFBTXpCLE1BQU0sQ0FBQ2tCLE1BQU0sQ0FBQ0ssZ0JBQWdCLENBQUM7SUFDbkNDLE1BQU0sRUFBRSxxQkFBcUI7SUFDN0JDLFFBQVEsRUFBRSxZQUFZO0lBQ3RCQyxLQUFLLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxnQ0FBZ0M7RUFDNUUsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVEd0UsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZnZGLElBQUk7RUFDSjtFQUNBcUIsaUJBQWlCO0VBQ2pCdUMsT0FBTztFQUNQckMsV0FBVztFQUNYTCxlQUFlO0VBQ2Z3RCxlQUFlO0VBQ2ZFLGNBQWM7RUFDZHpEO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL3dlYi9mZXRjaC9oZWFkZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9FdGhhbi1BcnJvd29vZC91bmRpY2ktZmV0Y2hcblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsga0NvbnN0cnVjdCB9ID0gcmVxdWlyZSgnLi4vLi4vY29yZS9zeW1ib2xzJylcbmNvbnN0IHsga0VudW1lcmFibGVQcm9wZXJ0eSB9ID0gcmVxdWlyZSgnLi4vLi4vY29yZS91dGlsJylcbmNvbnN0IHtcbiAgaXRlcmF0b3JNaXhpbixcbiAgaXNWYWxpZEhlYWRlck5hbWUsXG4gIGlzVmFsaWRIZWFkZXJWYWx1ZVxufSA9IHJlcXVpcmUoJy4vdXRpbCcpXG5jb25zdCB7IHdlYmlkbCB9ID0gcmVxdWlyZSgnLi93ZWJpZGwnKVxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnbm9kZTphc3NlcnQnKVxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ25vZGU6dXRpbCcpXG5cbmNvbnN0IGtIZWFkZXJzTWFwID0gU3ltYm9sKCdoZWFkZXJzIG1hcCcpXG5jb25zdCBrSGVhZGVyc1NvcnRlZE1hcCA9IFN5bWJvbCgnaGVhZGVycyBtYXAgc29ydGVkJylcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5mdW5jdGlvbiBpc0hUVFBXaGl0ZVNwYWNlQ2hhckNvZGUgKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPT09IDB4MDBhIHx8IGNvZGUgPT09IDB4MDBkIHx8IGNvZGUgPT09IDB4MDA5IHx8IGNvZGUgPT09IDB4MDIwXG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1oZWFkZXItdmFsdWUtbm9ybWFsaXplXG4gKiBAcGFyYW0ge3N0cmluZ30gcG90ZW50aWFsVmFsdWVcbiAqL1xuZnVuY3Rpb24gaGVhZGVyVmFsdWVOb3JtYWxpemUgKHBvdGVudGlhbFZhbHVlKSB7XG4gIC8vICBUbyBub3JtYWxpemUgYSBieXRlIHNlcXVlbmNlIHBvdGVudGlhbFZhbHVlLCByZW1vdmVcbiAgLy8gIGFueSBsZWFkaW5nIGFuZCB0cmFpbGluZyBIVFRQIHdoaXRlc3BhY2UgYnl0ZXMgZnJvbVxuICAvLyAgcG90ZW50aWFsVmFsdWUuXG4gIGxldCBpID0gMDsgbGV0IGogPSBwb3RlbnRpYWxWYWx1ZS5sZW5ndGhcblxuICB3aGlsZSAoaiA+IGkgJiYgaXNIVFRQV2hpdGVTcGFjZUNoYXJDb2RlKHBvdGVudGlhbFZhbHVlLmNoYXJDb2RlQXQoaiAtIDEpKSkgLS1qXG4gIHdoaWxlIChqID4gaSAmJiBpc0hUVFBXaGl0ZVNwYWNlQ2hhckNvZGUocG90ZW50aWFsVmFsdWUuY2hhckNvZGVBdChpKSkpICsraVxuXG4gIHJldHVybiBpID09PSAwICYmIGogPT09IHBvdGVudGlhbFZhbHVlLmxlbmd0aCA/IHBvdGVudGlhbFZhbHVlIDogcG90ZW50aWFsVmFsdWUuc3Vic3RyaW5nKGksIGopXG59XG5cbmZ1bmN0aW9uIGZpbGwgKGhlYWRlcnMsIG9iamVjdCkge1xuICAvLyBUbyBmaWxsIGEgSGVhZGVycyBvYmplY3QgaGVhZGVycyB3aXRoIGEgZ2l2ZW4gb2JqZWN0IG9iamVjdCwgcnVuIHRoZXNlIHN0ZXBzOlxuXG4gIC8vIDEuIElmIG9iamVjdCBpcyBhIHNlcXVlbmNlLCB0aGVuIGZvciBlYWNoIGhlYWRlciBpbiBvYmplY3Q6XG4gIC8vIE5vdGU6IHdlYmlkbCBjb252ZXJzaW9uIHRvIGFycmF5IGhhcyBhbHJlYWR5IGJlZW4gZG9uZS5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBoZWFkZXIgPSBvYmplY3RbaV1cbiAgICAgIC8vIDEuIElmIGhlYWRlciBkb2VzIG5vdCBjb250YWluIGV4YWN0bHkgdHdvIGl0ZW1zLCB0aGVuIHRocm93IGEgVHlwZUVycm9yLlxuICAgICAgaWYgKGhlYWRlci5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgdGhyb3cgd2ViaWRsLmVycm9ycy5leGNlcHRpb24oe1xuICAgICAgICAgIGhlYWRlcjogJ0hlYWRlcnMgY29uc3RydWN0b3InLFxuICAgICAgICAgIG1lc3NhZ2U6IGBleHBlY3RlZCBuYW1lL3ZhbHVlIHBhaXIgdG8gYmUgbGVuZ3RoIDIsIGZvdW5kICR7aGVhZGVyLmxlbmd0aH0uYFxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICAvLyAyLiBBcHBlbmQgKGhlYWRlcuKAmXMgZmlyc3QgaXRlbSwgaGVhZGVy4oCZcyBzZWNvbmQgaXRlbSkgdG8gaGVhZGVycy5cbiAgICAgIGFwcGVuZEhlYWRlcihoZWFkZXJzLCBoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsKSB7XG4gICAgLy8gTm90ZTogbnVsbCBzaG91bGQgdGhyb3dcblxuICAgIC8vIDIuIE90aGVyd2lzZSwgb2JqZWN0IGlzIGEgcmVjb3JkLCB0aGVuIGZvciBlYWNoIGtleSDihpIgdmFsdWUgaW4gb2JqZWN0LFxuICAgIC8vICAgIGFwcGVuZCAoa2V5LCB2YWx1ZSkgdG8gaGVhZGVyc1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICBhcHBlbmRIZWFkZXIoaGVhZGVycywga2V5c1tpXSwgb2JqZWN0W2tleXNbaV1dKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyB3ZWJpZGwuZXJyb3JzLmNvbnZlcnNpb25GYWlsZWQoe1xuICAgICAgcHJlZml4OiAnSGVhZGVycyBjb25zdHJ1Y3RvcicsXG4gICAgICBhcmd1bWVudDogJ0FyZ3VtZW50IDEnLFxuICAgICAgdHlwZXM6IFsnc2VxdWVuY2U8c2VxdWVuY2U8Qnl0ZVN0cmluZz4+JywgJ3JlY29yZDxCeXRlU3RyaW5nLCBCeXRlU3RyaW5nPiddXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtaGVhZGVycy1hcHBlbmRcbiAqL1xuZnVuY3Rpb24gYXBwZW5kSGVhZGVyIChoZWFkZXJzLCBuYW1lLCB2YWx1ZSkge1xuICAvLyAxLiBOb3JtYWxpemUgdmFsdWUuXG4gIHZhbHVlID0gaGVhZGVyVmFsdWVOb3JtYWxpemUodmFsdWUpXG5cbiAgLy8gMi4gSWYgbmFtZSBpcyBub3QgYSBoZWFkZXIgbmFtZSBvciB2YWx1ZSBpcyBub3QgYVxuICAvLyAgICBoZWFkZXIgdmFsdWUsIHRoZW4gdGhyb3cgYSBUeXBlRXJyb3IuXG4gIGlmICghaXNWYWxpZEhlYWRlck5hbWUobmFtZSkpIHtcbiAgICB0aHJvdyB3ZWJpZGwuZXJyb3JzLmludmFsaWRBcmd1bWVudCh7XG4gICAgICBwcmVmaXg6ICdIZWFkZXJzLmFwcGVuZCcsXG4gICAgICB2YWx1ZTogbmFtZSxcbiAgICAgIHR5cGU6ICdoZWFkZXIgbmFtZSdcbiAgICB9KVxuICB9IGVsc2UgaWYgKCFpc1ZhbGlkSGVhZGVyVmFsdWUodmFsdWUpKSB7XG4gICAgdGhyb3cgd2ViaWRsLmVycm9ycy5pbnZhbGlkQXJndW1lbnQoe1xuICAgICAgcHJlZml4OiAnSGVhZGVycy5hcHBlbmQnLFxuICAgICAgdmFsdWUsXG4gICAgICB0eXBlOiAnaGVhZGVyIHZhbHVlJ1xuICAgIH0pXG4gIH1cblxuICAvLyAzLiBJZiBoZWFkZXJz4oCZcyBndWFyZCBpcyBcImltbXV0YWJsZVwiLCB0aGVuIHRocm93IGEgVHlwZUVycm9yLlxuICAvLyA0LiBPdGhlcndpc2UsIGlmIGhlYWRlcnPigJlzIGd1YXJkIGlzIFwicmVxdWVzdFwiIGFuZCBuYW1lIGlzIGFcbiAgLy8gICAgZm9yYmlkZGVuIGhlYWRlciBuYW1lLCByZXR1cm4uXG4gIC8vIDUuIE90aGVyd2lzZSwgaWYgaGVhZGVyc+KAmXMgZ3VhcmQgaXMgXCJyZXF1ZXN0LW5vLWNvcnNcIjpcbiAgLy8gICAgVE9ET1xuICAvLyBOb3RlOiB1bmRpY2kgZG9lcyBub3QgaW1wbGVtZW50IGZvcmJpZGRlbiBoZWFkZXIgbmFtZXNcbiAgaWYgKGdldEhlYWRlcnNHdWFyZChoZWFkZXJzKSA9PT0gJ2ltbXV0YWJsZScpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbW11dGFibGUnKVxuICB9XG5cbiAgLy8gNi4gT3RoZXJ3aXNlLCBpZiBoZWFkZXJz4oCZcyBndWFyZCBpcyBcInJlc3BvbnNlXCIgYW5kIG5hbWUgaXMgYVxuICAvLyAgICBmb3JiaWRkZW4gcmVzcG9uc2UtaGVhZGVyIG5hbWUsIHJldHVybi5cblxuICAvLyA3LiBBcHBlbmQgKG5hbWUsIHZhbHVlKSB0byBoZWFkZXJz4oCZcyBoZWFkZXIgbGlzdC5cbiAgcmV0dXJuIGdldEhlYWRlcnNMaXN0KGhlYWRlcnMpLmFwcGVuZChuYW1lLCB2YWx1ZSwgZmFsc2UpXG5cbiAgLy8gOC4gSWYgaGVhZGVyc+KAmXMgZ3VhcmQgaXMgXCJyZXF1ZXN0LW5vLWNvcnNcIiwgdGhlbiByZW1vdmVcbiAgLy8gICAgcHJpdmlsZWdlZCBuby1DT1JTIHJlcXVlc3QgaGVhZGVycyBmcm9tIGhlYWRlcnNcbn1cblxuZnVuY3Rpb24gY29tcGFyZUhlYWRlck5hbWUgKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPCBiWzBdID8gLTEgOiAxXG59XG5cbmNsYXNzIEhlYWRlcnNMaXN0IHtcbiAgLyoqIEB0eXBlIHtbc3RyaW5nLCBzdHJpbmddW118bnVsbH0gKi9cbiAgY29va2llcyA9IG51bGxcblxuICBjb25zdHJ1Y3RvciAoaW5pdCkge1xuICAgIGlmIChpbml0IGluc3RhbmNlb2YgSGVhZGVyc0xpc3QpIHtcbiAgICAgIHRoaXNba0hlYWRlcnNNYXBdID0gbmV3IE1hcChpbml0W2tIZWFkZXJzTWFwXSlcbiAgICAgIHRoaXNba0hlYWRlcnNTb3J0ZWRNYXBdID0gaW5pdFtrSGVhZGVyc1NvcnRlZE1hcF1cbiAgICAgIHRoaXMuY29va2llcyA9IGluaXQuY29va2llcyA9PT0gbnVsbCA/IG51bGwgOiBbLi4uaW5pdC5jb29raWVzXVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW2tIZWFkZXJzTWFwXSA9IG5ldyBNYXAoaW5pdClcbiAgICAgIHRoaXNba0hlYWRlcnNTb3J0ZWRNYXBdID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNoZWFkZXItbGlzdC1jb250YWluc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzTG93ZXJDYXNlXG4gICAqL1xuICBjb250YWlucyAobmFtZSwgaXNMb3dlckNhc2UpIHtcbiAgICAvLyBBIGhlYWRlciBsaXN0IGxpc3QgY29udGFpbnMgYSBoZWFkZXIgbmFtZSBuYW1lIGlmIGxpc3RcbiAgICAvLyBjb250YWlucyBhIGhlYWRlciB3aG9zZSBuYW1lIGlzIGEgYnl0ZS1jYXNlLWluc2Vuc2l0aXZlXG4gICAgLy8gbWF0Y2ggZm9yIG5hbWUuXG5cbiAgICByZXR1cm4gdGhpc1trSGVhZGVyc01hcF0uaGFzKGlzTG93ZXJDYXNlID8gbmFtZSA6IG5hbWUudG9Mb3dlckNhc2UoKSlcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICB0aGlzW2tIZWFkZXJzTWFwXS5jbGVhcigpXG4gICAgdGhpc1trSGVhZGVyc1NvcnRlZE1hcF0gPSBudWxsXG4gICAgdGhpcy5jb29raWVzID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtaGVhZGVyLWxpc3QtYXBwZW5kXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzTG93ZXJDYXNlXG4gICAqL1xuICBhcHBlbmQgKG5hbWUsIHZhbHVlLCBpc0xvd2VyQ2FzZSkge1xuICAgIHRoaXNba0hlYWRlcnNTb3J0ZWRNYXBdID0gbnVsbFxuXG4gICAgLy8gMS4gSWYgbGlzdCBjb250YWlucyBuYW1lLCB0aGVuIHNldCBuYW1lIHRvIHRoZSBmaXJzdCBzdWNoXG4gICAgLy8gICAgaGVhZGVy4oCZcyBuYW1lLlxuICAgIGNvbnN0IGxvd2VyY2FzZU5hbWUgPSBpc0xvd2VyQ2FzZSA/IG5hbWUgOiBuYW1lLnRvTG93ZXJDYXNlKClcbiAgICBjb25zdCBleGlzdHMgPSB0aGlzW2tIZWFkZXJzTWFwXS5nZXQobG93ZXJjYXNlTmFtZSlcblxuICAgIC8vIDIuIEFwcGVuZCAobmFtZSwgdmFsdWUpIHRvIGxpc3QuXG4gICAgaWYgKGV4aXN0cykge1xuICAgICAgY29uc3QgZGVsaW1pdGVyID0gbG93ZXJjYXNlTmFtZSA9PT0gJ2Nvb2tpZScgPyAnOyAnIDogJywgJ1xuICAgICAgdGhpc1trSGVhZGVyc01hcF0uc2V0KGxvd2VyY2FzZU5hbWUsIHtcbiAgICAgICAgbmFtZTogZXhpc3RzLm5hbWUsXG4gICAgICAgIHZhbHVlOiBgJHtleGlzdHMudmFsdWV9JHtkZWxpbWl0ZXJ9JHt2YWx1ZX1gXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW2tIZWFkZXJzTWFwXS5zZXQobG93ZXJjYXNlTmFtZSwgeyBuYW1lLCB2YWx1ZSB9KVxuICAgIH1cblxuICAgIGlmIChsb3dlcmNhc2VOYW1lID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICh0aGlzLmNvb2tpZXMgPz89IFtdKS5wdXNoKHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWhlYWRlci1saXN0LXNldFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0xvd2VyQ2FzZVxuICAgKi9cbiAgc2V0IChuYW1lLCB2YWx1ZSwgaXNMb3dlckNhc2UpIHtcbiAgICB0aGlzW2tIZWFkZXJzU29ydGVkTWFwXSA9IG51bGxcbiAgICBjb25zdCBsb3dlcmNhc2VOYW1lID0gaXNMb3dlckNhc2UgPyBuYW1lIDogbmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgICBpZiAobG93ZXJjYXNlTmFtZSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICB0aGlzLmNvb2tpZXMgPSBbdmFsdWVdXG4gICAgfVxuXG4gICAgLy8gMS4gSWYgbGlzdCBjb250YWlucyBuYW1lLCB0aGVuIHNldCB0aGUgdmFsdWUgb2ZcbiAgICAvLyAgICB0aGUgZmlyc3Qgc3VjaCBoZWFkZXIgdG8gdmFsdWUgYW5kIHJlbW92ZSB0aGVcbiAgICAvLyAgICBvdGhlcnMuXG4gICAgLy8gMi4gT3RoZXJ3aXNlLCBhcHBlbmQgaGVhZGVyIChuYW1lLCB2YWx1ZSkgdG8gbGlzdC5cbiAgICB0aGlzW2tIZWFkZXJzTWFwXS5zZXQobG93ZXJjYXNlTmFtZSwgeyBuYW1lLCB2YWx1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtaGVhZGVyLWxpc3QtZGVsZXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMb3dlckNhc2VcbiAgICovXG4gIGRlbGV0ZSAobmFtZSwgaXNMb3dlckNhc2UpIHtcbiAgICB0aGlzW2tIZWFkZXJzU29ydGVkTWFwXSA9IG51bGxcbiAgICBpZiAoIWlzTG93ZXJDYXNlKSBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgICBpZiAobmFtZSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICB0aGlzLmNvb2tpZXMgPSBudWxsXG4gICAgfVxuXG4gICAgdGhpc1trSGVhZGVyc01hcF0uZGVsZXRlKG5hbWUpXG4gIH1cblxuICAvKipcbiAgICogQHNlZSBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1oZWFkZXItbGlzdC1nZXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0xvd2VyQ2FzZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nIHwgbnVsbH1cbiAgICovXG4gIGdldCAobmFtZSwgaXNMb3dlckNhc2UpIHtcbiAgICAvLyAxLiBJZiBsaXN0IGRvZXMgbm90IGNvbnRhaW4gbmFtZSwgdGhlbiByZXR1cm4gbnVsbC5cbiAgICAvLyAyLiBSZXR1cm4gdGhlIHZhbHVlcyBvZiBhbGwgaGVhZGVycyBpbiBsaXN0IHdob3NlIG5hbWVcbiAgICAvLyAgICBpcyBhIGJ5dGUtY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaCBmb3IgbmFtZSxcbiAgICAvLyAgICBzZXBhcmF0ZWQgZnJvbSBlYWNoIG90aGVyIGJ5IDB4MkMgMHgyMCwgaW4gb3JkZXIuXG4gICAgcmV0dXJuIHRoaXNba0hlYWRlcnNNYXBdLmdldChpc0xvd2VyQ2FzZSA/IG5hbWUgOiBuYW1lLnRvTG93ZXJDYXNlKCkpPy52YWx1ZSA/PyBudWxsXG4gIH1cblxuICAqIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICAvLyB1c2UgdGhlIGxvd2VyY2FzZWQgbmFtZVxuICAgIGZvciAoY29uc3QgeyAwOiBuYW1lLCAxOiB7IHZhbHVlIH0gfSBvZiB0aGlzW2tIZWFkZXJzTWFwXSkge1xuICAgICAgeWllbGQgW25hbWUsIHZhbHVlXVxuICAgIH1cbiAgfVxuXG4gIGdldCBlbnRyaWVzICgpIHtcbiAgICBjb25zdCBoZWFkZXJzID0ge31cblxuICAgIGlmICh0aGlzW2tIZWFkZXJzTWFwXS5zaXplICE9PSAwKSB7XG4gICAgICBmb3IgKGNvbnN0IHsgbmFtZSwgdmFsdWUgfSBvZiB0aGlzW2tIZWFkZXJzTWFwXS52YWx1ZXMoKSkge1xuICAgICAgICBoZWFkZXJzW25hbWVdID0gdmFsdWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgcmF3VmFsdWVzICgpIHtcbiAgICByZXR1cm4gdGhpc1trSGVhZGVyc01hcF0udmFsdWVzKClcbiAgfVxuXG4gIGdldCBlbnRyaWVzTGlzdCAoKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IFtdXG5cbiAgICBpZiAodGhpc1trSGVhZGVyc01hcF0uc2l6ZSAhPT0gMCkge1xuICAgICAgZm9yIChjb25zdCB7IDA6IGxvd2VyTmFtZSwgMTogeyBuYW1lLCB2YWx1ZSB9IH0gb2YgdGhpc1trSGVhZGVyc01hcF0pIHtcbiAgICAgICAgaWYgKGxvd2VyTmFtZSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBjb29raWUgb2YgdGhpcy5jb29raWVzKSB7XG4gICAgICAgICAgICBoZWFkZXJzLnB1c2goW25hbWUsIGNvb2tpZV0pXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRlcnMucHVzaChbbmFtZSwgdmFsdWVdKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWRlcnNcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb252ZXJ0LWhlYWRlci1uYW1lcy10by1hLXNvcnRlZC1sb3dlcmNhc2Utc2V0XG4gIHRvU29ydGVkQXJyYXkgKCkge1xuICAgIGNvbnN0IHNpemUgPSB0aGlzW2tIZWFkZXJzTWFwXS5zaXplXG4gICAgY29uc3QgYXJyYXkgPSBuZXcgQXJyYXkoc2l6ZSlcbiAgICAvLyBJbiBtb3N0IGNhc2VzLCB5b3Ugd2lsbCB1c2UgdGhlIGZhc3QtcGF0aC5cbiAgICAvLyBmYXN0LXBhdGg6IFVzZSBiaW5hcnkgaW5zZXJ0aW9uIHNvcnQgZm9yIHNtYWxsIGFycmF5cy5cbiAgICBpZiAoc2l6ZSA8PSAzMikge1xuICAgICAgaWYgKHNpemUgPT09IDApIHtcbiAgICAgICAgLy8gSWYgZW1wdHksIGl0IGlzIGFuIGVtcHR5IGFycmF5LiBUbyBhdm9pZCB0aGUgZmlyc3QgaW5kZXggYXNzaWdubWVudC5cbiAgICAgICAgcmV0dXJuIGFycmF5XG4gICAgICB9XG4gICAgICAvLyBJbXByb3ZlIHBlcmZvcm1hbmNlIGJ5IHVucm9sbGluZyBsb29wIGFuZCBhdm9pZGluZyBkb3VibGUtbG9vcC5cbiAgICAgIC8vIERvdWJsZS1sb29wLWxlc3MgdmVyc2lvbiBvZiB0aGUgYmluYXJ5IGluc2VydGlvbiBzb3J0LlxuICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzW2tIZWFkZXJzTWFwXVtTeW1ib2wuaXRlcmF0b3JdKClcbiAgICAgIGNvbnN0IGZpcnN0VmFsdWUgPSBpdGVyYXRvci5uZXh0KCkudmFsdWVcbiAgICAgIC8vIHNldCBbbmFtZSwgdmFsdWVdIHRvIGZpcnN0IGluZGV4LlxuICAgICAgYXJyYXlbMF0gPSBbZmlyc3RWYWx1ZVswXSwgZmlyc3RWYWx1ZVsxXS52YWx1ZV1cbiAgICAgIC8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWhlYWRlci1saXN0LXNvcnQtYW5kLWNvbWJpbmVcbiAgICAgIC8vIDMuMi4yLiBBc3NlcnQ6IHZhbHVlIGlzIG5vbi1udWxsLlxuICAgICAgYXNzZXJ0KGZpcnN0VmFsdWVbMV0udmFsdWUgIT09IG51bGwpXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaSA9IDEsIGogPSAwLCByaWdodCA9IDAsIGxlZnQgPSAwLCBwaXZvdCA9IDAsIHgsIHZhbHVlO1xuICAgICAgICBpIDwgc2l6ZTtcbiAgICAgICAgKytpXG4gICAgICApIHtcbiAgICAgICAgLy8gZ2V0IG5leHQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBpdGVyYXRvci5uZXh0KCkudmFsdWVcbiAgICAgICAgLy8gc2V0IFtuYW1lLCB2YWx1ZV0gdG8gY3VycmVudCBpbmRleC5cbiAgICAgICAgeCA9IGFycmF5W2ldID0gW3ZhbHVlWzBdLCB2YWx1ZVsxXS52YWx1ZV1cbiAgICAgICAgLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtaGVhZGVyLWxpc3Qtc29ydC1hbmQtY29tYmluZVxuICAgICAgICAvLyAzLjIuMi4gQXNzZXJ0OiB2YWx1ZSBpcyBub24tbnVsbC5cbiAgICAgICAgYXNzZXJ0KHhbMV0gIT09IG51bGwpXG4gICAgICAgIGxlZnQgPSAwXG4gICAgICAgIHJpZ2h0ID0gaVxuICAgICAgICAvLyBiaW5hcnkgc2VhcmNoXG4gICAgICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQpIHtcbiAgICAgICAgICAvLyBtaWRkbGUgaW5kZXhcbiAgICAgICAgICBwaXZvdCA9IGxlZnQgKyAoKHJpZ2h0IC0gbGVmdCkgPj4gMSlcbiAgICAgICAgICAvLyBjb21wYXJlIGhlYWRlciBuYW1lXG4gICAgICAgICAgaWYgKGFycmF5W3Bpdm90XVswXSA8PSB4WzBdKSB7XG4gICAgICAgICAgICBsZWZ0ID0gcGl2b3QgKyAxXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJpZ2h0ID0gcGl2b3RcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgIT09IHBpdm90KSB7XG4gICAgICAgICAgaiA9IGlcbiAgICAgICAgICB3aGlsZSAoaiA+IGxlZnQpIHtcbiAgICAgICAgICAgIGFycmF5W2pdID0gYXJyYXlbLS1qXVxuICAgICAgICAgIH1cbiAgICAgICAgICBhcnJheVtsZWZ0XSA9IHhcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyogYzggaWdub3JlIG5leHQgNCAqL1xuICAgICAgaWYgKCFpdGVyYXRvci5uZXh0KCkuZG9uZSkge1xuICAgICAgICAvLyBUaGlzIGlzIGZvciBkZWJ1Z2dpbmcgYW5kIHdpbGwgbmV2ZXIgYmUgY2FsbGVkLlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbnJlYWNoYWJsZScpXG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBjYXNlIHdvdWxkIGJlIGEgcmFyZSBvY2N1cnJlbmNlLlxuICAgICAgLy8gc2xvdy1wYXRoOiBmYWxsYmFja1xuICAgICAgbGV0IGkgPSAwXG4gICAgICBmb3IgKGNvbnN0IHsgMDogbmFtZSwgMTogeyB2YWx1ZSB9IH0gb2YgdGhpc1trSGVhZGVyc01hcF0pIHtcbiAgICAgICAgYXJyYXlbaSsrXSA9IFtuYW1lLCB2YWx1ZV1cbiAgICAgICAgLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtaGVhZGVyLWxpc3Qtc29ydC1hbmQtY29tYmluZVxuICAgICAgICAvLyAzLjIuMi4gQXNzZXJ0OiB2YWx1ZSBpcyBub24tbnVsbC5cbiAgICAgICAgYXNzZXJ0KHZhbHVlICE9PSBudWxsKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5LnNvcnQoY29tcGFyZUhlYWRlck5hbWUpXG4gICAgfVxuICB9XG59XG5cbi8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNoZWFkZXJzLWNsYXNzXG5jbGFzcyBIZWFkZXJzIHtcbiAgI2d1YXJkXG4gICNoZWFkZXJzTGlzdFxuXG4gIGNvbnN0cnVjdG9yIChpbml0ID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGluaXQgPT09IGtDb25zdHJ1Y3QpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuI2hlYWRlcnNMaXN0ID0gbmV3IEhlYWRlcnNMaXN0KClcblxuICAgIC8vIFRoZSBuZXcgSGVhZGVycyhpbml0KSBjb25zdHJ1Y3RvciBzdGVwcyBhcmU6XG5cbiAgICAvLyAxLiBTZXQgdGhpc+KAmXMgZ3VhcmQgdG8gXCJub25lXCIuXG4gICAgdGhpcy4jZ3VhcmQgPSAnbm9uZSdcblxuICAgIC8vIDIuIElmIGluaXQgaXMgZ2l2ZW4sIHRoZW4gZmlsbCB0aGlzIHdpdGggaW5pdC5cbiAgICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbml0ID0gd2ViaWRsLmNvbnZlcnRlcnMuSGVhZGVyc0luaXQoaW5pdCwgJ0hlYWRlcnMgY29udHJ1Y3RvcicsICdpbml0JylcbiAgICAgIGZpbGwodGhpcywgaW5pdClcbiAgICB9XG4gIH1cblxuICAvLyBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLWhlYWRlcnMtYXBwZW5kXG4gIGFwcGVuZCAobmFtZSwgdmFsdWUpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBIZWFkZXJzKVxuXG4gICAgd2ViaWRsLmFyZ3VtZW50TGVuZ3RoQ2hlY2soYXJndW1lbnRzLCAyLCAnSGVhZGVycy5hcHBlbmQnKVxuXG4gICAgY29uc3QgcHJlZml4ID0gJ0hlYWRlcnMuYXBwZW5kJ1xuICAgIG5hbWUgPSB3ZWJpZGwuY29udmVydGVycy5CeXRlU3RyaW5nKG5hbWUsIHByZWZpeCwgJ25hbWUnKVxuICAgIHZhbHVlID0gd2ViaWRsLmNvbnZlcnRlcnMuQnl0ZVN0cmluZyh2YWx1ZSwgcHJlZml4LCAndmFsdWUnKVxuXG4gICAgcmV0dXJuIGFwcGVuZEhlYWRlcih0aGlzLCBuYW1lLCB2YWx1ZSlcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20taGVhZGVycy1kZWxldGVcbiAgZGVsZXRlIChuYW1lKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgSGVhZGVycylcblxuICAgIHdlYmlkbC5hcmd1bWVudExlbmd0aENoZWNrKGFyZ3VtZW50cywgMSwgJ0hlYWRlcnMuZGVsZXRlJylcblxuICAgIGNvbnN0IHByZWZpeCA9ICdIZWFkZXJzLmRlbGV0ZSdcbiAgICBuYW1lID0gd2ViaWRsLmNvbnZlcnRlcnMuQnl0ZVN0cmluZyhuYW1lLCBwcmVmaXgsICduYW1lJylcblxuICAgIC8vIDEuIElmIG5hbWUgaXMgbm90IGEgaGVhZGVyIG5hbWUsIHRoZW4gdGhyb3cgYSBUeXBlRXJyb3IuXG4gICAgaWYgKCFpc1ZhbGlkSGVhZGVyTmFtZShuYW1lKSkge1xuICAgICAgdGhyb3cgd2ViaWRsLmVycm9ycy5pbnZhbGlkQXJndW1lbnQoe1xuICAgICAgICBwcmVmaXg6ICdIZWFkZXJzLmRlbGV0ZScsXG4gICAgICAgIHZhbHVlOiBuYW1lLFxuICAgICAgICB0eXBlOiAnaGVhZGVyIG5hbWUnXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIDIuIElmIHRoaXPigJlzIGd1YXJkIGlzIFwiaW1tdXRhYmxlXCIsIHRoZW4gdGhyb3cgYSBUeXBlRXJyb3IuXG4gICAgLy8gMy4gT3RoZXJ3aXNlLCBpZiB0aGlz4oCZcyBndWFyZCBpcyBcInJlcXVlc3RcIiBhbmQgbmFtZSBpcyBhXG4gICAgLy8gICAgZm9yYmlkZGVuIGhlYWRlciBuYW1lLCByZXR1cm4uXG4gICAgLy8gNC4gT3RoZXJ3aXNlLCBpZiB0aGlz4oCZcyBndWFyZCBpcyBcInJlcXVlc3Qtbm8tY29yc1wiLCBuYW1lXG4gICAgLy8gICAgaXMgbm90IGEgbm8tQ09SUy1zYWZlbGlzdGVkIHJlcXVlc3QtaGVhZGVyIG5hbWUsIGFuZFxuICAgIC8vICAgIG5hbWUgaXMgbm90IGEgcHJpdmlsZWdlZCBuby1DT1JTIHJlcXVlc3QtaGVhZGVyIG5hbWUsXG4gICAgLy8gICAgcmV0dXJuLlxuICAgIC8vIDUuIE90aGVyd2lzZSwgaWYgdGhpc+KAmXMgZ3VhcmQgaXMgXCJyZXNwb25zZVwiIGFuZCBuYW1lIGlzXG4gICAgLy8gICAgYSBmb3JiaWRkZW4gcmVzcG9uc2UtaGVhZGVyIG5hbWUsIHJldHVybi5cbiAgICAvLyBOb3RlOiB1bmRpY2kgZG9lcyBub3QgaW1wbGVtZW50IGZvcmJpZGRlbiBoZWFkZXIgbmFtZXNcbiAgICBpZiAodGhpcy4jZ3VhcmQgPT09ICdpbW11dGFibGUnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbW11dGFibGUnKVxuICAgIH1cblxuICAgIC8vIDYuIElmIHRoaXPigJlzIGhlYWRlciBsaXN0IGRvZXMgbm90IGNvbnRhaW4gbmFtZSwgdGhlblxuICAgIC8vICAgIHJldHVybi5cbiAgICBpZiAoIXRoaXMuI2hlYWRlcnNMaXN0LmNvbnRhaW5zKG5hbWUsIGZhbHNlKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gNy4gRGVsZXRlIG5hbWUgZnJvbSB0aGlz4oCZcyBoZWFkZXIgbGlzdC5cbiAgICAvLyA4LiBJZiB0aGlz4oCZcyBndWFyZCBpcyBcInJlcXVlc3Qtbm8tY29yc1wiLCB0aGVuIHJlbW92ZVxuICAgIC8vICAgIHByaXZpbGVnZWQgbm8tQ09SUyByZXF1ZXN0IGhlYWRlcnMgZnJvbSB0aGlzLlxuICAgIHRoaXMuI2hlYWRlcnNMaXN0LmRlbGV0ZShuYW1lLCBmYWxzZSlcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20taGVhZGVycy1nZXRcbiAgZ2V0IChuYW1lKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgSGVhZGVycylcblxuICAgIHdlYmlkbC5hcmd1bWVudExlbmd0aENoZWNrKGFyZ3VtZW50cywgMSwgJ0hlYWRlcnMuZ2V0JylcblxuICAgIGNvbnN0IHByZWZpeCA9ICdIZWFkZXJzLmdldCdcbiAgICBuYW1lID0gd2ViaWRsLmNvbnZlcnRlcnMuQnl0ZVN0cmluZyhuYW1lLCBwcmVmaXgsICduYW1lJylcblxuICAgIC8vIDEuIElmIG5hbWUgaXMgbm90IGEgaGVhZGVyIG5hbWUsIHRoZW4gdGhyb3cgYSBUeXBlRXJyb3IuXG4gICAgaWYgKCFpc1ZhbGlkSGVhZGVyTmFtZShuYW1lKSkge1xuICAgICAgdGhyb3cgd2ViaWRsLmVycm9ycy5pbnZhbGlkQXJndW1lbnQoe1xuICAgICAgICBwcmVmaXgsXG4gICAgICAgIHZhbHVlOiBuYW1lLFxuICAgICAgICB0eXBlOiAnaGVhZGVyIG5hbWUnXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIDIuIFJldHVybiB0aGUgcmVzdWx0IG9mIGdldHRpbmcgbmFtZSBmcm9tIHRoaXPigJlzIGhlYWRlclxuICAgIC8vICAgIGxpc3QuXG4gICAgcmV0dXJuIHRoaXMuI2hlYWRlcnNMaXN0LmdldChuYW1lLCBmYWxzZSlcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20taGVhZGVycy1oYXNcbiAgaGFzIChuYW1lKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgSGVhZGVycylcblxuICAgIHdlYmlkbC5hcmd1bWVudExlbmd0aENoZWNrKGFyZ3VtZW50cywgMSwgJ0hlYWRlcnMuaGFzJylcblxuICAgIGNvbnN0IHByZWZpeCA9ICdIZWFkZXJzLmhhcydcbiAgICBuYW1lID0gd2ViaWRsLmNvbnZlcnRlcnMuQnl0ZVN0cmluZyhuYW1lLCBwcmVmaXgsICduYW1lJylcblxuICAgIC8vIDEuIElmIG5hbWUgaXMgbm90IGEgaGVhZGVyIG5hbWUsIHRoZW4gdGhyb3cgYSBUeXBlRXJyb3IuXG4gICAgaWYgKCFpc1ZhbGlkSGVhZGVyTmFtZShuYW1lKSkge1xuICAgICAgdGhyb3cgd2ViaWRsLmVycm9ycy5pbnZhbGlkQXJndW1lbnQoe1xuICAgICAgICBwcmVmaXgsXG4gICAgICAgIHZhbHVlOiBuYW1lLFxuICAgICAgICB0eXBlOiAnaGVhZGVyIG5hbWUnXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIDIuIFJldHVybiB0cnVlIGlmIHRoaXPigJlzIGhlYWRlciBsaXN0IGNvbnRhaW5zIG5hbWU7XG4gICAgLy8gICAgb3RoZXJ3aXNlIGZhbHNlLlxuICAgIHJldHVybiB0aGlzLiNoZWFkZXJzTGlzdC5jb250YWlucyhuYW1lLCBmYWxzZSlcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20taGVhZGVycy1zZXRcbiAgc2V0IChuYW1lLCB2YWx1ZSkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIEhlYWRlcnMpXG5cbiAgICB3ZWJpZGwuYXJndW1lbnRMZW5ndGhDaGVjayhhcmd1bWVudHMsIDIsICdIZWFkZXJzLnNldCcpXG5cbiAgICBjb25zdCBwcmVmaXggPSAnSGVhZGVycy5zZXQnXG4gICAgbmFtZSA9IHdlYmlkbC5jb252ZXJ0ZXJzLkJ5dGVTdHJpbmcobmFtZSwgcHJlZml4LCAnbmFtZScpXG4gICAgdmFsdWUgPSB3ZWJpZGwuY29udmVydGVycy5CeXRlU3RyaW5nKHZhbHVlLCBwcmVmaXgsICd2YWx1ZScpXG5cbiAgICAvLyAxLiBOb3JtYWxpemUgdmFsdWUuXG4gICAgdmFsdWUgPSBoZWFkZXJWYWx1ZU5vcm1hbGl6ZSh2YWx1ZSlcblxuICAgIC8vIDIuIElmIG5hbWUgaXMgbm90IGEgaGVhZGVyIG5hbWUgb3IgdmFsdWUgaXMgbm90IGFcbiAgICAvLyAgICBoZWFkZXIgdmFsdWUsIHRoZW4gdGhyb3cgYSBUeXBlRXJyb3IuXG4gICAgaWYgKCFpc1ZhbGlkSGVhZGVyTmFtZShuYW1lKSkge1xuICAgICAgdGhyb3cgd2ViaWRsLmVycm9ycy5pbnZhbGlkQXJndW1lbnQoe1xuICAgICAgICBwcmVmaXgsXG4gICAgICAgIHZhbHVlOiBuYW1lLFxuICAgICAgICB0eXBlOiAnaGVhZGVyIG5hbWUnXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAoIWlzVmFsaWRIZWFkZXJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIHRocm93IHdlYmlkbC5lcnJvcnMuaW52YWxpZEFyZ3VtZW50KHtcbiAgICAgICAgcHJlZml4LFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdHlwZTogJ2hlYWRlciB2YWx1ZSdcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gMy4gSWYgdGhpc+KAmXMgZ3VhcmQgaXMgXCJpbW11dGFibGVcIiwgdGhlbiB0aHJvdyBhIFR5cGVFcnJvci5cbiAgICAvLyA0LiBPdGhlcndpc2UsIGlmIHRoaXPigJlzIGd1YXJkIGlzIFwicmVxdWVzdFwiIGFuZCBuYW1lIGlzIGFcbiAgICAvLyAgICBmb3JiaWRkZW4gaGVhZGVyIG5hbWUsIHJldHVybi5cbiAgICAvLyA1LiBPdGhlcndpc2UsIGlmIHRoaXPigJlzIGd1YXJkIGlzIFwicmVxdWVzdC1uby1jb3JzXCIgYW5kXG4gICAgLy8gICAgbmFtZS92YWx1ZSBpcyBub3QgYSBuby1DT1JTLXNhZmVsaXN0ZWQgcmVxdWVzdC1oZWFkZXIsXG4gICAgLy8gICAgcmV0dXJuLlxuICAgIC8vIDYuIE90aGVyd2lzZSwgaWYgdGhpc+KAmXMgZ3VhcmQgaXMgXCJyZXNwb25zZVwiIGFuZCBuYW1lIGlzIGFcbiAgICAvLyAgICBmb3JiaWRkZW4gcmVzcG9uc2UtaGVhZGVyIG5hbWUsIHJldHVybi5cbiAgICAvLyBOb3RlOiB1bmRpY2kgZG9lcyBub3QgaW1wbGVtZW50IGZvcmJpZGRlbiBoZWFkZXIgbmFtZXNcbiAgICBpZiAodGhpcy4jZ3VhcmQgPT09ICdpbW11dGFibGUnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbW11dGFibGUnKVxuICAgIH1cblxuICAgIC8vIDcuIFNldCAobmFtZSwgdmFsdWUpIGluIHRoaXPigJlzIGhlYWRlciBsaXN0LlxuICAgIC8vIDguIElmIHRoaXPigJlzIGd1YXJkIGlzIFwicmVxdWVzdC1uby1jb3JzXCIsIHRoZW4gcmVtb3ZlXG4gICAgLy8gICAgcHJpdmlsZWdlZCBuby1DT1JTIHJlcXVlc3QgaGVhZGVycyBmcm9tIHRoaXNcbiAgICB0aGlzLiNoZWFkZXJzTGlzdC5zZXQobmFtZSwgdmFsdWUsIGZhbHNlKVxuICB9XG5cbiAgLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1oZWFkZXJzLWdldHNldGNvb2tpZVxuICBnZXRTZXRDb29raWUgKCkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIEhlYWRlcnMpXG5cbiAgICAvLyAxLiBJZiB0aGlz4oCZcyBoZWFkZXIgbGlzdCBkb2VzIG5vdCBjb250YWluIGBTZXQtQ29va2llYCwgdGhlbiByZXR1cm4gwqsgwrsuXG4gICAgLy8gMi4gUmV0dXJuIHRoZSB2YWx1ZXMgb2YgYWxsIGhlYWRlcnMgaW4gdGhpc+KAmXMgaGVhZGVyIGxpc3Qgd2hvc2UgbmFtZSBpc1xuICAgIC8vICAgIGEgYnl0ZS1jYXNlLWluc2Vuc2l0aXZlIG1hdGNoIGZvciBgU2V0LUNvb2tpZWAsIGluIG9yZGVyLlxuXG4gICAgY29uc3QgbGlzdCA9IHRoaXMuI2hlYWRlcnNMaXN0LmNvb2tpZXNcblxuICAgIGlmIChsaXN0KSB7XG4gICAgICByZXR1cm4gWy4uLmxpc3RdXG4gICAgfVxuXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICAvLyBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1oZWFkZXItbGlzdC1zb3J0LWFuZC1jb21iaW5lXG4gIGdldCBba0hlYWRlcnNTb3J0ZWRNYXBdICgpIHtcbiAgICBpZiAodGhpcy4jaGVhZGVyc0xpc3Rba0hlYWRlcnNTb3J0ZWRNYXBdKSB7XG4gICAgICByZXR1cm4gdGhpcy4jaGVhZGVyc0xpc3Rba0hlYWRlcnNTb3J0ZWRNYXBdXG4gICAgfVxuXG4gICAgLy8gMS4gTGV0IGhlYWRlcnMgYmUgYW4gZW1wdHkgbGlzdCBvZiBoZWFkZXJzIHdpdGggdGhlIGtleSBiZWluZyB0aGUgbmFtZVxuICAgIC8vICAgIGFuZCB2YWx1ZSB0aGUgdmFsdWUuXG4gICAgY29uc3QgaGVhZGVycyA9IFtdXG5cbiAgICAvLyAyLiBMZXQgbmFtZXMgYmUgdGhlIHJlc3VsdCBvZiBjb252ZXJ0IGhlYWRlciBuYW1lcyB0byBhIHNvcnRlZC1sb3dlcmNhc2VcbiAgICAvLyAgICBzZXQgd2l0aCBhbGwgdGhlIG5hbWVzIG9mIHRoZSBoZWFkZXJzIGluIGxpc3QuXG4gICAgY29uc3QgbmFtZXMgPSB0aGlzLiNoZWFkZXJzTGlzdC50b1NvcnRlZEFycmF5KClcblxuICAgIGNvbnN0IGNvb2tpZXMgPSB0aGlzLiNoZWFkZXJzTGlzdC5jb29raWVzXG5cbiAgICAvLyBmYXN0LXBhdGhcbiAgICBpZiAoY29va2llcyA9PT0gbnVsbCB8fCBjb29raWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gTm90ZTogVGhlIG5vbi1udWxsIGFzc2VydGlvbiBvZiB2YWx1ZSBoYXMgYWxyZWFkeSBiZWVuIGRvbmUgYnkgYEhlYWRlcnNMaXN0I3RvU29ydGVkQXJyYXlgXG4gICAgICByZXR1cm4gKHRoaXMuI2hlYWRlcnNMaXN0W2tIZWFkZXJzU29ydGVkTWFwXSA9IG5hbWVzKVxuICAgIH1cblxuICAgIC8vIDMuIEZvciBlYWNoIG5hbWUgb2YgbmFtZXM6XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgeyAwOiBuYW1lLCAxOiB2YWx1ZSB9ID0gbmFtZXNbaV1cbiAgICAgIC8vIDEuIElmIG5hbWUgaXMgYHNldC1jb29raWVgLCB0aGVuOlxuICAgICAgaWYgKG5hbWUgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICAvLyAxLiBMZXQgdmFsdWVzIGJlIGEgbGlzdCBvZiBhbGwgdmFsdWVzIG9mIGhlYWRlcnMgaW4gbGlzdCB3aG9zZSBuYW1lXG4gICAgICAgIC8vICAgIGlzIGEgYnl0ZS1jYXNlLWluc2Vuc2l0aXZlIG1hdGNoIGZvciBuYW1lLCBpbiBvcmRlci5cblxuICAgICAgICAvLyAyLiBGb3IgZWFjaCB2YWx1ZSBvZiB2YWx1ZXM6XG4gICAgICAgIC8vIDEuIEFwcGVuZCAobmFtZSwgdmFsdWUpIHRvIGhlYWRlcnMuXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29va2llcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgIGhlYWRlcnMucHVzaChbbmFtZSwgY29va2llc1tqXV0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIDIuIE90aGVyd2lzZTpcblxuICAgICAgICAvLyAxLiBMZXQgdmFsdWUgYmUgdGhlIHJlc3VsdCBvZiBnZXR0aW5nIG5hbWUgZnJvbSBsaXN0LlxuXG4gICAgICAgIC8vIDIuIEFzc2VydDogdmFsdWUgaXMgbm9uLW51bGwuXG4gICAgICAgIC8vIE5vdGU6IFRoaXMgb3BlcmF0aW9uIHdhcyBkb25lIGJ5IGBIZWFkZXJzTGlzdCN0b1NvcnRlZEFycmF5YC5cblxuICAgICAgICAvLyAzLiBBcHBlbmQgKG5hbWUsIHZhbHVlKSB0byBoZWFkZXJzLlxuICAgICAgICBoZWFkZXJzLnB1c2goW25hbWUsIHZhbHVlXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyA0LiBSZXR1cm4gaGVhZGVycy5cbiAgICByZXR1cm4gKHRoaXMuI2hlYWRlcnNMaXN0W2tIZWFkZXJzU29ydGVkTWFwXSA9IGhlYWRlcnMpXG4gIH1cblxuICBbdXRpbC5pbnNwZWN0LmN1c3RvbV0gKGRlcHRoLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucy5kZXB0aCA/Pz0gZGVwdGhcblxuICAgIHJldHVybiBgSGVhZGVycyAke3V0aWwuZm9ybWF0V2l0aE9wdGlvbnMob3B0aW9ucywgdGhpcy4jaGVhZGVyc0xpc3QuZW50cmllcyl9YFxuICB9XG5cbiAgc3RhdGljIGdldEhlYWRlcnNHdWFyZCAobykge1xuICAgIHJldHVybiBvLiNndWFyZFxuICB9XG5cbiAgc3RhdGljIHNldEhlYWRlcnNHdWFyZCAobywgZ3VhcmQpIHtcbiAgICBvLiNndWFyZCA9IGd1YXJkXG4gIH1cblxuICBzdGF0aWMgZ2V0SGVhZGVyc0xpc3QgKG8pIHtcbiAgICByZXR1cm4gby4jaGVhZGVyc0xpc3RcbiAgfVxuXG4gIHN0YXRpYyBzZXRIZWFkZXJzTGlzdCAobywgbGlzdCkge1xuICAgIG8uI2hlYWRlcnNMaXN0ID0gbGlzdFxuICB9XG59XG5cbmNvbnN0IHsgZ2V0SGVhZGVyc0d1YXJkLCBzZXRIZWFkZXJzR3VhcmQsIGdldEhlYWRlcnNMaXN0LCBzZXRIZWFkZXJzTGlzdCB9ID0gSGVhZGVyc1xuUmVmbGVjdC5kZWxldGVQcm9wZXJ0eShIZWFkZXJzLCAnZ2V0SGVhZGVyc0d1YXJkJylcblJlZmxlY3QuZGVsZXRlUHJvcGVydHkoSGVhZGVycywgJ3NldEhlYWRlcnNHdWFyZCcpXG5SZWZsZWN0LmRlbGV0ZVByb3BlcnR5KEhlYWRlcnMsICdnZXRIZWFkZXJzTGlzdCcpXG5SZWZsZWN0LmRlbGV0ZVByb3BlcnR5KEhlYWRlcnMsICdzZXRIZWFkZXJzTGlzdCcpXG5cbml0ZXJhdG9yTWl4aW4oJ0hlYWRlcnMnLCBIZWFkZXJzLCBrSGVhZGVyc1NvcnRlZE1hcCwgMCwgMSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoSGVhZGVycy5wcm90b3R5cGUsIHtcbiAgYXBwZW5kOiBrRW51bWVyYWJsZVByb3BlcnR5LFxuICBkZWxldGU6IGtFbnVtZXJhYmxlUHJvcGVydHksXG4gIGdldDoga0VudW1lcmFibGVQcm9wZXJ0eSxcbiAgaGFzOiBrRW51bWVyYWJsZVByb3BlcnR5LFxuICBzZXQ6IGtFbnVtZXJhYmxlUHJvcGVydHksXG4gIGdldFNldENvb2tpZToga0VudW1lcmFibGVQcm9wZXJ0eSxcbiAgW1N5bWJvbC50b1N0cmluZ1RhZ106IHtcbiAgICB2YWx1ZTogJ0hlYWRlcnMnLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9LFxuICBbdXRpbC5pbnNwZWN0LmN1c3RvbV06IHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICB9XG59KVxuXG53ZWJpZGwuY29udmVydGVycy5IZWFkZXJzSW5pdCA9IGZ1bmN0aW9uIChWLCBwcmVmaXgsIGFyZ3VtZW50KSB7XG4gIGlmICh3ZWJpZGwudXRpbC5UeXBlKFYpID09PSAnT2JqZWN0Jykge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gUmVmbGVjdC5nZXQoViwgU3ltYm9sLml0ZXJhdG9yKVxuXG4gICAgLy8gQSB3b3JrLWFyb3VuZCB0byBlbnN1cmUgd2Ugc2VuZCB0aGUgcHJvcGVybHktY2FzZWQgSGVhZGVycyB3aGVuIFYgaXMgYSBIZWFkZXJzIG9iamVjdC5cbiAgICAvLyBSZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvdW5kaWNpL3B1bGwvMzE1OSNpc3N1ZWNvbW1lbnQtMjA3NTUzNzIyNiBiZWZvcmUgdG91Y2hpbmcsIHBsZWFzZS5cbiAgICBpZiAoIXV0aWwudHlwZXMuaXNQcm94eShWKSAmJiBpdGVyYXRvciA9PT0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllcykgeyAvLyBIZWFkZXJzIG9iamVjdFxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldEhlYWRlcnNMaXN0KFYpLmVudHJpZXNMaXN0XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gZmFsbC10aHJvdWdoXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHdlYmlkbC5jb252ZXJ0ZXJzWydzZXF1ZW5jZTxzZXF1ZW5jZTxCeXRlU3RyaW5nPj4nXShWLCBwcmVmaXgsIGFyZ3VtZW50LCBpdGVyYXRvci5iaW5kKFYpKVxuICAgIH1cblxuICAgIHJldHVybiB3ZWJpZGwuY29udmVydGVyc1sncmVjb3JkPEJ5dGVTdHJpbmcsIEJ5dGVTdHJpbmc+J10oViwgcHJlZml4LCBhcmd1bWVudClcbiAgfVxuXG4gIHRocm93IHdlYmlkbC5lcnJvcnMuY29udmVyc2lvbkZhaWxlZCh7XG4gICAgcHJlZml4OiAnSGVhZGVycyBjb25zdHJ1Y3RvcicsXG4gICAgYXJndW1lbnQ6ICdBcmd1bWVudCAxJyxcbiAgICB0eXBlczogWydzZXF1ZW5jZTxzZXF1ZW5jZTxCeXRlU3RyaW5nPj4nLCAncmVjb3JkPEJ5dGVTdHJpbmcsIEJ5dGVTdHJpbmc+J11cbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpbGwsXG4gIC8vIGZvciB0ZXN0LlxuICBjb21wYXJlSGVhZGVyTmFtZSxcbiAgSGVhZGVycyxcbiAgSGVhZGVyc0xpc3QsXG4gIGdldEhlYWRlcnNHdWFyZCxcbiAgc2V0SGVhZGVyc0d1YXJkLFxuICBzZXRIZWFkZXJzTGlzdCxcbiAgZ2V0SGVhZGVyc0xpc3Rcbn1cbiJdLCJuYW1lcyI6WyJfdXRpbCRpbnNwZWN0JGN1c3RvbSIsIl9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjIiwiZSIsInQiLCJhIiwiX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24iLCJzZXQiLCJoYXMiLCJUeXBlRXJyb3IiLCJfY2xhc3NQcml2YXRlRmllbGRHZXQiLCJzIiwiZ2V0IiwiX2Fzc2VydENsYXNzQnJhbmQiLCJfY2xhc3NQcml2YXRlRmllbGRTZXQiLCJyIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsIl9kZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImkiLCJfdG9QcmltaXRpdmUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJTdHJpbmciLCJOdW1iZXIiLCJrQ29uc3RydWN0IiwicmVxdWlyZSIsImtFbnVtZXJhYmxlUHJvcGVydHkiLCJpdGVyYXRvck1peGluIiwiaXNWYWxpZEhlYWRlck5hbWUiLCJpc1ZhbGlkSGVhZGVyVmFsdWUiLCJ3ZWJpZGwiLCJhc3NlcnQiLCJ1dGlsIiwia0hlYWRlcnNNYXAiLCJrSGVhZGVyc1NvcnRlZE1hcCIsImlzSFRUUFdoaXRlU3BhY2VDaGFyQ29kZSIsImNvZGUiLCJoZWFkZXJWYWx1ZU5vcm1hbGl6ZSIsInBvdGVudGlhbFZhbHVlIiwiaiIsImNoYXJDb2RlQXQiLCJzdWJzdHJpbmciLCJmaWxsIiwiaGVhZGVycyIsIm9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImhlYWRlciIsImVycm9ycyIsImV4Y2VwdGlvbiIsIm1lc3NhZ2UiLCJhcHBlbmRIZWFkZXIiLCJrZXlzIiwiY29udmVyc2lvbkZhaWxlZCIsInByZWZpeCIsImFyZ3VtZW50IiwidHlwZXMiLCJuYW1lIiwiaW52YWxpZEFyZ3VtZW50IiwidHlwZSIsImdldEhlYWRlcnNHdWFyZCIsImdldEhlYWRlcnNMaXN0IiwiYXBwZW5kIiwiY29tcGFyZUhlYWRlck5hbWUiLCJiIiwiSGVhZGVyc0xpc3QiLCJjb25zdHJ1Y3RvciIsImluaXQiLCJNYXAiLCJjb29raWVzIiwiY29udGFpbnMiLCJpc0xvd2VyQ2FzZSIsInRvTG93ZXJDYXNlIiwiY2xlYXIiLCJsb3dlcmNhc2VOYW1lIiwiZXhpc3RzIiwiZGVsaW1pdGVyIiwicHVzaCIsImRlbGV0ZSIsIml0ZXJhdG9yIiwiZW50cmllcyIsInNpemUiLCJ2YWx1ZXMiLCJyYXdWYWx1ZXMiLCJlbnRyaWVzTGlzdCIsImxvd2VyTmFtZSIsImNvb2tpZSIsInRvU29ydGVkQXJyYXkiLCJhcnJheSIsImZpcnN0VmFsdWUiLCJuZXh0IiwicmlnaHQiLCJsZWZ0IiwicGl2b3QiLCJ4IiwiZG9uZSIsInNvcnQiLCJfZ3VhcmQiLCJXZWFrTWFwIiwiX2hlYWRlcnNMaXN0IiwiaW5zcGVjdCIsImN1c3RvbSIsIkhlYWRlcnMiLCJ1bmRlZmluZWQiLCJjb252ZXJ0ZXJzIiwiSGVhZGVyc0luaXQiLCJicmFuZENoZWNrIiwiYXJndW1lbnRMZW5ndGhDaGVjayIsIkJ5dGVTdHJpbmciLCJnZXRTZXRDb29raWUiLCJsaXN0IiwibmFtZXMiLCJkZXB0aCIsIm9wdGlvbnMiLCJmb3JtYXRXaXRoT3B0aW9ucyIsIm8iLCJzZXRIZWFkZXJzR3VhcmQiLCJndWFyZCIsInNldEhlYWRlcnNMaXN0IiwiUmVmbGVjdCIsImRlbGV0ZVByb3BlcnR5IiwiZGVmaW5lUHJvcGVydGllcyIsInByb3RvdHlwZSIsInRvU3RyaW5nVGFnIiwiViIsIlR5cGUiLCJpc1Byb3h5IiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/headers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/index.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// https://github.com/Ethan-Arrowood/undici-fetch\n\n\n\nconst {\n  makeNetworkError,\n  makeAppropriateNetworkError,\n  filterResponse,\n  makeResponse,\n  fromInnerResponse\n} = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/undici/lib/web/fetch/response.js\");\nconst {\n  HeadersList\n} = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\nconst {\n  Request,\n  cloneRequest\n} = __webpack_require__(/*! ./request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\");\nconst zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst {\n  bytesMatch,\n  makePolicyContainer,\n  clonePolicyContainer,\n  requestBadPort,\n  TAOCheck,\n  appendRequestOriginHeader,\n  responseLocationURL,\n  requestCurrentURL,\n  setRequestReferrerPolicyOnRedirect,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  createOpaqueTimingInfo,\n  appendFetchMetadata,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  determineRequestsReferrer,\n  coarsenedSharedCurrentTime,\n  createDeferredPromise,\n  isBlobLike,\n  sameOrigin,\n  isCancelled,\n  isAborted,\n  isErrorLike,\n  fullyReadBody,\n  readableStreamClose,\n  isomorphicEncode,\n  urlIsLocal,\n  urlIsHttpHttpsScheme,\n  urlHasHttpsScheme,\n  clampAndCoarsenConnectionTimingInfo,\n  simpleRangeHeaderValue,\n  buildContentRange,\n  createInflate,\n  extractMimeType\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst {\n  kState,\n  kDispatcher\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  safelyExtractBody,\n  extractBody\n} = __webpack_require__(/*! ./body */ \"(ssr)/./node_modules/undici/lib/web/fetch/body.js\");\nconst {\n  redirectStatusSet,\n  nullBodyStatus,\n  safeMethodsSet,\n  requestBodyHeader,\n  subresourceSet\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/fetch/constants.js\");\nconst EE = __webpack_require__(/*! node:events */ \"node:events\");\nconst {\n  Readable,\n  pipeline,\n  finished\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst {\n  addAbortListener,\n  isErrored,\n  isReadable,\n  bufferToLowerCasedHeaderName\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  dataURLProcessor,\n  serializeAMimeType,\n  minimizeSupportedMimeType\n} = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  getGlobalDispatcher\n} = __webpack_require__(/*! ../../global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  STATUS_CODES\n} = __webpack_require__(/*! node:http */ \"node:http\");\nconst GET_OR_HEAD = ['GET', 'HEAD'];\nconst defaultUserAgent = typeof __UNDICI_IS_NODE__ !== 'undefined' || typeof esbuildDetection !== 'undefined' ? 'node' : 'undici';\n\n/** @type {import('buffer').resolveObjectURL} */\nlet resolveObjectURL;\nclass Fetch extends EE {\n  constructor(dispatcher) {\n    super();\n    this.dispatcher = dispatcher;\n    this.connection = null;\n    this.dump = false;\n    this.state = 'ongoing';\n  }\n  terminate(reason) {\n    if (this.state !== 'ongoing') {\n      return;\n    }\n    this.state = 'terminated';\n    this.connection?.destroy(reason);\n    this.emit('terminated', reason);\n  }\n\n  // https://fetch.spec.whatwg.org/#fetch-controller-abort\n  abort(error) {\n    if (this.state !== 'ongoing') {\n      return;\n    }\n\n    // 1. Set controller’s state to \"aborted\".\n    this.state = 'aborted';\n\n    // 2. Let fallbackError be an \"AbortError\" DOMException.\n    // 3. Set error to fallbackError if it is not given.\n    if (!error) {\n      error = new DOMException('The operation was aborted.', 'AbortError');\n    }\n\n    // 4. Let serializedError be StructuredSerialize(error).\n    //    If that threw an exception, catch it, and let\n    //    serializedError be StructuredSerialize(fallbackError).\n\n    // 5. Set controller’s serialized abort reason to serializedError.\n    this.serializedAbortReason = error;\n    this.connection?.destroy(error);\n    this.emit('terminated', error);\n  }\n}\nfunction handleFetchDone(response) {\n  finalizeAndReportTiming(response, 'fetch');\n}\n\n// https://fetch.spec.whatwg.org/#fetch-method\nfunction fetch(input) {\n  let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  webidl.argumentLengthCheck(arguments, 1, 'globalThis.fetch');\n\n  // 1. Let p be a new promise.\n  let p = createDeferredPromise();\n\n  // 2. Let requestObject be the result of invoking the initial value of\n  // Request as constructor with input and init as arguments. If this throws\n  // an exception, reject p with it and return p.\n  let requestObject;\n  try {\n    requestObject = new Request(input, init);\n  } catch (e) {\n    p.reject(e);\n    return p.promise;\n  }\n\n  // 3. Let request be requestObject’s request.\n  const request = requestObject[kState];\n\n  // 4. If requestObject’s signal’s aborted flag is set, then:\n  if (requestObject.signal.aborted) {\n    // 1. Abort the fetch() call with p, request, null, and\n    //    requestObject’s signal’s abort reason.\n    abortFetch(p, request, null, requestObject.signal.reason);\n\n    // 2. Return p.\n    return p.promise;\n  }\n\n  // 5. Let globalObject be request’s client’s global object.\n  const globalObject = request.client.globalObject;\n\n  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n  // request’s service-workers mode to \"none\".\n  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {\n    request.serviceWorkers = 'none';\n  }\n\n  // 7. Let responseObject be null.\n  let responseObject = null;\n\n  // 8. Let relevantRealm be this’s relevant Realm.\n\n  // 9. Let locallyAborted be false.\n  let locallyAborted = false;\n\n  // 10. Let controller be null.\n  let controller = null;\n\n  // 11. Add the following abort steps to requestObject’s signal:\n  addAbortListener(requestObject.signal, () => {\n    // 1. Set locallyAborted to true.\n    locallyAborted = true;\n\n    // 2. Assert: controller is non-null.\n    assert(controller != null);\n\n    // 3. Abort controller with requestObject’s signal’s abort reason.\n    controller.abort(requestObject.signal.reason);\n    const realResponse = responseObject?.deref();\n\n    // 4. Abort the fetch() call with p, request, responseObject,\n    //    and requestObject’s signal’s abort reason.\n    abortFetch(p, request, realResponse, requestObject.signal.reason);\n  });\n\n  // 12. Let handleFetchDone given response response be to finalize and\n  // report timing with response, globalObject, and \"fetch\".\n  // see function handleFetchDone\n\n  // 13. Set controller to the result of calling fetch given request,\n  // with processResponseEndOfBody set to handleFetchDone, and processResponse\n  // given response being these substeps:\n\n  const processResponse = response => {\n    // 1. If locallyAborted is true, terminate these substeps.\n    if (locallyAborted) {\n      return;\n    }\n\n    // 2. If response’s aborted flag is set, then:\n    if (response.aborted) {\n      // 1. Let deserializedError be the result of deserialize a serialized\n      //    abort reason given controller’s serialized abort reason and\n      //    relevantRealm.\n\n      // 2. Abort the fetch() call with p, request, responseObject, and\n      //    deserializedError.\n\n      abortFetch(p, request, responseObject, controller.serializedAbortReason);\n      return;\n    }\n\n    // 3. If response is a network error, then reject p with a TypeError\n    // and terminate these substeps.\n    if (response.type === 'error') {\n      p.reject(new TypeError('fetch failed', {\n        cause: response.error\n      }));\n      return;\n    }\n\n    // 4. Set responseObject to the result of creating a Response object,\n    // given response, \"immutable\", and relevantRealm.\n    responseObject = new WeakRef(fromInnerResponse(response, 'immutable'));\n\n    // 5. Resolve p with responseObject.\n    p.resolve(responseObject.deref());\n    p = null;\n  };\n  controller = fetching({\n    request,\n    processResponseEndOfBody: handleFetchDone,\n    processResponse,\n    dispatcher: requestObject[kDispatcher] // undici\n  });\n\n  // 14. Return p.\n  return p.promise;\n}\n\n// https://fetch.spec.whatwg.org/#finalize-and-report-timing\nfunction finalizeAndReportTiming(response) {\n  let initiatorType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'other';\n  // 1. If response is an aborted network error, then return.\n  if (response.type === 'error' && response.aborted) {\n    return;\n  }\n\n  // 2. If response’s URL list is null or empty, then return.\n  if (!response.urlList?.length) {\n    return;\n  }\n\n  // 3. Let originalURL be response’s URL list[0].\n  const originalURL = response.urlList[0];\n\n  // 4. Let timingInfo be response’s timing info.\n  let timingInfo = response.timingInfo;\n\n  // 5. Let cacheState be response’s cache state.\n  let cacheState = response.cacheState;\n\n  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.\n  if (!urlIsHttpHttpsScheme(originalURL)) {\n    return;\n  }\n\n  // 7. If timingInfo is null, then return.\n  if (timingInfo === null) {\n    return;\n  }\n\n  // 8. If response’s timing allow passed flag is not set, then:\n  if (!response.timingAllowPassed) {\n    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.\n    timingInfo = createOpaqueTimingInfo({\n      startTime: timingInfo.startTime\n    });\n\n    //  2. Set cacheState to the empty string.\n    cacheState = '';\n  }\n\n  // 9. Set timingInfo’s end time to the coarsened shared current time\n  // given global’s relevant settings object’s cross-origin isolated\n  // capability.\n  // TODO: given global’s relevant settings object’s cross-origin isolated\n  // capability?\n  timingInfo.endTime = coarsenedSharedCurrentTime();\n\n  // 10. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo;\n\n  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,\n  // global, and cacheState.\n  markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState);\n}\n\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\nconst markResourceTiming = performance.markResourceTiming;\n\n// https://fetch.spec.whatwg.org/#abort-fetch\nfunction abortFetch(p, request, responseObject, error) {\n  // 1. Reject promise with error.\n  if (p) {\n    // We might have already resolved the promise at this stage\n    p.reject(error);\n  }\n\n  // 2. If request’s body is not null and is readable, then cancel request’s\n  // body with error.\n  if (request.body != null && isReadable(request.body?.stream)) {\n    request.body.stream.cancel(error).catch(err => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return;\n      }\n      throw err;\n    });\n  }\n\n  // 3. If responseObject is null, then return.\n  if (responseObject == null) {\n    return;\n  }\n\n  // 4. Let response be responseObject’s response.\n  const response = responseObject[kState];\n\n  // 5. If response’s body is not null and is readable, then error response’s\n  // body with error.\n  if (response.body != null && isReadable(response.body?.stream)) {\n    response.body.stream.cancel(error).catch(err => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return;\n      }\n      throw err;\n    });\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetching\nfunction fetching(_ref) {\n  let {\n    request,\n    processRequestBodyChunkLength,\n    processRequestEndOfBody,\n    processResponse,\n    processResponseEndOfBody,\n    processResponseConsumeBody,\n    useParallelQueue = false,\n    dispatcher = getGlobalDispatcher() // undici\n  } = _ref;\n  // Ensure that the dispatcher is set accordingly\n  assert(dispatcher);\n\n  // 1. Let taskDestination be null.\n  let taskDestination = null;\n\n  // 2. Let crossOriginIsolatedCapability be false.\n  let crossOriginIsolatedCapability = false;\n\n  // 3. If request’s client is non-null, then:\n  if (request.client != null) {\n    // 1. Set taskDestination to request’s client’s global object.\n    taskDestination = request.client.globalObject;\n\n    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin\n    // isolated capability.\n    crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;\n  }\n\n  // 4. If useParallelQueue is true, then set taskDestination to the result of\n  // starting a new parallel queue.\n  // TODO\n\n  // 5. Let timingInfo be a new fetch timing info whose start time and\n  // post-redirect start time are the coarsened shared current time given\n  // crossOriginIsolatedCapability.\n  const currentTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);\n  const timingInfo = createOpaqueTimingInfo({\n    startTime: currentTime\n  });\n\n  // 6. Let fetchParams be a new fetch params whose\n  // request is request,\n  // timing info is timingInfo,\n  // process request body chunk length is processRequestBodyChunkLength,\n  // process request end-of-body is processRequestEndOfBody,\n  // process response is processResponse,\n  // process response consume body is processResponseConsumeBody,\n  // process response end-of-body is processResponseEndOfBody,\n  // task destination is taskDestination,\n  // and cross-origin isolated capability is crossOriginIsolatedCapability.\n  const fetchParams = {\n    controller: new Fetch(dispatcher),\n    request,\n    timingInfo,\n    processRequestBodyChunkLength,\n    processRequestEndOfBody,\n    processResponse,\n    processResponseConsumeBody,\n    processResponseEndOfBody,\n    taskDestination,\n    crossOriginIsolatedCapability\n  };\n\n  // 7. If request’s body is a byte sequence, then set request’s body to\n  //    request’s body as a body.\n  // NOTE: Since fetching is only called from fetch, body should already be\n  // extracted.\n  assert(!request.body || request.body.stream);\n\n  // 8. If request’s window is \"client\", then set request’s window to request’s\n  // client, if request’s client’s global object is a Window object; otherwise\n  // \"no-window\".\n  if (request.window === 'client') {\n    // TODO: What if request.client is null?\n    request.window = request.client?.globalObject?.constructor?.name === 'Window' ? request.client : 'no-window';\n  }\n\n  // 9. If request’s origin is \"client\", then set request’s origin to request’s\n  // client’s origin.\n  if (request.origin === 'client') {\n    request.origin = request.client.origin;\n  }\n\n  // 10. If all of the following conditions are true:\n  // TODO\n\n  // 11. If request’s policy container is \"client\", then:\n  if (request.policyContainer === 'client') {\n    // 1. If request’s client is non-null, then set request’s policy\n    // container to a clone of request’s client’s policy container. [HTML]\n    if (request.client != null) {\n      request.policyContainer = clonePolicyContainer(request.client.policyContainer);\n    } else {\n      // 2. Otherwise, set request’s policy container to a new policy\n      // container.\n      request.policyContainer = makePolicyContainer();\n    }\n  }\n\n  // 12. If request’s header list does not contain `Accept`, then:\n  if (!request.headersList.contains('accept', true)) {\n    // 1. Let value be `*/*`.\n    const value = '*/*';\n\n    // 2. A user agent should set value to the first matching statement, if\n    // any, switching on request’s destination:\n    // \"document\"\n    // \"frame\"\n    // \"iframe\"\n    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n    // \"image\"\n    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n    // \"style\"\n    // `text/css,*/*;q=0.1`\n    // TODO\n\n    // 3. Append `Accept`/value to request’s header list.\n    request.headersList.append('accept', value, true);\n  }\n\n  // 13. If request’s header list does not contain `Accept-Language`, then\n  // user agents should append `Accept-Language`/an appropriate value to\n  // request’s header list.\n  if (!request.headersList.contains('accept-language', true)) {\n    request.headersList.append('accept-language', '*', true);\n  }\n\n  // 14. If request’s priority is null, then use request’s initiator and\n  // destination appropriately in setting request’s priority to a\n  // user-agent-defined object.\n  if (request.priority === null) {\n    // TODO\n  }\n\n  // 15. If request is a subresource request, then:\n  if (subresourceSet.has(request.destination)) {\n    // TODO\n  }\n\n  // 16. Run main fetch given fetchParams.\n  mainFetch(fetchParams).catch(err => {\n    fetchParams.controller.terminate(err);\n  });\n\n  // 17. Return fetchParam's controller\n  return fetchParams.controller;\n}\n\n// https://fetch.spec.whatwg.org/#concept-main-fetch\nasync function mainFetch(fetchParams) {\n  let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let response be null.\n  let response = null;\n\n  // 3. If request’s local-URLs-only flag is set and request’s current URL is\n  // not local, then set response to a network error.\n  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {\n    response = makeNetworkError('local URLs only');\n  }\n\n  // 4. Run report Content Security Policy violations for request.\n  // TODO\n\n  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n  tryUpgradeRequestToAPotentiallyTrustworthyURL(request);\n\n  // 6. If should request be blocked due to a bad port, should fetching request\n  // be blocked as mixed content, or should request be blocked by Content\n  // Security Policy returns blocked, then set response to a network error.\n  if (requestBadPort(request) === 'blocked') {\n    response = makeNetworkError('bad port');\n  }\n  // TODO: should fetching request be blocked as mixed content?\n  // TODO: should request be blocked by Content Security Policy?\n\n  // 7. If request’s referrer policy is the empty string, then set request’s\n  // referrer policy to request’s policy container’s referrer policy.\n  if (request.referrerPolicy === '') {\n    request.referrerPolicy = request.policyContainer.referrerPolicy;\n  }\n\n  // 8. If request’s referrer is not \"no-referrer\", then set request’s\n  // referrer to the result of invoking determine request’s referrer.\n  if (request.referrer !== 'no-referrer') {\n    request.referrer = determineRequestsReferrer(request);\n  }\n\n  // 9. Set request’s current URL’s scheme to \"https\" if all of the following\n  // conditions are true:\n  // - request’s current URL’s scheme is \"http\"\n  // - request’s current URL’s host is a domain\n  // - Matching request’s current URL’s host per Known HSTS Host Domain Name\n  //   Matching results in either a superdomain match with an asserted\n  //   includeSubDomains directive or a congruent match (with or without an\n  //   asserted includeSubDomains directive). [HSTS]\n  // TODO\n\n  // 10. If recursive is false, then run the remaining steps in parallel.\n  // TODO\n\n  // 11. If response is null, then set response to the result of running\n  // the steps corresponding to the first matching statement:\n  if (response === null) {\n    response = await (async () => {\n      const currentURL = requestCurrentURL(request);\n      if (\n      // - request’s current URL’s origin is same origin with request’s origin,\n      //   and request’s response tainting is \"basic\"\n      sameOrigin(currentURL, request.url) && request.responseTainting === 'basic' ||\n      // request’s current URL’s scheme is \"data\"\n      currentURL.protocol === 'data:' ||\n      // - request’s mode is \"navigate\" or \"websocket\"\n      request.mode === 'navigate' || request.mode === 'websocket') {\n        // 1. Set request’s response tainting to \"basic\".\n        request.responseTainting = 'basic';\n\n        // 2. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams);\n      }\n\n      // request’s mode is \"same-origin\"\n      if (request.mode === 'same-origin') {\n        // 1. Return a network error.\n        return makeNetworkError('request mode cannot be \"same-origin\"');\n      }\n\n      // request’s mode is \"no-cors\"\n      if (request.mode === 'no-cors') {\n        // 1. If request’s redirect mode is not \"follow\", then return a network\n        // error.\n        if (request.redirect !== 'follow') {\n          return makeNetworkError('redirect mode cannot be \"follow\" for \"no-cors\" request');\n        }\n\n        // 2. Set request’s response tainting to \"opaque\".\n        request.responseTainting = 'opaque';\n\n        // 3. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams);\n      }\n\n      // request’s current URL’s scheme is not an HTTP(S) scheme\n      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {\n        // Return a network error.\n        return makeNetworkError('URL scheme must be a HTTP(S) scheme');\n      }\n\n      // - request’s use-CORS-preflight flag is set\n      // - request’s unsafe-request flag is set and either request’s method is\n      //   not a CORS-safelisted method or CORS-unsafe request-header names with\n      //   request’s header list is not empty\n      //    1. Set request’s response tainting to \"cors\".\n      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n      //    given fetchParams and true.\n      //    3. If corsWithPreflightResponse is a network error, then clear cache\n      //    entries using request.\n      //    4. Return corsWithPreflightResponse.\n      // TODO\n\n      // Otherwise\n      //    1. Set request’s response tainting to \"cors\".\n      request.responseTainting = 'cors';\n\n      //    2. Return the result of running HTTP fetch given fetchParams.\n      return await httpFetch(fetchParams);\n    })();\n  }\n\n  // 12. If recursive is true, then return response.\n  if (recursive) {\n    return response;\n  }\n\n  // 13. If response is not a network error and response is not a filtered\n  // response, then:\n  if (response.status !== 0 && !response.internalResponse) {\n    // If request’s response tainting is \"cors\", then:\n    if (request.responseTainting === 'cors') {\n      // 1. Let headerNames be the result of extracting header list values\n      // given `Access-Control-Expose-Headers` and response’s header list.\n      // TODO\n      // 2. If request’s credentials mode is not \"include\" and headerNames\n      // contains `*`, then set response’s CORS-exposed header-name list to\n      // all unique header names in response’s header list.\n      // TODO\n      // 3. Otherwise, if headerNames is not null or failure, then set\n      // response’s CORS-exposed header-name list to headerNames.\n      // TODO\n    }\n\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request’s response tainting:\n    if (request.responseTainting === 'basic') {\n      response = filterResponse(response, 'basic');\n    } else if (request.responseTainting === 'cors') {\n      response = filterResponse(response, 'cors');\n    } else if (request.responseTainting === 'opaque') {\n      response = filterResponse(response, 'opaque');\n    } else {\n      assert(false);\n    }\n  }\n\n  // 14. Let internalResponse be response, if response is a network error,\n  // and response’s internal response otherwise.\n  let internalResponse = response.status === 0 ? response : response.internalResponse;\n\n  // 15. If internalResponse’s URL list is empty, then set it to a clone of\n  // request’s URL list.\n  if (internalResponse.urlList.length === 0) {\n    internalResponse.urlList.push(...request.urlList);\n  }\n\n  // 16. If request’s timing allow failed flag is unset, then set\n  // internalResponse’s timing allow passed flag.\n  if (!request.timingAllowFailed) {\n    response.timingAllowPassed = true;\n  }\n\n  // 17. If response is not a network error and any of the following returns\n  // blocked\n  // - should internalResponse to request be blocked as mixed content\n  // - should internalResponse to request be blocked by Content Security Policy\n  // - should internalResponse to request be blocked due to its MIME type\n  // - should internalResponse to request be blocked due to nosniff\n  // TODO\n\n  // 18. If response’s type is \"opaque\", internalResponse’s status is 206,\n  // internalResponse’s range-requested flag is set, and request’s header\n  // list does not contain `Range`, then set response and internalResponse\n  // to a network error.\n  if (response.type === 'opaque' && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains('range', true)) {\n    response = internalResponse = makeNetworkError();\n  }\n\n  // 19. If response is not a network error and either request’s method is\n  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,\n  // set internalResponse’s body to null and disregard any enqueuing toward\n  // it (if any).\n  if (response.status !== 0 && (request.method === 'HEAD' || request.method === 'CONNECT' || nullBodyStatus.includes(internalResponse.status))) {\n    internalResponse.body = null;\n    fetchParams.controller.dump = true;\n  }\n\n  // 20. If request’s integrity metadata is not the empty string, then:\n  if (request.integrity) {\n    // 1. Let processBodyError be this step: run fetch finale given fetchParams\n    // and a network error.\n    const processBodyError = reason => fetchFinale(fetchParams, makeNetworkError(reason));\n\n    // 2. If request’s response tainting is \"opaque\", or response’s body is null,\n    // then run processBodyError and abort these steps.\n    if (request.responseTainting === 'opaque' || response.body == null) {\n      processBodyError(response.error);\n      return;\n    }\n\n    // 3. Let processBody given bytes be these steps:\n    const processBody = bytes => {\n      // 1. If bytes do not match request’s integrity metadata,\n      // then run processBodyError and abort these steps. [SRI]\n      if (!bytesMatch(bytes, request.integrity)) {\n        processBodyError('integrity mismatch');\n        return;\n      }\n\n      // 2. Set response’s body to bytes as a body.\n      response.body = safelyExtractBody(bytes)[0];\n\n      // 3. Run fetch finale given fetchParams and response.\n      fetchFinale(fetchParams, response);\n    };\n\n    // 4. Fully read response’s body given processBody and processBodyError.\n    await fullyReadBody(response.body, processBody, processBodyError);\n  } else {\n    // 21. Otherwise, run fetch finale given fetchParams and response.\n    fetchFinale(fetchParams, response);\n  }\n}\n\n// https://fetch.spec.whatwg.org/#concept-scheme-fetch\n// given a fetch params fetchParams\nfunction schemeFetch(fetchParams) {\n  // Note: since the connection is destroyed on redirect, which sets fetchParams to a\n  // cancelled state, we do not want this condition to trigger *unless* there have been\n  // no redirects. See https://github.com/nodejs/undici/issues/1776\n  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {\n    return Promise.resolve(makeAppropriateNetworkError(fetchParams));\n  }\n\n  // 2. Let request be fetchParams’s request.\n  const {\n    request\n  } = fetchParams;\n  const {\n    protocol: scheme\n  } = requestCurrentURL(request);\n\n  // 3. Switch on request’s current URL’s scheme and run the associated steps:\n  switch (scheme) {\n    case 'about:':\n      {\n        // If request’s current URL’s path is the string \"blank\", then return a new response\n        // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,\n        // and body is the empty byte sequence as a body.\n\n        // Otherwise, return a network error.\n        return Promise.resolve(makeNetworkError('about scheme is not supported'));\n      }\n    case 'blob:':\n      {\n        if (!resolveObjectURL) {\n          resolveObjectURL = (__webpack_require__(/*! node:buffer */ \"node:buffer\").resolveObjectURL);\n        }\n\n        // 1. Let blobURLEntry be request’s current URL’s blob URL entry.\n        const blobURLEntry = requestCurrentURL(request);\n\n        // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56\n        // Buffer.resolveObjectURL does not ignore URL queries.\n        if (blobURLEntry.search.length !== 0) {\n          return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'));\n        }\n        const blob = resolveObjectURL(blobURLEntry.toString());\n\n        // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s\n        //    object is not a Blob object, then return a network error.\n        if (request.method !== 'GET' || !isBlobLike(blob)) {\n          return Promise.resolve(makeNetworkError('invalid method'));\n        }\n\n        // 3. Let blob be blobURLEntry’s object.\n        // Note: done above\n\n        // 4. Let response be a new response.\n        const response = makeResponse();\n\n        // 5. Let fullLength be blob’s size.\n        const fullLength = blob.size;\n\n        // 6. Let serializedFullLength be fullLength, serialized and isomorphic encoded.\n        const serializedFullLength = isomorphicEncode(`${fullLength}`);\n\n        // 7. Let type be blob’s type.\n        const type = blob.type;\n\n        // 8. If request’s header list does not contain `Range`:\n        // 9. Otherwise:\n        if (!request.headersList.contains('range', true)) {\n          // 1. Let bodyWithType be the result of safely extracting blob.\n          // Note: in the FileAPI a blob \"object\" is a Blob *or* a MediaSource.\n          // In node, this can only ever be a Blob. Therefore we can safely\n          // use extractBody directly.\n          const bodyWithType = extractBody(blob);\n\n          // 2. Set response’s status message to `OK`.\n          response.statusText = 'OK';\n\n          // 3. Set response’s body to bodyWithType’s body.\n          response.body = bodyWithType[0];\n\n          // 4. Set response’s header list to « (`Content-Length`, serializedFullLength), (`Content-Type`, type) ».\n          response.headersList.set('content-length', serializedFullLength, true);\n          response.headersList.set('content-type', type, true);\n        } else {\n          // 1. Set response’s range-requested flag.\n          response.rangeRequested = true;\n\n          // 2. Let rangeHeader be the result of getting `Range` from request’s header list.\n          const rangeHeader = request.headersList.get('range', true);\n\n          // 3. Let rangeValue be the result of parsing a single range header value given rangeHeader and true.\n          const rangeValue = simpleRangeHeaderValue(rangeHeader, true);\n\n          // 4. If rangeValue is failure, then return a network error.\n          if (rangeValue === 'failure') {\n            return Promise.resolve(makeNetworkError('failed to fetch the data URL'));\n          }\n\n          // 5. Let (rangeStart, rangeEnd) be rangeValue.\n          let {\n            rangeStartValue: rangeStart,\n            rangeEndValue: rangeEnd\n          } = rangeValue;\n\n          // 6. If rangeStart is null:\n          // 7. Otherwise:\n          if (rangeStart === null) {\n            // 1. Set rangeStart to fullLength − rangeEnd.\n            rangeStart = fullLength - rangeEnd;\n\n            // 2. Set rangeEnd to rangeStart + rangeEnd − 1.\n            rangeEnd = rangeStart + rangeEnd - 1;\n          } else {\n            // 1. If rangeStart is greater than or equal to fullLength, then return a network error.\n            if (rangeStart >= fullLength) {\n              return Promise.resolve(makeNetworkError('Range start is greater than the blob\\'s size.'));\n            }\n\n            // 2. If rangeEnd is null or rangeEnd is greater than or equal to fullLength, then set\n            //    rangeEnd to fullLength − 1.\n            if (rangeEnd === null || rangeEnd >= fullLength) {\n              rangeEnd = fullLength - 1;\n            }\n          }\n\n          // 8. Let slicedBlob be the result of invoking slice blob given blob, rangeStart,\n          //    rangeEnd + 1, and type.\n          const slicedBlob = blob.slice(rangeStart, rangeEnd, type);\n\n          // 9. Let slicedBodyWithType be the result of safely extracting slicedBlob.\n          // Note: same reason as mentioned above as to why we use extractBody\n          const slicedBodyWithType = extractBody(slicedBlob);\n\n          // 10. Set response’s body to slicedBodyWithType’s body.\n          response.body = slicedBodyWithType[0];\n\n          // 11. Let serializedSlicedLength be slicedBlob’s size, serialized and isomorphic encoded.\n          const serializedSlicedLength = isomorphicEncode(`${slicedBlob.size}`);\n\n          // 12. Let contentRange be the result of invoking build a content range given rangeStart,\n          //     rangeEnd, and fullLength.\n          const contentRange = buildContentRange(rangeStart, rangeEnd, fullLength);\n\n          // 13. Set response’s status to 206.\n          response.status = 206;\n\n          // 14. Set response’s status message to `Partial Content`.\n          response.statusText = 'Partial Content';\n\n          // 15. Set response’s header list to « (`Content-Length`, serializedSlicedLength),\n          //     (`Content-Type`, type), (`Content-Range`, contentRange) ».\n          response.headersList.set('content-length', serializedSlicedLength, true);\n          response.headersList.set('content-type', type, true);\n          response.headersList.set('content-range', contentRange, true);\n        }\n\n        // 10. Return response.\n        return Promise.resolve(response);\n      }\n    case 'data:':\n      {\n        // 1. Let dataURLStruct be the result of running the\n        //    data: URL processor on request’s current URL.\n        const currentURL = requestCurrentURL(request);\n        const dataURLStruct = dataURLProcessor(currentURL);\n\n        // 2. If dataURLStruct is failure, then return a\n        //    network error.\n        if (dataURLStruct === 'failure') {\n          return Promise.resolve(makeNetworkError('failed to fetch the data URL'));\n        }\n\n        // 3. Let mimeType be dataURLStruct’s MIME type, serialized.\n        const mimeType = serializeAMimeType(dataURLStruct.mimeType);\n\n        // 4. Return a response whose status message is `OK`,\n        //    header list is « (`Content-Type`, mimeType) »,\n        //    and body is dataURLStruct’s body as a body.\n        return Promise.resolve(makeResponse({\n          statusText: 'OK',\n          headersList: [['content-type', {\n            name: 'Content-Type',\n            value: mimeType\n          }]],\n          body: safelyExtractBody(dataURLStruct.body)[0]\n        }));\n      }\n    case 'file:':\n      {\n        // For now, unfortunate as it is, file URLs are left as an exercise for the reader.\n        // When in doubt, return a network error.\n        return Promise.resolve(makeNetworkError('not implemented... yet...'));\n      }\n    case 'http:':\n    case 'https:':\n      {\n        // Return the result of running HTTP fetch given fetchParams.\n\n        return httpFetch(fetchParams).catch(err => makeNetworkError(err));\n      }\n    default:\n      {\n        return Promise.resolve(makeNetworkError('unknown scheme'));\n      }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#finalize-response\nfunction finalizeResponse(fetchParams, response) {\n  // 1. Set fetchParams’s request’s done flag.\n  fetchParams.request.done = true;\n\n  // 2, If fetchParams’s process response done is not null, then queue a fetch\n  // task to run fetchParams’s process response done given response, with\n  // fetchParams’s task destination.\n  if (fetchParams.processResponseDone != null) {\n    queueMicrotask(() => fetchParams.processResponseDone(response));\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-finale\nfunction fetchFinale(fetchParams, response) {\n  // 1. Let timingInfo be fetchParams’s timing info.\n  let timingInfo = fetchParams.timingInfo;\n\n  // 2. If response is not a network error and fetchParams’s request’s client is a secure context,\n  //    then set timingInfo’s server-timing headers to the result of getting, decoding, and splitting\n  //    `Server-Timing` from response’s internal response’s header list.\n  // TODO\n\n  // 3. Let processResponseEndOfBody be the following steps:\n  const processResponseEndOfBody = () => {\n    // 1. Let unsafeEndTime be the unsafe shared current time.\n    const unsafeEndTime = Date.now(); // ?\n\n    // 2. If fetchParams’s request’s destination is \"document\", then set fetchParams’s controller’s\n    //    full timing info to fetchParams’s timing info.\n    if (fetchParams.request.destination === 'document') {\n      fetchParams.controller.fullTimingInfo = timingInfo;\n    }\n\n    // 3. Set fetchParams’s controller’s report timing steps to the following steps given a global object global:\n    fetchParams.controller.reportTimingSteps = () => {\n      // 1. If fetchParams’s request’s URL’s scheme is not an HTTP(S) scheme, then return.\n      if (fetchParams.request.url.protocol !== 'https:') {\n        return;\n      }\n\n      // 2. Set timingInfo’s end time to the relative high resolution time given unsafeEndTime and global.\n      timingInfo.endTime = unsafeEndTime;\n\n      // 3. Let cacheState be response’s cache state.\n      let cacheState = response.cacheState;\n\n      // 4. Let bodyInfo be response’s body info.\n      const bodyInfo = response.bodyInfo;\n\n      // 5. If response’s timing allow passed flag is not set, then set timingInfo to the result of creating an\n      //    opaque timing info for timingInfo and set cacheState to the empty string.\n      if (!response.timingAllowPassed) {\n        timingInfo = createOpaqueTimingInfo(timingInfo);\n        cacheState = '';\n      }\n\n      // 6. Let responseStatus be 0.\n      let responseStatus = 0;\n\n      // 7. If fetchParams’s request’s mode is not \"navigate\" or response’s has-cross-origin-redirects is false:\n      if (fetchParams.request.mode !== 'navigator' || !response.hasCrossOriginRedirects) {\n        // 1. Set responseStatus to response’s status.\n        responseStatus = response.status;\n\n        // 2. Let mimeType be the result of extracting a MIME type from response’s header list.\n        const mimeType = extractMimeType(response.headersList);\n\n        // 3. If mimeType is not failure, then set bodyInfo’s content type to the result of minimizing a supported MIME type given mimeType.\n        if (mimeType !== 'failure') {\n          bodyInfo.contentType = minimizeSupportedMimeType(mimeType);\n        }\n      }\n\n      // 8. If fetchParams’s request’s initiator type is non-null, then mark resource timing given timingInfo,\n      //    fetchParams’s request’s URL, fetchParams’s request’s initiator type, global, cacheState, bodyInfo,\n      //    and responseStatus.\n      if (fetchParams.request.initiatorType != null) {\n        // TODO: update markresourcetiming\n        markResourceTiming(timingInfo, fetchParams.request.url.href, fetchParams.request.initiatorType, globalThis, cacheState, bodyInfo, responseStatus);\n      }\n    };\n\n    // 4. Let processResponseEndOfBodyTask be the following steps:\n    const processResponseEndOfBodyTask = () => {\n      // 1. Set fetchParams’s request’s done flag.\n      fetchParams.request.done = true;\n\n      // 2. If fetchParams’s process response end-of-body is non-null, then run fetchParams’s process\n      //    response end-of-body given response.\n      if (fetchParams.processResponseEndOfBody != null) {\n        queueMicrotask(() => fetchParams.processResponseEndOfBody(response));\n      }\n\n      // 3. If fetchParams’s request’s initiator type is non-null and fetchParams’s request’s client’s\n      //    global object is fetchParams’s task destination, then run fetchParams’s controller’s report\n      //    timing steps given fetchParams’s request’s client’s global object.\n      if (fetchParams.request.initiatorType != null) {\n        fetchParams.controller.reportTimingSteps();\n      }\n    };\n\n    // 5. Queue a fetch task to run processResponseEndOfBodyTask with fetchParams’s task destination\n    queueMicrotask(() => processResponseEndOfBodyTask());\n  };\n\n  // 4. If fetchParams’s process response is non-null, then queue a fetch task to run fetchParams’s\n  //    process response given response, with fetchParams’s task destination.\n  if (fetchParams.processResponse != null) {\n    queueMicrotask(() => {\n      fetchParams.processResponse(response);\n      fetchParams.processResponse = null;\n    });\n  }\n\n  // 5. Let internalResponse be response, if response is a network error; otherwise response’s internal response.\n  const internalResponse = response.type === 'error' ? response : response.internalResponse ?? response;\n\n  // 6. If internalResponse’s body is null, then run processResponseEndOfBody.\n  // 7. Otherwise:\n  if (internalResponse.body == null) {\n    processResponseEndOfBody();\n  } else {\n    // mcollina: all the following steps of the specs are skipped.\n    // The internal transform stream is not needed.\n    // See https://github.com/nodejs/undici/pull/3093#issuecomment-2050198541\n\n    // 1. Let transformStream be a new TransformStream.\n    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk, enqueues chunk in transformStream.\n    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm and flushAlgorithm\n    //    set to processResponseEndOfBody.\n    // 4. Set internalResponse’s body’s stream to the result of internalResponse’s body’s stream piped through transformStream.\n\n    finished(internalResponse.body.stream, () => {\n      processResponseEndOfBody();\n    });\n  }\n}\n\n// https://fetch.spec.whatwg.org/#http-fetch\nasync function httpFetch(fetchParams) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let response be null.\n  let response = null;\n\n  // 3. Let actualResponse be null.\n  let actualResponse = null;\n\n  // 4. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo;\n\n  // 5. If request’s service-workers mode is \"all\", then:\n  if (request.serviceWorkers === 'all') {\n    // TODO\n  }\n\n  // 6. If response is null, then:\n  if (response === null) {\n    // 1. If makeCORSPreflight is true and one of these conditions is true:\n    // TODO\n\n    // 2. If request’s redirect mode is \"follow\", then set request’s\n    // service-workers mode to \"none\".\n    if (request.redirect === 'follow') {\n      request.serviceWorkers = 'none';\n    }\n\n    // 3. Set response and actualResponse to the result of running\n    // HTTP-network-or-cache fetch given fetchParams.\n    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);\n\n    // 4. If request’s response tainting is \"cors\" and a CORS check\n    // for request and response returns failure, then return a network error.\n    if (request.responseTainting === 'cors' && corsCheck(request, response) === 'failure') {\n      return makeNetworkError('cors failure');\n    }\n\n    // 5. If the TAO check for request and response returns failure, then set\n    // request’s timing allow failed flag.\n    if (TAOCheck(request, response) === 'failure') {\n      request.timingAllowFailed = true;\n    }\n  }\n\n  // 7. If either request’s response tainting or response’s type\n  // is \"opaque\", and the cross-origin resource policy check with\n  // request’s origin, request’s client, request’s destination,\n  // and actualResponse returns blocked, then return a network error.\n  if ((request.responseTainting === 'opaque' || response.type === 'opaque') && crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === 'blocked') {\n    return makeNetworkError('blocked');\n  }\n\n  // 8. If actualResponse’s status is a redirect status, then:\n  if (redirectStatusSet.has(actualResponse.status)) {\n    // 1. If actualResponse’s status is not 303, request’s body is not null,\n    // and the connection uses HTTP/2, then user agents may, and are even\n    // encouraged to, transmit an RST_STREAM frame.\n    // See, https://github.com/whatwg/fetch/issues/1288\n    if (request.redirect !== 'manual') {\n      fetchParams.controller.connection.destroy(undefined, false);\n    }\n\n    // 2. Switch on request’s redirect mode:\n    if (request.redirect === 'error') {\n      // Set response to a network error.\n      response = makeNetworkError('unexpected redirect');\n    } else if (request.redirect === 'manual') {\n      // Set response to an opaque-redirect filtered response whose internal\n      // response is actualResponse.\n      // NOTE(spec): On the web this would return an `opaqueredirect` response,\n      // but that doesn't make sense server side.\n      // See https://github.com/nodejs/undici/issues/1193.\n      response = actualResponse;\n    } else if (request.redirect === 'follow') {\n      // Set response to the result of running HTTP-redirect fetch given\n      // fetchParams and response.\n      response = await httpRedirectFetch(fetchParams, response);\n    } else {\n      assert(false);\n    }\n  }\n\n  // 9. Set response’s timing info to timingInfo.\n  response.timingInfo = timingInfo;\n\n  // 10. Return response.\n  return response;\n}\n\n// https://fetch.spec.whatwg.org/#http-redirect-fetch\nfunction httpRedirectFetch(fetchParams, response) {\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let actualResponse be response, if response is not a filtered response,\n  // and response’s internal response otherwise.\n  const actualResponse = response.internalResponse ? response.internalResponse : response;\n\n  // 3. Let locationURL be actualResponse’s location URL given request’s current\n  // URL’s fragment.\n  let locationURL;\n  try {\n    locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash);\n\n    // 4. If locationURL is null, then return response.\n    if (locationURL == null) {\n      return response;\n    }\n  } catch (err) {\n    // 5. If locationURL is failure, then return a network error.\n    return Promise.resolve(makeNetworkError(err));\n  }\n\n  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network\n  // error.\n  if (!urlIsHttpHttpsScheme(locationURL)) {\n    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'));\n  }\n\n  // 7. If request’s redirect count is 20, then return a network error.\n  if (request.redirectCount === 20) {\n    return Promise.resolve(makeNetworkError('redirect count exceeded'));\n  }\n\n  // 8. Increase request’s redirect count by 1.\n  request.redirectCount += 1;\n\n  // 9. If request’s mode is \"cors\", locationURL includes credentials, and\n  // request’s origin is not same origin with locationURL’s origin, then return\n  //  a network error.\n  if (request.mode === 'cors' && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {\n    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode \"cors\"'));\n  }\n\n  // 10. If request’s response tainting is \"cors\" and locationURL includes\n  // credentials, then return a network error.\n  if (request.responseTainting === 'cors' && (locationURL.username || locationURL.password)) {\n    return Promise.resolve(makeNetworkError('URL cannot contain credentials for request mode \"cors\"'));\n  }\n\n  // 11. If actualResponse’s status is not 303, request’s body is non-null,\n  // and request’s body’s source is null, then return a network error.\n  if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {\n    return Promise.resolve(makeNetworkError());\n  }\n\n  // 12. If one of the following is true\n  // - actualResponse’s status is 301 or 302 and request’s method is `POST`\n  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`\n  if ([301, 302].includes(actualResponse.status) && request.method === 'POST' || actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method)) {\n    // then:\n    // 1. Set request’s method to `GET` and request’s body to null.\n    request.method = 'GET';\n    request.body = null;\n\n    // 2. For each headerName of request-body-header name, delete headerName from\n    // request’s header list.\n    for (const headerName of requestBodyHeader) {\n      request.headersList.delete(headerName);\n    }\n  }\n\n  // 13. If request’s current URL’s origin is not same origin with locationURL’s\n  //     origin, then for each headerName of CORS non-wildcard request-header name,\n  //     delete headerName from request’s header list.\n  if (!sameOrigin(requestCurrentURL(request), locationURL)) {\n    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name\n    request.headersList.delete('authorization', true);\n\n    // https://fetch.spec.whatwg.org/#authentication-entries\n    request.headersList.delete('proxy-authorization', true);\n\n    // \"Cookie\" and \"Host\" are forbidden request-headers, which undici doesn't implement.\n    request.headersList.delete('cookie', true);\n    request.headersList.delete('host', true);\n  }\n\n  // 14. If request’s body is non-null, then set request’s body to the first return\n  // value of safely extracting request’s body’s source.\n  if (request.body != null) {\n    assert(request.body.source != null);\n    request.body = safelyExtractBody(request.body.source)[0];\n  }\n\n  // 15. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo;\n\n  // 16. Set timingInfo’s redirect end time and post-redirect start time to the\n  // coarsened shared current time given fetchParams’s cross-origin isolated\n  // capability.\n  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n\n  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s\n  //  redirect start time to timingInfo’s start time.\n  if (timingInfo.redirectStartTime === 0) {\n    timingInfo.redirectStartTime = timingInfo.startTime;\n  }\n\n  // 18. Append locationURL to request’s URL list.\n  request.urlList.push(locationURL);\n\n  // 19. Invoke set request’s referrer policy on redirect on request and\n  // actualResponse.\n  setRequestReferrerPolicyOnRedirect(request, actualResponse);\n\n  // 20. Return the result of running main fetch given fetchParams and true.\n  return mainFetch(fetchParams, true);\n}\n\n// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\nasync function httpNetworkOrCacheFetch(fetchParams) {\n  let isAuthenticationFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let isNewConnectionFetch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let httpFetchParams be null.\n  let httpFetchParams = null;\n\n  // 3. Let httpRequest be null.\n  let httpRequest = null;\n\n  // 4. Let response be null.\n  let response = null;\n\n  // 5. Let storedResponse be null.\n  // TODO: cache\n\n  // 6. Let httpCache be null.\n  const httpCache = null;\n\n  // 7. Let the revalidatingFlag be unset.\n  const revalidatingFlag = false;\n\n  // 8. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If request’s window is \"no-window\" and request’s redirect mode is\n  //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n  //    request.\n  if (request.window === 'no-window' && request.redirect === 'error') {\n    httpFetchParams = fetchParams;\n    httpRequest = request;\n  } else {\n    // Otherwise:\n\n    // 1. Set httpRequest to a clone of request.\n    httpRequest = cloneRequest(request);\n\n    // 2. Set httpFetchParams to a copy of fetchParams.\n    httpFetchParams = {\n      ...fetchParams\n    };\n\n    // 3. Set httpFetchParams’s request to httpRequest.\n    httpFetchParams.request = httpRequest;\n  }\n\n  //    3. Let includeCredentials be true if one of\n  const includeCredentials = request.credentials === 'include' || request.credentials === 'same-origin' && request.responseTainting === 'basic';\n\n  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s\n  //    body is non-null; otherwise null.\n  const contentLength = httpRequest.body ? httpRequest.body.length : null;\n\n  //    5. Let contentLengthHeaderValue be null.\n  let contentLengthHeaderValue = null;\n\n  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or\n  //    `PUT`, then set contentLengthHeaderValue to `0`.\n  if (httpRequest.body == null && ['POST', 'PUT'].includes(httpRequest.method)) {\n    contentLengthHeaderValue = '0';\n  }\n\n  //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n  //    contentLength, serialized and isomorphic encoded.\n  if (contentLength != null) {\n    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);\n  }\n\n  //    8. If contentLengthHeaderValue is non-null, then append\n  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header\n  //    list.\n  if (contentLengthHeaderValue != null) {\n    httpRequest.headersList.append('content-length', contentLengthHeaderValue, true);\n  }\n\n  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,\n  //    contentLengthHeaderValue) to httpRequest’s header list.\n\n  //    10. If contentLength is non-null and httpRequest’s keepalive is true,\n  //    then:\n  if (contentLength != null && httpRequest.keepalive) {\n    // NOTE: keepalive is a noop outside of browser context.\n  }\n\n  //    11. If httpRequest’s referrer is a URL, then append\n  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,\n  //     to httpRequest’s header list.\n  if (httpRequest.referrer instanceof URL) {\n    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href), true);\n  }\n\n  //    12. Append a request `Origin` header for httpRequest.\n  appendRequestOriginHeader(httpRequest);\n\n  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n  appendFetchMetadata(httpRequest);\n\n  //    14. If httpRequest’s header list does not contain `User-Agent`, then\n  //    user agents should append `User-Agent`/default `User-Agent` value to\n  //    httpRequest’s header list.\n  if (!httpRequest.headersList.contains('user-agent', true)) {\n    httpRequest.headersList.append('user-agent', defaultUserAgent);\n  }\n\n  //    15. If httpRequest’s cache mode is \"default\" and httpRequest’s header\n  //    list contains `If-Modified-Since`, `If-None-Match`,\n  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n  //    httpRequest’s cache mode to \"no-store\".\n  if (httpRequest.cache === 'default' && (httpRequest.headersList.contains('if-modified-since', true) || httpRequest.headersList.contains('if-none-match', true) || httpRequest.headersList.contains('if-unmodified-since', true) || httpRequest.headersList.contains('if-match', true) || httpRequest.headersList.contains('if-range', true))) {\n    httpRequest.cache = 'no-store';\n  }\n\n  //    16. If httpRequest’s cache mode is \"no-cache\", httpRequest’s prevent\n  //    no-cache cache-control header modification flag is unset, and\n  //    httpRequest’s header list does not contain `Cache-Control`, then append\n  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.\n  if (httpRequest.cache === 'no-cache' && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains('cache-control', true)) {\n    httpRequest.headersList.append('cache-control', 'max-age=0', true);\n  }\n\n  //    17. If httpRequest’s cache mode is \"no-store\" or \"reload\", then:\n  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {\n    // 1. If httpRequest’s header list does not contain `Pragma`, then append\n    // `Pragma`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.contains('pragma', true)) {\n      httpRequest.headersList.append('pragma', 'no-cache', true);\n    }\n\n    // 2. If httpRequest’s header list does not contain `Cache-Control`,\n    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.\n    if (!httpRequest.headersList.contains('cache-control', true)) {\n      httpRequest.headersList.append('cache-control', 'no-cache', true);\n    }\n  }\n\n  //    18. If httpRequest’s header list contains `Range`, then append\n  //    `Accept-Encoding`/`identity` to httpRequest’s header list.\n  if (httpRequest.headersList.contains('range', true)) {\n    httpRequest.headersList.append('accept-encoding', 'identity', true);\n  }\n\n  //    19. Modify httpRequest’s header list per HTTP. Do not append a given\n  //    header if httpRequest’s header list contains that header’s name.\n  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n  if (!httpRequest.headersList.contains('accept-encoding', true)) {\n    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {\n      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate', true);\n    } else {\n      httpRequest.headersList.append('accept-encoding', 'gzip, deflate', true);\n    }\n  }\n  httpRequest.headersList.delete('host', true);\n\n  //    20. If includeCredentials is true, then:\n  if (includeCredentials) {\n    // 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest’s header list does not contain `Authorization`, then:\n    // TODO: credentials\n  }\n\n  //    21. If there’s a proxy-authentication entry, use it as appropriate.\n  //    TODO: proxy-authentication\n\n  //    22. Set httpCache to the result of determining the HTTP cache\n  //    partition, given httpRequest.\n  //    TODO: cache\n\n  //    23. If httpCache is null, then set httpRequest’s cache mode to\n  //    \"no-store\".\n  if (httpCache == null) {\n    httpRequest.cache = 'no-store';\n  }\n\n  //    24. If httpRequest’s cache mode is neither \"no-store\" nor \"reload\",\n  //    then:\n  if (httpRequest.cache !== 'no-store' && httpRequest.cache !== 'reload') {\n    // TODO: cache\n  }\n\n  // 9. If aborted, then return the appropriate network error for fetchParams.\n  // TODO\n\n  // 10. If response is null, then:\n  if (response == null) {\n    // 1. If httpRequest’s cache mode is \"only-if-cached\", then return a\n    // network error.\n    if (httpRequest.cache === 'only-if-cached') {\n      return makeNetworkError('only if cached');\n    }\n\n    // 2. Let forwardResponse be the result of running HTTP-network fetch\n    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n    const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);\n\n    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is\n    // in the range 200 to 399, inclusive, invalidate appropriate stored\n    // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n    // Caching, and set storedResponse to null. [HTTP-CACHING]\n    if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {\n      // TODO: cache\n    }\n\n    // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,\n    // then:\n    if (revalidatingFlag && forwardResponse.status === 304) {\n      // TODO: cache\n    }\n\n    // 5. If response is null, then:\n    if (response == null) {\n      // 1. Set response to forwardResponse.\n      response = forwardResponse;\n\n      // 2. Store httpRequest and forwardResponse in httpCache, as per the\n      // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n      // TODO: cache\n    }\n  }\n\n  // 11. Set response’s URL list to a clone of httpRequest’s URL list.\n  response.urlList = [...httpRequest.urlList];\n\n  // 12. If httpRequest’s header list contains `Range`, then set response’s\n  // range-requested flag.\n  if (httpRequest.headersList.contains('range', true)) {\n    response.rangeRequested = true;\n  }\n\n  // 13. Set response’s request-includes-credentials to includeCredentials.\n  response.requestIncludesCredentials = includeCredentials;\n\n  // 14. If response’s status is 401, httpRequest’s response tainting is not\n  // \"cors\", includeCredentials is true, and request’s window is an environment\n  // settings object, then:\n  // TODO\n\n  // 15. If response’s status is 407, then:\n  if (response.status === 407) {\n    // 1. If request’s window is \"no-window\", then return a network error.\n    if (request.window === 'no-window') {\n      return makeNetworkError();\n    }\n\n    // 2. ???\n\n    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams);\n    }\n\n    // 4. Prompt the end user as appropriate in request’s window and store\n    // the result as a proxy-authentication entry. [HTTP-AUTH]\n    // TODO: Invoke some kind of callback?\n\n    // 5. Set response to the result of running HTTP-network-or-cache fetch given\n    // fetchParams.\n    // TODO\n    return makeNetworkError('proxy authentication required');\n  }\n\n  // 16. If all of the following are true\n  if (\n  // response’s status is 421\n  response.status === 421 &&\n  // isNewConnectionFetch is false\n  !isNewConnectionFetch && (\n  // request’s body is null, or request’s body is non-null and request’s body’s source is non-null\n  request.body == null || request.body.source != null)) {\n    // then:\n\n    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams);\n    }\n\n    // 2. Set response to the result of running HTTP-network-or-cache\n    // fetch given fetchParams, isAuthenticationFetch, and true.\n\n    // TODO (spec): The spec doesn't specify this but we need to cancel\n    // the active response before we can start a new one.\n    // https://github.com/whatwg/fetch/issues/1293\n    fetchParams.controller.connection.destroy();\n    response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);\n  }\n\n  // 17. If isAuthenticationFetch is true, then create an authentication entry\n  if (isAuthenticationFetch) {\n    // TODO\n  }\n\n  // 18. Return response.\n  return response;\n}\n\n// https://fetch.spec.whatwg.org/#http-network-fetch\nasync function httpNetworkFetch(fetchParams) {\n  let includeCredentials = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let forceNewConnection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);\n  fetchParams.controller.connection = {\n    abort: null,\n    destroyed: false,\n    destroy(err) {\n      let abort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!this.destroyed) {\n        this.destroyed = true;\n        if (abort) {\n          this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'));\n        }\n      }\n    }\n  };\n\n  // 1. Let request be fetchParams’s request.\n  const request = fetchParams.request;\n\n  // 2. Let response be null.\n  let response = null;\n\n  // 3. Let timingInfo be fetchParams’s timing info.\n  const timingInfo = fetchParams.timingInfo;\n\n  // 4. Let httpCache be the result of determining the HTTP cache partition,\n  // given request.\n  // TODO: cache\n  const httpCache = null;\n\n  // 5. If httpCache is null, then set request’s cache mode to \"no-store\".\n  if (httpCache == null) {\n    request.cache = 'no-store';\n  }\n\n  // 6. Let networkPartitionKey be the result of determining the network\n  // partition key given request.\n  // TODO\n\n  // 7. Let newConnection be \"yes\" if forceNewConnection is true; otherwise\n  // \"no\".\n  const newConnection = forceNewConnection ? 'yes' : 'no'; // eslint-disable-line no-unused-vars\n\n  // 8. Switch on request’s mode:\n  if (request.mode === 'websocket') {\n    // Let connection be the result of obtaining a WebSocket connection,\n    // given request’s current URL.\n    // TODO\n  } else {\n    // Let connection be the result of obtaining a connection, given\n    // networkPartitionKey, request’s current URL’s origin,\n    // includeCredentials, and forceNewConnection.\n    // TODO\n  }\n\n  // 9. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If connection is failure, then return a network error.\n\n  //    2. Set timingInfo’s final connection timing info to the result of\n  //    calling clamp and coarsen connection timing info with connection’s\n  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s\n  //    cross-origin isolated capability.\n\n  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,\n  //    and request’s body’s source is null, then append (`Transfer-Encoding`,\n  //    `chunked`) to request’s header list.\n\n  //    4. Set timingInfo’s final network-request start time to the coarsened\n  //    shared current time given fetchParams’s cross-origin isolated\n  //    capability.\n\n  //    5. Set response to the result of making an HTTP request over connection\n  //    using request with the following caveats:\n\n  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n\n  //        - If request’s body is non-null, and request’s body’s source is null,\n  //        then the user agent may have a buffer of up to 64 kibibytes and store\n  //        a part of request’s body in that buffer. If the user agent reads from\n  //        request’s body beyond that buffer’s size and the user agent needs to\n  //        resend request, then instead return a network error.\n\n  //        - Set timingInfo’s final network-response start time to the coarsened\n  //        shared current time given fetchParams’s cross-origin isolated capability,\n  //        immediately after the user agent’s HTTP parser receives the first byte\n  //        of the response (e.g., frame header bytes for HTTP/2 or response status\n  //        line for HTTP/1.x).\n\n  //        - Wait until all the headers are transmitted.\n\n  //        - Any responses whose status is in the range 100 to 199, inclusive,\n  //        and is not 101, are to be ignored, except for the purposes of setting\n  //        timingInfo’s final network-response start time above.\n\n  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and\n  //    response is transferred via HTTP/1.0 or older, then return a network\n  //    error.\n\n  //    - If the HTTP request results in a TLS client certificate dialog, then:\n\n  //        1. If request’s window is an environment settings object, make the\n  //        dialog available in request’s window.\n\n  //        2. Otherwise, return a network error.\n\n  // To transmit request’s body body, run these steps:\n  let requestBody = null;\n  // 1. If body is null and fetchParams’s process request end-of-body is\n  // non-null, then queue a fetch task given fetchParams’s process request\n  // end-of-body and fetchParams’s task destination.\n  if (request.body == null && fetchParams.processRequestEndOfBody) {\n    queueMicrotask(() => fetchParams.processRequestEndOfBody());\n  } else if (request.body != null) {\n    // 2. Otherwise, if body is non-null:\n\n    //    1. Let processBodyChunk given bytes be these steps:\n    const processBodyChunk = async function* (bytes) {\n      // 1. If the ongoing fetch is terminated, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return;\n      }\n\n      // 2. Run this step in parallel: transmit bytes.\n      yield bytes;\n\n      // 3. If fetchParams’s process request body is non-null, then run\n      // fetchParams’s process request body given bytes’s length.\n      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);\n    };\n\n    // 2. Let processEndOfBody be these steps:\n    const processEndOfBody = () => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return;\n      }\n\n      // 2. If fetchParams’s process request end-of-body is non-null,\n      // then run fetchParams’s process request end-of-body.\n      if (fetchParams.processRequestEndOfBody) {\n        fetchParams.processRequestEndOfBody();\n      }\n    };\n\n    // 3. Let processBodyError given e be these steps:\n    const processBodyError = e => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return;\n      }\n\n      // 2. If e is an \"AbortError\" DOMException, then abort fetchParams’s controller.\n      if (e.name === 'AbortError') {\n        fetchParams.controller.abort();\n      } else {\n        fetchParams.controller.terminate(e);\n      }\n    };\n\n    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,\n    // processBodyError, and fetchParams’s task destination.\n    requestBody = async function* () {\n      try {\n        for await (const bytes of request.body.stream) {\n          yield* processBodyChunk(bytes);\n        }\n        processEndOfBody();\n      } catch (err) {\n        processBodyError(err);\n      }\n    }();\n  }\n  try {\n    // socket is only provided for websockets\n    const {\n      body,\n      status,\n      statusText,\n      headersList,\n      socket\n    } = await dispatch({\n      body: requestBody\n    });\n    if (socket) {\n      response = makeResponse({\n        status,\n        statusText,\n        headersList,\n        socket\n      });\n    } else {\n      const iterator = body[Symbol.asyncIterator]();\n      fetchParams.controller.next = () => iterator.next();\n      response = makeResponse({\n        status,\n        statusText,\n        headersList\n      });\n    }\n  } catch (err) {\n    // 10. If aborted, then:\n    if (err.name === 'AbortError') {\n      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n      fetchParams.controller.connection.destroy();\n\n      // 2. Return the appropriate network error for fetchParams.\n      return makeAppropriateNetworkError(fetchParams, err);\n    }\n    return makeNetworkError(err);\n  }\n\n  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch\n  // if it is suspended.\n  const pullAlgorithm = async () => {\n    await fetchParams.controller.resume();\n  };\n\n  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s\n  // controller with reason, given reason.\n  const cancelAlgorithm = reason => {\n    // If the aborted fetch was already terminated, then we do not\n    // need to do anything.\n    if (!isCancelled(fetchParams)) {\n      fetchParams.controller.abort(reason);\n    }\n  };\n\n  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by\n  // the user agent.\n  // TODO\n\n  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object\n  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n  // TODO\n\n  // 15. Let stream be a new ReadableStream.\n  // 16. Set up stream with byte reading support with pullAlgorithm set to pullAlgorithm,\n  //     cancelAlgorithm set to cancelAlgorithm.\n  const stream = new ReadableStream({\n    async start(controller) {\n      fetchParams.controller.controller = controller;\n    },\n    async pull(controller) {\n      await pullAlgorithm(controller);\n    },\n    async cancel(reason) {\n      await cancelAlgorithm(reason);\n    },\n    type: 'bytes'\n  });\n\n  // 17. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. Set response’s body to a new body whose stream is stream.\n  response.body = {\n    stream,\n    source: null,\n    length: null\n  };\n\n  //    2. If response is not a network error and request’s cache mode is\n  //    not \"no-store\", then update response in httpCache for request.\n  //    TODO\n\n  //    3. If includeCredentials is true and the user agent is not configured\n  //    to block cookies for request (see section 7 of [COOKIES]), then run the\n  //    \"set-cookie-string\" parsing algorithm (see section 5.2 of [COOKIES]) on\n  //    the value of each header whose name is a byte-case-insensitive match for\n  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.\n  //    TODO\n\n  // 18. If aborted, then:\n  // TODO\n\n  // 19. Run these steps in parallel:\n\n  //    1. Run these steps, but abort when fetchParams is canceled:\n  fetchParams.controller.onAborted = onAborted;\n  fetchParams.controller.on('terminated', onAborted);\n  fetchParams.controller.resume = async () => {\n    // 1. While true\n    while (true) {\n      // 1-3. See onData...\n\n      // 4. Set bytes to the result of handling content codings given\n      // codings and bytes.\n      let bytes;\n      let isFailure;\n      try {\n        const {\n          done,\n          value\n        } = await fetchParams.controller.next();\n        if (isAborted(fetchParams)) {\n          break;\n        }\n        bytes = done ? undefined : value;\n      } catch (err) {\n        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {\n          // zlib doesn't like empty streams.\n          bytes = undefined;\n        } else {\n          bytes = err;\n\n          // err may be propagated from the result of calling readablestream.cancel,\n          // which might not be an error. https://github.com/nodejs/undici/issues/2009\n          isFailure = true;\n        }\n      }\n      if (bytes === undefined) {\n        // 2. Otherwise, if the bytes transmission for response’s message\n        // body is done normally and stream is readable, then close\n        // stream, finalize response for fetchParams and response, and\n        // abort these in-parallel steps.\n        readableStreamClose(fetchParams.controller.controller);\n        finalizeResponse(fetchParams, response);\n        return;\n      }\n\n      // 5. Increase timingInfo’s decoded body size by bytes’s length.\n      timingInfo.decodedBodySize += bytes?.byteLength ?? 0;\n\n      // 6. If bytes is failure, then terminate fetchParams’s controller.\n      if (isFailure) {\n        fetchParams.controller.terminate(bytes);\n        return;\n      }\n\n      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n      // into stream.\n      const buffer = new Uint8Array(bytes);\n      if (buffer.byteLength) {\n        fetchParams.controller.controller.enqueue(buffer);\n      }\n\n      // 8. If stream is errored, then terminate the ongoing fetch.\n      if (isErrored(stream)) {\n        fetchParams.controller.terminate();\n        return;\n      }\n\n      // 9. If stream doesn’t need more data ask the user agent to suspend\n      // the ongoing fetch.\n      if (fetchParams.controller.controller.desiredSize <= 0) {\n        return;\n      }\n    }\n  };\n\n  //    2. If aborted, then:\n  function onAborted(reason) {\n    // 2. If fetchParams is aborted, then:\n    if (isAborted(fetchParams)) {\n      // 1. Set response’s aborted flag.\n      response.aborted = true;\n\n      // 2. If stream is readable, then error stream with the result of\n      //    deserialize a serialized abort reason given fetchParams’s\n      //    controller’s serialized abort reason and an\n      //    implementation-defined realm.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);\n      }\n    } else {\n      // 3. Otherwise, if stream is readable, error stream with a TypeError.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(new TypeError('terminated', {\n          cause: isErrorLike(reason) ? reason : undefined\n        }));\n      }\n    }\n\n    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n    fetchParams.controller.connection.destroy();\n  }\n\n  // 20. Return response.\n  return response;\n  function dispatch(_ref2) {\n    let {\n      body\n    } = _ref2;\n    const url = requestCurrentURL(request);\n    /** @type {import('../..').Agent} */\n    const agent = fetchParams.controller.dispatcher;\n    return new Promise((resolve, reject) => agent.dispatch({\n      path: url.pathname + url.search,\n      origin: url.origin,\n      method: request.method,\n      body: agent.isMockActive ? request.body && (request.body.source || request.body.stream) : body,\n      headers: request.headersList.entries,\n      maxRedirections: 0,\n      upgrade: request.mode === 'websocket' ? 'websocket' : undefined\n    }, {\n      body: null,\n      abort: null,\n      onConnect(abort) {\n        // TODO (fix): Do we need connection here?\n        const {\n          connection\n        } = fetchParams.controller;\n\n        // Set timingInfo’s final connection timing info to the result of calling clamp and coarsen\n        // connection timing info with connection’s timing info, timingInfo’s post-redirect start\n        // time, and fetchParams’s cross-origin isolated capability.\n        // TODO: implement connection timing\n        timingInfo.finalConnectionTimingInfo = clampAndCoarsenConnectionTimingInfo(undefined, timingInfo.postRedirectStartTime, fetchParams.crossOriginIsolatedCapability);\n        if (connection.destroyed) {\n          abort(new DOMException('The operation was aborted.', 'AbortError'));\n        } else {\n          fetchParams.controller.on('terminated', abort);\n          this.abort = connection.abort = abort;\n        }\n\n        // Set timingInfo’s final network-request start time to the coarsened shared current time given\n        // fetchParams’s cross-origin isolated capability.\n        timingInfo.finalNetworkRequestStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n      },\n      onResponseStarted() {\n        // Set timingInfo’s final network-response start time to the coarsened shared current\n        // time given fetchParams’s cross-origin isolated capability, immediately after the\n        // user agent’s HTTP parser receives the first byte of the response (e.g., frame header\n        // bytes for HTTP/2 or response status line for HTTP/1.x).\n        timingInfo.finalNetworkResponseStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n      },\n      onHeaders(status, rawHeaders, resume, statusText) {\n        if (status < 200) {\n          return;\n        }\n\n        /** @type {string[]} */\n        let codings = [];\n        let location = '';\n        const headersList = new HeadersList();\n        for (let i = 0; i < rawHeaders.length; i += 2) {\n          headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i]), rawHeaders[i + 1].toString('latin1'), true);\n        }\n        const contentEncoding = headersList.get('content-encoding', true);\n        if (contentEncoding) {\n          // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n          // \"All content-coding values are case-insensitive...\"\n          codings = contentEncoding.toLowerCase().split(',').map(x => x.trim());\n        }\n        location = headersList.get('location', true);\n        this.body = new Readable({\n          read: resume\n        });\n        const decoders = [];\n        const willFollow = location && request.redirect === 'follow' && redirectStatusSet.has(status);\n\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n        if (codings.length !== 0 && request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {\n          for (let i = 0; i < codings.length; ++i) {\n            const coding = codings[i];\n            // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2\n            if (coding === 'x-gzip' || coding === 'gzip') {\n              decoders.push(zlib.createGunzip({\n                // Be less strict when decoding compressed responses, since sometimes\n                // servers send slightly invalid responses that are still accepted\n                // by common browsers.\n                // Always using Z_SYNC_FLUSH is what cURL does.\n                flush: zlib.constants.Z_SYNC_FLUSH,\n                finishFlush: zlib.constants.Z_SYNC_FLUSH\n              }));\n            } else if (coding === 'deflate') {\n              decoders.push(createInflate());\n            } else if (coding === 'br') {\n              decoders.push(zlib.createBrotliDecompress());\n            } else {\n              decoders.length = 0;\n              break;\n            }\n          }\n        }\n        resolve({\n          status,\n          statusText,\n          headersList,\n          body: decoders.length ? pipeline(this.body, ...decoders, () => {}) : this.body.on('error', () => {})\n        });\n        return true;\n      },\n      onData(chunk) {\n        if (fetchParams.controller.dump) {\n          return;\n        }\n\n        // 1. If one or more bytes have been transmitted from response’s\n        // message body, then:\n\n        //  1. Let bytes be the transmitted bytes.\n        const bytes = chunk;\n\n        //  2. Let codings be the result of extracting header list values\n        //  given `Content-Encoding` and response’s header list.\n        //  See pullAlgorithm.\n\n        //  3. Increase timingInfo’s encoded body size by bytes’s length.\n        timingInfo.encodedBodySize += bytes.byteLength;\n\n        //  4. See pullAlgorithm...\n\n        return this.body.push(bytes);\n      },\n      onComplete() {\n        if (this.abort) {\n          fetchParams.controller.off('terminated', this.abort);\n        }\n        if (fetchParams.controller.onAborted) {\n          fetchParams.controller.off('terminated', fetchParams.controller.onAborted);\n        }\n        fetchParams.controller.ended = true;\n        this.body.push(null);\n      },\n      onError(error) {\n        if (this.abort) {\n          fetchParams.controller.off('terminated', this.abort);\n        }\n        this.body?.destroy(error);\n        fetchParams.controller.terminate(error);\n        reject(error);\n      },\n      onUpgrade(status, rawHeaders, socket) {\n        if (status !== 101) {\n          return;\n        }\n        const headersList = new HeadersList();\n        for (let i = 0; i < rawHeaders.length; i += 2) {\n          headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i]), rawHeaders[i + 1].toString('latin1'), true);\n        }\n        resolve({\n          status,\n          statusText: STATUS_CODES[status],\n          headersList,\n          socket\n        });\n        return true;\n      }\n    }));\n  }\n}\nmodule.exports = {\n  fetch,\n  Fetch,\n  fetching,\n  finalizeAndReportTiming\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRVk7O0FBRVosTUFBTTtFQUNKQSxnQkFBZ0I7RUFDaEJDLDJCQUEyQjtFQUMzQkMsY0FBYztFQUNkQyxZQUFZO0VBQ1pDO0FBQ0YsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLHlFQUFZLENBQUM7QUFDekIsTUFBTTtFQUFFQztBQUFZLENBQUMsR0FBR0QsbUJBQU8sQ0FBQyx1RUFBVyxDQUFDO0FBQzVDLE1BQU07RUFBRUUsT0FBTztFQUFFQztBQUFhLENBQUMsR0FBR0gsbUJBQU8sQ0FBQyx1RUFBVyxDQUFDO0FBQ3RELE1BQU1JLElBQUksR0FBR0osbUJBQU8sQ0FBQyw0QkFBVyxDQUFDO0FBQ2pDLE1BQU07RUFDSkssVUFBVTtFQUNWQyxtQkFBbUI7RUFDbkJDLG9CQUFvQjtFQUNwQkMsY0FBYztFQUNkQyxRQUFRO0VBQ1JDLHlCQUF5QjtFQUN6QkMsbUJBQW1CO0VBQ25CQyxpQkFBaUI7RUFDakJDLGtDQUFrQztFQUNsQ0MsNkNBQTZDO0VBQzdDQyxzQkFBc0I7RUFDdEJDLG1CQUFtQjtFQUNuQkMsU0FBUztFQUNUQyw4QkFBOEI7RUFDOUJDLHlCQUF5QjtFQUN6QkMsMEJBQTBCO0VBQzFCQyxxQkFBcUI7RUFDckJDLFVBQVU7RUFDVkMsVUFBVTtFQUNWQyxXQUFXO0VBQ1hDLFNBQVM7RUFDVEMsV0FBVztFQUNYQyxhQUFhO0VBQ2JDLG1CQUFtQjtFQUNuQkMsZ0JBQWdCO0VBQ2hCQyxVQUFVO0VBQ1ZDLG9CQUFvQjtFQUNwQkMsaUJBQWlCO0VBQ2pCQyxtQ0FBbUM7RUFDbkNDLHNCQUFzQjtFQUN0QkMsaUJBQWlCO0VBQ2pCQyxhQUFhO0VBQ2JDO0FBQ0YsQ0FBQyxHQUFHckMsbUJBQU8sQ0FBQyxpRUFBUSxDQUFDO0FBQ3JCLE1BQU07RUFBRXNDLE1BQU07RUFBRUM7QUFBWSxDQUFDLEdBQUd2QyxtQkFBTyxDQUFDLHVFQUFXLENB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WSxDQUFDMEcsTUFBTSxDQUFDO1VBQ2hDcEIsV0FBVztVQUNYK0c7UUFDRixDQUFDLENBQUM7UUFFRixPQUFPLElBQUk7TUFDYjtJQUNGLENBQ0YsQ0FBQyxDQUFDO0VBQ0o7QUFDRjtBQUVBOEQsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZjdPLEtBQUs7RUFDTGpCLEtBQUs7RUFDTGdELFFBQVE7RUFDUmhDO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL3dlYi9mZXRjaC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vRXRoYW4tQXJyb3dvb2QvdW5kaWNpLWZldGNoXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7XG4gIG1ha2VOZXR3b3JrRXJyb3IsXG4gIG1ha2VBcHByb3ByaWF0ZU5ldHdvcmtFcnJvcixcbiAgZmlsdGVyUmVzcG9uc2UsXG4gIG1ha2VSZXNwb25zZSxcbiAgZnJvbUlubmVyUmVzcG9uc2Vcbn0gPSByZXF1aXJlKCcuL3Jlc3BvbnNlJylcbmNvbnN0IHsgSGVhZGVyc0xpc3QgfSA9IHJlcXVpcmUoJy4vaGVhZGVycycpXG5jb25zdCB7IFJlcXVlc3QsIGNsb25lUmVxdWVzdCB9ID0gcmVxdWlyZSgnLi9yZXF1ZXN0JylcbmNvbnN0IHpsaWIgPSByZXF1aXJlKCdub2RlOnpsaWInKVxuY29uc3Qge1xuICBieXRlc01hdGNoLFxuICBtYWtlUG9saWN5Q29udGFpbmVyLFxuICBjbG9uZVBvbGljeUNvbnRhaW5lcixcbiAgcmVxdWVzdEJhZFBvcnQsXG4gIFRBT0NoZWNrLFxuICBhcHBlbmRSZXF1ZXN0T3JpZ2luSGVhZGVyLFxuICByZXNwb25zZUxvY2F0aW9uVVJMLFxuICByZXF1ZXN0Q3VycmVudFVSTCxcbiAgc2V0UmVxdWVzdFJlZmVycmVyUG9saWN5T25SZWRpcmVjdCxcbiAgdHJ5VXBncmFkZVJlcXVlc3RUb0FQb3RlbnRpYWxseVRydXN0d29ydGh5VVJMLFxuICBjcmVhdGVPcGFxdWVUaW1pbmdJbmZvLFxuICBhcHBlbmRGZXRjaE1ldGFkYXRhLFxuICBjb3JzQ2hlY2ssXG4gIGNyb3NzT3JpZ2luUmVzb3VyY2VQb2xpY3lDaGVjayxcbiAgZGV0ZXJtaW5lUmVxdWVzdHNSZWZlcnJlcixcbiAgY29hcnNlbmVkU2hhcmVkQ3VycmVudFRpbWUsXG4gIGNyZWF0ZURlZmVycmVkUHJvbWlzZSxcbiAgaXNCbG9iTGlrZSxcbiAgc2FtZU9yaWdpbixcbiAgaXNDYW5jZWxsZWQsXG4gIGlzQWJvcnRlZCxcbiAgaXNFcnJvckxpa2UsXG4gIGZ1bGx5UmVhZEJvZHksXG4gIHJlYWRhYmxlU3RyZWFtQ2xvc2UsXG4gIGlzb21vcnBoaWNFbmNvZGUsXG4gIHVybElzTG9jYWwsXG4gIHVybElzSHR0cEh0dHBzU2NoZW1lLFxuICB1cmxIYXNIdHRwc1NjaGVtZSxcbiAgY2xhbXBBbmRDb2Fyc2VuQ29ubmVjdGlvblRpbWluZ0luZm8sXG4gIHNpbXBsZVJhbmdlSGVhZGVyVmFsdWUsXG4gIGJ1aWxkQ29udGVudFJhbmdlLFxuICBjcmVhdGVJbmZsYXRlLFxuICBleHRyYWN0TWltZVR5cGVcbn0gPSByZXF1aXJlKCcuL3V0aWwnKVxuY29uc3QgeyBrU3RhdGUsIGtEaXNwYXRjaGVyIH0gPSByZXF1aXJlKCcuL3N5bWJvbHMnKVxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnbm9kZTphc3NlcnQnKVxuY29uc3QgeyBzYWZlbHlFeHRyYWN0Qm9keSwgZXh0cmFjdEJvZHkgfSA9IHJlcXVpcmUoJy4vYm9keScpXG5jb25zdCB7XG4gIHJlZGlyZWN0U3RhdHVzU2V0LFxuICBudWxsQm9keVN0YXR1cyxcbiAgc2FmZU1ldGhvZHNTZXQsXG4gIHJlcXVlc3RCb2R5SGVhZGVyLFxuICBzdWJyZXNvdXJjZVNldFxufSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJylcbmNvbnN0IEVFID0gcmVxdWlyZSgnbm9kZTpldmVudHMnKVxuY29uc3QgeyBSZWFkYWJsZSwgcGlwZWxpbmUsIGZpbmlzaGVkIH0gPSByZXF1aXJlKCdub2RlOnN0cmVhbScpXG5jb25zdCB7IGFkZEFib3J0TGlzdGVuZXIsIGlzRXJyb3JlZCwgaXNSZWFkYWJsZSwgYnVmZmVyVG9Mb3dlckNhc2VkSGVhZGVyTmFtZSB9ID0gcmVxdWlyZSgnLi4vLi4vY29yZS91dGlsJylcbmNvbnN0IHsgZGF0YVVSTFByb2Nlc3Nvciwgc2VyaWFsaXplQU1pbWVUeXBlLCBtaW5pbWl6ZVN1cHBvcnRlZE1pbWVUeXBlIH0gPSByZXF1aXJlKCcuL2RhdGEtdXJsJylcbmNvbnN0IHsgZ2V0R2xvYmFsRGlzcGF0Y2hlciB9ID0gcmVxdWlyZSgnLi4vLi4vZ2xvYmFsJylcbmNvbnN0IHsgd2ViaWRsIH0gPSByZXF1aXJlKCcuL3dlYmlkbCcpXG5jb25zdCB7IFNUQVRVU19DT0RFUyB9ID0gcmVxdWlyZSgnbm9kZTpodHRwJylcbmNvbnN0IEdFVF9PUl9IRUFEID0gWydHRVQnLCAnSEVBRCddXG5cbmNvbnN0IGRlZmF1bHRVc2VyQWdlbnQgPSB0eXBlb2YgX19VTkRJQ0lfSVNfTk9ERV9fICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZXNidWlsZERldGVjdGlvbiAhPT0gJ3VuZGVmaW5lZCdcbiAgPyAnbm9kZSdcbiAgOiAndW5kaWNpJ1xuXG4vKiogQHR5cGUge2ltcG9ydCgnYnVmZmVyJykucmVzb2x2ZU9iamVjdFVSTH0gKi9cbmxldCByZXNvbHZlT2JqZWN0VVJMXG5cbmNsYXNzIEZldGNoIGV4dGVuZHMgRUUge1xuICBjb25zdHJ1Y3RvciAoZGlzcGF0Y2hlcikge1xuICAgIHN1cGVyKClcblxuICAgIHRoaXMuZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXJcbiAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsXG4gICAgdGhpcy5kdW1wID0gZmFsc2VcbiAgICB0aGlzLnN0YXRlID0gJ29uZ29pbmcnXG4gIH1cblxuICB0ZXJtaW5hdGUgKHJlYXNvbikge1xuICAgIGlmICh0aGlzLnN0YXRlICE9PSAnb25nb2luZycpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSAndGVybWluYXRlZCdcbiAgICB0aGlzLmNvbm5lY3Rpb24/LmRlc3Ryb3kocmVhc29uKVxuICAgIHRoaXMuZW1pdCgndGVybWluYXRlZCcsIHJlYXNvbilcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNmZXRjaC1jb250cm9sbGVyLWFib3J0XG4gIGFib3J0IChlcnJvcikge1xuICAgIGlmICh0aGlzLnN0YXRlICE9PSAnb25nb2luZycpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIDEuIFNldCBjb250cm9sbGVy4oCZcyBzdGF0ZSB0byBcImFib3J0ZWRcIi5cbiAgICB0aGlzLnN0YXRlID0gJ2Fib3J0ZWQnXG5cbiAgICAvLyAyLiBMZXQgZmFsbGJhY2tFcnJvciBiZSBhbiBcIkFib3J0RXJyb3JcIiBET01FeGNlcHRpb24uXG4gICAgLy8gMy4gU2V0IGVycm9yIHRvIGZhbGxiYWNrRXJyb3IgaWYgaXQgaXMgbm90IGdpdmVuLlxuICAgIGlmICghZXJyb3IpIHtcbiAgICAgIGVycm9yID0gbmV3IERPTUV4Y2VwdGlvbignVGhlIG9wZXJhdGlvbiB3YXMgYWJvcnRlZC4nLCAnQWJvcnRFcnJvcicpXG4gICAgfVxuXG4gICAgLy8gNC4gTGV0IHNlcmlhbGl6ZWRFcnJvciBiZSBTdHJ1Y3R1cmVkU2VyaWFsaXplKGVycm9yKS5cbiAgICAvLyAgICBJZiB0aGF0IHRocmV3IGFuIGV4Y2VwdGlvbiwgY2F0Y2ggaXQsIGFuZCBsZXRcbiAgICAvLyAgICBzZXJpYWxpemVkRXJyb3IgYmUgU3RydWN0dXJlZFNlcmlhbGl6ZShmYWxsYmFja0Vycm9yKS5cblxuICAgIC8vIDUuIFNldCBjb250cm9sbGVy4oCZcyBzZXJpYWxpemVkIGFib3J0IHJlYXNvbiB0byBzZXJpYWxpemVkRXJyb3IuXG4gICAgdGhpcy5zZXJpYWxpemVkQWJvcnRSZWFzb24gPSBlcnJvclxuXG4gICAgdGhpcy5jb25uZWN0aW9uPy5kZXN0cm95KGVycm9yKVxuICAgIHRoaXMuZW1pdCgndGVybWluYXRlZCcsIGVycm9yKVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZldGNoRG9uZSAocmVzcG9uc2UpIHtcbiAgZmluYWxpemVBbmRSZXBvcnRUaW1pbmcocmVzcG9uc2UsICdmZXRjaCcpXG59XG5cbi8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNmZXRjaC1tZXRob2RcbmZ1bmN0aW9uIGZldGNoIChpbnB1dCwgaW5pdCA9IHVuZGVmaW5lZCkge1xuICB3ZWJpZGwuYXJndW1lbnRMZW5ndGhDaGVjayhhcmd1bWVudHMsIDEsICdnbG9iYWxUaGlzLmZldGNoJylcblxuICAvLyAxLiBMZXQgcCBiZSBhIG5ldyBwcm9taXNlLlxuICBsZXQgcCA9IGNyZWF0ZURlZmVycmVkUHJvbWlzZSgpXG5cbiAgLy8gMi4gTGV0IHJlcXVlc3RPYmplY3QgYmUgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgaW5pdGlhbCB2YWx1ZSBvZlxuICAvLyBSZXF1ZXN0IGFzIGNvbnN0cnVjdG9yIHdpdGggaW5wdXQgYW5kIGluaXQgYXMgYXJndW1lbnRzLiBJZiB0aGlzIHRocm93c1xuICAvLyBhbiBleGNlcHRpb24sIHJlamVjdCBwIHdpdGggaXQgYW5kIHJldHVybiBwLlxuICBsZXQgcmVxdWVzdE9iamVjdFxuXG4gIHRyeSB7XG4gICAgcmVxdWVzdE9iamVjdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuICB9IGNhdGNoIChlKSB7XG4gICAgcC5yZWplY3QoZSlcbiAgICByZXR1cm4gcC5wcm9taXNlXG4gIH1cblxuICAvLyAzLiBMZXQgcmVxdWVzdCBiZSByZXF1ZXN0T2JqZWN04oCZcyByZXF1ZXN0LlxuICBjb25zdCByZXF1ZXN0ID0gcmVxdWVzdE9iamVjdFtrU3RhdGVdXG5cbiAgLy8gNC4gSWYgcmVxdWVzdE9iamVjdOKAmXMgc2lnbmFs4oCZcyBhYm9ydGVkIGZsYWcgaXMgc2V0LCB0aGVuOlxuICBpZiAocmVxdWVzdE9iamVjdC5zaWduYWwuYWJvcnRlZCkge1xuICAgIC8vIDEuIEFib3J0IHRoZSBmZXRjaCgpIGNhbGwgd2l0aCBwLCByZXF1ZXN0LCBudWxsLCBhbmRcbiAgICAvLyAgICByZXF1ZXN0T2JqZWN04oCZcyBzaWduYWzigJlzIGFib3J0IHJlYXNvbi5cbiAgICBhYm9ydEZldGNoKHAsIHJlcXVlc3QsIG51bGwsIHJlcXVlc3RPYmplY3Quc2lnbmFsLnJlYXNvbilcblxuICAgIC8vIDIuIFJldHVybiBwLlxuICAgIHJldHVybiBwLnByb21pc2VcbiAgfVxuXG4gIC8vIDUuIExldCBnbG9iYWxPYmplY3QgYmUgcmVxdWVzdOKAmXMgY2xpZW504oCZcyBnbG9iYWwgb2JqZWN0LlxuICBjb25zdCBnbG9iYWxPYmplY3QgPSByZXF1ZXN0LmNsaWVudC5nbG9iYWxPYmplY3RcblxuICAvLyA2LiBJZiBnbG9iYWxPYmplY3QgaXMgYSBTZXJ2aWNlV29ya2VyR2xvYmFsU2NvcGUgb2JqZWN0LCB0aGVuIHNldFxuICAvLyByZXF1ZXN04oCZcyBzZXJ2aWNlLXdvcmtlcnMgbW9kZSB0byBcIm5vbmVcIi5cbiAgaWYgKGdsb2JhbE9iamVjdD8uY29uc3RydWN0b3I/Lm5hbWUgPT09ICdTZXJ2aWNlV29ya2VyR2xvYmFsU2NvcGUnKSB7XG4gICAgcmVxdWVzdC5zZXJ2aWNlV29ya2VycyA9ICdub25lJ1xuICB9XG5cbiAgLy8gNy4gTGV0IHJlc3BvbnNlT2JqZWN0IGJlIG51bGwuXG4gIGxldCByZXNwb25zZU9iamVjdCA9IG51bGxcblxuICAvLyA4LiBMZXQgcmVsZXZhbnRSZWFsbSBiZSB0aGlz4oCZcyByZWxldmFudCBSZWFsbS5cblxuICAvLyA5LiBMZXQgbG9jYWxseUFib3J0ZWQgYmUgZmFsc2UuXG4gIGxldCBsb2NhbGx5QWJvcnRlZCA9IGZhbHNlXG5cbiAgLy8gMTAuIExldCBjb250cm9sbGVyIGJlIG51bGwuXG4gIGxldCBjb250cm9sbGVyID0gbnVsbFxuXG4gIC8vIDExLiBBZGQgdGhlIGZvbGxvd2luZyBhYm9ydCBzdGVwcyB0byByZXF1ZXN0T2JqZWN04oCZcyBzaWduYWw6XG4gIGFkZEFib3J0TGlzdGVuZXIoXG4gICAgcmVxdWVzdE9iamVjdC5zaWduYWwsXG4gICAgKCkgPT4ge1xuICAgICAgLy8gMS4gU2V0IGxvY2FsbHlBYm9ydGVkIHRvIHRydWUuXG4gICAgICBsb2NhbGx5QWJvcnRlZCA9IHRydWVcblxuICAgICAgLy8gMi4gQXNzZXJ0OiBjb250cm9sbGVyIGlzIG5vbi1udWxsLlxuICAgICAgYXNzZXJ0KGNvbnRyb2xsZXIgIT0gbnVsbClcblxuICAgICAgLy8gMy4gQWJvcnQgY29udHJvbGxlciB3aXRoIHJlcXVlc3RPYmplY3TigJlzIHNpZ25hbOKAmXMgYWJvcnQgcmVhc29uLlxuICAgICAgY29udHJvbGxlci5hYm9ydChyZXF1ZXN0T2JqZWN0LnNpZ25hbC5yZWFzb24pXG5cbiAgICAgIGNvbnN0IHJlYWxSZXNwb25zZSA9IHJlc3BvbnNlT2JqZWN0Py5kZXJlZigpXG5cbiAgICAgIC8vIDQuIEFib3J0IHRoZSBmZXRjaCgpIGNhbGwgd2l0aCBwLCByZXF1ZXN0LCByZXNwb25zZU9iamVjdCxcbiAgICAgIC8vICAgIGFuZCByZXF1ZXN0T2JqZWN04oCZcyBzaWduYWzigJlzIGFib3J0IHJlYXNvbi5cbiAgICAgIGFib3J0RmV0Y2gocCwgcmVxdWVzdCwgcmVhbFJlc3BvbnNlLCByZXF1ZXN0T2JqZWN0LnNpZ25hbC5yZWFzb24pXG4gICAgfVxuICApXG5cbiAgLy8gMTIuIExldCBoYW5kbGVGZXRjaERvbmUgZ2l2ZW4gcmVzcG9uc2UgcmVzcG9uc2UgYmUgdG8gZmluYWxpemUgYW5kXG4gIC8vIHJlcG9ydCB0aW1pbmcgd2l0aCByZXNwb25zZSwgZ2xvYmFsT2JqZWN0LCBhbmQgXCJmZXRjaFwiLlxuICAvLyBzZWUgZnVuY3Rpb24gaGFuZGxlRmV0Y2hEb25lXG5cbiAgLy8gMTMuIFNldCBjb250cm9sbGVyIHRvIHRoZSByZXN1bHQgb2YgY2FsbGluZyBmZXRjaCBnaXZlbiByZXF1ZXN0LFxuICAvLyB3aXRoIHByb2Nlc3NSZXNwb25zZUVuZE9mQm9keSBzZXQgdG8gaGFuZGxlRmV0Y2hEb25lLCBhbmQgcHJvY2Vzc1Jlc3BvbnNlXG4gIC8vIGdpdmVuIHJlc3BvbnNlIGJlaW5nIHRoZXNlIHN1YnN0ZXBzOlxuXG4gIGNvbnN0IHByb2Nlc3NSZXNwb25zZSA9IChyZXNwb25zZSkgPT4ge1xuICAgIC8vIDEuIElmIGxvY2FsbHlBYm9ydGVkIGlzIHRydWUsIHRlcm1pbmF0ZSB0aGVzZSBzdWJzdGVwcy5cbiAgICBpZiAobG9jYWxseUFib3J0ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIDIuIElmIHJlc3BvbnNl4oCZcyBhYm9ydGVkIGZsYWcgaXMgc2V0LCB0aGVuOlxuICAgIGlmIChyZXNwb25zZS5hYm9ydGVkKSB7XG4gICAgICAvLyAxLiBMZXQgZGVzZXJpYWxpemVkRXJyb3IgYmUgdGhlIHJlc3VsdCBvZiBkZXNlcmlhbGl6ZSBhIHNlcmlhbGl6ZWRcbiAgICAgIC8vICAgIGFib3J0IHJlYXNvbiBnaXZlbiBjb250cm9sbGVy4oCZcyBzZXJpYWxpemVkIGFib3J0IHJlYXNvbiBhbmRcbiAgICAgIC8vICAgIHJlbGV2YW50UmVhbG0uXG5cbiAgICAgIC8vIDIuIEFib3J0IHRoZSBmZXRjaCgpIGNhbGwgd2l0aCBwLCByZXF1ZXN0LCByZXNwb25zZU9iamVjdCwgYW5kXG4gICAgICAvLyAgICBkZXNlcmlhbGl6ZWRFcnJvci5cblxuICAgICAgYWJvcnRGZXRjaChwLCByZXF1ZXN0LCByZXNwb25zZU9iamVjdCwgY29udHJvbGxlci5zZXJpYWxpemVkQWJvcnRSZWFzb24pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyAzLiBJZiByZXNwb25zZSBpcyBhIG5ldHdvcmsgZXJyb3IsIHRoZW4gcmVqZWN0IHAgd2l0aCBhIFR5cGVFcnJvclxuICAgIC8vIGFuZCB0ZXJtaW5hdGUgdGhlc2Ugc3Vic3RlcHMuXG4gICAgaWYgKHJlc3BvbnNlLnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgIHAucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ2ZldGNoIGZhaWxlZCcsIHsgY2F1c2U6IHJlc3BvbnNlLmVycm9yIH0pKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gNC4gU2V0IHJlc3BvbnNlT2JqZWN0IHRvIHRoZSByZXN1bHQgb2YgY3JlYXRpbmcgYSBSZXNwb25zZSBvYmplY3QsXG4gICAgLy8gZ2l2ZW4gcmVzcG9uc2UsIFwiaW1tdXRhYmxlXCIsIGFuZCByZWxldmFudFJlYWxtLlxuICAgIHJlc3BvbnNlT2JqZWN0ID0gbmV3IFdlYWtSZWYoZnJvbUlubmVyUmVzcG9uc2UocmVzcG9uc2UsICdpbW11dGFibGUnKSlcblxuICAgIC8vIDUuIFJlc29sdmUgcCB3aXRoIHJlc3BvbnNlT2JqZWN0LlxuICAgIHAucmVzb2x2ZShyZXNwb25zZU9iamVjdC5kZXJlZigpKVxuICAgIHAgPSBudWxsXG4gIH1cblxuICBjb250cm9sbGVyID0gZmV0Y2hpbmcoe1xuICAgIHJlcXVlc3QsXG4gICAgcHJvY2Vzc1Jlc3BvbnNlRW5kT2ZCb2R5OiBoYW5kbGVGZXRjaERvbmUsXG4gICAgcHJvY2Vzc1Jlc3BvbnNlLFxuICAgIGRpc3BhdGNoZXI6IHJlcXVlc3RPYmplY3Rba0Rpc3BhdGNoZXJdIC8vIHVuZGljaVxuICB9KVxuXG4gIC8vIDE0LiBSZXR1cm4gcC5cbiAgcmV0dXJuIHAucHJvbWlzZVxufVxuXG4vLyBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZmluYWxpemUtYW5kLXJlcG9ydC10aW1pbmdcbmZ1bmN0aW9uIGZpbmFsaXplQW5kUmVwb3J0VGltaW5nIChyZXNwb25zZSwgaW5pdGlhdG9yVHlwZSA9ICdvdGhlcicpIHtcbiAgLy8gMS4gSWYgcmVzcG9uc2UgaXMgYW4gYWJvcnRlZCBuZXR3b3JrIGVycm9yLCB0aGVuIHJldHVybi5cbiAgaWYgKHJlc3BvbnNlLnR5cGUgPT09ICdlcnJvcicgJiYgcmVzcG9uc2UuYWJvcnRlZCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gMi4gSWYgcmVzcG9uc2XigJlzIFVSTCBsaXN0IGlzIG51bGwgb3IgZW1wdHksIHRoZW4gcmV0dXJuLlxuICBpZiAoIXJlc3BvbnNlLnVybExpc3Q/Lmxlbmd0aCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gMy4gTGV0IG9yaWdpbmFsVVJMIGJlIHJlc3BvbnNl4oCZcyBVUkwgbGlzdFswXS5cbiAgY29uc3Qgb3JpZ2luYWxVUkwgPSByZXNwb25zZS51cmxMaXN0WzBdXG5cbiAgLy8gNC4gTGV0IHRpbWluZ0luZm8gYmUgcmVzcG9uc2XigJlzIHRpbWluZyBpbmZvLlxuICBsZXQgdGltaW5nSW5mbyA9IHJlc3BvbnNlLnRpbWluZ0luZm9cblxuICAvLyA1LiBMZXQgY2FjaGVTdGF0ZSBiZSByZXNwb25zZeKAmXMgY2FjaGUgc3RhdGUuXG4gIGxldCBjYWNoZVN0YXRlID0gcmVzcG9uc2UuY2FjaGVTdGF0ZVxuXG4gIC8vIDYuIElmIG9yaWdpbmFsVVJM4oCZcyBzY2hlbWUgaXMgbm90IGFuIEhUVFAoUykgc2NoZW1lLCB0aGVuIHJldHVybi5cbiAgaWYgKCF1cmxJc0h0dHBIdHRwc1NjaGVtZShvcmlnaW5hbFVSTCkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIDcuIElmIHRpbWluZ0luZm8gaXMgbnVsbCwgdGhlbiByZXR1cm4uXG4gIGlmICh0aW1pbmdJbmZvID09PSBudWxsKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyA4LiBJZiByZXNwb25zZeKAmXMgdGltaW5nIGFsbG93IHBhc3NlZCBmbGFnIGlzIG5vdCBzZXQsIHRoZW46XG4gIGlmICghcmVzcG9uc2UudGltaW5nQWxsb3dQYXNzZWQpIHtcbiAgICAvLyAgMS4gU2V0IHRpbWluZ0luZm8gdG8gYSB0aGUgcmVzdWx0IG9mIGNyZWF0aW5nIGFuIG9wYXF1ZSB0aW1pbmcgaW5mbyBmb3IgdGltaW5nSW5mby5cbiAgICB0aW1pbmdJbmZvID0gY3JlYXRlT3BhcXVlVGltaW5nSW5mbyh7XG4gICAgICBzdGFydFRpbWU6IHRpbWluZ0luZm8uc3RhcnRUaW1lXG4gICAgfSlcblxuICAgIC8vICAyLiBTZXQgY2FjaGVTdGF0ZSB0byB0aGUgZW1wdHkgc3RyaW5nLlxuICAgIGNhY2hlU3RhdGUgPSAnJ1xuICB9XG5cbiAgLy8gOS4gU2V0IHRpbWluZ0luZm/igJlzIGVuZCB0aW1lIHRvIHRoZSBjb2Fyc2VuZWQgc2hhcmVkIGN1cnJlbnQgdGltZVxuICAvLyBnaXZlbiBnbG9iYWzigJlzIHJlbGV2YW50IHNldHRpbmdzIG9iamVjdOKAmXMgY3Jvc3Mtb3JpZ2luIGlzb2xhdGVkXG4gIC8vIGNhcGFiaWxpdHkuXG4gIC8vIFRPRE86IGdpdmVuIGdsb2JhbOKAmXMgcmVsZXZhbnQgc2V0dGluZ3Mgb2JqZWN04oCZcyBjcm9zcy1vcmlnaW4gaXNvbGF0ZWRcbiAgLy8gY2FwYWJpbGl0eT9cbiAgdGltaW5nSW5mby5lbmRUaW1lID0gY29hcnNlbmVkU2hhcmVkQ3VycmVudFRpbWUoKVxuXG4gIC8vIDEwLiBTZXQgcmVzcG9uc2XigJlzIHRpbWluZyBpbmZvIHRvIHRpbWluZ0luZm8uXG4gIHJlc3BvbnNlLnRpbWluZ0luZm8gPSB0aW1pbmdJbmZvXG5cbiAgLy8gMTEuIE1hcmsgcmVzb3VyY2UgdGltaW5nIGZvciB0aW1pbmdJbmZvLCBvcmlnaW5hbFVSTCwgaW5pdGlhdG9yVHlwZSxcbiAgLy8gZ2xvYmFsLCBhbmQgY2FjaGVTdGF0ZS5cbiAgbWFya1Jlc291cmNlVGltaW5nKFxuICAgIHRpbWluZ0luZm8sXG4gICAgb3JpZ2luYWxVUkwuaHJlZixcbiAgICBpbml0aWF0b3JUeXBlLFxuICAgIGdsb2JhbFRoaXMsXG4gICAgY2FjaGVTdGF0ZVxuICApXG59XG5cbi8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9yZXNvdXJjZS10aW1pbmcvI2Rmbi1tYXJrLXJlc291cmNlLXRpbWluZ1xuY29uc3QgbWFya1Jlc291cmNlVGltaW5nID0gcGVyZm9ybWFuY2UubWFya1Jlc291cmNlVGltaW5nXG5cbi8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNhYm9ydC1mZXRjaFxuZnVuY3Rpb24gYWJvcnRGZXRjaCAocCwgcmVxdWVzdCwgcmVzcG9uc2VPYmplY3QsIGVycm9yKSB7XG4gIC8vIDEuIFJlamVjdCBwcm9taXNlIHdpdGggZXJyb3IuXG4gIGlmIChwKSB7XG4gICAgLy8gV2UgbWlnaHQgaGF2ZSBhbHJlYWR5IHJlc29sdmVkIHRoZSBwcm9taXNlIGF0IHRoaXMgc3RhZ2VcbiAgICBwLnJlamVjdChlcnJvcilcbiAgfVxuXG4gIC8vIDIuIElmIHJlcXVlc3TigJlzIGJvZHkgaXMgbm90IG51bGwgYW5kIGlzIHJlYWRhYmxlLCB0aGVuIGNhbmNlbCByZXF1ZXN04oCZc1xuICAvLyBib2R5IHdpdGggZXJyb3IuXG4gIGlmIChyZXF1ZXN0LmJvZHkgIT0gbnVsbCAmJiBpc1JlYWRhYmxlKHJlcXVlc3QuYm9keT8uc3RyZWFtKSkge1xuICAgIHJlcXVlc3QuYm9keS5zdHJlYW0uY2FuY2VsKGVycm9yKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdFUlJfSU5WQUxJRF9TVEFURScpIHtcbiAgICAgICAgLy8gTm9kZSBidWc/XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdGhyb3cgZXJyXG4gICAgfSlcbiAgfVxuXG4gIC8vIDMuIElmIHJlc3BvbnNlT2JqZWN0IGlzIG51bGwsIHRoZW4gcmV0dXJuLlxuICBpZiAocmVzcG9uc2VPYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gNC4gTGV0IHJlc3BvbnNlIGJlIHJlc3BvbnNlT2JqZWN04oCZcyByZXNwb25zZS5cbiAgY29uc3QgcmVzcG9uc2UgPSByZXNwb25zZU9iamVjdFtrU3RhdGVdXG5cbiAgLy8gNS4gSWYgcmVzcG9uc2XigJlzIGJvZHkgaXMgbm90IG51bGwgYW5kIGlzIHJlYWRhYmxlLCB0aGVuIGVycm9yIHJlc3BvbnNl4oCZc1xuICAvLyBib2R5IHdpdGggZXJyb3IuXG4gIGlmIChyZXNwb25zZS5ib2R5ICE9IG51bGwgJiYgaXNSZWFkYWJsZShyZXNwb25zZS5ib2R5Py5zdHJlYW0pKSB7XG4gICAgcmVzcG9uc2UuYm9keS5zdHJlYW0uY2FuY2VsKGVycm9yKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdFUlJfSU5WQUxJRF9TVEFURScpIHtcbiAgICAgICAgLy8gTm9kZSBidWc/XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdGhyb3cgZXJyXG4gICAgfSlcbiAgfVxufVxuXG4vLyBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZmV0Y2hpbmdcbmZ1bmN0aW9uIGZldGNoaW5nICh7XG4gIHJlcXVlc3QsXG4gIHByb2Nlc3NSZXF1ZXN0Qm9keUNodW5rTGVuZ3RoLFxuICBwcm9jZXNzUmVxdWVzdEVuZE9mQm9keSxcbiAgcHJvY2Vzc1Jlc3BvbnNlLFxuICBwcm9jZXNzUmVzcG9uc2VFbmRPZkJvZHksXG4gIHByb2Nlc3NSZXNwb25zZUNvbnN1bWVCb2R5LFxuICB1c2VQYXJhbGxlbFF1ZXVlID0gZmFsc2UsXG4gIGRpc3BhdGNoZXIgPSBnZXRHbG9iYWxEaXNwYXRjaGVyKCkgLy8gdW5kaWNpXG59KSB7XG4gIC8vIEVuc3VyZSB0aGF0IHRoZSBkaXNwYXRjaGVyIGlzIHNldCBhY2NvcmRpbmdseVxuICBhc3NlcnQoZGlzcGF0Y2hlcilcblxuICAvLyAxLiBMZXQgdGFza0Rlc3RpbmF0aW9uIGJlIG51bGwuXG4gIGxldCB0YXNrRGVzdGluYXRpb24gPSBudWxsXG5cbiAgLy8gMi4gTGV0IGNyb3NzT3JpZ2luSXNvbGF0ZWRDYXBhYmlsaXR5IGJlIGZhbHNlLlxuICBsZXQgY3Jvc3NPcmlnaW5Jc29sYXRlZENhcGFiaWxpdHkgPSBmYWxzZVxuXG4gIC8vIDMuIElmIHJlcXVlc3TigJlzIGNsaWVudCBpcyBub24tbnVsbCwgdGhlbjpcbiAgaWYgKHJlcXVlc3QuY2xpZW50ICE9IG51bGwpIHtcbiAgICAvLyAxLiBTZXQgdGFza0Rlc3RpbmF0aW9uIHRvIHJlcXVlc3TigJlzIGNsaWVudOKAmXMgZ2xvYmFsIG9iamVjdC5cbiAgICB0YXNrRGVzdGluYXRpb24gPSByZXF1ZXN0LmNsaWVudC5nbG9iYWxPYmplY3RcblxuICAgIC8vIDIuIFNldCBjcm9zc09yaWdpbklzb2xhdGVkQ2FwYWJpbGl0eSB0byByZXF1ZXN04oCZcyBjbGllbnTigJlzIGNyb3NzLW9yaWdpblxuICAgIC8vIGlzb2xhdGVkIGNhcGFiaWxpdHkuXG4gICAgY3Jvc3NPcmlnaW5Jc29sYXRlZENhcGFiaWxpdHkgPVxuICAgICAgcmVxdWVzdC5jbGllbnQuY3Jvc3NPcmlnaW5Jc29sYXRlZENhcGFiaWxpdHlcbiAgfVxuXG4gIC8vIDQuIElmIHVzZVBhcmFsbGVsUXVldWUgaXMgdHJ1ZSwgdGhlbiBzZXQgdGFza0Rlc3RpbmF0aW9uIHRvIHRoZSByZXN1bHQgb2ZcbiAgLy8gc3RhcnRpbmcgYSBuZXcgcGFyYWxsZWwgcXVldWUuXG4gIC8vIFRPRE9cblxuICAvLyA1LiBMZXQgdGltaW5nSW5mbyBiZSBhIG5ldyBmZXRjaCB0aW1pbmcgaW5mbyB3aG9zZSBzdGFydCB0aW1lIGFuZFxuICAvLyBwb3N0LXJlZGlyZWN0IHN0YXJ0IHRpbWUgYXJlIHRoZSBjb2Fyc2VuZWQgc2hhcmVkIGN1cnJlbnQgdGltZSBnaXZlblxuICAvLyBjcm9zc09yaWdpbklzb2xhdGVkQ2FwYWJpbGl0eS5cbiAgY29uc3QgY3VycmVudFRpbWUgPSBjb2Fyc2VuZWRTaGFyZWRDdXJyZW50VGltZShjcm9zc09yaWdpbklzb2xhdGVkQ2FwYWJpbGl0eSlcbiAgY29uc3QgdGltaW5nSW5mbyA9IGNyZWF0ZU9wYXF1ZVRpbWluZ0luZm8oe1xuICAgIHN0YXJ0VGltZTogY3VycmVudFRpbWVcbiAgfSlcblxuICAvLyA2LiBMZXQgZmV0Y2hQYXJhbXMgYmUgYSBuZXcgZmV0Y2ggcGFyYW1zIHdob3NlXG4gIC8vIHJlcXVlc3QgaXMgcmVxdWVzdCxcbiAgLy8gdGltaW5nIGluZm8gaXMgdGltaW5nSW5mbyxcbiAgLy8gcHJvY2VzcyByZXF1ZXN0IGJvZHkgY2h1bmsgbGVuZ3RoIGlzIHByb2Nlc3NSZXF1ZXN0Qm9keUNodW5rTGVuZ3RoLFxuICAvLyBwcm9jZXNzIHJlcXVlc3QgZW5kLW9mLWJvZHkgaXMgcHJvY2Vzc1JlcXVlc3RFbmRPZkJvZHksXG4gIC8vIHByb2Nlc3MgcmVzcG9uc2UgaXMgcHJvY2Vzc1Jlc3BvbnNlLFxuICAvLyBwcm9jZXNzIHJlc3BvbnNlIGNvbnN1bWUgYm9keSBpcyBwcm9jZXNzUmVzcG9uc2VDb25zdW1lQm9keSxcbiAgLy8gcHJvY2VzcyByZXNwb25zZSBlbmQtb2YtYm9keSBpcyBwcm9jZXNzUmVzcG9uc2VFbmRPZkJvZHksXG4gIC8vIHRhc2sgZGVzdGluYXRpb24gaXMgdGFza0Rlc3RpbmF0aW9uLFxuICAvLyBhbmQgY3Jvc3Mtb3JpZ2luIGlzb2xhdGVkIGNhcGFiaWxpdHkgaXMgY3Jvc3NPcmlnaW5Jc29sYXRlZENhcGFiaWxpdHkuXG4gIGNvbnN0IGZldGNoUGFyYW1zID0ge1xuICAgIGNvbnRyb2xsZXI6IG5ldyBGZXRjaChkaXNwYXRjaGVyKSxcbiAgICByZXF1ZXN0LFxuICAgIHRpbWluZ0luZm8sXG4gICAgcHJvY2Vzc1JlcXVlc3RCb2R5Q2h1bmtMZW5ndGgsXG4gICAgcHJvY2Vzc1JlcXVlc3RFbmRPZkJvZHksXG4gICAgcHJvY2Vzc1Jlc3BvbnNlLFxuICAgIHByb2Nlc3NSZXNwb25zZUNvbnN1bWVCb2R5LFxuICAgIHByb2Nlc3NSZXNwb25zZUVuZE9mQm9keSxcbiAgICB0YXNrRGVzdGluYXRpb24sXG4gICAgY3Jvc3NPcmlnaW5Jc29sYXRlZENhcGFiaWxpdHlcbiAgfVxuXG4gIC8vIDcuIElmIHJlcXVlc3TigJlzIGJvZHkgaXMgYSBieXRlIHNlcXVlbmNlLCB0aGVuIHNldCByZXF1ZXN04oCZcyBib2R5IHRvXG4gIC8vICAgIHJlcXVlc3TigJlzIGJvZHkgYXMgYSBib2R5LlxuICAvLyBOT1RFOiBTaW5jZSBmZXRjaGluZyBpcyBvbmx5IGNhbGxlZCBmcm9tIGZldGNoLCBib2R5IHNob3VsZCBhbHJlYWR5IGJlXG4gIC8vIGV4dHJhY3RlZC5cbiAgYXNzZXJ0KCFyZXF1ZXN0LmJvZHkgfHwgcmVxdWVzdC5ib2R5LnN0cmVhbSlcblxuICAvLyA4LiBJZiByZXF1ZXN04oCZcyB3aW5kb3cgaXMgXCJjbGllbnRcIiwgdGhlbiBzZXQgcmVxdWVzdOKAmXMgd2luZG93IHRvIHJlcXVlc3TigJlzXG4gIC8vIGNsaWVudCwgaWYgcmVxdWVzdOKAmXMgY2xpZW504oCZcyBnbG9iYWwgb2JqZWN0IGlzIGEgV2luZG93IG9iamVjdDsgb3RoZXJ3aXNlXG4gIC8vIFwibm8td2luZG93XCIuXG4gIGlmIChyZXF1ZXN0LndpbmRvdyA9PT0gJ2NsaWVudCcpIHtcbiAgICAvLyBUT0RPOiBXaGF0IGlmIHJlcXVlc3QuY2xpZW50IGlzIG51bGw/XG4gICAgcmVxdWVzdC53aW5kb3cgPVxuICAgICAgcmVxdWVzdC5jbGllbnQ/Lmdsb2JhbE9iamVjdD8uY29uc3RydWN0b3I/Lm5hbWUgPT09ICdXaW5kb3cnXG4gICAgICAgID8gcmVxdWVzdC5jbGllbnRcbiAgICAgICAgOiAnbm8td2luZG93J1xuICB9XG5cbiAgLy8gOS4gSWYgcmVxdWVzdOKAmXMgb3JpZ2luIGlzIFwiY2xpZW50XCIsIHRoZW4gc2V0IHJlcXVlc3TigJlzIG9yaWdpbiB0byByZXF1ZXN04oCZc1xuICAvLyBjbGllbnTigJlzIG9yaWdpbi5cbiAgaWYgKHJlcXVlc3Qub3JpZ2luID09PSAnY2xpZW50Jykge1xuICAgIHJlcXVlc3Qub3JpZ2luID0gcmVxdWVzdC5jbGllbnQub3JpZ2luXG4gIH1cblxuICAvLyAxMC4gSWYgYWxsIG9mIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgdHJ1ZTpcbiAgLy8gVE9ET1xuXG4gIC8vIDExLiBJZiByZXF1ZXN04oCZcyBwb2xpY3kgY29udGFpbmVyIGlzIFwiY2xpZW50XCIsIHRoZW46XG4gIGlmIChyZXF1ZXN0LnBvbGljeUNvbnRhaW5lciA9PT0gJ2NsaWVudCcpIHtcbiAgICAvLyAxLiBJZiByZXF1ZXN04oCZcyBjbGllbnQgaXMgbm9uLW51bGwsIHRoZW4gc2V0IHJlcXVlc3TigJlzIHBvbGljeVxuICAgIC8vIGNvbnRhaW5lciB0byBhIGNsb25lIG9mIHJlcXVlc3TigJlzIGNsaWVudOKAmXMgcG9saWN5IGNvbnRhaW5lci4gW0hUTUxdXG4gICAgaWYgKHJlcXVlc3QuY2xpZW50ICE9IG51bGwpIHtcbiAgICAgIHJlcXVlc3QucG9saWN5Q29udGFpbmVyID0gY2xvbmVQb2xpY3lDb250YWluZXIoXG4gICAgICAgIHJlcXVlc3QuY2xpZW50LnBvbGljeUNvbnRhaW5lclxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyAyLiBPdGhlcndpc2UsIHNldCByZXF1ZXN04oCZcyBwb2xpY3kgY29udGFpbmVyIHRvIGEgbmV3IHBvbGljeVxuICAgICAgLy8gY29udGFpbmVyLlxuICAgICAgcmVxdWVzdC5wb2xpY3lDb250YWluZXIgPSBtYWtlUG9saWN5Q29udGFpbmVyKClcbiAgICB9XG4gIH1cblxuICAvLyAxMi4gSWYgcmVxdWVzdOKAmXMgaGVhZGVyIGxpc3QgZG9lcyBub3QgY29udGFpbiBgQWNjZXB0YCwgdGhlbjpcbiAgaWYgKCFyZXF1ZXN0LmhlYWRlcnNMaXN0LmNvbnRhaW5zKCdhY2NlcHQnLCB0cnVlKSkge1xuICAgIC8vIDEuIExldCB2YWx1ZSBiZSBgKi8qYC5cbiAgICBjb25zdCB2YWx1ZSA9ICcqLyonXG5cbiAgICAvLyAyLiBBIHVzZXIgYWdlbnQgc2hvdWxkIHNldCB2YWx1ZSB0byB0aGUgZmlyc3QgbWF0Y2hpbmcgc3RhdGVtZW50LCBpZlxuICAgIC8vIGFueSwgc3dpdGNoaW5nIG9uIHJlcXVlc3TigJlzIGRlc3RpbmF0aW9uOlxuICAgIC8vIFwiZG9jdW1lbnRcIlxuICAgIC8vIFwiZnJhbWVcIlxuICAgIC8vIFwiaWZyYW1lXCJcbiAgICAvLyBgdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksKi8qO3E9MC44YFxuICAgIC8vIFwiaW1hZ2VcIlxuICAgIC8vIGBpbWFnZS9wbmcsaW1hZ2Uvc3ZnK3htbCxpbWFnZS8qO3E9MC44LCovKjtxPTAuNWBcbiAgICAvLyBcInN0eWxlXCJcbiAgICAvLyBgdGV4dC9jc3MsKi8qO3E9MC4xYFxuICAgIC8vIFRPRE9cblxuICAgIC8vIDMuIEFwcGVuZCBgQWNjZXB0YC92YWx1ZSB0byByZXF1ZXN04oCZcyBoZWFkZXIgbGlzdC5cbiAgICByZXF1ZXN0LmhlYWRlcnNMaXN0LmFwcGVuZCgnYWNjZXB0JywgdmFsdWUsIHRydWUpXG4gIH1cblxuICAvLyAxMy4gSWYgcmVxdWVzdOKAmXMgaGVhZGVyIGxpc3QgZG9lcyBub3QgY29udGFpbiBgQWNjZXB0LUxhbmd1YWdlYCwgdGhlblxuICAvLyB1c2VyIGFnZW50cyBzaG91bGQgYXBwZW5kIGBBY2NlcHQtTGFuZ3VhZ2VgL2FuIGFwcHJvcHJpYXRlIHZhbHVlIHRvXG4gIC8vIHJlcXVlc3TigJlzIGhlYWRlciBsaXN0LlxuICBpZiAoIXJlcXVlc3QuaGVhZGVyc0xpc3QuY29udGFpbnMoJ2FjY2VwdC1sYW5ndWFnZScsIHRydWUpKSB7XG4gICAgcmVxdWVzdC5oZWFkZXJzTGlzdC5hcHBlbmQoJ2FjY2VwdC1sYW5ndWFnZScsICcqJywgdHJ1ZSlcbiAgfVxuXG4gIC8vIDE0LiBJZiByZXF1ZXN04oCZcyBwcmlvcml0eSBpcyBudWxsLCB0aGVuIHVzZSByZXF1ZXN04oCZcyBpbml0aWF0b3IgYW5kXG4gIC8vIGRlc3RpbmF0aW9uIGFwcHJvcHJpYXRlbHkgaW4gc2V0dGluZyByZXF1ZXN04oCZcyBwcmlvcml0eSB0byBhXG4gIC8vIHVzZXItYWdlbnQtZGVmaW5lZCBvYmplY3QuXG4gIGlmIChyZXF1ZXN0LnByaW9yaXR5ID09PSBudWxsKSB7XG4gICAgLy8gVE9ET1xuICB9XG5cbiAgLy8gMTUuIElmIHJlcXVlc3QgaXMgYSBzdWJyZXNvdXJjZSByZXF1ZXN0LCB0aGVuOlxuICBpZiAoc3VicmVzb3VyY2VTZXQuaGFzKHJlcXVlc3QuZGVzdGluYXRpb24pKSB7XG4gICAgLy8gVE9ET1xuICB9XG5cbiAgLy8gMTYuIFJ1biBtYWluIGZldGNoIGdpdmVuIGZldGNoUGFyYW1zLlxuICBtYWluRmV0Y2goZmV0Y2hQYXJhbXMpXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBmZXRjaFBhcmFtcy5jb250cm9sbGVyLnRlcm1pbmF0ZShlcnIpXG4gICAgfSlcblxuICAvLyAxNy4gUmV0dXJuIGZldGNoUGFyYW0ncyBjb250cm9sbGVyXG4gIHJldHVybiBmZXRjaFBhcmFtcy5jb250cm9sbGVyXG59XG5cbi8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW1haW4tZmV0Y2hcbmFzeW5jIGZ1bmN0aW9uIG1haW5GZXRjaCAoZmV0Y2hQYXJhbXMsIHJlY3Vyc2l2ZSA9IGZhbHNlKSB7XG4gIC8vIDEuIExldCByZXF1ZXN0IGJlIGZldGNoUGFyYW1z4oCZcyByZXF1ZXN0LlxuICBjb25zdCByZXF1ZXN0ID0gZmV0Y2hQYXJhbXMucmVxdWVzdFxuXG4gIC8vIDIuIExldCByZXNwb25zZSBiZSBudWxsLlxuICBsZXQgcmVzcG9uc2UgPSBudWxsXG5cbiAgLy8gMy4gSWYgcmVxdWVzdOKAmXMgbG9jYWwtVVJMcy1vbmx5IGZsYWcgaXMgc2V0IGFuZCByZXF1ZXN04oCZcyBjdXJyZW50IFVSTCBpc1xuICAvLyBub3QgbG9jYWwsIHRoZW4gc2V0IHJlc3BvbnNlIHRvIGEgbmV0d29yayBlcnJvci5cbiAgaWYgKHJlcXVlc3QubG9jYWxVUkxzT25seSAmJiAhdXJsSXNMb2NhbChyZXF1ZXN0Q3VycmVudFVSTChyZXF1ZXN0KSkpIHtcbiAgICByZXNwb25zZSA9IG1ha2VOZXR3b3JrRXJyb3IoJ2xvY2FsIFVSTHMgb25seScpXG4gIH1cblxuICAvLyA0LiBSdW4gcmVwb3J0IENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHZpb2xhdGlvbnMgZm9yIHJlcXVlc3QuXG4gIC8vIFRPRE9cblxuICAvLyA1LiBVcGdyYWRlIHJlcXVlc3QgdG8gYSBwb3RlbnRpYWxseSB0cnVzdHdvcnRoeSBVUkwsIGlmIGFwcHJvcHJpYXRlLlxuICB0cnlVcGdyYWRlUmVxdWVzdFRvQVBvdGVudGlhbGx5VHJ1c3R3b3J0aHlVUkwocmVxdWVzdClcblxuICAvLyA2LiBJZiBzaG91bGQgcmVxdWVzdCBiZSBibG9ja2VkIGR1ZSB0byBhIGJhZCBwb3J0LCBzaG91bGQgZmV0Y2hpbmcgcmVxdWVzdFxuICAvLyBiZSBibG9ja2VkIGFzIG1peGVkIGNvbnRlbnQsIG9yIHNob3VsZCByZXF1ZXN0IGJlIGJsb2NrZWQgYnkgQ29udGVudFxuICAvLyBTZWN1cml0eSBQb2xpY3kgcmV0dXJucyBibG9ja2VkLCB0aGVuIHNldCByZXNwb25zZSB0byBhIG5ldHdvcmsgZXJyb3IuXG4gIGlmIChyZXF1ZXN0QmFkUG9ydChyZXF1ZXN0KSA9PT0gJ2Jsb2NrZWQnKSB7XG4gICAgcmVzcG9uc2UgPSBtYWtlTmV0d29ya0Vycm9yKCdiYWQgcG9ydCcpXG4gIH1cbiAgLy8gVE9ETzogc2hvdWxkIGZldGNoaW5nIHJlcXVlc3QgYmUgYmxvY2tlZCBhcyBtaXhlZCBjb250ZW50P1xuICAvLyBUT0RPOiBzaG91bGQgcmVxdWVzdCBiZSBibG9ja2VkIGJ5IENvbnRlbnQgU2VjdXJpdHkgUG9saWN5P1xuXG4gIC8vIDcuIElmIHJlcXVlc3TigJlzIHJlZmVycmVyIHBvbGljeSBpcyB0aGUgZW1wdHkgc3RyaW5nLCB0aGVuIHNldCByZXF1ZXN04oCZc1xuICAvLyByZWZlcnJlciBwb2xpY3kgdG8gcmVxdWVzdOKAmXMgcG9saWN5IGNvbnRhaW5lcuKAmXMgcmVmZXJyZXIgcG9saWN5LlxuICBpZiAocmVxdWVzdC5yZWZlcnJlclBvbGljeSA9PT0gJycpIHtcbiAgICByZXF1ZXN0LnJlZmVycmVyUG9saWN5ID0gcmVxdWVzdC5wb2xpY3lDb250YWluZXIucmVmZXJyZXJQb2xpY3lcbiAgfVxuXG4gIC8vIDguIElmIHJlcXVlc3TigJlzIHJlZmVycmVyIGlzIG5vdCBcIm5vLXJlZmVycmVyXCIsIHRoZW4gc2V0IHJlcXVlc3TigJlzXG4gIC8vIHJlZmVycmVyIHRvIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgZGV0ZXJtaW5lIHJlcXVlc3TigJlzIHJlZmVycmVyLlxuICBpZiAocmVxdWVzdC5yZWZlcnJlciAhPT0gJ25vLXJlZmVycmVyJykge1xuICAgIHJlcXVlc3QucmVmZXJyZXIgPSBkZXRlcm1pbmVSZXF1ZXN0c1JlZmVycmVyKHJlcXVlc3QpXG4gIH1cblxuICAvLyA5LiBTZXQgcmVxdWVzdOKAmXMgY3VycmVudCBVUkzigJlzIHNjaGVtZSB0byBcImh0dHBzXCIgaWYgYWxsIG9mIHRoZSBmb2xsb3dpbmdcbiAgLy8gY29uZGl0aW9ucyBhcmUgdHJ1ZTpcbiAgLy8gLSByZXF1ZXN04oCZcyBjdXJyZW50IFVSTOKAmXMgc2NoZW1lIGlzIFwiaHR0cFwiXG4gIC8vIC0gcmVxdWVzdOKAmXMgY3VycmVudCBVUkzigJlzIGhvc3QgaXMgYSBkb21haW5cbiAgLy8gLSBNYXRjaGluZyByZXF1ZXN04oCZcyBjdXJyZW50IFVSTOKAmXMgaG9zdCBwZXIgS25vd24gSFNUUyBIb3N0IERvbWFpbiBOYW1lXG4gIC8vICAgTWF0Y2hpbmcgcmVzdWx0cyBpbiBlaXRoZXIgYSBzdXBlcmRvbWFpbiBtYXRjaCB3aXRoIGFuIGFzc2VydGVkXG4gIC8vICAgaW5jbHVkZVN1YkRvbWFpbnMgZGlyZWN0aXZlIG9yIGEgY29uZ3J1ZW50IG1hdGNoICh3aXRoIG9yIHdpdGhvdXQgYW5cbiAgLy8gICBhc3NlcnRlZCBpbmNsdWRlU3ViRG9tYWlucyBkaXJlY3RpdmUpLiBbSFNUU11cbiAgLy8gVE9ET1xuXG4gIC8vIDEwLiBJZiByZWN1cnNpdmUgaXMgZmFsc2UsIHRoZW4gcnVuIHRoZSByZW1haW5pbmcgc3RlcHMgaW4gcGFyYWxsZWwuXG4gIC8vIFRPRE9cblxuICAvLyAxMS4gSWYgcmVzcG9uc2UgaXMgbnVsbCwgdGhlbiBzZXQgcmVzcG9uc2UgdG8gdGhlIHJlc3VsdCBvZiBydW5uaW5nXG4gIC8vIHRoZSBzdGVwcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBmaXJzdCBtYXRjaGluZyBzdGF0ZW1lbnQ6XG4gIGlmIChyZXNwb25zZSA9PT0gbnVsbCkge1xuICAgIHJlc3BvbnNlID0gYXdhaXQgKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRVUkwgPSByZXF1ZXN0Q3VycmVudFVSTChyZXF1ZXN0KVxuXG4gICAgICBpZiAoXG4gICAgICAgIC8vIC0gcmVxdWVzdOKAmXMgY3VycmVudCBVUkzigJlzIG9yaWdpbiBpcyBzYW1lIG9yaWdpbiB3aXRoIHJlcXVlc3TigJlzIG9yaWdpbixcbiAgICAgICAgLy8gICBhbmQgcmVxdWVzdOKAmXMgcmVzcG9uc2UgdGFpbnRpbmcgaXMgXCJiYXNpY1wiXG4gICAgICAgIChzYW1lT3JpZ2luKGN1cnJlbnRVUkwsIHJlcXVlc3QudXJsKSAmJiByZXF1ZXN0LnJlc3BvbnNlVGFpbnRpbmcgPT09ICdiYXNpYycpIHx8XG4gICAgICAgIC8vIHJlcXVlc3TigJlzIGN1cnJlbnQgVVJM4oCZcyBzY2hlbWUgaXMgXCJkYXRhXCJcbiAgICAgICAgKGN1cnJlbnRVUkwucHJvdG9jb2wgPT09ICdkYXRhOicpIHx8XG4gICAgICAgIC8vIC0gcmVxdWVzdOKAmXMgbW9kZSBpcyBcIm5hdmlnYXRlXCIgb3IgXCJ3ZWJzb2NrZXRcIlxuICAgICAgICAocmVxdWVzdC5tb2RlID09PSAnbmF2aWdhdGUnIHx8IHJlcXVlc3QubW9kZSA9PT0gJ3dlYnNvY2tldCcpXG4gICAgICApIHtcbiAgICAgICAgLy8gMS4gU2V0IHJlcXVlc3TigJlzIHJlc3BvbnNlIHRhaW50aW5nIHRvIFwiYmFzaWNcIi5cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRhaW50aW5nID0gJ2Jhc2ljJ1xuXG4gICAgICAgIC8vIDIuIFJldHVybiB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgc2NoZW1lIGZldGNoIGdpdmVuIGZldGNoUGFyYW1zLlxuICAgICAgICByZXR1cm4gYXdhaXQgc2NoZW1lRmV0Y2goZmV0Y2hQYXJhbXMpXG4gICAgICB9XG5cbiAgICAgIC8vIHJlcXVlc3TigJlzIG1vZGUgaXMgXCJzYW1lLW9yaWdpblwiXG4gICAgICBpZiAocmVxdWVzdC5tb2RlID09PSAnc2FtZS1vcmlnaW4nKSB7XG4gICAgICAgIC8vIDEuIFJldHVybiBhIG5ldHdvcmsgZXJyb3IuXG4gICAgICAgIHJldHVybiBtYWtlTmV0d29ya0Vycm9yKCdyZXF1ZXN0IG1vZGUgY2Fubm90IGJlIFwic2FtZS1vcmlnaW5cIicpXG4gICAgICB9XG5cbiAgICAgIC8vIHJlcXVlc3TigJlzIG1vZGUgaXMgXCJuby1jb3JzXCJcbiAgICAgIGlmIChyZXF1ZXN0Lm1vZGUgPT09ICduby1jb3JzJykge1xuICAgICAgICAvLyAxLiBJZiByZXF1ZXN04oCZcyByZWRpcmVjdCBtb2RlIGlzIG5vdCBcImZvbGxvd1wiLCB0aGVuIHJldHVybiBhIG5ldHdvcmtcbiAgICAgICAgLy8gZXJyb3IuXG4gICAgICAgIGlmIChyZXF1ZXN0LnJlZGlyZWN0ICE9PSAnZm9sbG93Jykge1xuICAgICAgICAgIHJldHVybiBtYWtlTmV0d29ya0Vycm9yKFxuICAgICAgICAgICAgJ3JlZGlyZWN0IG1vZGUgY2Fubm90IGJlIFwiZm9sbG93XCIgZm9yIFwibm8tY29yc1wiIHJlcXVlc3QnXG4gICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gMi4gU2V0IHJlcXVlc3TigJlzIHJlc3BvbnNlIHRhaW50aW5nIHRvIFwib3BhcXVlXCIuXG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUYWludGluZyA9ICdvcGFxdWUnXG5cbiAgICAgICAgLy8gMy4gUmV0dXJuIHRoZSByZXN1bHQgb2YgcnVubmluZyBzY2hlbWUgZmV0Y2ggZ2l2ZW4gZmV0Y2hQYXJhbXMuXG4gICAgICAgIHJldHVybiBhd2FpdCBzY2hlbWVGZXRjaChmZXRjaFBhcmFtcylcbiAgICAgIH1cblxuICAgICAgLy8gcmVxdWVzdOKAmXMgY3VycmVudCBVUkzigJlzIHNjaGVtZSBpcyBub3QgYW4gSFRUUChTKSBzY2hlbWVcbiAgICAgIGlmICghdXJsSXNIdHRwSHR0cHNTY2hlbWUocmVxdWVzdEN1cnJlbnRVUkwocmVxdWVzdCkpKSB7XG4gICAgICAgIC8vIFJldHVybiBhIG5ldHdvcmsgZXJyb3IuXG4gICAgICAgIHJldHVybiBtYWtlTmV0d29ya0Vycm9yKCdVUkwgc2NoZW1lIG11c3QgYmUgYSBIVFRQKFMpIHNjaGVtZScpXG4gICAgICB9XG5cbiAgICAgIC8vIC0gcmVxdWVzdOKAmXMgdXNlLUNPUlMtcHJlZmxpZ2h0IGZsYWcgaXMgc2V0XG4gICAgICAvLyAtIHJlcXVlc3TigJlzIHVuc2FmZS1yZXF1ZXN0IGZsYWcgaXMgc2V0IGFuZCBlaXRoZXIgcmVxdWVzdOKAmXMgbWV0aG9kIGlzXG4gICAgICAvLyAgIG5vdCBhIENPUlMtc2FmZWxpc3RlZCBtZXRob2Qgb3IgQ09SUy11bnNhZmUgcmVxdWVzdC1oZWFkZXIgbmFtZXMgd2l0aFxuICAgICAgLy8gICByZXF1ZXN04oCZcyBoZWFkZXIgbGlzdCBpcyBub3QgZW1wdHlcbiAgICAgIC8vICAgIDEuIFNldCByZXF1ZXN04oCZcyByZXNwb25zZSB0YWludGluZyB0byBcImNvcnNcIi5cbiAgICAgIC8vICAgIDIuIExldCBjb3JzV2l0aFByZWZsaWdodFJlc3BvbnNlIGJlIHRoZSByZXN1bHQgb2YgcnVubmluZyBIVFRQIGZldGNoXG4gICAgICAvLyAgICBnaXZlbiBmZXRjaFBhcmFtcyBhbmQgdHJ1ZS5cbiAgICAgIC8vICAgIDMuIElmIGNvcnNXaXRoUHJlZmxpZ2h0UmVzcG9uc2UgaXMgYSBuZXR3b3JrIGVycm9yLCB0aGVuIGNsZWFyIGNhY2hlXG4gICAgICAvLyAgICBlbnRyaWVzIHVzaW5nIHJlcXVlc3QuXG4gICAgICAvLyAgICA0LiBSZXR1cm4gY29yc1dpdGhQcmVmbGlnaHRSZXNwb25zZS5cbiAgICAgIC8vIFRPRE9cblxuICAgICAgLy8gT3RoZXJ3aXNlXG4gICAgICAvLyAgICAxLiBTZXQgcmVxdWVzdOKAmXMgcmVzcG9uc2UgdGFpbnRpbmcgdG8gXCJjb3JzXCIuXG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVGFpbnRpbmcgPSAnY29ycydcblxuICAgICAgLy8gICAgMi4gUmV0dXJuIHRoZSByZXN1bHQgb2YgcnVubmluZyBIVFRQIGZldGNoIGdpdmVuIGZldGNoUGFyYW1zLlxuICAgICAgcmV0dXJuIGF3YWl0IGh0dHBGZXRjaChmZXRjaFBhcmFtcylcbiAgICB9KSgpXG4gIH1cblxuICAvLyAxMi4gSWYgcmVjdXJzaXZlIGlzIHRydWUsIHRoZW4gcmV0dXJuIHJlc3BvbnNlLlxuICBpZiAocmVjdXJzaXZlKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICAvLyAxMy4gSWYgcmVzcG9uc2UgaXMgbm90IGEgbmV0d29yayBlcnJvciBhbmQgcmVzcG9uc2UgaXMgbm90IGEgZmlsdGVyZWRcbiAgLy8gcmVzcG9uc2UsIHRoZW46XG4gIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDAgJiYgIXJlc3BvbnNlLmludGVybmFsUmVzcG9uc2UpIHtcbiAgICAvLyBJZiByZXF1ZXN04oCZcyByZXNwb25zZSB0YWludGluZyBpcyBcImNvcnNcIiwgdGhlbjpcbiAgICBpZiAocmVxdWVzdC5yZXNwb25zZVRhaW50aW5nID09PSAnY29ycycpIHtcbiAgICAgIC8vIDEuIExldCBoZWFkZXJOYW1lcyBiZSB0aGUgcmVzdWx0IG9mIGV4dHJhY3RpbmcgaGVhZGVyIGxpc3QgdmFsdWVzXG4gICAgICAvLyBnaXZlbiBgQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnNgIGFuZCByZXNwb25zZeKAmXMgaGVhZGVyIGxpc3QuXG4gICAgICAvLyBUT0RPXG4gICAgICAvLyAyLiBJZiByZXF1ZXN04oCZcyBjcmVkZW50aWFscyBtb2RlIGlzIG5vdCBcImluY2x1ZGVcIiBhbmQgaGVhZGVyTmFtZXNcbiAgICAgIC8vIGNvbnRhaW5zIGAqYCwgdGhlbiBzZXQgcmVzcG9uc2XigJlzIENPUlMtZXhwb3NlZCBoZWFkZXItbmFtZSBsaXN0IHRvXG4gICAgICAvLyBhbGwgdW5pcXVlIGhlYWRlciBuYW1lcyBpbiByZXNwb25zZeKAmXMgaGVhZGVyIGxpc3QuXG4gICAgICAvLyBUT0RPXG4gICAgICAvLyAzLiBPdGhlcndpc2UsIGlmIGhlYWRlck5hbWVzIGlzIG5vdCBudWxsIG9yIGZhaWx1cmUsIHRoZW4gc2V0XG4gICAgICAvLyByZXNwb25zZeKAmXMgQ09SUy1leHBvc2VkIGhlYWRlci1uYW1lIGxpc3QgdG8gaGVhZGVyTmFtZXMuXG4gICAgICAvLyBUT0RPXG4gICAgfVxuXG4gICAgLy8gU2V0IHJlc3BvbnNlIHRvIHRoZSBmb2xsb3dpbmcgZmlsdGVyZWQgcmVzcG9uc2Ugd2l0aCByZXNwb25zZSBhcyBpdHNcbiAgICAvLyBpbnRlcm5hbCByZXNwb25zZSwgZGVwZW5kaW5nIG9uIHJlcXVlc3TigJlzIHJlc3BvbnNlIHRhaW50aW5nOlxuICAgIGlmIChyZXF1ZXN0LnJlc3BvbnNlVGFpbnRpbmcgPT09ICdiYXNpYycpIHtcbiAgICAgIHJlc3BvbnNlID0gZmlsdGVyUmVzcG9uc2UocmVzcG9uc2UsICdiYXNpYycpXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LnJlc3BvbnNlVGFpbnRpbmcgPT09ICdjb3JzJykge1xuICAgICAgcmVzcG9uc2UgPSBmaWx0ZXJSZXNwb25zZShyZXNwb25zZSwgJ2NvcnMnKVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5yZXNwb25zZVRhaW50aW5nID09PSAnb3BhcXVlJykge1xuICAgICAgcmVzcG9uc2UgPSBmaWx0ZXJSZXNwb25zZShyZXNwb25zZSwgJ29wYXF1ZScpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChmYWxzZSlcbiAgICB9XG4gIH1cblxuICAvLyAxNC4gTGV0IGludGVybmFsUmVzcG9uc2UgYmUgcmVzcG9uc2UsIGlmIHJlc3BvbnNlIGlzIGEgbmV0d29yayBlcnJvcixcbiAgLy8gYW5kIHJlc3BvbnNl4oCZcyBpbnRlcm5hbCByZXNwb25zZSBvdGhlcndpc2UuXG4gIGxldCBpbnRlcm5hbFJlc3BvbnNlID1cbiAgICByZXNwb25zZS5zdGF0dXMgPT09IDAgPyByZXNwb25zZSA6IHJlc3BvbnNlLmludGVybmFsUmVzcG9uc2VcblxuICAvLyAxNS4gSWYgaW50ZXJuYWxSZXNwb25zZeKAmXMgVVJMIGxpc3QgaXMgZW1wdHksIHRoZW4gc2V0IGl0IHRvIGEgY2xvbmUgb2ZcbiAgLy8gcmVxdWVzdOKAmXMgVVJMIGxpc3QuXG4gIGlmIChpbnRlcm5hbFJlc3BvbnNlLnVybExpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgaW50ZXJuYWxSZXNwb25zZS51cmxMaXN0LnB1c2goLi4ucmVxdWVzdC51cmxMaXN0KVxuICB9XG5cbiAgLy8gMTYuIElmIHJlcXVlc3TigJlzIHRpbWluZyBhbGxvdyBmYWlsZWQgZmxhZyBpcyB1bnNldCwgdGhlbiBzZXRcbiAgLy8gaW50ZXJuYWxSZXNwb25zZeKAmXMgdGltaW5nIGFsbG93IHBhc3NlZCBmbGFnLlxuICBpZiAoIXJlcXVlc3QudGltaW5nQWxsb3dGYWlsZWQpIHtcbiAgICByZXNwb25zZS50aW1pbmdBbGxvd1Bhc3NlZCA9IHRydWVcbiAgfVxuXG4gIC8vIDE3LiBJZiByZXNwb25zZSBpcyBub3QgYSBuZXR3b3JrIGVycm9yIGFuZCBhbnkgb2YgdGhlIGZvbGxvd2luZyByZXR1cm5zXG4gIC8vIGJsb2NrZWRcbiAgLy8gLSBzaG91bGQgaW50ZXJuYWxSZXNwb25zZSB0byByZXF1ZXN0IGJlIGJsb2NrZWQgYXMgbWl4ZWQgY29udGVudFxuICAvLyAtIHNob3VsZCBpbnRlcm5hbFJlc3BvbnNlIHRvIHJlcXVlc3QgYmUgYmxvY2tlZCBieSBDb250ZW50IFNlY3VyaXR5IFBvbGljeVxuICAvLyAtIHNob3VsZCBpbnRlcm5hbFJlc3BvbnNlIHRvIHJlcXVlc3QgYmUgYmxvY2tlZCBkdWUgdG8gaXRzIE1JTUUgdHlwZVxuICAvLyAtIHNob3VsZCBpbnRlcm5hbFJlc3BvbnNlIHRvIHJlcXVlc3QgYmUgYmxvY2tlZCBkdWUgdG8gbm9zbmlmZlxuICAvLyBUT0RPXG5cbiAgLy8gMTguIElmIHJlc3BvbnNl4oCZcyB0eXBlIGlzIFwib3BhcXVlXCIsIGludGVybmFsUmVzcG9uc2XigJlzIHN0YXR1cyBpcyAyMDYsXG4gIC8vIGludGVybmFsUmVzcG9uc2XigJlzIHJhbmdlLXJlcXVlc3RlZCBmbGFnIGlzIHNldCwgYW5kIHJlcXVlc3TigJlzIGhlYWRlclxuICAvLyBsaXN0IGRvZXMgbm90IGNvbnRhaW4gYFJhbmdlYCwgdGhlbiBzZXQgcmVzcG9uc2UgYW5kIGludGVybmFsUmVzcG9uc2VcbiAgLy8gdG8gYSBuZXR3b3JrIGVycm9yLlxuICBpZiAoXG4gICAgcmVzcG9uc2UudHlwZSA9PT0gJ29wYXF1ZScgJiZcbiAgICBpbnRlcm5hbFJlc3BvbnNlLnN0YXR1cyA9PT0gMjA2ICYmXG4gICAgaW50ZXJuYWxSZXNwb25zZS5yYW5nZVJlcXVlc3RlZCAmJlxuICAgICFyZXF1ZXN0LmhlYWRlcnMuY29udGFpbnMoJ3JhbmdlJywgdHJ1ZSlcbiAgKSB7XG4gICAgcmVzcG9uc2UgPSBpbnRlcm5hbFJlc3BvbnNlID0gbWFrZU5ldHdvcmtFcnJvcigpXG4gIH1cblxuICAvLyAxOS4gSWYgcmVzcG9uc2UgaXMgbm90IGEgbmV0d29yayBlcnJvciBhbmQgZWl0aGVyIHJlcXVlc3TigJlzIG1ldGhvZCBpc1xuICAvLyBgSEVBRGAgb3IgYENPTk5FQ1RgLCBvciBpbnRlcm5hbFJlc3BvbnNl4oCZcyBzdGF0dXMgaXMgYSBudWxsIGJvZHkgc3RhdHVzLFxuICAvLyBzZXQgaW50ZXJuYWxSZXNwb25zZeKAmXMgYm9keSB0byBudWxsIGFuZCBkaXNyZWdhcmQgYW55IGVucXVldWluZyB0b3dhcmRcbiAgLy8gaXQgKGlmIGFueSkuXG4gIGlmIChcbiAgICByZXNwb25zZS5zdGF0dXMgIT09IDAgJiZcbiAgICAocmVxdWVzdC5tZXRob2QgPT09ICdIRUFEJyB8fFxuICAgICAgcmVxdWVzdC5tZXRob2QgPT09ICdDT05ORUNUJyB8fFxuICAgICAgbnVsbEJvZHlTdGF0dXMuaW5jbHVkZXMoaW50ZXJuYWxSZXNwb25zZS5zdGF0dXMpKVxuICApIHtcbiAgICBpbnRlcm5hbFJlc3BvbnNlLmJvZHkgPSBudWxsXG4gICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5kdW1wID0gdHJ1ZVxuICB9XG5cbiAgLy8gMjAuIElmIHJlcXVlc3TigJlzIGludGVncml0eSBtZXRhZGF0YSBpcyBub3QgdGhlIGVtcHR5IHN0cmluZywgdGhlbjpcbiAgaWYgKHJlcXVlc3QuaW50ZWdyaXR5KSB7XG4gICAgLy8gMS4gTGV0IHByb2Nlc3NCb2R5RXJyb3IgYmUgdGhpcyBzdGVwOiBydW4gZmV0Y2ggZmluYWxlIGdpdmVuIGZldGNoUGFyYW1zXG4gICAgLy8gYW5kIGEgbmV0d29yayBlcnJvci5cbiAgICBjb25zdCBwcm9jZXNzQm9keUVycm9yID0gKHJlYXNvbikgPT5cbiAgICAgIGZldGNoRmluYWxlKGZldGNoUGFyYW1zLCBtYWtlTmV0d29ya0Vycm9yKHJlYXNvbikpXG5cbiAgICAvLyAyLiBJZiByZXF1ZXN04oCZcyByZXNwb25zZSB0YWludGluZyBpcyBcIm9wYXF1ZVwiLCBvciByZXNwb25zZeKAmXMgYm9keSBpcyBudWxsLFxuICAgIC8vIHRoZW4gcnVuIHByb2Nlc3NCb2R5RXJyb3IgYW5kIGFib3J0IHRoZXNlIHN0ZXBzLlxuICAgIGlmIChyZXF1ZXN0LnJlc3BvbnNlVGFpbnRpbmcgPT09ICdvcGFxdWUnIHx8IHJlc3BvbnNlLmJvZHkgPT0gbnVsbCkge1xuICAgICAgcHJvY2Vzc0JvZHlFcnJvcihyZXNwb25zZS5lcnJvcilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIDMuIExldCBwcm9jZXNzQm9keSBnaXZlbiBieXRlcyBiZSB0aGVzZSBzdGVwczpcbiAgICBjb25zdCBwcm9jZXNzQm9keSA9IChieXRlcykgPT4ge1xuICAgICAgLy8gMS4gSWYgYnl0ZXMgZG8gbm90IG1hdGNoIHJlcXVlc3TigJlzIGludGVncml0eSBtZXRhZGF0YSxcbiAgICAgIC8vIHRoZW4gcnVuIHByb2Nlc3NCb2R5RXJyb3IgYW5kIGFib3J0IHRoZXNlIHN0ZXBzLiBbU1JJXVxuICAgICAgaWYgKCFieXRlc01hdGNoKGJ5dGVzLCByZXF1ZXN0LmludGVncml0eSkpIHtcbiAgICAgICAgcHJvY2Vzc0JvZHlFcnJvcignaW50ZWdyaXR5IG1pc21hdGNoJylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIDIuIFNldCByZXNwb25zZeKAmXMgYm9keSB0byBieXRlcyBhcyBhIGJvZHkuXG4gICAgICByZXNwb25zZS5ib2R5ID0gc2FmZWx5RXh0cmFjdEJvZHkoYnl0ZXMpWzBdXG5cbiAgICAgIC8vIDMuIFJ1biBmZXRjaCBmaW5hbGUgZ2l2ZW4gZmV0Y2hQYXJhbXMgYW5kIHJlc3BvbnNlLlxuICAgICAgZmV0Y2hGaW5hbGUoZmV0Y2hQYXJhbXMsIHJlc3BvbnNlKVxuICAgIH1cblxuICAgIC8vIDQuIEZ1bGx5IHJlYWQgcmVzcG9uc2XigJlzIGJvZHkgZ2l2ZW4gcHJvY2Vzc0JvZHkgYW5kIHByb2Nlc3NCb2R5RXJyb3IuXG4gICAgYXdhaXQgZnVsbHlSZWFkQm9keShyZXNwb25zZS5ib2R5LCBwcm9jZXNzQm9keSwgcHJvY2Vzc0JvZHlFcnJvcilcbiAgfSBlbHNlIHtcbiAgICAvLyAyMS4gT3RoZXJ3aXNlLCBydW4gZmV0Y2ggZmluYWxlIGdpdmVuIGZldGNoUGFyYW1zIGFuZCByZXNwb25zZS5cbiAgICBmZXRjaEZpbmFsZShmZXRjaFBhcmFtcywgcmVzcG9uc2UpXG4gIH1cbn1cblxuLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtc2NoZW1lLWZldGNoXG4vLyBnaXZlbiBhIGZldGNoIHBhcmFtcyBmZXRjaFBhcmFtc1xuZnVuY3Rpb24gc2NoZW1lRmV0Y2ggKGZldGNoUGFyYW1zKSB7XG4gIC8vIE5vdGU6IHNpbmNlIHRoZSBjb25uZWN0aW9uIGlzIGRlc3Ryb3llZCBvbiByZWRpcmVjdCwgd2hpY2ggc2V0cyBmZXRjaFBhcmFtcyB0byBhXG4gIC8vIGNhbmNlbGxlZCBzdGF0ZSwgd2UgZG8gbm90IHdhbnQgdGhpcyBjb25kaXRpb24gdG8gdHJpZ2dlciAqdW5sZXNzKiB0aGVyZSBoYXZlIGJlZW5cbiAgLy8gbm8gcmVkaXJlY3RzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy91bmRpY2kvaXNzdWVzLzE3NzZcbiAgLy8gMS4gSWYgZmV0Y2hQYXJhbXMgaXMgY2FuY2VsZWQsIHRoZW4gcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSBuZXR3b3JrIGVycm9yIGZvciBmZXRjaFBhcmFtcy5cbiAgaWYgKGlzQ2FuY2VsbGVkKGZldGNoUGFyYW1zKSAmJiBmZXRjaFBhcmFtcy5yZXF1ZXN0LnJlZGlyZWN0Q291bnQgPT09IDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1ha2VBcHByb3ByaWF0ZU5ldHdvcmtFcnJvcihmZXRjaFBhcmFtcykpXG4gIH1cblxuICAvLyAyLiBMZXQgcmVxdWVzdCBiZSBmZXRjaFBhcmFtc+KAmXMgcmVxdWVzdC5cbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBmZXRjaFBhcmFtc1xuXG4gIGNvbnN0IHsgcHJvdG9jb2w6IHNjaGVtZSB9ID0gcmVxdWVzdEN1cnJlbnRVUkwocmVxdWVzdClcblxuICAvLyAzLiBTd2l0Y2ggb24gcmVxdWVzdOKAmXMgY3VycmVudCBVUkzigJlzIHNjaGVtZSBhbmQgcnVuIHRoZSBhc3NvY2lhdGVkIHN0ZXBzOlxuICBzd2l0Y2ggKHNjaGVtZSkge1xuICAgIGNhc2UgJ2Fib3V0Oic6IHtcbiAgICAgIC8vIElmIHJlcXVlc3TigJlzIGN1cnJlbnQgVVJM4oCZcyBwYXRoIGlzIHRoZSBzdHJpbmcgXCJibGFua1wiLCB0aGVuIHJldHVybiBhIG5ldyByZXNwb25zZVxuICAgICAgLy8gd2hvc2Ugc3RhdHVzIG1lc3NhZ2UgaXMgYE9LYCwgaGVhZGVyIGxpc3QgaXMgwqsgKGBDb250ZW50LVR5cGVgLCBgdGV4dC9odG1sO2NoYXJzZXQ9dXRmLThgKSDCuyxcbiAgICAgIC8vIGFuZCBib2R5IGlzIHRoZSBlbXB0eSBieXRlIHNlcXVlbmNlIGFzIGEgYm9keS5cblxuICAgICAgLy8gT3RoZXJ3aXNlLCByZXR1cm4gYSBuZXR3b3JrIGVycm9yLlxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYWtlTmV0d29ya0Vycm9yKCdhYm91dCBzY2hlbWUgaXMgbm90IHN1cHBvcnRlZCcpKVxuICAgIH1cbiAgICBjYXNlICdibG9iOic6IHtcbiAgICAgIGlmICghcmVzb2x2ZU9iamVjdFVSTCkge1xuICAgICAgICByZXNvbHZlT2JqZWN0VVJMID0gcmVxdWlyZSgnbm9kZTpidWZmZXInKS5yZXNvbHZlT2JqZWN0VVJMXG4gICAgICB9XG5cbiAgICAgIC8vIDEuIExldCBibG9iVVJMRW50cnkgYmUgcmVxdWVzdOKAmXMgY3VycmVudCBVUkzigJlzIGJsb2IgVVJMIGVudHJ5LlxuICAgICAgY29uc3QgYmxvYlVSTEVudHJ5ID0gcmVxdWVzdEN1cnJlbnRVUkwocmVxdWVzdClcblxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYi1wbGF0Zm9ybS10ZXN0cy93cHQvYmxvYi83YjBlYmFjY2M2MmI1NjZhMTk2NTM5NmU1YmU3YmIyYmMwNmY4NDFmL0ZpbGVBUEkvdXJsL3Jlc291cmNlcy9mZXRjaC10ZXN0cy5qcyNMNTItTDU2XG4gICAgICAvLyBCdWZmZXIucmVzb2x2ZU9iamVjdFVSTCBkb2VzIG5vdCBpZ25vcmUgVVJMIHF1ZXJpZXMuXG4gICAgICBpZiAoYmxvYlVSTEVudHJ5LnNlYXJjaC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYWtlTmV0d29ya0Vycm9yKCdOZXR3b3JrRXJyb3Igd2hlbiBhdHRlbXB0aW5nIHRvIGZldGNoIHJlc291cmNlLicpKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBibG9iID0gcmVzb2x2ZU9iamVjdFVSTChibG9iVVJMRW50cnkudG9TdHJpbmcoKSlcblxuICAgICAgLy8gMi4gSWYgcmVxdWVzdOKAmXMgbWV0aG9kIGlzIG5vdCBgR0VUYCwgYmxvYlVSTEVudHJ5IGlzIG51bGwsIG9yIGJsb2JVUkxFbnRyeeKAmXNcbiAgICAgIC8vICAgIG9iamVjdCBpcyBub3QgYSBCbG9iIG9iamVjdCwgdGhlbiByZXR1cm4gYSBuZXR3b3JrIGVycm9yLlxuICAgICAgaWYgKHJlcXVlc3QubWV0aG9kICE9PSAnR0VUJyB8fCAhaXNCbG9iTGlrZShibG9iKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1ha2VOZXR3b3JrRXJyb3IoJ2ludmFsaWQgbWV0aG9kJykpXG4gICAgICB9XG5cbiAgICAgIC8vIDMuIExldCBibG9iIGJlIGJsb2JVUkxFbnRyeeKAmXMgb2JqZWN0LlxuICAgICAgLy8gTm90ZTogZG9uZSBhYm92ZVxuXG4gICAgICAvLyA0LiBMZXQgcmVzcG9uc2UgYmUgYSBuZXcgcmVzcG9uc2UuXG4gICAgICBjb25zdCByZXNwb25zZSA9IG1ha2VSZXNwb25zZSgpXG5cbiAgICAgIC8vIDUuIExldCBmdWxsTGVuZ3RoIGJlIGJsb2LigJlzIHNpemUuXG4gICAgICBjb25zdCBmdWxsTGVuZ3RoID0gYmxvYi5zaXplXG5cbiAgICAgIC8vIDYuIExldCBzZXJpYWxpemVkRnVsbExlbmd0aCBiZSBmdWxsTGVuZ3RoLCBzZXJpYWxpemVkIGFuZCBpc29tb3JwaGljIGVuY29kZWQuXG4gICAgICBjb25zdCBzZXJpYWxpemVkRnVsbExlbmd0aCA9IGlzb21vcnBoaWNFbmNvZGUoYCR7ZnVsbExlbmd0aH1gKVxuXG4gICAgICAvLyA3LiBMZXQgdHlwZSBiZSBibG9i4oCZcyB0eXBlLlxuICAgICAgY29uc3QgdHlwZSA9IGJsb2IudHlwZVxuXG4gICAgICAvLyA4LiBJZiByZXF1ZXN04oCZcyBoZWFkZXIgbGlzdCBkb2VzIG5vdCBjb250YWluIGBSYW5nZWA6XG4gICAgICAvLyA5LiBPdGhlcndpc2U6XG4gICAgICBpZiAoIXJlcXVlc3QuaGVhZGVyc0xpc3QuY29udGFpbnMoJ3JhbmdlJywgdHJ1ZSkpIHtcbiAgICAgICAgLy8gMS4gTGV0IGJvZHlXaXRoVHlwZSBiZSB0aGUgcmVzdWx0IG9mIHNhZmVseSBleHRyYWN0aW5nIGJsb2IuXG4gICAgICAgIC8vIE5vdGU6IGluIHRoZSBGaWxlQVBJIGEgYmxvYiBcIm9iamVjdFwiIGlzIGEgQmxvYiAqb3IqIGEgTWVkaWFTb3VyY2UuXG4gICAgICAgIC8vIEluIG5vZGUsIHRoaXMgY2FuIG9ubHkgZXZlciBiZSBhIEJsb2IuIFRoZXJlZm9yZSB3ZSBjYW4gc2FmZWx5XG4gICAgICAgIC8vIHVzZSBleHRyYWN0Qm9keSBkaXJlY3RseS5cbiAgICAgICAgY29uc3QgYm9keVdpdGhUeXBlID0gZXh0cmFjdEJvZHkoYmxvYilcblxuICAgICAgICAvLyAyLiBTZXQgcmVzcG9uc2XigJlzIHN0YXR1cyBtZXNzYWdlIHRvIGBPS2AuXG4gICAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHQgPSAnT0snXG5cbiAgICAgICAgLy8gMy4gU2V0IHJlc3BvbnNl4oCZcyBib2R5IHRvIGJvZHlXaXRoVHlwZeKAmXMgYm9keS5cbiAgICAgICAgcmVzcG9uc2UuYm9keSA9IGJvZHlXaXRoVHlwZVswXVxuXG4gICAgICAgIC8vIDQuIFNldCByZXNwb25zZeKAmXMgaGVhZGVyIGxpc3QgdG8gwqsgKGBDb250ZW50LUxlbmd0aGAsIHNlcmlhbGl6ZWRGdWxsTGVuZ3RoKSwgKGBDb250ZW50LVR5cGVgLCB0eXBlKSDCuy5cbiAgICAgICAgcmVzcG9uc2UuaGVhZGVyc0xpc3Quc2V0KCdjb250ZW50LWxlbmd0aCcsIHNlcmlhbGl6ZWRGdWxsTGVuZ3RoLCB0cnVlKVxuICAgICAgICByZXNwb25zZS5oZWFkZXJzTGlzdC5zZXQoJ2NvbnRlbnQtdHlwZScsIHR5cGUsIHRydWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyAxLiBTZXQgcmVzcG9uc2XigJlzIHJhbmdlLXJlcXVlc3RlZCBmbGFnLlxuICAgICAgICByZXNwb25zZS5yYW5nZVJlcXVlc3RlZCA9IHRydWVcblxuICAgICAgICAvLyAyLiBMZXQgcmFuZ2VIZWFkZXIgYmUgdGhlIHJlc3VsdCBvZiBnZXR0aW5nIGBSYW5nZWAgZnJvbSByZXF1ZXN04oCZcyBoZWFkZXIgbGlzdC5cbiAgICAgICAgY29uc3QgcmFuZ2VIZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnNMaXN0LmdldCgncmFuZ2UnLCB0cnVlKVxuXG4gICAgICAgIC8vIDMuIExldCByYW5nZVZhbHVlIGJlIHRoZSByZXN1bHQgb2YgcGFyc2luZyBhIHNpbmdsZSByYW5nZSBoZWFkZXIgdmFsdWUgZ2l2ZW4gcmFuZ2VIZWFkZXIgYW5kIHRydWUuXG4gICAgICAgIGNvbnN0IHJhbmdlVmFsdWUgPSBzaW1wbGVSYW5nZUhlYWRlclZhbHVlKHJhbmdlSGVhZGVyLCB0cnVlKVxuXG4gICAgICAgIC8vIDQuIElmIHJhbmdlVmFsdWUgaXMgZmFpbHVyZSwgdGhlbiByZXR1cm4gYSBuZXR3b3JrIGVycm9yLlxuICAgICAgICBpZiAocmFuZ2VWYWx1ZSA9PT0gJ2ZhaWx1cmUnKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYWtlTmV0d29ya0Vycm9yKCdmYWlsZWQgdG8gZmV0Y2ggdGhlIGRhdGEgVVJMJykpXG4gICAgICAgIH1cblxuICAgICAgICAvLyA1LiBMZXQgKHJhbmdlU3RhcnQsIHJhbmdlRW5kKSBiZSByYW5nZVZhbHVlLlxuICAgICAgICBsZXQgeyByYW5nZVN0YXJ0VmFsdWU6IHJhbmdlU3RhcnQsIHJhbmdlRW5kVmFsdWU6IHJhbmdlRW5kIH0gPSByYW5nZVZhbHVlXG5cbiAgICAgICAgLy8gNi4gSWYgcmFuZ2VTdGFydCBpcyBudWxsOlxuICAgICAgICAvLyA3LiBPdGhlcndpc2U6XG4gICAgICAgIGlmIChyYW5nZVN0YXJ0ID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gMS4gU2V0IHJhbmdlU3RhcnQgdG8gZnVsbExlbmd0aCDiiJIgcmFuZ2VFbmQuXG4gICAgICAgICAgcmFuZ2VTdGFydCA9IGZ1bGxMZW5ndGggLSByYW5nZUVuZFxuXG4gICAgICAgICAgLy8gMi4gU2V0IHJhbmdlRW5kIHRvIHJhbmdlU3RhcnQgKyByYW5nZUVuZCDiiJIgMS5cbiAgICAgICAgICByYW5nZUVuZCA9IHJhbmdlU3RhcnQgKyByYW5nZUVuZCAtIDFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyAxLiBJZiByYW5nZVN0YXJ0IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBmdWxsTGVuZ3RoLCB0aGVuIHJldHVybiBhIG5ldHdvcmsgZXJyb3IuXG4gICAgICAgICAgaWYgKHJhbmdlU3RhcnQgPj0gZnVsbExlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYWtlTmV0d29ya0Vycm9yKCdSYW5nZSBzdGFydCBpcyBncmVhdGVyIHRoYW4gdGhlIGJsb2JcXCdzIHNpemUuJykpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gMi4gSWYgcmFuZ2VFbmQgaXMgbnVsbCBvciByYW5nZUVuZCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gZnVsbExlbmd0aCwgdGhlbiBzZXRcbiAgICAgICAgICAvLyAgICByYW5nZUVuZCB0byBmdWxsTGVuZ3RoIOKIkiAxLlxuICAgICAgICAgIGlmIChyYW5nZUVuZCA9PT0gbnVsbCB8fCByYW5nZUVuZCA+PSBmdWxsTGVuZ3RoKSB7XG4gICAgICAgICAgICByYW5nZUVuZCA9IGZ1bGxMZW5ndGggLSAxXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gOC4gTGV0IHNsaWNlZEJsb2IgYmUgdGhlIHJlc3VsdCBvZiBpbnZva2luZyBzbGljZSBibG9iIGdpdmVuIGJsb2IsIHJhbmdlU3RhcnQsXG4gICAgICAgIC8vICAgIHJhbmdlRW5kICsgMSwgYW5kIHR5cGUuXG4gICAgICAgIGNvbnN0IHNsaWNlZEJsb2IgPSBibG9iLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kLCB0eXBlKVxuXG4gICAgICAgIC8vIDkuIExldCBzbGljZWRCb2R5V2l0aFR5cGUgYmUgdGhlIHJlc3VsdCBvZiBzYWZlbHkgZXh0cmFjdGluZyBzbGljZWRCbG9iLlxuICAgICAgICAvLyBOb3RlOiBzYW1lIHJlYXNvbiBhcyBtZW50aW9uZWQgYWJvdmUgYXMgdG8gd2h5IHdlIHVzZSBleHRyYWN0Qm9keVxuICAgICAgICBjb25zdCBzbGljZWRCb2R5V2l0aFR5cGUgPSBleHRyYWN0Qm9keShzbGljZWRCbG9iKVxuXG4gICAgICAgIC8vIDEwLiBTZXQgcmVzcG9uc2XigJlzIGJvZHkgdG8gc2xpY2VkQm9keVdpdGhUeXBl4oCZcyBib2R5LlxuICAgICAgICByZXNwb25zZS5ib2R5ID0gc2xpY2VkQm9keVdpdGhUeXBlWzBdXG5cbiAgICAgICAgLy8gMTEuIExldCBzZXJpYWxpemVkU2xpY2VkTGVuZ3RoIGJlIHNsaWNlZEJsb2LigJlzIHNpemUsIHNlcmlhbGl6ZWQgYW5kIGlzb21vcnBoaWMgZW5jb2RlZC5cbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZFNsaWNlZExlbmd0aCA9IGlzb21vcnBoaWNFbmNvZGUoYCR7c2xpY2VkQmxvYi5zaXplfWApXG5cbiAgICAgICAgLy8gMTIuIExldCBjb250ZW50UmFuZ2UgYmUgdGhlIHJlc3VsdCBvZiBpbnZva2luZyBidWlsZCBhIGNvbnRlbnQgcmFuZ2UgZ2l2ZW4gcmFuZ2VTdGFydCxcbiAgICAgICAgLy8gICAgIHJhbmdlRW5kLCBhbmQgZnVsbExlbmd0aC5cbiAgICAgICAgY29uc3QgY29udGVudFJhbmdlID0gYnVpbGRDb250ZW50UmFuZ2UocmFuZ2VTdGFydCwgcmFuZ2VFbmQsIGZ1bGxMZW5ndGgpXG5cbiAgICAgICAgLy8gMTMuIFNldCByZXNwb25zZeKAmXMgc3RhdHVzIHRvIDIwNi5cbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzID0gMjA2XG5cbiAgICAgICAgLy8gMTQuIFNldCByZXNwb25zZeKAmXMgc3RhdHVzIG1lc3NhZ2UgdG8gYFBhcnRpYWwgQ29udGVudGAuXG4gICAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHQgPSAnUGFydGlhbCBDb250ZW50J1xuXG4gICAgICAgIC8vIDE1LiBTZXQgcmVzcG9uc2XigJlzIGhlYWRlciBsaXN0IHRvIMKrIChgQ29udGVudC1MZW5ndGhgLCBzZXJpYWxpemVkU2xpY2VkTGVuZ3RoKSxcbiAgICAgICAgLy8gICAgIChgQ29udGVudC1UeXBlYCwgdHlwZSksIChgQ29udGVudC1SYW5nZWAsIGNvbnRlbnRSYW5nZSkgwrsuXG4gICAgICAgIHJlc3BvbnNlLmhlYWRlcnNMaXN0LnNldCgnY29udGVudC1sZW5ndGgnLCBzZXJpYWxpemVkU2xpY2VkTGVuZ3RoLCB0cnVlKVxuICAgICAgICByZXNwb25zZS5oZWFkZXJzTGlzdC5zZXQoJ2NvbnRlbnQtdHlwZScsIHR5cGUsIHRydWUpXG4gICAgICAgIHJlc3BvbnNlLmhlYWRlcnNMaXN0LnNldCgnY29udGVudC1yYW5nZScsIGNvbnRlbnRSYW5nZSwgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgLy8gMTAuIFJldHVybiByZXNwb25zZS5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpXG4gICAgfVxuICAgIGNhc2UgJ2RhdGE6Jzoge1xuICAgICAgLy8gMS4gTGV0IGRhdGFVUkxTdHJ1Y3QgYmUgdGhlIHJlc3VsdCBvZiBydW5uaW5nIHRoZVxuICAgICAgLy8gICAgZGF0YTogVVJMIHByb2Nlc3NvciBvbiByZXF1ZXN04oCZcyBjdXJyZW50IFVSTC5cbiAgICAgIGNvbnN0IGN1cnJlbnRVUkwgPSByZXF1ZXN0Q3VycmVudFVSTChyZXF1ZXN0KVxuICAgICAgY29uc3QgZGF0YVVSTFN0cnVjdCA9IGRhdGFVUkxQcm9jZXNzb3IoY3VycmVudFVSTClcblxuICAgICAgLy8gMi4gSWYgZGF0YVVSTFN0cnVjdCBpcyBmYWlsdXJlLCB0aGVuIHJldHVybiBhXG4gICAgICAvLyAgICBuZXR3b3JrIGVycm9yLlxuICAgICAgaWYgKGRhdGFVUkxTdHJ1Y3QgPT09ICdmYWlsdXJlJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1ha2VOZXR3b3JrRXJyb3IoJ2ZhaWxlZCB0byBmZXRjaCB0aGUgZGF0YSBVUkwnKSlcbiAgICAgIH1cblxuICAgICAgLy8gMy4gTGV0IG1pbWVUeXBlIGJlIGRhdGFVUkxTdHJ1Y3TigJlzIE1JTUUgdHlwZSwgc2VyaWFsaXplZC5cbiAgICAgIGNvbnN0IG1pbWVUeXBlID0gc2VyaWFsaXplQU1pbWVUeXBlKGRhdGFVUkxTdHJ1Y3QubWltZVR5cGUpXG5cbiAgICAgIC8vIDQuIFJldHVybiBhIHJlc3BvbnNlIHdob3NlIHN0YXR1cyBtZXNzYWdlIGlzIGBPS2AsXG4gICAgICAvLyAgICBoZWFkZXIgbGlzdCBpcyDCqyAoYENvbnRlbnQtVHlwZWAsIG1pbWVUeXBlKSDCuyxcbiAgICAgIC8vICAgIGFuZCBib2R5IGlzIGRhdGFVUkxTdHJ1Y3TigJlzIGJvZHkgYXMgYSBib2R5LlxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYWtlUmVzcG9uc2Uoe1xuICAgICAgICBzdGF0dXNUZXh0OiAnT0snLFxuICAgICAgICBoZWFkZXJzTGlzdDogW1xuICAgICAgICAgIFsnY29udGVudC10eXBlJywgeyBuYW1lOiAnQ29udGVudC1UeXBlJywgdmFsdWU6IG1pbWVUeXBlIH1dXG4gICAgICAgIF0sXG4gICAgICAgIGJvZHk6IHNhZmVseUV4dHJhY3RCb2R5KGRhdGFVUkxTdHJ1Y3QuYm9keSlbMF1cbiAgICAgIH0pKVxuICAgIH1cbiAgICBjYXNlICdmaWxlOic6IHtcbiAgICAgIC8vIEZvciBub3csIHVuZm9ydHVuYXRlIGFzIGl0IGlzLCBmaWxlIFVSTHMgYXJlIGxlZnQgYXMgYW4gZXhlcmNpc2UgZm9yIHRoZSByZWFkZXIuXG4gICAgICAvLyBXaGVuIGluIGRvdWJ0LCByZXR1cm4gYSBuZXR3b3JrIGVycm9yLlxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYWtlTmV0d29ya0Vycm9yKCdub3QgaW1wbGVtZW50ZWQuLi4geWV0Li4uJykpXG4gICAgfVxuICAgIGNhc2UgJ2h0dHA6JzpcbiAgICBjYXNlICdodHRwczonOiB7XG4gICAgICAvLyBSZXR1cm4gdGhlIHJlc3VsdCBvZiBydW5uaW5nIEhUVFAgZmV0Y2ggZ2l2ZW4gZmV0Y2hQYXJhbXMuXG5cbiAgICAgIHJldHVybiBodHRwRmV0Y2goZmV0Y2hQYXJhbXMpXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiBtYWtlTmV0d29ya0Vycm9yKGVycikpXG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWFrZU5ldHdvcmtFcnJvcigndW5rbm93biBzY2hlbWUnKSlcbiAgICB9XG4gIH1cbn1cblxuLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2ZpbmFsaXplLXJlc3BvbnNlXG5mdW5jdGlvbiBmaW5hbGl6ZVJlc3BvbnNlIChmZXRjaFBhcmFtcywgcmVzcG9uc2UpIHtcbiAgLy8gMS4gU2V0IGZldGNoUGFyYW1z4oCZcyByZXF1ZXN04oCZcyBkb25lIGZsYWcuXG4gIGZldGNoUGFyYW1zLnJlcXVlc3QuZG9uZSA9IHRydWVcblxuICAvLyAyLCBJZiBmZXRjaFBhcmFtc+KAmXMgcHJvY2VzcyByZXNwb25zZSBkb25lIGlzIG5vdCBudWxsLCB0aGVuIHF1ZXVlIGEgZmV0Y2hcbiAgLy8gdGFzayB0byBydW4gZmV0Y2hQYXJhbXPigJlzIHByb2Nlc3MgcmVzcG9uc2UgZG9uZSBnaXZlbiByZXNwb25zZSwgd2l0aFxuICAvLyBmZXRjaFBhcmFtc+KAmXMgdGFzayBkZXN0aW5hdGlvbi5cbiAgaWYgKGZldGNoUGFyYW1zLnByb2Nlc3NSZXNwb25zZURvbmUgIT0gbnVsbCkge1xuICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IGZldGNoUGFyYW1zLnByb2Nlc3NSZXNwb25zZURvbmUocmVzcG9uc2UpKVxuICB9XG59XG5cbi8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNmZXRjaC1maW5hbGVcbmZ1bmN0aW9uIGZldGNoRmluYWxlIChmZXRjaFBhcmFtcywgcmVzcG9uc2UpIHtcbiAgLy8gMS4gTGV0IHRpbWluZ0luZm8gYmUgZmV0Y2hQYXJhbXPigJlzIHRpbWluZyBpbmZvLlxuICBsZXQgdGltaW5nSW5mbyA9IGZldGNoUGFyYW1zLnRpbWluZ0luZm9cblxuICAvLyAyLiBJZiByZXNwb25zZSBpcyBub3QgYSBuZXR3b3JrIGVycm9yIGFuZCBmZXRjaFBhcmFtc+KAmXMgcmVxdWVzdOKAmXMgY2xpZW50IGlzIGEgc2VjdXJlIGNvbnRleHQsXG4gIC8vICAgIHRoZW4gc2V0IHRpbWluZ0luZm/igJlzIHNlcnZlci10aW1pbmcgaGVhZGVycyB0byB0aGUgcmVzdWx0IG9mIGdldHRpbmcsIGRlY29kaW5nLCBhbmQgc3BsaXR0aW5nXG4gIC8vICAgIGBTZXJ2ZXItVGltaW5nYCBmcm9tIHJlc3BvbnNl4oCZcyBpbnRlcm5hbCByZXNwb25zZeKAmXMgaGVhZGVyIGxpc3QuXG4gIC8vIFRPRE9cblxuICAvLyAzLiBMZXQgcHJvY2Vzc1Jlc3BvbnNlRW5kT2ZCb2R5IGJlIHRoZSBmb2xsb3dpbmcgc3RlcHM6XG4gIGNvbnN0IHByb2Nlc3NSZXNwb25zZUVuZE9mQm9keSA9ICgpID0+IHtcbiAgICAvLyAxLiBMZXQgdW5zYWZlRW5kVGltZSBiZSB0aGUgdW5zYWZlIHNoYXJlZCBjdXJyZW50IHRpbWUuXG4gICAgY29uc3QgdW5zYWZlRW5kVGltZSA9IERhdGUubm93KCkgLy8gP1xuXG4gICAgLy8gMi4gSWYgZmV0Y2hQYXJhbXPigJlzIHJlcXVlc3TigJlzIGRlc3RpbmF0aW9uIGlzIFwiZG9jdW1lbnRcIiwgdGhlbiBzZXQgZmV0Y2hQYXJhbXPigJlzIGNvbnRyb2xsZXLigJlzXG4gICAgLy8gICAgZnVsbCB0aW1pbmcgaW5mbyB0byBmZXRjaFBhcmFtc+KAmXMgdGltaW5nIGluZm8uXG4gICAgaWYgKGZldGNoUGFyYW1zLnJlcXVlc3QuZGVzdGluYXRpb24gPT09ICdkb2N1bWVudCcpIHtcbiAgICAgIGZldGNoUGFyYW1zLmNvbnRyb2xsZXIuZnVsbFRpbWluZ0luZm8gPSB0aW1pbmdJbmZvXG4gICAgfVxuXG4gICAgLy8gMy4gU2V0IGZldGNoUGFyYW1z4oCZcyBjb250cm9sbGVy4oCZcyByZXBvcnQgdGltaW5nIHN0ZXBzIHRvIHRoZSBmb2xsb3dpbmcgc3RlcHMgZ2l2ZW4gYSBnbG9iYWwgb2JqZWN0IGdsb2JhbDpcbiAgICBmZXRjaFBhcmFtcy5jb250cm9sbGVyLnJlcG9ydFRpbWluZ1N0ZXBzID0gKCkgPT4ge1xuICAgICAgLy8gMS4gSWYgZmV0Y2hQYXJhbXPigJlzIHJlcXVlc3TigJlzIFVSTOKAmXMgc2NoZW1lIGlzIG5vdCBhbiBIVFRQKFMpIHNjaGVtZSwgdGhlbiByZXR1cm4uXG4gICAgICBpZiAoZmV0Y2hQYXJhbXMucmVxdWVzdC51cmwucHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyAyLiBTZXQgdGltaW5nSW5mb+KAmXMgZW5kIHRpbWUgdG8gdGhlIHJlbGF0aXZlIGhpZ2ggcmVzb2x1dGlvbiB0aW1lIGdpdmVuIHVuc2FmZUVuZFRpbWUgYW5kIGdsb2JhbC5cbiAgICAgIHRpbWluZ0luZm8uZW5kVGltZSA9IHVuc2FmZUVuZFRpbWVcblxuICAgICAgLy8gMy4gTGV0IGNhY2hlU3RhdGUgYmUgcmVzcG9uc2XigJlzIGNhY2hlIHN0YXRlLlxuICAgICAgbGV0IGNhY2hlU3RhdGUgPSByZXNwb25zZS5jYWNoZVN0YXRlXG5cbiAgICAgIC8vIDQuIExldCBib2R5SW5mbyBiZSByZXNwb25zZeKAmXMgYm9keSBpbmZvLlxuICAgICAgY29uc3QgYm9keUluZm8gPSByZXNwb25zZS5ib2R5SW5mb1xuXG4gICAgICAvLyA1LiBJZiByZXNwb25zZeKAmXMgdGltaW5nIGFsbG93IHBhc3NlZCBmbGFnIGlzIG5vdCBzZXQsIHRoZW4gc2V0IHRpbWluZ0luZm8gdG8gdGhlIHJlc3VsdCBvZiBjcmVhdGluZyBhblxuICAgICAgLy8gICAgb3BhcXVlIHRpbWluZyBpbmZvIGZvciB0aW1pbmdJbmZvIGFuZCBzZXQgY2FjaGVTdGF0ZSB0byB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAgaWYgKCFyZXNwb25zZS50aW1pbmdBbGxvd1Bhc3NlZCkge1xuICAgICAgICB0aW1pbmdJbmZvID0gY3JlYXRlT3BhcXVlVGltaW5nSW5mbyh0aW1pbmdJbmZvKVxuXG4gICAgICAgIGNhY2hlU3RhdGUgPSAnJ1xuICAgICAgfVxuXG4gICAgICAvLyA2LiBMZXQgcmVzcG9uc2VTdGF0dXMgYmUgMC5cbiAgICAgIGxldCByZXNwb25zZVN0YXR1cyA9IDBcblxuICAgICAgLy8gNy4gSWYgZmV0Y2hQYXJhbXPigJlzIHJlcXVlc3TigJlzIG1vZGUgaXMgbm90IFwibmF2aWdhdGVcIiBvciByZXNwb25zZeKAmXMgaGFzLWNyb3NzLW9yaWdpbi1yZWRpcmVjdHMgaXMgZmFsc2U6XG4gICAgICBpZiAoZmV0Y2hQYXJhbXMucmVxdWVzdC5tb2RlICE9PSAnbmF2aWdhdG9yJyB8fCAhcmVzcG9uc2UuaGFzQ3Jvc3NPcmlnaW5SZWRpcmVjdHMpIHtcbiAgICAgICAgLy8gMS4gU2V0IHJlc3BvbnNlU3RhdHVzIHRvIHJlc3BvbnNl4oCZcyBzdGF0dXMuXG4gICAgICAgIHJlc3BvbnNlU3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzXG5cbiAgICAgICAgLy8gMi4gTGV0IG1pbWVUeXBlIGJlIHRoZSByZXN1bHQgb2YgZXh0cmFjdGluZyBhIE1JTUUgdHlwZSBmcm9tIHJlc3BvbnNl4oCZcyBoZWFkZXIgbGlzdC5cbiAgICAgICAgY29uc3QgbWltZVR5cGUgPSBleHRyYWN0TWltZVR5cGUocmVzcG9uc2UuaGVhZGVyc0xpc3QpXG5cbiAgICAgICAgLy8gMy4gSWYgbWltZVR5cGUgaXMgbm90IGZhaWx1cmUsIHRoZW4gc2V0IGJvZHlJbmZv4oCZcyBjb250ZW50IHR5cGUgdG8gdGhlIHJlc3VsdCBvZiBtaW5pbWl6aW5nIGEgc3VwcG9ydGVkIE1JTUUgdHlwZSBnaXZlbiBtaW1lVHlwZS5cbiAgICAgICAgaWYgKG1pbWVUeXBlICE9PSAnZmFpbHVyZScpIHtcbiAgICAgICAgICBib2R5SW5mby5jb250ZW50VHlwZSA9IG1pbmltaXplU3VwcG9ydGVkTWltZVR5cGUobWltZVR5cGUpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gOC4gSWYgZmV0Y2hQYXJhbXPigJlzIHJlcXVlc3TigJlzIGluaXRpYXRvciB0eXBlIGlzIG5vbi1udWxsLCB0aGVuIG1hcmsgcmVzb3VyY2UgdGltaW5nIGdpdmVuIHRpbWluZ0luZm8sXG4gICAgICAvLyAgICBmZXRjaFBhcmFtc+KAmXMgcmVxdWVzdOKAmXMgVVJMLCBmZXRjaFBhcmFtc+KAmXMgcmVxdWVzdOKAmXMgaW5pdGlhdG9yIHR5cGUsIGdsb2JhbCwgY2FjaGVTdGF0ZSwgYm9keUluZm8sXG4gICAgICAvLyAgICBhbmQgcmVzcG9uc2VTdGF0dXMuXG4gICAgICBpZiAoZmV0Y2hQYXJhbXMucmVxdWVzdC5pbml0aWF0b3JUeXBlICE9IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogdXBkYXRlIG1hcmtyZXNvdXJjZXRpbWluZ1xuICAgICAgICBtYXJrUmVzb3VyY2VUaW1pbmcodGltaW5nSW5mbywgZmV0Y2hQYXJhbXMucmVxdWVzdC51cmwuaHJlZiwgZmV0Y2hQYXJhbXMucmVxdWVzdC5pbml0aWF0b3JUeXBlLCBnbG9iYWxUaGlzLCBjYWNoZVN0YXRlLCBib2R5SW5mbywgcmVzcG9uc2VTdGF0dXMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gNC4gTGV0IHByb2Nlc3NSZXNwb25zZUVuZE9mQm9keVRhc2sgYmUgdGhlIGZvbGxvd2luZyBzdGVwczpcbiAgICBjb25zdCBwcm9jZXNzUmVzcG9uc2VFbmRPZkJvZHlUYXNrID0gKCkgPT4ge1xuICAgICAgLy8gMS4gU2V0IGZldGNoUGFyYW1z4oCZcyByZXF1ZXN04oCZcyBkb25lIGZsYWcuXG4gICAgICBmZXRjaFBhcmFtcy5yZXF1ZXN0LmRvbmUgPSB0cnVlXG5cbiAgICAgIC8vIDIuIElmIGZldGNoUGFyYW1z4oCZcyBwcm9jZXNzIHJlc3BvbnNlIGVuZC1vZi1ib2R5IGlzIG5vbi1udWxsLCB0aGVuIHJ1biBmZXRjaFBhcmFtc+KAmXMgcHJvY2Vzc1xuICAgICAgLy8gICAgcmVzcG9uc2UgZW5kLW9mLWJvZHkgZ2l2ZW4gcmVzcG9uc2UuXG4gICAgICBpZiAoZmV0Y2hQYXJhbXMucHJvY2Vzc1Jlc3BvbnNlRW5kT2ZCb2R5ICE9IG51bGwpIHtcbiAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4gZmV0Y2hQYXJhbXMucHJvY2Vzc1Jlc3BvbnNlRW5kT2ZCb2R5KHJlc3BvbnNlKSlcbiAgICAgIH1cblxuICAgICAgLy8gMy4gSWYgZmV0Y2hQYXJhbXPigJlzIHJlcXVlc3TigJlzIGluaXRpYXRvciB0eXBlIGlzIG5vbi1udWxsIGFuZCBmZXRjaFBhcmFtc+KAmXMgcmVxdWVzdOKAmXMgY2xpZW504oCZc1xuICAgICAgLy8gICAgZ2xvYmFsIG9iamVjdCBpcyBmZXRjaFBhcmFtc+KAmXMgdGFzayBkZXN0aW5hdGlvbiwgdGhlbiBydW4gZmV0Y2hQYXJhbXPigJlzIGNvbnRyb2xsZXLigJlzIHJlcG9ydFxuICAgICAgLy8gICAgdGltaW5nIHN0ZXBzIGdpdmVuIGZldGNoUGFyYW1z4oCZcyByZXF1ZXN04oCZcyBjbGllbnTigJlzIGdsb2JhbCBvYmplY3QuXG4gICAgICBpZiAoZmV0Y2hQYXJhbXMucmVxdWVzdC5pbml0aWF0b3JUeXBlICE9IG51bGwpIHtcbiAgICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5yZXBvcnRUaW1pbmdTdGVwcygpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gNS4gUXVldWUgYSBmZXRjaCB0YXNrIHRvIHJ1biBwcm9jZXNzUmVzcG9uc2VFbmRPZkJvZHlUYXNrIHdpdGggZmV0Y2hQYXJhbXPigJlzIHRhc2sgZGVzdGluYXRpb25cbiAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiBwcm9jZXNzUmVzcG9uc2VFbmRPZkJvZHlUYXNrKCkpXG4gIH1cblxuICAvLyA0LiBJZiBmZXRjaFBhcmFtc+KAmXMgcHJvY2VzcyByZXNwb25zZSBpcyBub24tbnVsbCwgdGhlbiBxdWV1ZSBhIGZldGNoIHRhc2sgdG8gcnVuIGZldGNoUGFyYW1z4oCZc1xuICAvLyAgICBwcm9jZXNzIHJlc3BvbnNlIGdpdmVuIHJlc3BvbnNlLCB3aXRoIGZldGNoUGFyYW1z4oCZcyB0YXNrIGRlc3RpbmF0aW9uLlxuICBpZiAoZmV0Y2hQYXJhbXMucHJvY2Vzc1Jlc3BvbnNlICE9IG51bGwpIHtcbiAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICBmZXRjaFBhcmFtcy5wcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UpXG4gICAgICBmZXRjaFBhcmFtcy5wcm9jZXNzUmVzcG9uc2UgPSBudWxsXG4gICAgfSlcbiAgfVxuXG4gIC8vIDUuIExldCBpbnRlcm5hbFJlc3BvbnNlIGJlIHJlc3BvbnNlLCBpZiByZXNwb25zZSBpcyBhIG5ldHdvcmsgZXJyb3I7IG90aGVyd2lzZSByZXNwb25zZeKAmXMgaW50ZXJuYWwgcmVzcG9uc2UuXG4gIGNvbnN0IGludGVybmFsUmVzcG9uc2UgPSByZXNwb25zZS50eXBlID09PSAnZXJyb3InID8gcmVzcG9uc2UgOiAocmVzcG9uc2UuaW50ZXJuYWxSZXNwb25zZSA/PyByZXNwb25zZSlcblxuICAvLyA2LiBJZiBpbnRlcm5hbFJlc3BvbnNl4oCZcyBib2R5IGlzIG51bGwsIHRoZW4gcnVuIHByb2Nlc3NSZXNwb25zZUVuZE9mQm9keS5cbiAgLy8gNy4gT3RoZXJ3aXNlOlxuICBpZiAoaW50ZXJuYWxSZXNwb25zZS5ib2R5ID09IG51bGwpIHtcbiAgICBwcm9jZXNzUmVzcG9uc2VFbmRPZkJvZHkoKVxuICB9IGVsc2Uge1xuICAgIC8vIG1jb2xsaW5hOiBhbGwgdGhlIGZvbGxvd2luZyBzdGVwcyBvZiB0aGUgc3BlY3MgYXJlIHNraXBwZWQuXG4gICAgLy8gVGhlIGludGVybmFsIHRyYW5zZm9ybSBzdHJlYW0gaXMgbm90IG5lZWRlZC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy91bmRpY2kvcHVsbC8zMDkzI2lzc3VlY29tbWVudC0yMDUwMTk4NTQxXG5cbiAgICAvLyAxLiBMZXQgdHJhbnNmb3JtU3RyZWFtIGJlIGEgbmV3IFRyYW5zZm9ybVN0cmVhbS5cbiAgICAvLyAyLiBMZXQgaWRlbnRpdHlUcmFuc2Zvcm1BbGdvcml0aG0gYmUgYW4gYWxnb3JpdGhtIHdoaWNoLCBnaXZlbiBjaHVuaywgZW5xdWV1ZXMgY2h1bmsgaW4gdHJhbnNmb3JtU3RyZWFtLlxuICAgIC8vIDMuIFNldCB1cCB0cmFuc2Zvcm1TdHJlYW0gd2l0aCB0cmFuc2Zvcm1BbGdvcml0aG0gc2V0IHRvIGlkZW50aXR5VHJhbnNmb3JtQWxnb3JpdGhtIGFuZCBmbHVzaEFsZ29yaXRobVxuICAgIC8vICAgIHNldCB0byBwcm9jZXNzUmVzcG9uc2VFbmRPZkJvZHkuXG4gICAgLy8gNC4gU2V0IGludGVybmFsUmVzcG9uc2XigJlzIGJvZHnigJlzIHN0cmVhbSB0byB0aGUgcmVzdWx0IG9mIGludGVybmFsUmVzcG9uc2XigJlzIGJvZHnigJlzIHN0cmVhbSBwaXBlZCB0aHJvdWdoIHRyYW5zZm9ybVN0cmVhbS5cblxuICAgIGZpbmlzaGVkKGludGVybmFsUmVzcG9uc2UuYm9keS5zdHJlYW0sICgpID0+IHtcbiAgICAgIHByb2Nlc3NSZXNwb25zZUVuZE9mQm9keSgpXG4gICAgfSlcbiAgfVxufVxuXG4vLyBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jaHR0cC1mZXRjaFxuYXN5bmMgZnVuY3Rpb24gaHR0cEZldGNoIChmZXRjaFBhcmFtcykge1xuICAvLyAxLiBMZXQgcmVxdWVzdCBiZSBmZXRjaFBhcmFtc+KAmXMgcmVxdWVzdC5cbiAgY29uc3QgcmVxdWVzdCA9IGZldGNoUGFyYW1zLnJlcXVlc3RcblxuICAvLyAyLiBMZXQgcmVzcG9uc2UgYmUgbnVsbC5cbiAgbGV0IHJlc3BvbnNlID0gbnVsbFxuXG4gIC8vIDMuIExldCBhY3R1YWxSZXNwb25zZSBiZSBudWxsLlxuICBsZXQgYWN0dWFsUmVzcG9uc2UgPSBudWxsXG5cbiAgLy8gNC4gTGV0IHRpbWluZ0luZm8gYmUgZmV0Y2hQYXJhbXPigJlzIHRpbWluZyBpbmZvLlxuICBjb25zdCB0aW1pbmdJbmZvID0gZmV0Y2hQYXJhbXMudGltaW5nSW5mb1xuXG4gIC8vIDUuIElmIHJlcXVlc3TigJlzIHNlcnZpY2Utd29ya2VycyBtb2RlIGlzIFwiYWxsXCIsIHRoZW46XG4gIGlmIChyZXF1ZXN0LnNlcnZpY2VXb3JrZXJzID09PSAnYWxsJykge1xuICAgIC8vIFRPRE9cbiAgfVxuXG4gIC8vIDYuIElmIHJlc3BvbnNlIGlzIG51bGwsIHRoZW46XG4gIGlmIChyZXNwb25zZSA9PT0gbnVsbCkge1xuICAgIC8vIDEuIElmIG1ha2VDT1JTUHJlZmxpZ2h0IGlzIHRydWUgYW5kIG9uZSBvZiB0aGVzZSBjb25kaXRpb25zIGlzIHRydWU6XG4gICAgLy8gVE9ET1xuXG4gICAgLy8gMi4gSWYgcmVxdWVzdOKAmXMgcmVkaXJlY3QgbW9kZSBpcyBcImZvbGxvd1wiLCB0aGVuIHNldCByZXF1ZXN04oCZc1xuICAgIC8vIHNlcnZpY2Utd29ya2VycyBtb2RlIHRvIFwibm9uZVwiLlxuICAgIGlmIChyZXF1ZXN0LnJlZGlyZWN0ID09PSAnZm9sbG93Jykge1xuICAgICAgcmVxdWVzdC5zZXJ2aWNlV29ya2VycyA9ICdub25lJ1xuICAgIH1cblxuICAgIC8vIDMuIFNldCByZXNwb25zZSBhbmQgYWN0dWFsUmVzcG9uc2UgdG8gdGhlIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgLy8gSFRUUC1uZXR3b3JrLW9yLWNhY2hlIGZldGNoIGdpdmVuIGZldGNoUGFyYW1zLlxuICAgIGFjdHVhbFJlc3BvbnNlID0gcmVzcG9uc2UgPSBhd2FpdCBodHRwTmV0d29ya09yQ2FjaGVGZXRjaChmZXRjaFBhcmFtcylcblxuICAgIC8vIDQuIElmIHJlcXVlc3TigJlzIHJlc3BvbnNlIHRhaW50aW5nIGlzIFwiY29yc1wiIGFuZCBhIENPUlMgY2hlY2tcbiAgICAvLyBmb3IgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcmV0dXJucyBmYWlsdXJlLCB0aGVuIHJldHVybiBhIG5ldHdvcmsgZXJyb3IuXG4gICAgaWYgKFxuICAgICAgcmVxdWVzdC5yZXNwb25zZVRhaW50aW5nID09PSAnY29ycycgJiZcbiAgICAgIGNvcnNDaGVjayhyZXF1ZXN0LCByZXNwb25zZSkgPT09ICdmYWlsdXJlJ1xuICAgICkge1xuICAgICAgcmV0dXJuIG1ha2VOZXR3b3JrRXJyb3IoJ2NvcnMgZmFpbHVyZScpXG4gICAgfVxuXG4gICAgLy8gNS4gSWYgdGhlIFRBTyBjaGVjayBmb3IgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcmV0dXJucyBmYWlsdXJlLCB0aGVuIHNldFxuICAgIC8vIHJlcXVlc3TigJlzIHRpbWluZyBhbGxvdyBmYWlsZWQgZmxhZy5cbiAgICBpZiAoVEFPQ2hlY2socmVxdWVzdCwgcmVzcG9uc2UpID09PSAnZmFpbHVyZScpIHtcbiAgICAgIHJlcXVlc3QudGltaW5nQWxsb3dGYWlsZWQgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgLy8gNy4gSWYgZWl0aGVyIHJlcXVlc3TigJlzIHJlc3BvbnNlIHRhaW50aW5nIG9yIHJlc3BvbnNl4oCZcyB0eXBlXG4gIC8vIGlzIFwib3BhcXVlXCIsIGFuZCB0aGUgY3Jvc3Mtb3JpZ2luIHJlc291cmNlIHBvbGljeSBjaGVjayB3aXRoXG4gIC8vIHJlcXVlc3TigJlzIG9yaWdpbiwgcmVxdWVzdOKAmXMgY2xpZW50LCByZXF1ZXN04oCZcyBkZXN0aW5hdGlvbixcbiAgLy8gYW5kIGFjdHVhbFJlc3BvbnNlIHJldHVybnMgYmxvY2tlZCwgdGhlbiByZXR1cm4gYSBuZXR3b3JrIGVycm9yLlxuICBpZiAoXG4gICAgKHJlcXVlc3QucmVzcG9uc2VUYWludGluZyA9PT0gJ29wYXF1ZScgfHwgcmVzcG9uc2UudHlwZSA9PT0gJ29wYXF1ZScpICYmXG4gICAgY3Jvc3NPcmlnaW5SZXNvdXJjZVBvbGljeUNoZWNrKFxuICAgICAgcmVxdWVzdC5vcmlnaW4sXG4gICAgICByZXF1ZXN0LmNsaWVudCxcbiAgICAgIHJlcXVlc3QuZGVzdGluYXRpb24sXG4gICAgICBhY3R1YWxSZXNwb25zZVxuICAgICkgPT09ICdibG9ja2VkJ1xuICApIHtcbiAgICByZXR1cm4gbWFrZU5ldHdvcmtFcnJvcignYmxvY2tlZCcpXG4gIH1cblxuICAvLyA4LiBJZiBhY3R1YWxSZXNwb25zZeKAmXMgc3RhdHVzIGlzIGEgcmVkaXJlY3Qgc3RhdHVzLCB0aGVuOlxuICBpZiAocmVkaXJlY3RTdGF0dXNTZXQuaGFzKGFjdHVhbFJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICAvLyAxLiBJZiBhY3R1YWxSZXNwb25zZeKAmXMgc3RhdHVzIGlzIG5vdCAzMDMsIHJlcXVlc3TigJlzIGJvZHkgaXMgbm90IG51bGwsXG4gICAgLy8gYW5kIHRoZSBjb25uZWN0aW9uIHVzZXMgSFRUUC8yLCB0aGVuIHVzZXIgYWdlbnRzIG1heSwgYW5kIGFyZSBldmVuXG4gICAgLy8gZW5jb3VyYWdlZCB0bywgdHJhbnNtaXQgYW4gUlNUX1NUUkVBTSBmcmFtZS5cbiAgICAvLyBTZWUsIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvZmV0Y2gvaXNzdWVzLzEyODhcbiAgICBpZiAocmVxdWVzdC5yZWRpcmVjdCAhPT0gJ21hbnVhbCcpIHtcbiAgICAgIGZldGNoUGFyYW1zLmNvbnRyb2xsZXIuY29ubmVjdGlvbi5kZXN0cm95KHVuZGVmaW5lZCwgZmFsc2UpXG4gICAgfVxuXG4gICAgLy8gMi4gU3dpdGNoIG9uIHJlcXVlc3TigJlzIHJlZGlyZWN0IG1vZGU6XG4gICAgaWYgKHJlcXVlc3QucmVkaXJlY3QgPT09ICdlcnJvcicpIHtcbiAgICAgIC8vIFNldCByZXNwb25zZSB0byBhIG5ldHdvcmsgZXJyb3IuXG4gICAgICByZXNwb25zZSA9IG1ha2VOZXR3b3JrRXJyb3IoJ3VuZXhwZWN0ZWQgcmVkaXJlY3QnKVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5yZWRpcmVjdCA9PT0gJ21hbnVhbCcpIHtcbiAgICAgIC8vIFNldCByZXNwb25zZSB0byBhbiBvcGFxdWUtcmVkaXJlY3QgZmlsdGVyZWQgcmVzcG9uc2Ugd2hvc2UgaW50ZXJuYWxcbiAgICAgIC8vIHJlc3BvbnNlIGlzIGFjdHVhbFJlc3BvbnNlLlxuICAgICAgLy8gTk9URShzcGVjKTogT24gdGhlIHdlYiB0aGlzIHdvdWxkIHJldHVybiBhbiBgb3BhcXVlcmVkaXJlY3RgIHJlc3BvbnNlLFxuICAgICAgLy8gYnV0IHRoYXQgZG9lc24ndCBtYWtlIHNlbnNlIHNlcnZlciBzaWRlLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvdW5kaWNpL2lzc3Vlcy8xMTkzLlxuICAgICAgcmVzcG9uc2UgPSBhY3R1YWxSZXNwb25zZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5yZWRpcmVjdCA9PT0gJ2ZvbGxvdycpIHtcbiAgICAgIC8vIFNldCByZXNwb25zZSB0byB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgSFRUUC1yZWRpcmVjdCBmZXRjaCBnaXZlblxuICAgICAgLy8gZmV0Y2hQYXJhbXMgYW5kIHJlc3BvbnNlLlxuICAgICAgcmVzcG9uc2UgPSBhd2FpdCBodHRwUmVkaXJlY3RGZXRjaChmZXRjaFBhcmFtcywgcmVzcG9uc2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChmYWxzZSlcbiAgICB9XG4gIH1cblxuICAvLyA5LiBTZXQgcmVzcG9uc2XigJlzIHRpbWluZyBpbmZvIHRvIHRpbWluZ0luZm8uXG4gIHJlc3BvbnNlLnRpbWluZ0luZm8gPSB0aW1pbmdJbmZvXG5cbiAgLy8gMTAuIFJldHVybiByZXNwb25zZS5cbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbi8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNodHRwLXJlZGlyZWN0LWZldGNoXG5mdW5jdGlvbiBodHRwUmVkaXJlY3RGZXRjaCAoZmV0Y2hQYXJhbXMsIHJlc3BvbnNlKSB7XG4gIC8vIDEuIExldCByZXF1ZXN0IGJlIGZldGNoUGFyYW1z4oCZcyByZXF1ZXN0LlxuICBjb25zdCByZXF1ZXN0ID0gZmV0Y2hQYXJhbXMucmVxdWVzdFxuXG4gIC8vIDIuIExldCBhY3R1YWxSZXNwb25zZSBiZSByZXNwb25zZSwgaWYgcmVzcG9uc2UgaXMgbm90IGEgZmlsdGVyZWQgcmVzcG9uc2UsXG4gIC8vIGFuZCByZXNwb25zZeKAmXMgaW50ZXJuYWwgcmVzcG9uc2Ugb3RoZXJ3aXNlLlxuICBjb25zdCBhY3R1YWxSZXNwb25zZSA9IHJlc3BvbnNlLmludGVybmFsUmVzcG9uc2VcbiAgICA/IHJlc3BvbnNlLmludGVybmFsUmVzcG9uc2VcbiAgICA6IHJlc3BvbnNlXG5cbiAgLy8gMy4gTGV0IGxvY2F0aW9uVVJMIGJlIGFjdHVhbFJlc3BvbnNl4oCZcyBsb2NhdGlvbiBVUkwgZ2l2ZW4gcmVxdWVzdOKAmXMgY3VycmVudFxuICAvLyBVUkzigJlzIGZyYWdtZW50LlxuICBsZXQgbG9jYXRpb25VUkxcblxuICB0cnkge1xuICAgIGxvY2F0aW9uVVJMID0gcmVzcG9uc2VMb2NhdGlvblVSTChcbiAgICAgIGFjdHVhbFJlc3BvbnNlLFxuICAgICAgcmVxdWVzdEN1cnJlbnRVUkwocmVxdWVzdCkuaGFzaFxuICAgIClcblxuICAgIC8vIDQuIElmIGxvY2F0aW9uVVJMIGlzIG51bGwsIHRoZW4gcmV0dXJuIHJlc3BvbnNlLlxuICAgIGlmIChsb2NhdGlvblVSTCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIDUuIElmIGxvY2F0aW9uVVJMIGlzIGZhaWx1cmUsIHRoZW4gcmV0dXJuIGEgbmV0d29yayBlcnJvci5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1ha2VOZXR3b3JrRXJyb3IoZXJyKSlcbiAgfVxuXG4gIC8vIDYuIElmIGxvY2F0aW9uVVJM4oCZcyBzY2hlbWUgaXMgbm90IGFuIEhUVFAoUykgc2NoZW1lLCB0aGVuIHJldHVybiBhIG5ldHdvcmtcbiAgLy8gZXJyb3IuXG4gIGlmICghdXJsSXNIdHRwSHR0cHNTY2hlbWUobG9jYXRpb25VUkwpKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYWtlTmV0d29ya0Vycm9yKCdVUkwgc2NoZW1lIG11c3QgYmUgYSBIVFRQKFMpIHNjaGVtZScpKVxuICB9XG5cbiAgLy8gNy4gSWYgcmVxdWVzdOKAmXMgcmVkaXJlY3QgY291bnQgaXMgMjAsIHRoZW4gcmV0dXJuIGEgbmV0d29yayBlcnJvci5cbiAgaWYgKHJlcXVlc3QucmVkaXJlY3RDb3VudCA9PT0gMjApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1ha2VOZXR3b3JrRXJyb3IoJ3JlZGlyZWN0IGNvdW50IGV4Y2VlZGVkJykpXG4gIH1cblxuICAvLyA4LiBJbmNyZWFzZSByZXF1ZXN04oCZcyByZWRpcmVjdCBjb3VudCBieSAxLlxuICByZXF1ZXN0LnJlZGlyZWN0Q291bnQgKz0gMVxuXG4gIC8vIDkuIElmIHJlcXVlc3TigJlzIG1vZGUgaXMgXCJjb3JzXCIsIGxvY2F0aW9uVVJMIGluY2x1ZGVzIGNyZWRlbnRpYWxzLCBhbmRcbiAgLy8gcmVxdWVzdOKAmXMgb3JpZ2luIGlzIG5vdCBzYW1lIG9yaWdpbiB3aXRoIGxvY2F0aW9uVVJM4oCZcyBvcmlnaW4sIHRoZW4gcmV0dXJuXG4gIC8vICBhIG5ldHdvcmsgZXJyb3IuXG4gIGlmIChcbiAgICByZXF1ZXN0Lm1vZGUgPT09ICdjb3JzJyAmJlxuICAgIChsb2NhdGlvblVSTC51c2VybmFtZSB8fCBsb2NhdGlvblVSTC5wYXNzd29yZCkgJiZcbiAgICAhc2FtZU9yaWdpbihyZXF1ZXN0LCBsb2NhdGlvblVSTClcbiAgKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYWtlTmV0d29ya0Vycm9yKCdjcm9zcyBvcmlnaW4gbm90IGFsbG93ZWQgZm9yIHJlcXVlc3QgbW9kZSBcImNvcnNcIicpKVxuICB9XG5cbiAgLy8gMTAuIElmIHJlcXVlc3TigJlzIHJlc3BvbnNlIHRhaW50aW5nIGlzIFwiY29yc1wiIGFuZCBsb2NhdGlvblVSTCBpbmNsdWRlc1xuICAvLyBjcmVkZW50aWFscywgdGhlbiByZXR1cm4gYSBuZXR3b3JrIGVycm9yLlxuICBpZiAoXG4gICAgcmVxdWVzdC5yZXNwb25zZVRhaW50aW5nID09PSAnY29ycycgJiZcbiAgICAobG9jYXRpb25VUkwudXNlcm5hbWUgfHwgbG9jYXRpb25VUkwucGFzc3dvcmQpXG4gICkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWFrZU5ldHdvcmtFcnJvcihcbiAgICAgICdVUkwgY2Fubm90IGNvbnRhaW4gY3JlZGVudGlhbHMgZm9yIHJlcXVlc3QgbW9kZSBcImNvcnNcIidcbiAgICApKVxuICB9XG5cbiAgLy8gMTEuIElmIGFjdHVhbFJlc3BvbnNl4oCZcyBzdGF0dXMgaXMgbm90IDMwMywgcmVxdWVzdOKAmXMgYm9keSBpcyBub24tbnVsbCxcbiAgLy8gYW5kIHJlcXVlc3TigJlzIGJvZHnigJlzIHNvdXJjZSBpcyBudWxsLCB0aGVuIHJldHVybiBhIG5ldHdvcmsgZXJyb3IuXG4gIGlmIChcbiAgICBhY3R1YWxSZXNwb25zZS5zdGF0dXMgIT09IDMwMyAmJlxuICAgIHJlcXVlc3QuYm9keSAhPSBudWxsICYmXG4gICAgcmVxdWVzdC5ib2R5LnNvdXJjZSA9PSBudWxsXG4gICkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWFrZU5ldHdvcmtFcnJvcigpKVxuICB9XG5cbiAgLy8gMTIuIElmIG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHRydWVcbiAgLy8gLSBhY3R1YWxSZXNwb25zZeKAmXMgc3RhdHVzIGlzIDMwMSBvciAzMDIgYW5kIHJlcXVlc3TigJlzIG1ldGhvZCBpcyBgUE9TVGBcbiAgLy8gLSBhY3R1YWxSZXNwb25zZeKAmXMgc3RhdHVzIGlzIDMwMyBhbmQgcmVxdWVzdOKAmXMgbWV0aG9kIGlzIG5vdCBgR0VUYCBvciBgSEVBRGBcbiAgaWYgKFxuICAgIChbMzAxLCAzMDJdLmluY2x1ZGVzKGFjdHVhbFJlc3BvbnNlLnN0YXR1cykgJiYgcmVxdWVzdC5tZXRob2QgPT09ICdQT1NUJykgfHxcbiAgICAoYWN0dWFsUmVzcG9uc2Uuc3RhdHVzID09PSAzMDMgJiZcbiAgICAgICFHRVRfT1JfSEVBRC5pbmNsdWRlcyhyZXF1ZXN0Lm1ldGhvZCkpXG4gICkge1xuICAgIC8vIHRoZW46XG4gICAgLy8gMS4gU2V0IHJlcXVlc3TigJlzIG1ldGhvZCB0byBgR0VUYCBhbmQgcmVxdWVzdOKAmXMgYm9keSB0byBudWxsLlxuICAgIHJlcXVlc3QubWV0aG9kID0gJ0dFVCdcbiAgICByZXF1ZXN0LmJvZHkgPSBudWxsXG5cbiAgICAvLyAyLiBGb3IgZWFjaCBoZWFkZXJOYW1lIG9mIHJlcXVlc3QtYm9keS1oZWFkZXIgbmFtZSwgZGVsZXRlIGhlYWRlck5hbWUgZnJvbVxuICAgIC8vIHJlcXVlc3TigJlzIGhlYWRlciBsaXN0LlxuICAgIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiByZXF1ZXN0Qm9keUhlYWRlcikge1xuICAgICAgcmVxdWVzdC5oZWFkZXJzTGlzdC5kZWxldGUoaGVhZGVyTmFtZSlcbiAgICB9XG4gIH1cblxuICAvLyAxMy4gSWYgcmVxdWVzdOKAmXMgY3VycmVudCBVUkzigJlzIG9yaWdpbiBpcyBub3Qgc2FtZSBvcmlnaW4gd2l0aCBsb2NhdGlvblVSTOKAmXNcbiAgLy8gICAgIG9yaWdpbiwgdGhlbiBmb3IgZWFjaCBoZWFkZXJOYW1lIG9mIENPUlMgbm9uLXdpbGRjYXJkIHJlcXVlc3QtaGVhZGVyIG5hbWUsXG4gIC8vICAgICBkZWxldGUgaGVhZGVyTmFtZSBmcm9tIHJlcXVlc3TigJlzIGhlYWRlciBsaXN0LlxuICBpZiAoIXNhbWVPcmlnaW4ocmVxdWVzdEN1cnJlbnRVUkwocmVxdWVzdCksIGxvY2F0aW9uVVJMKSkge1xuICAgIC8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb3JzLW5vbi13aWxkY2FyZC1yZXF1ZXN0LWhlYWRlci1uYW1lXG4gICAgcmVxdWVzdC5oZWFkZXJzTGlzdC5kZWxldGUoJ2F1dGhvcml6YXRpb24nLCB0cnVlKVxuXG4gICAgLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2F1dGhlbnRpY2F0aW9uLWVudHJpZXNcbiAgICByZXF1ZXN0LmhlYWRlcnNMaXN0LmRlbGV0ZSgncHJveHktYXV0aG9yaXphdGlvbicsIHRydWUpXG5cbiAgICAvLyBcIkNvb2tpZVwiIGFuZCBcIkhvc3RcIiBhcmUgZm9yYmlkZGVuIHJlcXVlc3QtaGVhZGVycywgd2hpY2ggdW5kaWNpIGRvZXNuJ3QgaW1wbGVtZW50LlxuICAgIHJlcXVlc3QuaGVhZGVyc0xpc3QuZGVsZXRlKCdjb29raWUnLCB0cnVlKVxuICAgIHJlcXVlc3QuaGVhZGVyc0xpc3QuZGVsZXRlKCdob3N0JywgdHJ1ZSlcbiAgfVxuXG4gIC8vIDE0LiBJZiByZXF1ZXN04oCZcyBib2R5IGlzIG5vbi1udWxsLCB0aGVuIHNldCByZXF1ZXN04oCZcyBib2R5IHRvIHRoZSBmaXJzdCByZXR1cm5cbiAgLy8gdmFsdWUgb2Ygc2FmZWx5IGV4dHJhY3RpbmcgcmVxdWVzdOKAmXMgYm9keeKAmXMgc291cmNlLlxuICBpZiAocmVxdWVzdC5ib2R5ICE9IG51bGwpIHtcbiAgICBhc3NlcnQocmVxdWVzdC5ib2R5LnNvdXJjZSAhPSBudWxsKVxuICAgIHJlcXVlc3QuYm9keSA9IHNhZmVseUV4dHJhY3RCb2R5KHJlcXVlc3QuYm9keS5zb3VyY2UpWzBdXG4gIH1cblxuICAvLyAxNS4gTGV0IHRpbWluZ0luZm8gYmUgZmV0Y2hQYXJhbXPigJlzIHRpbWluZyBpbmZvLlxuICBjb25zdCB0aW1pbmdJbmZvID0gZmV0Y2hQYXJhbXMudGltaW5nSW5mb1xuXG4gIC8vIDE2LiBTZXQgdGltaW5nSW5mb+KAmXMgcmVkaXJlY3QgZW5kIHRpbWUgYW5kIHBvc3QtcmVkaXJlY3Qgc3RhcnQgdGltZSB0byB0aGVcbiAgLy8gY29hcnNlbmVkIHNoYXJlZCBjdXJyZW50IHRpbWUgZ2l2ZW4gZmV0Y2hQYXJhbXPigJlzIGNyb3NzLW9yaWdpbiBpc29sYXRlZFxuICAvLyBjYXBhYmlsaXR5LlxuICB0aW1pbmdJbmZvLnJlZGlyZWN0RW5kVGltZSA9IHRpbWluZ0luZm8ucG9zdFJlZGlyZWN0U3RhcnRUaW1lID1cbiAgICBjb2Fyc2VuZWRTaGFyZWRDdXJyZW50VGltZShmZXRjaFBhcmFtcy5jcm9zc09yaWdpbklzb2xhdGVkQ2FwYWJpbGl0eSlcblxuICAvLyAxNy4gSWYgdGltaW5nSW5mb+KAmXMgcmVkaXJlY3Qgc3RhcnQgdGltZSBpcyAwLCB0aGVuIHNldCB0aW1pbmdJbmZv4oCZc1xuICAvLyAgcmVkaXJlY3Qgc3RhcnQgdGltZSB0byB0aW1pbmdJbmZv4oCZcyBzdGFydCB0aW1lLlxuICBpZiAodGltaW5nSW5mby5yZWRpcmVjdFN0YXJ0VGltZSA9PT0gMCkge1xuICAgIHRpbWluZ0luZm8ucmVkaXJlY3RTdGFydFRpbWUgPSB0aW1pbmdJbmZvLnN0YXJ0VGltZVxuICB9XG5cbiAgLy8gMTguIEFwcGVuZCBsb2NhdGlvblVSTCB0byByZXF1ZXN04oCZcyBVUkwgbGlzdC5cbiAgcmVxdWVzdC51cmxMaXN0LnB1c2gobG9jYXRpb25VUkwpXG5cbiAgLy8gMTkuIEludm9rZSBzZXQgcmVxdWVzdOKAmXMgcmVmZXJyZXIgcG9saWN5IG9uIHJlZGlyZWN0IG9uIHJlcXVlc3QgYW5kXG4gIC8vIGFjdHVhbFJlc3BvbnNlLlxuICBzZXRSZXF1ZXN0UmVmZXJyZXJQb2xpY3lPblJlZGlyZWN0KHJlcXVlc3QsIGFjdHVhbFJlc3BvbnNlKVxuXG4gIC8vIDIwLiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBydW5uaW5nIG1haW4gZmV0Y2ggZ2l2ZW4gZmV0Y2hQYXJhbXMgYW5kIHRydWUuXG4gIHJldHVybiBtYWluRmV0Y2goZmV0Y2hQYXJhbXMsIHRydWUpXG59XG5cbi8vIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNodHRwLW5ldHdvcmstb3ItY2FjaGUtZmV0Y2hcbmFzeW5jIGZ1bmN0aW9uIGh0dHBOZXR3b3JrT3JDYWNoZUZldGNoIChcbiAgZmV0Y2hQYXJhbXMsXG4gIGlzQXV0aGVudGljYXRpb25GZXRjaCA9IGZhbHNlLFxuICBpc05ld0Nvbm5lY3Rpb25GZXRjaCA9IGZhbHNlXG4pIHtcbiAgLy8gMS4gTGV0IHJlcXVlc3QgYmUgZmV0Y2hQYXJhbXPigJlzIHJlcXVlc3QuXG4gIGNvbnN0IHJlcXVlc3QgPSBmZXRjaFBhcmFtcy5yZXF1ZXN0XG5cbiAgLy8gMi4gTGV0IGh0dHBGZXRjaFBhcmFtcyBiZSBudWxsLlxuICBsZXQgaHR0cEZldGNoUGFyYW1zID0gbnVsbFxuXG4gIC8vIDMuIExldCBodHRwUmVxdWVzdCBiZSBudWxsLlxuICBsZXQgaHR0cFJlcXVlc3QgPSBudWxsXG5cbiAgLy8gNC4gTGV0IHJlc3BvbnNlIGJlIG51bGwuXG4gIGxldCByZXNwb25zZSA9IG51bGxcblxuICAvLyA1LiBMZXQgc3RvcmVkUmVzcG9uc2UgYmUgbnVsbC5cbiAgLy8gVE9ETzogY2FjaGVcblxuICAvLyA2LiBMZXQgaHR0cENhY2hlIGJlIG51bGwuXG4gIGNvbnN0IGh0dHBDYWNoZSA9IG51bGxcblxuICAvLyA3LiBMZXQgdGhlIHJldmFsaWRhdGluZ0ZsYWcgYmUgdW5zZXQuXG4gIGNvbnN0IHJldmFsaWRhdGluZ0ZsYWcgPSBmYWxzZVxuXG4gIC8vIDguIFJ1biB0aGVzZSBzdGVwcywgYnV0IGFib3J0IHdoZW4gdGhlIG9uZ29pbmcgZmV0Y2ggaXMgdGVybWluYXRlZDpcblxuICAvLyAgICAxLiBJZiByZXF1ZXN04oCZcyB3aW5kb3cgaXMgXCJuby13aW5kb3dcIiBhbmQgcmVxdWVzdOKAmXMgcmVkaXJlY3QgbW9kZSBpc1xuICAvLyAgICBcImVycm9yXCIsIHRoZW4gc2V0IGh0dHBGZXRjaFBhcmFtcyB0byBmZXRjaFBhcmFtcyBhbmQgaHR0cFJlcXVlc3QgdG9cbiAgLy8gICAgcmVxdWVzdC5cbiAgaWYgKHJlcXVlc3Qud2luZG93ID09PSAnbm8td2luZG93JyAmJiByZXF1ZXN0LnJlZGlyZWN0ID09PSAnZXJyb3InKSB7XG4gICAgaHR0cEZldGNoUGFyYW1zID0gZmV0Y2hQYXJhbXNcbiAgICBodHRwUmVxdWVzdCA9IHJlcXVlc3RcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2U6XG5cbiAgICAvLyAxLiBTZXQgaHR0cFJlcXVlc3QgdG8gYSBjbG9uZSBvZiByZXF1ZXN0LlxuICAgIGh0dHBSZXF1ZXN0ID0gY2xvbmVSZXF1ZXN0KHJlcXVlc3QpXG5cbiAgICAvLyAyLiBTZXQgaHR0cEZldGNoUGFyYW1zIHRvIGEgY29weSBvZiBmZXRjaFBhcmFtcy5cbiAgICBodHRwRmV0Y2hQYXJhbXMgPSB7IC4uLmZldGNoUGFyYW1zIH1cblxuICAgIC8vIDMuIFNldCBodHRwRmV0Y2hQYXJhbXPigJlzIHJlcXVlc3QgdG8gaHR0cFJlcXVlc3QuXG4gICAgaHR0cEZldGNoUGFyYW1zLnJlcXVlc3QgPSBodHRwUmVxdWVzdFxuICB9XG5cbiAgLy8gICAgMy4gTGV0IGluY2x1ZGVDcmVkZW50aWFscyBiZSB0cnVlIGlmIG9uZSBvZlxuICBjb25zdCBpbmNsdWRlQ3JlZGVudGlhbHMgPVxuICAgIHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJyB8fFxuICAgIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnc2FtZS1vcmlnaW4nICYmXG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVGFpbnRpbmcgPT09ICdiYXNpYycpXG5cbiAgLy8gICAgNC4gTGV0IGNvbnRlbnRMZW5ndGggYmUgaHR0cFJlcXVlc3TigJlzIGJvZHnigJlzIGxlbmd0aCwgaWYgaHR0cFJlcXVlc3TigJlzXG4gIC8vICAgIGJvZHkgaXMgbm9uLW51bGw7IG90aGVyd2lzZSBudWxsLlxuICBjb25zdCBjb250ZW50TGVuZ3RoID0gaHR0cFJlcXVlc3QuYm9keSA/IGh0dHBSZXF1ZXN0LmJvZHkubGVuZ3RoIDogbnVsbFxuXG4gIC8vICAgIDUuIExldCBjb250ZW50TGVuZ3RoSGVhZGVyVmFsdWUgYmUgbnVsbC5cbiAgbGV0IGNvbnRlbnRMZW5ndGhIZWFkZXJWYWx1ZSA9IG51bGxcblxuICAvLyAgICA2LiBJZiBodHRwUmVxdWVzdOKAmXMgYm9keSBpcyBudWxsIGFuZCBodHRwUmVxdWVzdOKAmXMgbWV0aG9kIGlzIGBQT1NUYCBvclxuICAvLyAgICBgUFVUYCwgdGhlbiBzZXQgY29udGVudExlbmd0aEhlYWRlclZhbHVlIHRvIGAwYC5cbiAgaWYgKFxuICAgIGh0dHBSZXF1ZXN0LmJvZHkgPT0gbnVsbCAmJlxuICAgIFsnUE9TVCcsICdQVVQnXS5pbmNsdWRlcyhodHRwUmVxdWVzdC5tZXRob2QpXG4gICkge1xuICAgIGNvbnRlbnRMZW5ndGhIZWFkZXJWYWx1ZSA9ICcwJ1xuICB9XG5cbiAgLy8gICAgNy4gSWYgY29udGVudExlbmd0aCBpcyBub24tbnVsbCwgdGhlbiBzZXQgY29udGVudExlbmd0aEhlYWRlclZhbHVlIHRvXG4gIC8vICAgIGNvbnRlbnRMZW5ndGgsIHNlcmlhbGl6ZWQgYW5kIGlzb21vcnBoaWMgZW5jb2RlZC5cbiAgaWYgKGNvbnRlbnRMZW5ndGggIT0gbnVsbCkge1xuICAgIGNvbnRlbnRMZW5ndGhIZWFkZXJWYWx1ZSA9IGlzb21vcnBoaWNFbmNvZGUoYCR7Y29udGVudExlbmd0aH1gKVxuICB9XG5cbiAgLy8gICAgOC4gSWYgY29udGVudExlbmd0aEhlYWRlclZhbHVlIGlzIG5vbi1udWxsLCB0aGVuIGFwcGVuZFxuICAvLyAgICBgQ29udGVudC1MZW5ndGhgL2NvbnRlbnRMZW5ndGhIZWFkZXJWYWx1ZSB0byBodHRwUmVxdWVzdOKAmXMgaGVhZGVyXG4gIC8vICAgIGxpc3QuXG4gIGlmIChjb250ZW50TGVuZ3RoSGVhZGVyVmFsdWUgIT0gbnVsbCkge1xuICAgIGh0dHBSZXF1ZXN0LmhlYWRlcnNMaXN0LmFwcGVuZCgnY29udGVudC1sZW5ndGgnLCBjb250ZW50TGVuZ3RoSGVhZGVyVmFsdWUsIHRydWUpXG4gIH1cblxuICAvLyAgICA5LiBJZiBjb250ZW50TGVuZ3RoSGVhZGVyVmFsdWUgaXMgbm9uLW51bGwsIHRoZW4gYXBwZW5kIChgQ29udGVudC1MZW5ndGhgLFxuICAvLyAgICBjb250ZW50TGVuZ3RoSGVhZGVyVmFsdWUpIHRvIGh0dHBSZXF1ZXN04oCZcyBoZWFkZXIgbGlzdC5cblxuICAvLyAgICAxMC4gSWYgY29udGVudExlbmd0aCBpcyBub24tbnVsbCBhbmQgaHR0cFJlcXVlc3TigJlzIGtlZXBhbGl2ZSBpcyB0cnVlLFxuICAvLyAgICB0aGVuOlxuICBpZiAoY29udGVudExlbmd0aCAhPSBudWxsICYmIGh0dHBSZXF1ZXN0LmtlZXBhbGl2ZSkge1xuICAgIC8vIE5PVEU6IGtlZXBhbGl2ZSBpcyBhIG5vb3Agb3V0c2lkZSBvZiBicm93c2VyIGNvbnRleHQuXG4gIH1cblxuICAvLyAgICAxMS4gSWYgaHR0cFJlcXVlc3TigJlzIHJlZmVycmVyIGlzIGEgVVJMLCB0aGVuIGFwcGVuZFxuICAvLyAgICBgUmVmZXJlcmAvaHR0cFJlcXVlc3TigJlzIHJlZmVycmVyLCBzZXJpYWxpemVkIGFuZCBpc29tb3JwaGljIGVuY29kZWQsXG4gIC8vICAgICB0byBodHRwUmVxdWVzdOKAmXMgaGVhZGVyIGxpc3QuXG4gIGlmIChodHRwUmVxdWVzdC5yZWZlcnJlciBpbnN0YW5jZW9mIFVSTCkge1xuICAgIGh0dHBSZXF1ZXN0LmhlYWRlcnNMaXN0LmFwcGVuZCgncmVmZXJlcicsIGlzb21vcnBoaWNFbmNvZGUoaHR0cFJlcXVlc3QucmVmZXJyZXIuaHJlZiksIHRydWUpXG4gIH1cblxuICAvLyAgICAxMi4gQXBwZW5kIGEgcmVxdWVzdCBgT3JpZ2luYCBoZWFkZXIgZm9yIGh0dHBSZXF1ZXN0LlxuICBhcHBlbmRSZXF1ZXN0T3JpZ2luSGVhZGVyKGh0dHBSZXF1ZXN0KVxuXG4gIC8vICAgIDEzLiBBcHBlbmQgdGhlIEZldGNoIG1ldGFkYXRhIGhlYWRlcnMgZm9yIGh0dHBSZXF1ZXN0LiBbRkVUQ0gtTUVUQURBVEFdXG4gIGFwcGVuZEZldGNoTWV0YWRhdGEoaHR0cFJlcXVlc3QpXG5cbiAgLy8gICAgMTQuIElmIGh0dHBSZXF1ZXN04oCZcyBoZWFkZXIgbGlzdCBkb2VzIG5vdCBjb250YWluIGBVc2VyLUFnZW50YCwgdGhlblxuICAvLyAgICB1c2VyIGFnZW50cyBzaG91bGQgYXBwZW5kIGBVc2VyLUFnZW50YC9kZWZhdWx0IGBVc2VyLUFnZW50YCB2YWx1ZSB0b1xuICAvLyAgICBodHRwUmVxdWVzdOKAmXMgaGVhZGVyIGxpc3QuXG4gIGlmICghaHR0cFJlcXVlc3QuaGVhZGVyc0xpc3QuY29udGFpbnMoJ3VzZXItYWdlbnQnLCB0cnVlKSkge1xuICAgIGh0dHBSZXF1ZXN0LmhlYWRlcnNMaXN0LmFwcGVuZCgndXNlci1hZ2VudCcsIGRlZmF1bHRVc2VyQWdlbnQpXG4gIH1cblxuICAvLyAgICAxNS4gSWYgaHR0cFJlcXVlc3TigJlzIGNhY2hlIG1vZGUgaXMgXCJkZWZhdWx0XCIgYW5kIGh0dHBSZXF1ZXN04oCZcyBoZWFkZXJcbiAgLy8gICAgbGlzdCBjb250YWlucyBgSWYtTW9kaWZpZWQtU2luY2VgLCBgSWYtTm9uZS1NYXRjaGAsXG4gIC8vICAgIGBJZi1Vbm1vZGlmaWVkLVNpbmNlYCwgYElmLU1hdGNoYCwgb3IgYElmLVJhbmdlYCwgdGhlbiBzZXRcbiAgLy8gICAgaHR0cFJlcXVlc3TigJlzIGNhY2hlIG1vZGUgdG8gXCJuby1zdG9yZVwiLlxuICBpZiAoXG4gICAgaHR0cFJlcXVlc3QuY2FjaGUgPT09ICdkZWZhdWx0JyAmJlxuICAgIChodHRwUmVxdWVzdC5oZWFkZXJzTGlzdC5jb250YWlucygnaWYtbW9kaWZpZWQtc2luY2UnLCB0cnVlKSB8fFxuICAgICAgaHR0cFJlcXVlc3QuaGVhZGVyc0xpc3QuY29udGFpbnMoJ2lmLW5vbmUtbWF0Y2gnLCB0cnVlKSB8fFxuICAgICAgaHR0cFJlcXVlc3QuaGVhZGVyc0xpc3QuY29udGFpbnMoJ2lmLXVubW9kaWZpZWQtc2luY2UnLCB0cnVlKSB8fFxuICAgICAgaHR0cFJlcXVlc3QuaGVhZGVyc0xpc3QuY29udGFpbnMoJ2lmLW1hdGNoJywgdHJ1ZSkgfHxcbiAgICAgIGh0dHBSZXF1ZXN0LmhlYWRlcnNMaXN0LmNvbnRhaW5zKCdpZi1yYW5nZScsIHRydWUpKVxuICApIHtcbiAgICBodHRwUmVxdWVzdC5jYWNoZSA9ICduby1zdG9yZSdcbiAgfVxuXG4gIC8vICAgIDE2LiBJZiBodHRwUmVxdWVzdOKAmXMgY2FjaGUgbW9kZSBpcyBcIm5vLWNhY2hlXCIsIGh0dHBSZXF1ZXN04oCZcyBwcmV2ZW50XG4gIC8vICAgIG5vLWNhY2hlIGNhY2hlLWNvbnRyb2wgaGVhZGVyIG1vZGlmaWNhdGlvbiBmbGFnIGlzIHVuc2V0LCBhbmRcbiAgLy8gICAgaHR0cFJlcXVlc3TigJlzIGhlYWRlciBsaXN0IGRvZXMgbm90IGNvbnRhaW4gYENhY2hlLUNvbnRyb2xgLCB0aGVuIGFwcGVuZFxuICAvLyAgICBgQ2FjaGUtQ29udHJvbGAvYG1heC1hZ2U9MGAgdG8gaHR0cFJlcXVlc3TigJlzIGhlYWRlciBsaXN0LlxuICBpZiAoXG4gICAgaHR0cFJlcXVlc3QuY2FjaGUgPT09ICduby1jYWNoZScgJiZcbiAgICAhaHR0cFJlcXVlc3QucHJldmVudE5vQ2FjaGVDYWNoZUNvbnRyb2xIZWFkZXJNb2RpZmljYXRpb24gJiZcbiAgICAhaHR0cFJlcXVlc3QuaGVhZGVyc0xpc3QuY29udGFpbnMoJ2NhY2hlLWNvbnRyb2wnLCB0cnVlKVxuICApIHtcbiAgICBodHRwUmVxdWVzdC5oZWFkZXJzTGlzdC5hcHBlbmQoJ2NhY2hlLWNvbnRyb2wnLCAnbWF4LWFnZT0wJywgdHJ1ZSlcbiAgfVxuXG4gIC8vICAgIDE3LiBJZiBodHRwUmVxdWVzdOKAmXMgY2FjaGUgbW9kZSBpcyBcIm5vLXN0b3JlXCIgb3IgXCJyZWxvYWRcIiwgdGhlbjpcbiAgaWYgKGh0dHBSZXF1ZXN0LmNhY2hlID09PSAnbm8tc3RvcmUnIHx8IGh0dHBSZXF1ZXN0LmNhY2hlID09PSAncmVsb2FkJykge1xuICAgIC8vIDEuIElmIGh0dHBSZXF1ZXN04oCZcyBoZWFkZXIgbGlzdCBkb2VzIG5vdCBjb250YWluIGBQcmFnbWFgLCB0aGVuIGFwcGVuZFxuICAgIC8vIGBQcmFnbWFgL2Buby1jYWNoZWAgdG8gaHR0cFJlcXVlc3TigJlzIGhlYWRlciBsaXN0LlxuICAgIGlmICghaHR0cFJlcXVlc3QuaGVhZGVyc0xpc3QuY29udGFpbnMoJ3ByYWdtYScsIHRydWUpKSB7XG4gICAgICBodHRwUmVxdWVzdC5oZWFkZXJzTGlzdC5hcHBlbmQoJ3ByYWdtYScsICduby1jYWNoZScsIHRydWUpXG4gICAgfVxuXG4gICAgLy8gMi4gSWYgaHR0cFJlcXVlc3TigJlzIGhlYWRlciBsaXN0IGRvZXMgbm90IGNvbnRhaW4gYENhY2hlLUNvbnRyb2xgLFxuICAgIC8vIHRoZW4gYXBwZW5kIGBDYWNoZS1Db250cm9sYC9gbm8tY2FjaGVgIHRvIGh0dHBSZXF1ZXN04oCZcyBoZWFkZXIgbGlzdC5cbiAgICBpZiAoIWh0dHBSZXF1ZXN0LmhlYWRlcnNMaXN0LmNvbnRhaW5zKCdjYWNoZS1jb250cm9sJywgdHJ1ZSkpIHtcbiAgICAgIGh0dHBSZXF1ZXN0LmhlYWRlcnNMaXN0LmFwcGVuZCgnY2FjaGUtY29udHJvbCcsICduby1jYWNoZScsIHRydWUpXG4gICAgfVxuICB9XG5cbiAgLy8gICAgMTguIElmIGh0dHBSZXF1ZXN04oCZcyBoZWFkZXIgbGlzdCBjb250YWlucyBgUmFuZ2VgLCB0aGVuIGFwcGVuZFxuICAvLyAgICBgQWNjZXB0LUVuY29kaW5nYC9gaWRlbnRpdHlgIHRvIGh0dHBSZXF1ZXN04oCZcyBoZWFkZXIgbGlzdC5cbiAgaWYgKGh0dHBSZXF1ZXN0LmhlYWRlcnNMaXN0LmNvbnRhaW5zKCdyYW5nZScsIHRydWUpKSB7XG4gICAgaHR0cFJlcXVlc3QuaGVhZGVyc0xpc3QuYXBwZW5kKCdhY2NlcHQtZW5jb2RpbmcnLCAnaWRlbnRpdHknLCB0cnVlKVxuICB9XG5cbiAgLy8gICAgMTkuIE1vZGlmeSBodHRwUmVxdWVzdOKAmXMgaGVhZGVyIGxpc3QgcGVyIEhUVFAuIERvIG5vdCBhcHBlbmQgYSBnaXZlblxuICAvLyAgICBoZWFkZXIgaWYgaHR0cFJlcXVlc3TigJlzIGhlYWRlciBsaXN0IGNvbnRhaW5zIHRoYXQgaGVhZGVy4oCZcyBuYW1lLlxuICAvLyAgICBUT0RPOiBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2ZldGNoL2lzc3Vlcy8xMjg1I2lzc3VlY29tbWVudC04OTY1NjAxMjlcbiAgaWYgKCFodHRwUmVxdWVzdC5oZWFkZXJzTGlzdC5jb250YWlucygnYWNjZXB0LWVuY29kaW5nJywgdHJ1ZSkpIHtcbiAgICBpZiAodXJsSGFzSHR0cHNTY2hlbWUocmVxdWVzdEN1cnJlbnRVUkwoaHR0cFJlcXVlc3QpKSkge1xuICAgICAgaHR0cFJlcXVlc3QuaGVhZGVyc0xpc3QuYXBwZW5kKCdhY2NlcHQtZW5jb2RpbmcnLCAnYnIsIGd6aXAsIGRlZmxhdGUnLCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBodHRwUmVxdWVzdC5oZWFkZXJzTGlzdC5hcHBlbmQoJ2FjY2VwdC1lbmNvZGluZycsICdnemlwLCBkZWZsYXRlJywgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICBodHRwUmVxdWVzdC5oZWFkZXJzTGlzdC5kZWxldGUoJ2hvc3QnLCB0cnVlKVxuXG4gIC8vICAgIDIwLiBJZiBpbmNsdWRlQ3JlZGVudGlhbHMgaXMgdHJ1ZSwgdGhlbjpcbiAgaWYgKGluY2x1ZGVDcmVkZW50aWFscykge1xuICAgIC8vIDEuIElmIHRoZSB1c2VyIGFnZW50IGlzIG5vdCBjb25maWd1cmVkIHRvIGJsb2NrIGNvb2tpZXMgZm9yIGh0dHBSZXF1ZXN0XG4gICAgLy8gKHNlZSBzZWN0aW9uIDcgb2YgW0NPT0tJRVNdKSwgdGhlbjpcbiAgICAvLyBUT0RPOiBjcmVkZW50aWFsc1xuICAgIC8vIDIuIElmIGh0dHBSZXF1ZXN04oCZcyBoZWFkZXIgbGlzdCBkb2VzIG5vdCBjb250YWluIGBBdXRob3JpemF0aW9uYCwgdGhlbjpcbiAgICAvLyBUT0RPOiBjcmVkZW50aWFsc1xuICB9XG5cbiAgLy8gICAgMjEuIElmIHRoZXJl4oCZcyBhIHByb3h5LWF1dGhlbnRpY2F0aW9uIGVudHJ5LCB1c2UgaXQgYXMgYXBwcm9wcmlhdGUuXG4gIC8vICAgIFRPRE86IHByb3h5LWF1dGhlbnRpY2F0aW9uXG5cbiAgLy8gICAgMjIuIFNldCBodHRwQ2FjaGUgdG8gdGhlIHJlc3VsdCBvZiBkZXRlcm1pbmluZyB0aGUgSFRUUCBjYWNoZVxuICAvLyAgICBwYXJ0aXRpb24sIGdpdmVuIGh0dHBSZXF1ZXN0LlxuICAvLyAgICBUT0RPOiBjYWNoZVxuXG4gIC8vICAgIDIzLiBJZiBodHRwQ2FjaGUgaXMgbnVsbCwgdGhlbiBzZXQgaHR0cFJlcXVlc3TigJlzIGNhY2hlIG1vZGUgdG9cbiAgLy8gICAgXCJuby1zdG9yZVwiLlxuICBpZiAoaHR0cENhY2hlID09IG51bGwpIHtcbiAgICBodHRwUmVxdWVzdC5jYWNoZSA9ICduby1zdG9yZSdcbiAgfVxuXG4gIC8vICAgIDI0LiBJZiBodHRwUmVxdWVzdOKAmXMgY2FjaGUgbW9kZSBpcyBuZWl0aGVyIFwibm8tc3RvcmVcIiBub3IgXCJyZWxvYWRcIixcbiAgLy8gICAgdGhlbjpcbiAgaWYgKGh0dHBSZXF1ZXN0LmNhY2hlICE9PSAnbm8tc3RvcmUnICYmIGh0dHBSZXF1ZXN0LmNhY2hlICE9PSAncmVsb2FkJykge1xuICAgIC8vIFRPRE86IGNhY2hlXG4gIH1cblxuICAvLyA5LiBJZiBhYm9ydGVkLCB0aGVuIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgbmV0d29yayBlcnJvciBmb3IgZmV0Y2hQYXJhbXMuXG4gIC8vIFRPRE9cblxuICAvLyAxMC4gSWYgcmVzcG9uc2UgaXMgbnVsbCwgdGhlbjpcbiAgaWYgKHJlc3BvbnNlID09IG51bGwpIHtcbiAgICAvLyAxLiBJZiBodHRwUmVxdWVzdOKAmXMgY2FjaGUgbW9kZSBpcyBcIm9ubHktaWYtY2FjaGVkXCIsIHRoZW4gcmV0dXJuIGFcbiAgICAvLyBuZXR3b3JrIGVycm9yLlxuICAgIGlmIChodHRwUmVxdWVzdC5jYWNoZSA9PT0gJ29ubHktaWYtY2FjaGVkJykge1xuICAgICAgcmV0dXJuIG1ha2VOZXR3b3JrRXJyb3IoJ29ubHkgaWYgY2FjaGVkJylcbiAgICB9XG5cbiAgICAvLyAyLiBMZXQgZm9yd2FyZFJlc3BvbnNlIGJlIHRoZSByZXN1bHQgb2YgcnVubmluZyBIVFRQLW5ldHdvcmsgZmV0Y2hcbiAgICAvLyBnaXZlbiBodHRwRmV0Y2hQYXJhbXMsIGluY2x1ZGVDcmVkZW50aWFscywgYW5kIGlzTmV3Q29ubmVjdGlvbkZldGNoLlxuICAgIGNvbnN0IGZvcndhcmRSZXNwb25zZSA9IGF3YWl0IGh0dHBOZXR3b3JrRmV0Y2goXG4gICAgICBodHRwRmV0Y2hQYXJhbXMsXG4gICAgICBpbmNsdWRlQ3JlZGVudGlhbHMsXG4gICAgICBpc05ld0Nvbm5lY3Rpb25GZXRjaFxuICAgIClcblxuICAgIC8vIDMuIElmIGh0dHBSZXF1ZXN04oCZcyBtZXRob2QgaXMgdW5zYWZlIGFuZCBmb3J3YXJkUmVzcG9uc2XigJlzIHN0YXR1cyBpc1xuICAgIC8vIGluIHRoZSByYW5nZSAyMDAgdG8gMzk5LCBpbmNsdXNpdmUsIGludmFsaWRhdGUgYXBwcm9wcmlhdGUgc3RvcmVkXG4gICAgLy8gcmVzcG9uc2VzIGluIGh0dHBDYWNoZSwgYXMgcGVyIHRoZSBcIkludmFsaWRhdGlvblwiIGNoYXB0ZXIgb2YgSFRUUFxuICAgIC8vIENhY2hpbmcsIGFuZCBzZXQgc3RvcmVkUmVzcG9uc2UgdG8gbnVsbC4gW0hUVFAtQ0FDSElOR11cbiAgICBpZiAoXG4gICAgICAhc2FmZU1ldGhvZHNTZXQuaGFzKGh0dHBSZXF1ZXN0Lm1ldGhvZCkgJiZcbiAgICAgIGZvcndhcmRSZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmXG4gICAgICBmb3J3YXJkUmVzcG9uc2Uuc3RhdHVzIDw9IDM5OVxuICAgICkge1xuICAgICAgLy8gVE9ETzogY2FjaGVcbiAgICB9XG5cbiAgICAvLyA0LiBJZiB0aGUgcmV2YWxpZGF0aW5nRmxhZyBpcyBzZXQgYW5kIGZvcndhcmRSZXNwb25zZeKAmXMgc3RhdHVzIGlzIDMwNCxcbiAgICAvLyB0aGVuOlxuICAgIGlmIChyZXZhbGlkYXRpbmdGbGFnICYmIGZvcndhcmRSZXNwb25zZS5zdGF0dXMgPT09IDMwNCkge1xuICAgICAgLy8gVE9ETzogY2FjaGVcbiAgICB9XG5cbiAgICAvLyA1LiBJZiByZXNwb25zZSBpcyBudWxsLCB0aGVuOlxuICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XG4gICAgICAvLyAxLiBTZXQgcmVzcG9uc2UgdG8gZm9yd2FyZFJlc3BvbnNlLlxuICAgICAgcmVzcG9uc2UgPSBmb3J3YXJkUmVzcG9uc2VcblxuICAgICAgLy8gMi4gU3RvcmUgaHR0cFJlcXVlc3QgYW5kIGZvcndhcmRSZXNwb25zZSBpbiBodHRwQ2FjaGUsIGFzIHBlciB0aGVcbiAgICAgIC8vIFwiU3RvcmluZyBSZXNwb25zZXMgaW4gQ2FjaGVzXCIgY2hhcHRlciBvZiBIVFRQIENhY2hpbmcuIFtIVFRQLUNBQ0hJTkddXG4gICAgICAvLyBUT0RPOiBjYWNoZVxuICAgIH1cbiAgfVxuXG4gIC8vIDExLiBTZXQgcmVzcG9uc2XigJlzIFVSTCBsaXN0IHRvIGEgY2xvbmUgb2YgaHR0cFJlcXVlc3TigJlzIFVSTCBsaXN0LlxuICByZXNwb25zZS51cmxMaXN0ID0gWy4uLmh0dHBSZXF1ZXN0LnVybExpc3RdXG5cbiAgLy8gMTIuIElmIGh0dHBSZXF1ZXN04oCZcyBoZWFkZXIgbGlzdCBjb250YWlucyBgUmFuZ2VgLCB0aGVuIHNldCByZXNwb25zZeKAmXNcbiAgLy8gcmFuZ2UtcmVxdWVzdGVkIGZsYWcuXG4gIGlmIChodHRwUmVxdWVzdC5oZWFkZXJzTGlzdC5jb250YWlucygncmFuZ2UnLCB0cnVlKSkge1xuICAgIHJlc3BvbnNlLnJhbmdlUmVxdWVzdGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gMTMuIFNldCByZXNwb25zZeKAmXMgcmVxdWVzdC1pbmNsdWRlcy1jcmVkZW50aWFscyB0byBpbmNsdWRlQ3JlZGVudGlhbHMuXG4gIHJlc3BvbnNlLnJlcXVlc3RJbmNsdWRlc0NyZWRlbnRpYWxzID0gaW5jbHVkZUNyZWRlbnRpYWxzXG5cbiAgLy8gMTQuIElmIHJlc3BvbnNl4oCZcyBzdGF0dXMgaXMgNDAxLCBodHRwUmVxdWVzdOKAmXMgcmVzcG9uc2UgdGFpbnRpbmcgaXMgbm90XG4gIC8vIFwiY29yc1wiLCBpbmNsdWRlQ3JlZGVudGlhbHMgaXMgdHJ1ZSwgYW5kIHJlcXVlc3TigJlzIHdpbmRvdyBpcyBhbiBlbnZpcm9ubWVudFxuICAvLyBzZXR0aW5ncyBvYmplY3QsIHRoZW46XG4gIC8vIFRPRE9cblxuICAvLyAxNS4gSWYgcmVzcG9uc2XigJlzIHN0YXR1cyBpcyA0MDcsIHRoZW46XG4gIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNykge1xuICAgIC8vIDEuIElmIHJlcXVlc3TigJlzIHdpbmRvdyBpcyBcIm5vLXdpbmRvd1wiLCB0aGVuIHJldHVybiBhIG5ldHdvcmsgZXJyb3IuXG4gICAgaWYgKHJlcXVlc3Qud2luZG93ID09PSAnbm8td2luZG93Jykge1xuICAgICAgcmV0dXJuIG1ha2VOZXR3b3JrRXJyb3IoKVxuICAgIH1cblxuICAgIC8vIDIuID8/P1xuXG4gICAgLy8gMy4gSWYgZmV0Y2hQYXJhbXMgaXMgY2FuY2VsZWQsIHRoZW4gcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSBuZXR3b3JrIGVycm9yIGZvciBmZXRjaFBhcmFtcy5cbiAgICBpZiAoaXNDYW5jZWxsZWQoZmV0Y2hQYXJhbXMpKSB7XG4gICAgICByZXR1cm4gbWFrZUFwcHJvcHJpYXRlTmV0d29ya0Vycm9yKGZldGNoUGFyYW1zKVxuICAgIH1cblxuICAgIC8vIDQuIFByb21wdCB0aGUgZW5kIHVzZXIgYXMgYXBwcm9wcmlhdGUgaW4gcmVxdWVzdOKAmXMgd2luZG93IGFuZCBzdG9yZVxuICAgIC8vIHRoZSByZXN1bHQgYXMgYSBwcm94eS1hdXRoZW50aWNhdGlvbiBlbnRyeS4gW0hUVFAtQVVUSF1cbiAgICAvLyBUT0RPOiBJbnZva2Ugc29tZSBraW5kIG9mIGNhbGxiYWNrP1xuXG4gICAgLy8gNS4gU2V0IHJlc3BvbnNlIHRvIHRoZSByZXN1bHQgb2YgcnVubmluZyBIVFRQLW5ldHdvcmstb3ItY2FjaGUgZmV0Y2ggZ2l2ZW5cbiAgICAvLyBmZXRjaFBhcmFtcy5cbiAgICAvLyBUT0RPXG4gICAgcmV0dXJuIG1ha2VOZXR3b3JrRXJyb3IoJ3Byb3h5IGF1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJylcbiAgfVxuXG4gIC8vIDE2LiBJZiBhbGwgb2YgdGhlIGZvbGxvd2luZyBhcmUgdHJ1ZVxuICBpZiAoXG4gICAgLy8gcmVzcG9uc2XigJlzIHN0YXR1cyBpcyA0MjFcbiAgICByZXNwb25zZS5zdGF0dXMgPT09IDQyMSAmJlxuICAgIC8vIGlzTmV3Q29ubmVjdGlvbkZldGNoIGlzIGZhbHNlXG4gICAgIWlzTmV3Q29ubmVjdGlvbkZldGNoICYmXG4gICAgLy8gcmVxdWVzdOKAmXMgYm9keSBpcyBudWxsLCBvciByZXF1ZXN04oCZcyBib2R5IGlzIG5vbi1udWxsIGFuZCByZXF1ZXN04oCZcyBib2R54oCZcyBzb3VyY2UgaXMgbm9uLW51bGxcbiAgICAocmVxdWVzdC5ib2R5ID09IG51bGwgfHwgcmVxdWVzdC5ib2R5LnNvdXJjZSAhPSBudWxsKVxuICApIHtcbiAgICAvLyB0aGVuOlxuXG4gICAgLy8gMS4gSWYgZmV0Y2hQYXJhbXMgaXMgY2FuY2VsZWQsIHRoZW4gcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSBuZXR3b3JrIGVycm9yIGZvciBmZXRjaFBhcmFtcy5cbiAgICBpZiAoaXNDYW5jZWxsZWQoZmV0Y2hQYXJhbXMpKSB7XG4gICAgICByZXR1cm4gbWFrZUFwcHJvcHJpYXRlTmV0d29ya0Vycm9yKGZldGNoUGFyYW1zKVxuICAgIH1cblxuICAgIC8vIDIuIFNldCByZXNwb25zZSB0byB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgSFRUUC1uZXR3b3JrLW9yLWNhY2hlXG4gICAgLy8gZmV0Y2ggZ2l2ZW4gZmV0Y2hQYXJhbXMsIGlzQXV0aGVudGljYXRpb25GZXRjaCwgYW5kIHRydWUuXG5cbiAgICAvLyBUT0RPIChzcGVjKTogVGhlIHNwZWMgZG9lc24ndCBzcGVjaWZ5IHRoaXMgYnV0IHdlIG5lZWQgdG8gY2FuY2VsXG4gICAgLy8gdGhlIGFjdGl2ZSByZXNwb25zZSBiZWZvcmUgd2UgY2FuIHN0YXJ0IGEgbmV3IG9uZS5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2ZldGNoL2lzc3Vlcy8xMjkzXG4gICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5jb25uZWN0aW9uLmRlc3Ryb3koKVxuXG4gICAgcmVzcG9uc2UgPSBhd2FpdCBodHRwTmV0d29ya09yQ2FjaGVGZXRjaChcbiAgICAgIGZldGNoUGFyYW1zLFxuICAgICAgaXNBdXRoZW50aWNhdGlvbkZldGNoLFxuICAgICAgdHJ1ZVxuICAgIClcbiAgfVxuXG4gIC8vIDE3LiBJZiBpc0F1dGhlbnRpY2F0aW9uRmV0Y2ggaXMgdHJ1ZSwgdGhlbiBjcmVhdGUgYW4gYXV0aGVudGljYXRpb24gZW50cnlcbiAgaWYgKGlzQXV0aGVudGljYXRpb25GZXRjaCkge1xuICAgIC8vIFRPRE9cbiAgfVxuXG4gIC8vIDE4LiBSZXR1cm4gcmVzcG9uc2UuXG4gIHJldHVybiByZXNwb25zZVxufVxuXG4vLyBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jaHR0cC1uZXR3b3JrLWZldGNoXG5hc3luYyBmdW5jdGlvbiBodHRwTmV0d29ya0ZldGNoIChcbiAgZmV0Y2hQYXJhbXMsXG4gIGluY2x1ZGVDcmVkZW50aWFscyA9IGZhbHNlLFxuICBmb3JjZU5ld0Nvbm5lY3Rpb24gPSBmYWxzZVxuKSB7XG4gIGFzc2VydCghZmV0Y2hQYXJhbXMuY29udHJvbGxlci5jb25uZWN0aW9uIHx8IGZldGNoUGFyYW1zLmNvbnRyb2xsZXIuY29ubmVjdGlvbi5kZXN0cm95ZWQpXG5cbiAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5jb25uZWN0aW9uID0ge1xuICAgIGFib3J0OiBudWxsLFxuICAgIGRlc3Ryb3llZDogZmFsc2UsXG4gICAgZGVzdHJveSAoZXJyLCBhYm9ydCA9IHRydWUpIHtcbiAgICAgIGlmICghdGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlXG4gICAgICAgIGlmIChhYm9ydCkge1xuICAgICAgICAgIHRoaXMuYWJvcnQ/LihlcnIgPz8gbmV3IERPTUV4Y2VwdGlvbignVGhlIG9wZXJhdGlvbiB3YXMgYWJvcnRlZC4nLCAnQWJvcnRFcnJvcicpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gMS4gTGV0IHJlcXVlc3QgYmUgZmV0Y2hQYXJhbXPigJlzIHJlcXVlc3QuXG4gIGNvbnN0IHJlcXVlc3QgPSBmZXRjaFBhcmFtcy5yZXF1ZXN0XG5cbiAgLy8gMi4gTGV0IHJlc3BvbnNlIGJlIG51bGwuXG4gIGxldCByZXNwb25zZSA9IG51bGxcblxuICAvLyAzLiBMZXQgdGltaW5nSW5mbyBiZSBmZXRjaFBhcmFtc+KAmXMgdGltaW5nIGluZm8uXG4gIGNvbnN0IHRpbWluZ0luZm8gPSBmZXRjaFBhcmFtcy50aW1pbmdJbmZvXG5cbiAgLy8gNC4gTGV0IGh0dHBDYWNoZSBiZSB0aGUgcmVzdWx0IG9mIGRldGVybWluaW5nIHRoZSBIVFRQIGNhY2hlIHBhcnRpdGlvbixcbiAgLy8gZ2l2ZW4gcmVxdWVzdC5cbiAgLy8gVE9ETzogY2FjaGVcbiAgY29uc3QgaHR0cENhY2hlID0gbnVsbFxuXG4gIC8vIDUuIElmIGh0dHBDYWNoZSBpcyBudWxsLCB0aGVuIHNldCByZXF1ZXN04oCZcyBjYWNoZSBtb2RlIHRvIFwibm8tc3RvcmVcIi5cbiAgaWYgKGh0dHBDYWNoZSA9PSBudWxsKSB7XG4gICAgcmVxdWVzdC5jYWNoZSA9ICduby1zdG9yZSdcbiAgfVxuXG4gIC8vIDYuIExldCBuZXR3b3JrUGFydGl0aW9uS2V5IGJlIHRoZSByZXN1bHQgb2YgZGV0ZXJtaW5pbmcgdGhlIG5ldHdvcmtcbiAgLy8gcGFydGl0aW9uIGtleSBnaXZlbiByZXF1ZXN0LlxuICAvLyBUT0RPXG5cbiAgLy8gNy4gTGV0IG5ld0Nvbm5lY3Rpb24gYmUgXCJ5ZXNcIiBpZiBmb3JjZU5ld0Nvbm5lY3Rpb24gaXMgdHJ1ZTsgb3RoZXJ3aXNlXG4gIC8vIFwibm9cIi5cbiAgY29uc3QgbmV3Q29ubmVjdGlvbiA9IGZvcmNlTmV3Q29ubmVjdGlvbiA/ICd5ZXMnIDogJ25vJyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgLy8gOC4gU3dpdGNoIG9uIHJlcXVlc3TigJlzIG1vZGU6XG4gIGlmIChyZXF1ZXN0Lm1vZGUgPT09ICd3ZWJzb2NrZXQnKSB7XG4gICAgLy8gTGV0IGNvbm5lY3Rpb24gYmUgdGhlIHJlc3VsdCBvZiBvYnRhaW5pbmcgYSBXZWJTb2NrZXQgY29ubmVjdGlvbixcbiAgICAvLyBnaXZlbiByZXF1ZXN04oCZcyBjdXJyZW50IFVSTC5cbiAgICAvLyBUT0RPXG4gIH0gZWxzZSB7XG4gICAgLy8gTGV0IGNvbm5lY3Rpb24gYmUgdGhlIHJlc3VsdCBvZiBvYnRhaW5pbmcgYSBjb25uZWN0aW9uLCBnaXZlblxuICAgIC8vIG5ldHdvcmtQYXJ0aXRpb25LZXksIHJlcXVlc3TigJlzIGN1cnJlbnQgVVJM4oCZcyBvcmlnaW4sXG4gICAgLy8gaW5jbHVkZUNyZWRlbnRpYWxzLCBhbmQgZm9yY2VOZXdDb25uZWN0aW9uLlxuICAgIC8vIFRPRE9cbiAgfVxuXG4gIC8vIDkuIFJ1biB0aGVzZSBzdGVwcywgYnV0IGFib3J0IHdoZW4gdGhlIG9uZ29pbmcgZmV0Y2ggaXMgdGVybWluYXRlZDpcblxuICAvLyAgICAxLiBJZiBjb25uZWN0aW9uIGlzIGZhaWx1cmUsIHRoZW4gcmV0dXJuIGEgbmV0d29yayBlcnJvci5cblxuICAvLyAgICAyLiBTZXQgdGltaW5nSW5mb+KAmXMgZmluYWwgY29ubmVjdGlvbiB0aW1pbmcgaW5mbyB0byB0aGUgcmVzdWx0IG9mXG4gIC8vICAgIGNhbGxpbmcgY2xhbXAgYW5kIGNvYXJzZW4gY29ubmVjdGlvbiB0aW1pbmcgaW5mbyB3aXRoIGNvbm5lY3Rpb27igJlzXG4gIC8vICAgIHRpbWluZyBpbmZvLCB0aW1pbmdJbmZv4oCZcyBwb3N0LXJlZGlyZWN0IHN0YXJ0IHRpbWUsIGFuZCBmZXRjaFBhcmFtc+KAmXNcbiAgLy8gICAgY3Jvc3Mtb3JpZ2luIGlzb2xhdGVkIGNhcGFiaWxpdHkuXG5cbiAgLy8gICAgMy4gSWYgY29ubmVjdGlvbiBpcyBub3QgYW4gSFRUUC8yIGNvbm5lY3Rpb24sIHJlcXVlc3TigJlzIGJvZHkgaXMgbm9uLW51bGwsXG4gIC8vICAgIGFuZCByZXF1ZXN04oCZcyBib2R54oCZcyBzb3VyY2UgaXMgbnVsbCwgdGhlbiBhcHBlbmQgKGBUcmFuc2Zlci1FbmNvZGluZ2AsXG4gIC8vICAgIGBjaHVua2VkYCkgdG8gcmVxdWVzdOKAmXMgaGVhZGVyIGxpc3QuXG5cbiAgLy8gICAgNC4gU2V0IHRpbWluZ0luZm/igJlzIGZpbmFsIG5ldHdvcmstcmVxdWVzdCBzdGFydCB0aW1lIHRvIHRoZSBjb2Fyc2VuZWRcbiAgLy8gICAgc2hhcmVkIGN1cnJlbnQgdGltZSBnaXZlbiBmZXRjaFBhcmFtc+KAmXMgY3Jvc3Mtb3JpZ2luIGlzb2xhdGVkXG4gIC8vICAgIGNhcGFiaWxpdHkuXG5cbiAgLy8gICAgNS4gU2V0IHJlc3BvbnNlIHRvIHRoZSByZXN1bHQgb2YgbWFraW5nIGFuIEhUVFAgcmVxdWVzdCBvdmVyIGNvbm5lY3Rpb25cbiAgLy8gICAgdXNpbmcgcmVxdWVzdCB3aXRoIHRoZSBmb2xsb3dpbmcgY2F2ZWF0czpcblxuICAvLyAgICAgICAgLSBGb2xsb3cgdGhlIHJlbGV2YW50IHJlcXVpcmVtZW50cyBmcm9tIEhUVFAuIFtIVFRQXSBbSFRUUC1TRU1BTlRJQ1NdXG4gIC8vICAgICAgICBbSFRUUC1DT05EXSBbSFRUUC1DQUNISU5HXSBbSFRUUC1BVVRIXVxuXG4gIC8vICAgICAgICAtIElmIHJlcXVlc3TigJlzIGJvZHkgaXMgbm9uLW51bGwsIGFuZCByZXF1ZXN04oCZcyBib2R54oCZcyBzb3VyY2UgaXMgbnVsbCxcbiAgLy8gICAgICAgIHRoZW4gdGhlIHVzZXIgYWdlbnQgbWF5IGhhdmUgYSBidWZmZXIgb2YgdXAgdG8gNjQga2liaWJ5dGVzIGFuZCBzdG9yZVxuICAvLyAgICAgICAgYSBwYXJ0IG9mIHJlcXVlc3TigJlzIGJvZHkgaW4gdGhhdCBidWZmZXIuIElmIHRoZSB1c2VyIGFnZW50IHJlYWRzIGZyb21cbiAgLy8gICAgICAgIHJlcXVlc3TigJlzIGJvZHkgYmV5b25kIHRoYXQgYnVmZmVy4oCZcyBzaXplIGFuZCB0aGUgdXNlciBhZ2VudCBuZWVkcyB0b1xuICAvLyAgICAgICAgcmVzZW5kIHJlcXVlc3QsIHRoZW4gaW5zdGVhZCByZXR1cm4gYSBuZXR3b3JrIGVycm9yLlxuXG4gIC8vICAgICAgICAtIFNldCB0aW1pbmdJbmZv4oCZcyBmaW5hbCBuZXR3b3JrLXJlc3BvbnNlIHN0YXJ0IHRpbWUgdG8gdGhlIGNvYXJzZW5lZFxuICAvLyAgICAgICAgc2hhcmVkIGN1cnJlbnQgdGltZSBnaXZlbiBmZXRjaFBhcmFtc+KAmXMgY3Jvc3Mtb3JpZ2luIGlzb2xhdGVkIGNhcGFiaWxpdHksXG4gIC8vICAgICAgICBpbW1lZGlhdGVseSBhZnRlciB0aGUgdXNlciBhZ2VudOKAmXMgSFRUUCBwYXJzZXIgcmVjZWl2ZXMgdGhlIGZpcnN0IGJ5dGVcbiAgLy8gICAgICAgIG9mIHRoZSByZXNwb25zZSAoZS5nLiwgZnJhbWUgaGVhZGVyIGJ5dGVzIGZvciBIVFRQLzIgb3IgcmVzcG9uc2Ugc3RhdHVzXG4gIC8vICAgICAgICBsaW5lIGZvciBIVFRQLzEueCkuXG5cbiAgLy8gICAgICAgIC0gV2FpdCB1bnRpbCBhbGwgdGhlIGhlYWRlcnMgYXJlIHRyYW5zbWl0dGVkLlxuXG4gIC8vICAgICAgICAtIEFueSByZXNwb25zZXMgd2hvc2Ugc3RhdHVzIGlzIGluIHRoZSByYW5nZSAxMDAgdG8gMTk5LCBpbmNsdXNpdmUsXG4gIC8vICAgICAgICBhbmQgaXMgbm90IDEwMSwgYXJlIHRvIGJlIGlnbm9yZWQsIGV4Y2VwdCBmb3IgdGhlIHB1cnBvc2VzIG9mIHNldHRpbmdcbiAgLy8gICAgICAgIHRpbWluZ0luZm/igJlzIGZpbmFsIG5ldHdvcmstcmVzcG9uc2Ugc3RhcnQgdGltZSBhYm92ZS5cblxuICAvLyAgICAtIElmIHJlcXVlc3TigJlzIGhlYWRlciBsaXN0IGNvbnRhaW5zIGBUcmFuc2Zlci1FbmNvZGluZ2AvYGNodW5rZWRgIGFuZFxuICAvLyAgICByZXNwb25zZSBpcyB0cmFuc2ZlcnJlZCB2aWEgSFRUUC8xLjAgb3Igb2xkZXIsIHRoZW4gcmV0dXJuIGEgbmV0d29ya1xuICAvLyAgICBlcnJvci5cblxuICAvLyAgICAtIElmIHRoZSBIVFRQIHJlcXVlc3QgcmVzdWx0cyBpbiBhIFRMUyBjbGllbnQgY2VydGlmaWNhdGUgZGlhbG9nLCB0aGVuOlxuXG4gIC8vICAgICAgICAxLiBJZiByZXF1ZXN04oCZcyB3aW5kb3cgaXMgYW4gZW52aXJvbm1lbnQgc2V0dGluZ3Mgb2JqZWN0LCBtYWtlIHRoZVxuICAvLyAgICAgICAgZGlhbG9nIGF2YWlsYWJsZSBpbiByZXF1ZXN04oCZcyB3aW5kb3cuXG5cbiAgLy8gICAgICAgIDIuIE90aGVyd2lzZSwgcmV0dXJuIGEgbmV0d29yayBlcnJvci5cblxuICAvLyBUbyB0cmFuc21pdCByZXF1ZXN04oCZcyBib2R5IGJvZHksIHJ1biB0aGVzZSBzdGVwczpcbiAgbGV0IHJlcXVlc3RCb2R5ID0gbnVsbFxuICAvLyAxLiBJZiBib2R5IGlzIG51bGwgYW5kIGZldGNoUGFyYW1z4oCZcyBwcm9jZXNzIHJlcXVlc3QgZW5kLW9mLWJvZHkgaXNcbiAgLy8gbm9uLW51bGwsIHRoZW4gcXVldWUgYSBmZXRjaCB0YXNrIGdpdmVuIGZldGNoUGFyYW1z4oCZcyBwcm9jZXNzIHJlcXVlc3RcbiAgLy8gZW5kLW9mLWJvZHkgYW5kIGZldGNoUGFyYW1z4oCZcyB0YXNrIGRlc3RpbmF0aW9uLlxuICBpZiAocmVxdWVzdC5ib2R5ID09IG51bGwgJiYgZmV0Y2hQYXJhbXMucHJvY2Vzc1JlcXVlc3RFbmRPZkJvZHkpIHtcbiAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiBmZXRjaFBhcmFtcy5wcm9jZXNzUmVxdWVzdEVuZE9mQm9keSgpKVxuICB9IGVsc2UgaWYgKHJlcXVlc3QuYm9keSAhPSBudWxsKSB7XG4gICAgLy8gMi4gT3RoZXJ3aXNlLCBpZiBib2R5IGlzIG5vbi1udWxsOlxuXG4gICAgLy8gICAgMS4gTGV0IHByb2Nlc3NCb2R5Q2h1bmsgZ2l2ZW4gYnl0ZXMgYmUgdGhlc2Ugc3RlcHM6XG4gICAgY29uc3QgcHJvY2Vzc0JvZHlDaHVuayA9IGFzeW5jIGZ1bmN0aW9uICogKGJ5dGVzKSB7XG4gICAgICAvLyAxLiBJZiB0aGUgb25nb2luZyBmZXRjaCBpcyB0ZXJtaW5hdGVkLCB0aGVuIGFib3J0IHRoZXNlIHN0ZXBzLlxuICAgICAgaWYgKGlzQ2FuY2VsbGVkKGZldGNoUGFyYW1zKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gMi4gUnVuIHRoaXMgc3RlcCBpbiBwYXJhbGxlbDogdHJhbnNtaXQgYnl0ZXMuXG4gICAgICB5aWVsZCBieXRlc1xuXG4gICAgICAvLyAzLiBJZiBmZXRjaFBhcmFtc+KAmXMgcHJvY2VzcyByZXF1ZXN0IGJvZHkgaXMgbm9uLW51bGwsIHRoZW4gcnVuXG4gICAgICAvLyBmZXRjaFBhcmFtc+KAmXMgcHJvY2VzcyByZXF1ZXN0IGJvZHkgZ2l2ZW4gYnl0ZXPigJlzIGxlbmd0aC5cbiAgICAgIGZldGNoUGFyYW1zLnByb2Nlc3NSZXF1ZXN0Qm9keUNodW5rTGVuZ3RoPy4oYnl0ZXMuYnl0ZUxlbmd0aClcbiAgICB9XG5cbiAgICAvLyAyLiBMZXQgcHJvY2Vzc0VuZE9mQm9keSBiZSB0aGVzZSBzdGVwczpcbiAgICBjb25zdCBwcm9jZXNzRW5kT2ZCb2R5ID0gKCkgPT4ge1xuICAgICAgLy8gMS4gSWYgZmV0Y2hQYXJhbXMgaXMgY2FuY2VsZWQsIHRoZW4gYWJvcnQgdGhlc2Ugc3RlcHMuXG4gICAgICBpZiAoaXNDYW5jZWxsZWQoZmV0Y2hQYXJhbXMpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyAyLiBJZiBmZXRjaFBhcmFtc+KAmXMgcHJvY2VzcyByZXF1ZXN0IGVuZC1vZi1ib2R5IGlzIG5vbi1udWxsLFxuICAgICAgLy8gdGhlbiBydW4gZmV0Y2hQYXJhbXPigJlzIHByb2Nlc3MgcmVxdWVzdCBlbmQtb2YtYm9keS5cbiAgICAgIGlmIChmZXRjaFBhcmFtcy5wcm9jZXNzUmVxdWVzdEVuZE9mQm9keSkge1xuICAgICAgICBmZXRjaFBhcmFtcy5wcm9jZXNzUmVxdWVzdEVuZE9mQm9keSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gMy4gTGV0IHByb2Nlc3NCb2R5RXJyb3IgZ2l2ZW4gZSBiZSB0aGVzZSBzdGVwczpcbiAgICBjb25zdCBwcm9jZXNzQm9keUVycm9yID0gKGUpID0+IHtcbiAgICAgIC8vIDEuIElmIGZldGNoUGFyYW1zIGlzIGNhbmNlbGVkLCB0aGVuIGFib3J0IHRoZXNlIHN0ZXBzLlxuICAgICAgaWYgKGlzQ2FuY2VsbGVkKGZldGNoUGFyYW1zKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gMi4gSWYgZSBpcyBhbiBcIkFib3J0RXJyb3JcIiBET01FeGNlcHRpb24sIHRoZW4gYWJvcnQgZmV0Y2hQYXJhbXPigJlzIGNvbnRyb2xsZXIuXG4gICAgICBpZiAoZS5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5hYm9ydCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZXRjaFBhcmFtcy5jb250cm9sbGVyLnRlcm1pbmF0ZShlKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIDQuIEluY3JlbWVudGFsbHkgcmVhZCByZXF1ZXN04oCZcyBib2R5IGdpdmVuIHByb2Nlc3NCb2R5Q2h1bmssIHByb2Nlc3NFbmRPZkJvZHksXG4gICAgLy8gcHJvY2Vzc0JvZHlFcnJvciwgYW5kIGZldGNoUGFyYW1z4oCZcyB0YXNrIGRlc3RpbmF0aW9uLlxuICAgIHJlcXVlc3RCb2R5ID0gKGFzeW5jIGZ1bmN0aW9uICogKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBieXRlcyBvZiByZXF1ZXN0LmJvZHkuc3RyZWFtKSB7XG4gICAgICAgICAgeWllbGQgKiBwcm9jZXNzQm9keUNodW5rKGJ5dGVzKVxuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NFbmRPZkJvZHkoKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHByb2Nlc3NCb2R5RXJyb3IoZXJyKVxuICAgICAgfVxuICAgIH0pKClcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gc29ja2V0IGlzIG9ubHkgcHJvdmlkZWQgZm9yIHdlYnNvY2tldHNcbiAgICBjb25zdCB7IGJvZHksIHN0YXR1cywgc3RhdHVzVGV4dCwgaGVhZGVyc0xpc3QsIHNvY2tldCB9ID0gYXdhaXQgZGlzcGF0Y2goeyBib2R5OiByZXF1ZXN0Qm9keSB9KVxuXG4gICAgaWYgKHNvY2tldCkge1xuICAgICAgcmVzcG9uc2UgPSBtYWtlUmVzcG9uc2UoeyBzdGF0dXMsIHN0YXR1c1RleHQsIGhlYWRlcnNMaXN0LCBzb2NrZXQgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaXRlcmF0b3IgPSBib2R5W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpXG4gICAgICBmZXRjaFBhcmFtcy5jb250cm9sbGVyLm5leHQgPSAoKSA9PiBpdGVyYXRvci5uZXh0KClcblxuICAgICAgcmVzcG9uc2UgPSBtYWtlUmVzcG9uc2UoeyBzdGF0dXMsIHN0YXR1c1RleHQsIGhlYWRlcnNMaXN0IH0pXG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyAxMC4gSWYgYWJvcnRlZCwgdGhlbjpcbiAgICBpZiAoZXJyLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xuICAgICAgLy8gMS4gSWYgY29ubmVjdGlvbiB1c2VzIEhUVFAvMiwgdGhlbiB0cmFuc21pdCBhbiBSU1RfU1RSRUFNIGZyYW1lLlxuICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5jb25uZWN0aW9uLmRlc3Ryb3koKVxuXG4gICAgICAvLyAyLiBSZXR1cm4gdGhlIGFwcHJvcHJpYXRlIG5ldHdvcmsgZXJyb3IgZm9yIGZldGNoUGFyYW1zLlxuICAgICAgcmV0dXJuIG1ha2VBcHByb3ByaWF0ZU5ldHdvcmtFcnJvcihmZXRjaFBhcmFtcywgZXJyKVxuICAgIH1cblxuICAgIHJldHVybiBtYWtlTmV0d29ya0Vycm9yKGVycilcbiAgfVxuXG4gIC8vIDExLiBMZXQgcHVsbEFsZ29yaXRobSBiZSBhbiBhY3Rpb24gdGhhdCByZXN1bWVzIHRoZSBvbmdvaW5nIGZldGNoXG4gIC8vIGlmIGl0IGlzIHN1c3BlbmRlZC5cbiAgY29uc3QgcHVsbEFsZ29yaXRobSA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBmZXRjaFBhcmFtcy5jb250cm9sbGVyLnJlc3VtZSgpXG4gIH1cblxuICAvLyAxMi4gTGV0IGNhbmNlbEFsZ29yaXRobSBiZSBhbiBhbGdvcml0aG0gdGhhdCBhYm9ydHMgZmV0Y2hQYXJhbXPigJlzXG4gIC8vIGNvbnRyb2xsZXIgd2l0aCByZWFzb24sIGdpdmVuIHJlYXNvbi5cbiAgY29uc3QgY2FuY2VsQWxnb3JpdGhtID0gKHJlYXNvbikgPT4ge1xuICAgIC8vIElmIHRoZSBhYm9ydGVkIGZldGNoIHdhcyBhbHJlYWR5IHRlcm1pbmF0ZWQsIHRoZW4gd2UgZG8gbm90XG4gICAgLy8gbmVlZCB0byBkbyBhbnl0aGluZy5cbiAgICBpZiAoIWlzQ2FuY2VsbGVkKGZldGNoUGFyYW1zKSkge1xuICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5hYm9ydChyZWFzb24pXG4gICAgfVxuICB9XG5cbiAgLy8gMTMuIExldCBoaWdoV2F0ZXJNYXJrIGJlIGEgbm9uLW5lZ2F0aXZlLCBub24tTmFOIG51bWJlciwgY2hvc2VuIGJ5XG4gIC8vIHRoZSB1c2VyIGFnZW50LlxuICAvLyBUT0RPXG5cbiAgLy8gMTQuIExldCBzaXplQWxnb3JpdGhtIGJlIGFuIGFsZ29yaXRobSB0aGF0IGFjY2VwdHMgYSBjaHVuayBvYmplY3RcbiAgLy8gYW5kIHJldHVybnMgYSBub24tbmVnYXRpdmUsIG5vbi1OYU4sIG5vbi1pbmZpbml0ZSBudW1iZXIsIGNob3NlbiBieSB0aGUgdXNlciBhZ2VudC5cbiAgLy8gVE9ET1xuXG4gIC8vIDE1LiBMZXQgc3RyZWFtIGJlIGEgbmV3IFJlYWRhYmxlU3RyZWFtLlxuICAvLyAxNi4gU2V0IHVwIHN0cmVhbSB3aXRoIGJ5dGUgcmVhZGluZyBzdXBwb3J0IHdpdGggcHVsbEFsZ29yaXRobSBzZXQgdG8gcHVsbEFsZ29yaXRobSxcbiAgLy8gICAgIGNhbmNlbEFsZ29yaXRobSBzZXQgdG8gY2FuY2VsQWxnb3JpdGhtLlxuICBjb25zdCBzdHJlYW0gPSBuZXcgUmVhZGFibGVTdHJlYW0oXG4gICAge1xuICAgICAgYXN5bmMgc3RhcnQgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5jb250cm9sbGVyID0gY29udHJvbGxlclxuICAgICAgfSxcbiAgICAgIGFzeW5jIHB1bGwgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgYXdhaXQgcHVsbEFsZ29yaXRobShjb250cm9sbGVyKVxuICAgICAgfSxcbiAgICAgIGFzeW5jIGNhbmNlbCAocmVhc29uKSB7XG4gICAgICAgIGF3YWl0IGNhbmNlbEFsZ29yaXRobShyZWFzb24pXG4gICAgICB9LFxuICAgICAgdHlwZTogJ2J5dGVzJ1xuICAgIH1cbiAgKVxuXG4gIC8vIDE3LiBSdW4gdGhlc2Ugc3RlcHMsIGJ1dCBhYm9ydCB3aGVuIHRoZSBvbmdvaW5nIGZldGNoIGlzIHRlcm1pbmF0ZWQ6XG5cbiAgLy8gICAgMS4gU2V0IHJlc3BvbnNl4oCZcyBib2R5IHRvIGEgbmV3IGJvZHkgd2hvc2Ugc3RyZWFtIGlzIHN0cmVhbS5cbiAgcmVzcG9uc2UuYm9keSA9IHsgc3RyZWFtLCBzb3VyY2U6IG51bGwsIGxlbmd0aDogbnVsbCB9XG5cbiAgLy8gICAgMi4gSWYgcmVzcG9uc2UgaXMgbm90IGEgbmV0d29yayBlcnJvciBhbmQgcmVxdWVzdOKAmXMgY2FjaGUgbW9kZSBpc1xuICAvLyAgICBub3QgXCJuby1zdG9yZVwiLCB0aGVuIHVwZGF0ZSByZXNwb25zZSBpbiBodHRwQ2FjaGUgZm9yIHJlcXVlc3QuXG4gIC8vICAgIFRPRE9cblxuICAvLyAgICAzLiBJZiBpbmNsdWRlQ3JlZGVudGlhbHMgaXMgdHJ1ZSBhbmQgdGhlIHVzZXIgYWdlbnQgaXMgbm90IGNvbmZpZ3VyZWRcbiAgLy8gICAgdG8gYmxvY2sgY29va2llcyBmb3IgcmVxdWVzdCAoc2VlIHNlY3Rpb24gNyBvZiBbQ09PS0lFU10pLCB0aGVuIHJ1biB0aGVcbiAgLy8gICAgXCJzZXQtY29va2llLXN0cmluZ1wiIHBhcnNpbmcgYWxnb3JpdGhtIChzZWUgc2VjdGlvbiA1LjIgb2YgW0NPT0tJRVNdKSBvblxuICAvLyAgICB0aGUgdmFsdWUgb2YgZWFjaCBoZWFkZXIgd2hvc2UgbmFtZSBpcyBhIGJ5dGUtY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaCBmb3JcbiAgLy8gICAgYFNldC1Db29raWVgIGluIHJlc3BvbnNl4oCZcyBoZWFkZXIgbGlzdCwgaWYgYW55LCBhbmQgcmVxdWVzdOKAmXMgY3VycmVudCBVUkwuXG4gIC8vICAgIFRPRE9cblxuICAvLyAxOC4gSWYgYWJvcnRlZCwgdGhlbjpcbiAgLy8gVE9ET1xuXG4gIC8vIDE5LiBSdW4gdGhlc2Ugc3RlcHMgaW4gcGFyYWxsZWw6XG5cbiAgLy8gICAgMS4gUnVuIHRoZXNlIHN0ZXBzLCBidXQgYWJvcnQgd2hlbiBmZXRjaFBhcmFtcyBpcyBjYW5jZWxlZDpcbiAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5vbkFib3J0ZWQgPSBvbkFib3J0ZWRcbiAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5vbigndGVybWluYXRlZCcsIG9uQWJvcnRlZClcbiAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5yZXN1bWUgPSBhc3luYyAoKSA9PiB7XG4gICAgLy8gMS4gV2hpbGUgdHJ1ZVxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAvLyAxLTMuIFNlZSBvbkRhdGEuLi5cblxuICAgICAgLy8gNC4gU2V0IGJ5dGVzIHRvIHRoZSByZXN1bHQgb2YgaGFuZGxpbmcgY29udGVudCBjb2RpbmdzIGdpdmVuXG4gICAgICAvLyBjb2RpbmdzIGFuZCBieXRlcy5cbiAgICAgIGxldCBieXRlc1xuICAgICAgbGV0IGlzRmFpbHVyZVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5uZXh0KClcblxuICAgICAgICBpZiAoaXNBYm9ydGVkKGZldGNoUGFyYW1zKSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBieXRlcyA9IGRvbmUgPyB1bmRlZmluZWQgOiB2YWx1ZVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChmZXRjaFBhcmFtcy5jb250cm9sbGVyLmVuZGVkICYmICF0aW1pbmdJbmZvLmVuY29kZWRCb2R5U2l6ZSkge1xuICAgICAgICAgIC8vIHpsaWIgZG9lc24ndCBsaWtlIGVtcHR5IHN0cmVhbXMuXG4gICAgICAgICAgYnl0ZXMgPSB1bmRlZmluZWRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBieXRlcyA9IGVyclxuXG4gICAgICAgICAgLy8gZXJyIG1heSBiZSBwcm9wYWdhdGVkIGZyb20gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHJlYWRhYmxlc3RyZWFtLmNhbmNlbCxcbiAgICAgICAgICAvLyB3aGljaCBtaWdodCBub3QgYmUgYW4gZXJyb3IuIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvdW5kaWNpL2lzc3Vlcy8yMDA5XG4gICAgICAgICAgaXNGYWlsdXJlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChieXRlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIDIuIE90aGVyd2lzZSwgaWYgdGhlIGJ5dGVzIHRyYW5zbWlzc2lvbiBmb3IgcmVzcG9uc2XigJlzIG1lc3NhZ2VcbiAgICAgICAgLy8gYm9keSBpcyBkb25lIG5vcm1hbGx5IGFuZCBzdHJlYW0gaXMgcmVhZGFibGUsIHRoZW4gY2xvc2VcbiAgICAgICAgLy8gc3RyZWFtLCBmaW5hbGl6ZSByZXNwb25zZSBmb3IgZmV0Y2hQYXJhbXMgYW5kIHJlc3BvbnNlLCBhbmRcbiAgICAgICAgLy8gYWJvcnQgdGhlc2UgaW4tcGFyYWxsZWwgc3RlcHMuXG4gICAgICAgIHJlYWRhYmxlU3RyZWFtQ2xvc2UoZmV0Y2hQYXJhbXMuY29udHJvbGxlci5jb250cm9sbGVyKVxuXG4gICAgICAgIGZpbmFsaXplUmVzcG9uc2UoZmV0Y2hQYXJhbXMsIHJlc3BvbnNlKVxuXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyA1LiBJbmNyZWFzZSB0aW1pbmdJbmZv4oCZcyBkZWNvZGVkIGJvZHkgc2l6ZSBieSBieXRlc+KAmXMgbGVuZ3RoLlxuICAgICAgdGltaW5nSW5mby5kZWNvZGVkQm9keVNpemUgKz0gYnl0ZXM/LmJ5dGVMZW5ndGggPz8gMFxuXG4gICAgICAvLyA2LiBJZiBieXRlcyBpcyBmYWlsdXJlLCB0aGVuIHRlcm1pbmF0ZSBmZXRjaFBhcmFtc+KAmXMgY29udHJvbGxlci5cbiAgICAgIGlmIChpc0ZhaWx1cmUpIHtcbiAgICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci50ZXJtaW5hdGUoYnl0ZXMpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyA3LiBFbnF1ZXVlIGEgVWludDhBcnJheSB3cmFwcGluZyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIGJ5dGVzXG4gICAgICAvLyBpbnRvIHN0cmVhbS5cbiAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJ5dGVzKVxuICAgICAgaWYgKGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIGZldGNoUGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbGxlci5lbnF1ZXVlKGJ1ZmZlcilcbiAgICAgIH1cblxuICAgICAgLy8gOC4gSWYgc3RyZWFtIGlzIGVycm9yZWQsIHRoZW4gdGVybWluYXRlIHRoZSBvbmdvaW5nIGZldGNoLlxuICAgICAgaWYgKGlzRXJyb3JlZChzdHJlYW0pKSB7XG4gICAgICAgIGZldGNoUGFyYW1zLmNvbnRyb2xsZXIudGVybWluYXRlKClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIDkuIElmIHN0cmVhbSBkb2VzbuKAmXQgbmVlZCBtb3JlIGRhdGEgYXNrIHRoZSB1c2VyIGFnZW50IHRvIHN1c3BlbmRcbiAgICAgIC8vIHRoZSBvbmdvaW5nIGZldGNoLlxuICAgICAgaWYgKGZldGNoUGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbGxlci5kZXNpcmVkU2l6ZSA8PSAwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vICAgIDIuIElmIGFib3J0ZWQsIHRoZW46XG4gIGZ1bmN0aW9uIG9uQWJvcnRlZCAocmVhc29uKSB7XG4gICAgLy8gMi4gSWYgZmV0Y2hQYXJhbXMgaXMgYWJvcnRlZCwgdGhlbjpcbiAgICBpZiAoaXNBYm9ydGVkKGZldGNoUGFyYW1zKSkge1xuICAgICAgLy8gMS4gU2V0IHJlc3BvbnNl4oCZcyBhYm9ydGVkIGZsYWcuXG4gICAgICByZXNwb25zZS5hYm9ydGVkID0gdHJ1ZVxuXG4gICAgICAvLyAyLiBJZiBzdHJlYW0gaXMgcmVhZGFibGUsIHRoZW4gZXJyb3Igc3RyZWFtIHdpdGggdGhlIHJlc3VsdCBvZlxuICAgICAgLy8gICAgZGVzZXJpYWxpemUgYSBzZXJpYWxpemVkIGFib3J0IHJlYXNvbiBnaXZlbiBmZXRjaFBhcmFtc+KAmXNcbiAgICAgIC8vICAgIGNvbnRyb2xsZXLigJlzIHNlcmlhbGl6ZWQgYWJvcnQgcmVhc29uIGFuZCBhblxuICAgICAgLy8gICAgaW1wbGVtZW50YXRpb24tZGVmaW5lZCByZWFsbS5cbiAgICAgIGlmIChpc1JlYWRhYmxlKHN0cmVhbSkpIHtcbiAgICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5jb250cm9sbGVyLmVycm9yKFxuICAgICAgICAgIGZldGNoUGFyYW1zLmNvbnRyb2xsZXIuc2VyaWFsaXplZEFib3J0UmVhc29uXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gMy4gT3RoZXJ3aXNlLCBpZiBzdHJlYW0gaXMgcmVhZGFibGUsIGVycm9yIHN0cmVhbSB3aXRoIGEgVHlwZUVycm9yLlxuICAgICAgaWYgKGlzUmVhZGFibGUoc3RyZWFtKSkge1xuICAgICAgICBmZXRjaFBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2xsZXIuZXJyb3IobmV3IFR5cGVFcnJvcigndGVybWluYXRlZCcsIHtcbiAgICAgICAgICBjYXVzZTogaXNFcnJvckxpa2UocmVhc29uKSA/IHJlYXNvbiA6IHVuZGVmaW5lZFxuICAgICAgICB9KSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyA0LiBJZiBjb25uZWN0aW9uIHVzZXMgSFRUUC8yLCB0aGVuIHRyYW5zbWl0IGFuIFJTVF9TVFJFQU0gZnJhbWUuXG4gICAgLy8gNS4gT3RoZXJ3aXNlLCB0aGUgdXNlciBhZ2VudCBzaG91bGQgY2xvc2UgY29ubmVjdGlvbiB1bmxlc3MgaXQgd291bGQgYmUgYmFkIGZvciBwZXJmb3JtYW5jZSB0byBkbyBzby5cbiAgICBmZXRjaFBhcmFtcy5jb250cm9sbGVyLmNvbm5lY3Rpb24uZGVzdHJveSgpXG4gIH1cblxuICAvLyAyMC4gUmV0dXJuIHJlc3BvbnNlLlxuICByZXR1cm4gcmVzcG9uc2VcblxuICBmdW5jdGlvbiBkaXNwYXRjaCAoeyBib2R5IH0pIHtcbiAgICBjb25zdCB1cmwgPSByZXF1ZXN0Q3VycmVudFVSTChyZXF1ZXN0KVxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuLi8uLicpLkFnZW50fSAqL1xuICAgIGNvbnN0IGFnZW50ID0gZmV0Y2hQYXJhbXMuY29udHJvbGxlci5kaXNwYXRjaGVyXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gYWdlbnQuZGlzcGF0Y2goXG4gICAgICB7XG4gICAgICAgIHBhdGg6IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2gsXG4gICAgICAgIG9yaWdpbjogdXJsLm9yaWdpbixcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgYm9keTogYWdlbnQuaXNNb2NrQWN0aXZlID8gcmVxdWVzdC5ib2R5ICYmIChyZXF1ZXN0LmJvZHkuc291cmNlIHx8IHJlcXVlc3QuYm9keS5zdHJlYW0pIDogYm9keSxcbiAgICAgICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXJzTGlzdC5lbnRyaWVzLFxuICAgICAgICBtYXhSZWRpcmVjdGlvbnM6IDAsXG4gICAgICAgIHVwZ3JhZGU6IHJlcXVlc3QubW9kZSA9PT0gJ3dlYnNvY2tldCcgPyAnd2Vic29ja2V0JyA6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYm9keTogbnVsbCxcbiAgICAgICAgYWJvcnQ6IG51bGwsXG5cbiAgICAgICAgb25Db25uZWN0IChhYm9ydCkge1xuICAgICAgICAgIC8vIFRPRE8gKGZpeCk6IERvIHdlIG5lZWQgY29ubmVjdGlvbiBoZXJlP1xuICAgICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiB9ID0gZmV0Y2hQYXJhbXMuY29udHJvbGxlclxuXG4gICAgICAgICAgLy8gU2V0IHRpbWluZ0luZm/igJlzIGZpbmFsIGNvbm5lY3Rpb24gdGltaW5nIGluZm8gdG8gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIGNsYW1wIGFuZCBjb2Fyc2VuXG4gICAgICAgICAgLy8gY29ubmVjdGlvbiB0aW1pbmcgaW5mbyB3aXRoIGNvbm5lY3Rpb27igJlzIHRpbWluZyBpbmZvLCB0aW1pbmdJbmZv4oCZcyBwb3N0LXJlZGlyZWN0IHN0YXJ0XG4gICAgICAgICAgLy8gdGltZSwgYW5kIGZldGNoUGFyYW1z4oCZcyBjcm9zcy1vcmlnaW4gaXNvbGF0ZWQgY2FwYWJpbGl0eS5cbiAgICAgICAgICAvLyBUT0RPOiBpbXBsZW1lbnQgY29ubmVjdGlvbiB0aW1pbmdcbiAgICAgICAgICB0aW1pbmdJbmZvLmZpbmFsQ29ubmVjdGlvblRpbWluZ0luZm8gPSBjbGFtcEFuZENvYXJzZW5Db25uZWN0aW9uVGltaW5nSW5mbyh1bmRlZmluZWQsIHRpbWluZ0luZm8ucG9zdFJlZGlyZWN0U3RhcnRUaW1lLCBmZXRjaFBhcmFtcy5jcm9zc09yaWdpbklzb2xhdGVkQ2FwYWJpbGl0eSlcblxuICAgICAgICAgIGlmIChjb25uZWN0aW9uLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgYWJvcnQobmV3IERPTUV4Y2VwdGlvbignVGhlIG9wZXJhdGlvbiB3YXMgYWJvcnRlZC4nLCAnQWJvcnRFcnJvcicpKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmZXRjaFBhcmFtcy5jb250cm9sbGVyLm9uKCd0ZXJtaW5hdGVkJywgYWJvcnQpXG4gICAgICAgICAgICB0aGlzLmFib3J0ID0gY29ubmVjdGlvbi5hYm9ydCA9IGFib3J0XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2V0IHRpbWluZ0luZm/igJlzIGZpbmFsIG5ldHdvcmstcmVxdWVzdCBzdGFydCB0aW1lIHRvIHRoZSBjb2Fyc2VuZWQgc2hhcmVkIGN1cnJlbnQgdGltZSBnaXZlblxuICAgICAgICAgIC8vIGZldGNoUGFyYW1z4oCZcyBjcm9zcy1vcmlnaW4gaXNvbGF0ZWQgY2FwYWJpbGl0eS5cbiAgICAgICAgICB0aW1pbmdJbmZvLmZpbmFsTmV0d29ya1JlcXVlc3RTdGFydFRpbWUgPSBjb2Fyc2VuZWRTaGFyZWRDdXJyZW50VGltZShmZXRjaFBhcmFtcy5jcm9zc09yaWdpbklzb2xhdGVkQ2FwYWJpbGl0eSlcbiAgICAgICAgfSxcblxuICAgICAgICBvblJlc3BvbnNlU3RhcnRlZCAoKSB7XG4gICAgICAgICAgLy8gU2V0IHRpbWluZ0luZm/igJlzIGZpbmFsIG5ldHdvcmstcmVzcG9uc2Ugc3RhcnQgdGltZSB0byB0aGUgY29hcnNlbmVkIHNoYXJlZCBjdXJyZW50XG4gICAgICAgICAgLy8gdGltZSBnaXZlbiBmZXRjaFBhcmFtc+KAmXMgY3Jvc3Mtb3JpZ2luIGlzb2xhdGVkIGNhcGFiaWxpdHksIGltbWVkaWF0ZWx5IGFmdGVyIHRoZVxuICAgICAgICAgIC8vIHVzZXIgYWdlbnTigJlzIEhUVFAgcGFyc2VyIHJlY2VpdmVzIHRoZSBmaXJzdCBieXRlIG9mIHRoZSByZXNwb25zZSAoZS5nLiwgZnJhbWUgaGVhZGVyXG4gICAgICAgICAgLy8gYnl0ZXMgZm9yIEhUVFAvMiBvciByZXNwb25zZSBzdGF0dXMgbGluZSBmb3IgSFRUUC8xLngpLlxuICAgICAgICAgIHRpbWluZ0luZm8uZmluYWxOZXR3b3JrUmVzcG9uc2VTdGFydFRpbWUgPSBjb2Fyc2VuZWRTaGFyZWRDdXJyZW50VGltZShmZXRjaFBhcmFtcy5jcm9zc09yaWdpbklzb2xhdGVkQ2FwYWJpbGl0eSlcbiAgICAgICAgfSxcblxuICAgICAgICBvbkhlYWRlcnMgKHN0YXR1cywgcmF3SGVhZGVycywgcmVzdW1lLCBzdGF0dXNUZXh0KSB7XG4gICAgICAgICAgaWYgKHN0YXR1cyA8IDIwMCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmdbXX0gKi9cbiAgICAgICAgICBsZXQgY29kaW5ncyA9IFtdXG4gICAgICAgICAgbGV0IGxvY2F0aW9uID0gJydcblxuICAgICAgICAgIGNvbnN0IGhlYWRlcnNMaXN0ID0gbmV3IEhlYWRlcnNMaXN0KClcblxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3SGVhZGVycy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgaGVhZGVyc0xpc3QuYXBwZW5kKGJ1ZmZlclRvTG93ZXJDYXNlZEhlYWRlck5hbWUocmF3SGVhZGVyc1tpXSksIHJhd0hlYWRlcnNbaSArIDFdLnRvU3RyaW5nKCdsYXRpbjEnKSwgdHJ1ZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgY29udGVudEVuY29kaW5nID0gaGVhZGVyc0xpc3QuZ2V0KCdjb250ZW50LWVuY29kaW5nJywgdHJ1ZSlcbiAgICAgICAgICBpZiAoY29udGVudEVuY29kaW5nKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNzIzMSNzZWN0aW9uLTMuMS4yLjFcbiAgICAgICAgICAgIC8vIFwiQWxsIGNvbnRlbnQtY29kaW5nIHZhbHVlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZS4uLlwiXG4gICAgICAgICAgICBjb2RpbmdzID0gY29udGVudEVuY29kaW5nLnRvTG93ZXJDYXNlKCkuc3BsaXQoJywnKS5tYXAoKHgpID0+IHgudHJpbSgpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBsb2NhdGlvbiA9IGhlYWRlcnNMaXN0LmdldCgnbG9jYXRpb24nLCB0cnVlKVxuXG4gICAgICAgICAgdGhpcy5ib2R5ID0gbmV3IFJlYWRhYmxlKHsgcmVhZDogcmVzdW1lIH0pXG5cbiAgICAgICAgICBjb25zdCBkZWNvZGVycyA9IFtdXG5cbiAgICAgICAgICBjb25zdCB3aWxsRm9sbG93ID0gbG9jYXRpb24gJiYgcmVxdWVzdC5yZWRpcmVjdCA9PT0gJ2ZvbGxvdycgJiZcbiAgICAgICAgICAgIHJlZGlyZWN0U3RhdHVzU2V0LmhhcyhzdGF0dXMpXG5cbiAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQ29udGVudC1FbmNvZGluZ1xuICAgICAgICAgIGlmIChjb2RpbmdzLmxlbmd0aCAhPT0gMCAmJiByZXF1ZXN0Lm1ldGhvZCAhPT0gJ0hFQUQnICYmIHJlcXVlc3QubWV0aG9kICE9PSAnQ09OTkVDVCcgJiYgIW51bGxCb2R5U3RhdHVzLmluY2x1ZGVzKHN0YXR1cykgJiYgIXdpbGxGb2xsb3cpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29kaW5ncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjb25zdCBjb2RpbmcgPSBjb2RpbmdzW2ldXG4gICAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MTEyLmh0bWwjc2VjdGlvbi03LjJcbiAgICAgICAgICAgICAgaWYgKGNvZGluZyA9PT0gJ3gtZ3ppcCcgfHwgY29kaW5nID09PSAnZ3ppcCcpIHtcbiAgICAgICAgICAgICAgICBkZWNvZGVycy5wdXNoKHpsaWIuY3JlYXRlR3VuemlwKHtcbiAgICAgICAgICAgICAgICAgIC8vIEJlIGxlc3Mgc3RyaWN0IHdoZW4gZGVjb2RpbmcgY29tcHJlc3NlZCByZXNwb25zZXMsIHNpbmNlIHNvbWV0aW1lc1xuICAgICAgICAgICAgICAgICAgLy8gc2VydmVycyBzZW5kIHNsaWdodGx5IGludmFsaWQgcmVzcG9uc2VzIHRoYXQgYXJlIHN0aWxsIGFjY2VwdGVkXG4gICAgICAgICAgICAgICAgICAvLyBieSBjb21tb24gYnJvd3NlcnMuXG4gICAgICAgICAgICAgICAgICAvLyBBbHdheXMgdXNpbmcgWl9TWU5DX0ZMVVNIIGlzIHdoYXQgY1VSTCBkb2VzLlxuICAgICAgICAgICAgICAgICAgZmx1c2g6IHpsaWIuY29uc3RhbnRzLlpfU1lOQ19GTFVTSCxcbiAgICAgICAgICAgICAgICAgIGZpbmlzaEZsdXNoOiB6bGliLmNvbnN0YW50cy5aX1NZTkNfRkxVU0hcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RpbmcgPT09ICdkZWZsYXRlJykge1xuICAgICAgICAgICAgICAgIGRlY29kZXJzLnB1c2goY3JlYXRlSW5mbGF0ZSgpKVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGluZyA9PT0gJ2JyJykge1xuICAgICAgICAgICAgICAgIGRlY29kZXJzLnB1c2goemxpYi5jcmVhdGVCcm90bGlEZWNvbXByZXNzKCkpXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlcnMubGVuZ3RoID0gMFxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIHN0YXR1c1RleHQsXG4gICAgICAgICAgICBoZWFkZXJzTGlzdCxcbiAgICAgICAgICAgIGJvZHk6IGRlY29kZXJzLmxlbmd0aFxuICAgICAgICAgICAgICA/IHBpcGVsaW5lKHRoaXMuYm9keSwgLi4uZGVjb2RlcnMsICgpID0+IHsgfSlcbiAgICAgICAgICAgICAgOiB0aGlzLmJvZHkub24oJ2Vycm9yJywgKCkgPT4geyB9KVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIG9uRGF0YSAoY2h1bmspIHtcbiAgICAgICAgICBpZiAoZmV0Y2hQYXJhbXMuY29udHJvbGxlci5kdW1wKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyAxLiBJZiBvbmUgb3IgbW9yZSBieXRlcyBoYXZlIGJlZW4gdHJhbnNtaXR0ZWQgZnJvbSByZXNwb25zZeKAmXNcbiAgICAgICAgICAvLyBtZXNzYWdlIGJvZHksIHRoZW46XG5cbiAgICAgICAgICAvLyAgMS4gTGV0IGJ5dGVzIGJlIHRoZSB0cmFuc21pdHRlZCBieXRlcy5cbiAgICAgICAgICBjb25zdCBieXRlcyA9IGNodW5rXG5cbiAgICAgICAgICAvLyAgMi4gTGV0IGNvZGluZ3MgYmUgdGhlIHJlc3VsdCBvZiBleHRyYWN0aW5nIGhlYWRlciBsaXN0IHZhbHVlc1xuICAgICAgICAgIC8vICBnaXZlbiBgQ29udGVudC1FbmNvZGluZ2AgYW5kIHJlc3BvbnNl4oCZcyBoZWFkZXIgbGlzdC5cbiAgICAgICAgICAvLyAgU2VlIHB1bGxBbGdvcml0aG0uXG5cbiAgICAgICAgICAvLyAgMy4gSW5jcmVhc2UgdGltaW5nSW5mb+KAmXMgZW5jb2RlZCBib2R5IHNpemUgYnkgYnl0ZXPigJlzIGxlbmd0aC5cbiAgICAgICAgICB0aW1pbmdJbmZvLmVuY29kZWRCb2R5U2l6ZSArPSBieXRlcy5ieXRlTGVuZ3RoXG5cbiAgICAgICAgICAvLyAgNC4gU2VlIHB1bGxBbGdvcml0aG0uLi5cblxuICAgICAgICAgIHJldHVybiB0aGlzLmJvZHkucHVzaChieXRlcylcbiAgICAgICAgfSxcblxuICAgICAgICBvbkNvbXBsZXRlICgpIHtcbiAgICAgICAgICBpZiAodGhpcy5hYm9ydCkge1xuICAgICAgICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5vZmYoJ3Rlcm1pbmF0ZWQnLCB0aGlzLmFib3J0KVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmZXRjaFBhcmFtcy5jb250cm9sbGVyLm9uQWJvcnRlZCkge1xuICAgICAgICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci5vZmYoJ3Rlcm1pbmF0ZWQnLCBmZXRjaFBhcmFtcy5jb250cm9sbGVyLm9uQWJvcnRlZClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmZXRjaFBhcmFtcy5jb250cm9sbGVyLmVuZGVkID0gdHJ1ZVxuXG4gICAgICAgICAgdGhpcy5ib2R5LnB1c2gobnVsbClcbiAgICAgICAgfSxcblxuICAgICAgICBvbkVycm9yIChlcnJvcikge1xuICAgICAgICAgIGlmICh0aGlzLmFib3J0KSB7XG4gICAgICAgICAgICBmZXRjaFBhcmFtcy5jb250cm9sbGVyLm9mZigndGVybWluYXRlZCcsIHRoaXMuYWJvcnQpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5ib2R5Py5kZXN0cm95KGVycm9yKVxuXG4gICAgICAgICAgZmV0Y2hQYXJhbXMuY29udHJvbGxlci50ZXJtaW5hdGUoZXJyb3IpXG5cbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH0sXG5cbiAgICAgICAgb25VcGdyYWRlIChzdGF0dXMsIHJhd0hlYWRlcnMsIHNvY2tldCkge1xuICAgICAgICAgIGlmIChzdGF0dXMgIT09IDEwMSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgaGVhZGVyc0xpc3QgPSBuZXcgSGVhZGVyc0xpc3QoKVxuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXdIZWFkZXJzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICBoZWFkZXJzTGlzdC5hcHBlbmQoYnVmZmVyVG9Mb3dlckNhc2VkSGVhZGVyTmFtZShyYXdIZWFkZXJzW2ldKSwgcmF3SGVhZGVyc1tpICsgMV0udG9TdHJpbmcoJ2xhdGluMScpLCB0cnVlKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgc3RhdHVzVGV4dDogU1RBVFVTX0NPREVTW3N0YXR1c10sXG4gICAgICAgICAgICBoZWFkZXJzTGlzdCxcbiAgICAgICAgICAgIHNvY2tldFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgKSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmV0Y2gsXG4gIEZldGNoLFxuICBmZXRjaGluZyxcbiAgZmluYWxpemVBbmRSZXBvcnRUaW1pbmdcbn1cbiJdLCJuYW1lcyI6WyJtYWtlTmV0d29ya0Vycm9yIiwibWFrZUFwcHJvcHJpYXRlTmV0d29ya0Vycm9yIiwiZmlsdGVyUmVzcG9uc2UiLCJtYWtlUmVzcG9uc2UiLCJmcm9tSW5uZXJSZXNwb25zZSIsInJlcXVpcmUiLCJIZWFkZXJzTGlzdCIsIlJlcXVlc3QiLCJjbG9uZVJlcXVlc3QiLCJ6bGliIiwiYnl0ZXNNYXRjaCIsIm1ha2VQb2xpY3lDb250YWluZXIiLCJjbG9uZVBvbGljeUNvbnRhaW5lciIsInJlcXVlc3RCYWRQb3J0IiwiVEFPQ2hlY2siLCJhcHBlbmRSZXF1ZXN0T3JpZ2luSGVhZGVyIiwicmVzcG9uc2VMb2NhdGlvblVSTCIsInJlcXVlc3RDdXJyZW50VVJMIiwic2V0UmVxdWVzdFJlZmVycmVyUG9saWN5T25SZWRpcmVjdCIsInRyeVVwZ3JhZGVSZXF1ZXN0VG9BUG90ZW50aWFsbHlUcnVzdHdvcnRoeVVSTCIsImNyZWF0ZU9wYXF1ZVRpbWluZ0luZm8iLCJhcHBlbmRGZXRjaE1ldGFkYXRhIiwiY29yc0NoZWNrIiwiY3Jvc3NPcmlnaW5SZXNvdXJjZVBvbGljeUNoZWNrIiwiZGV0ZXJtaW5lUmVxdWVzdHNSZWZlcnJlciIsImNvYXJzZW5lZFNoYXJlZEN1cnJlbnRUaW1lIiwiY3JlYXRlRGVmZXJyZWRQcm9taXNlIiwiaXNCbG9iTGlrZSIsInNhbWVPcmlnaW4iLCJpc0NhbmNlbGxlZCIsImlzQWJvcnRlZCIsImlzRXJyb3JMaWtlIiwiZnVsbHlSZWFkQm9keSIsInJlYWRhYmxlU3RyZWFtQ2xvc2UiLCJpc29tb3JwaGljRW5jb2RlIiwidXJsSXNMb2NhbCIsInVybElzSHR0cEh0dHBzU2NoZW1lIiwidXJsSGFzSHR0cHNTY2hlbWUiLCJjbGFtcEFuZENvYXJzZW5Db25uZWN0aW9uVGltaW5nSW5mbyIsInNpbXBsZVJhbmdlSGVhZGVyVmFsdWUiLCJidWlsZENvbnRlbnRSYW5nZSIsImNyZWF0ZUluZmxhdGUiLCJleHRyYWN0TWltZVR5cGUiLCJrU3RhdGUiLCJrRGlzcGF0Y2hlciIsImFzc2VydCIsInNhZmVseUV4dHJhY3RCb2R5IiwiZXh0cmFjdEJvZHkiLCJyZWRpcmVjdFN0YXR1c1NldCIsIm51bGxCb2R5U3RhdHVzIiwic2FmZU1ldGhvZHNTZXQiLCJyZXF1ZXN0Qm9keUhlYWRlciIsInN1YnJlc291cmNlU2V0IiwiRUUiLCJSZWFkYWJsZSIsInBpcGVsaW5lIiwiZmluaXNoZWQiLCJhZGRBYm9ydExpc3RlbmVyIiwiaXNFcnJvcmVkIiwiaXNSZWFkYWJsZSIsImJ1ZmZlclRvTG93ZXJDYXNlZEhlYWRlck5hbWUiLCJkYXRhVVJMUHJvY2Vzc29yIiwic2VyaWFsaXplQU1pbWVUeXBlIiwibWluaW1pemVTdXBwb3J0ZWRNaW1lVHlwZSIsImdldEdsb2JhbERpc3BhdGNoZXIiLCJ3ZWJpZGwiLCJTVEFUVVNfQ09ERVMiLCJHRVRfT1JfSEVBRCIsImRlZmF1bHRVc2VyQWdlbnQiLCJfX1VORElDSV9JU19OT0RFX18iLCJlc2J1aWxkRGV0ZWN0aW9uIiwicmVzb2x2ZU9iamVjdFVSTCIsIkZldGNoIiwiY29uc3RydWN0b3IiLCJkaXNwYXRjaGVyIiwiY29ubmVjdGlvbiIsImR1bXAiLCJzdGF0ZSIsInRlcm1pbmF0ZSIsInJlYXNvbiIsImRlc3Ryb3kiLCJlbWl0IiwiYWJvcnQiLCJlcnJvciIsIkRPTUV4Y2VwdGlvbiIsInNlcmlhbGl6ZWRBYm9ydFJlYXNvbiIsImhhbmRsZUZldGNoRG9uZSIsInJlc3BvbnNlIiwiZmluYWxpemVBbmRSZXBvcnRUaW1pbmciLCJmZXRjaCIsImlucHV0IiwiaW5pdCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImFyZ3VtZW50TGVuZ3RoQ2hlY2siLCJwIiwicmVxdWVzdE9iamVjdCIsImUiLCJyZWplY3QiLCJwcm9taXNlIiwicmVxdWVzdCIsInNpZ25hbCIsImFib3J0ZWQiLCJhYm9ydEZldGNoIiwiZ2xvYmFsT2JqZWN0IiwiY2xpZW50IiwibmFtZSIsInNlcnZpY2VXb3JrZXJzIiwicmVzcG9uc2VPYmplY3QiLCJsb2NhbGx5QWJvcnRlZCIsImNvbnRyb2xsZXIiLCJyZWFsUmVzcG9uc2UiLCJkZXJlZiIsInByb2Nlc3NSZXNwb25zZSIsInR5cGUiLCJUeXBlRXJyb3IiLCJjYXVzZSIsIldlYWtSZWYiLCJyZXNvbHZlIiwiZmV0Y2hpbmciLCJwcm9jZXNzUmVzcG9uc2VFbmRPZkJvZHkiLCJpbml0aWF0b3JUeXBlIiwidXJsTGlzdCIsIm9yaWdpbmFsVVJMIiwidGltaW5nSW5mbyIsImNhY2hlU3RhdGUiLCJ0aW1pbmdBbGxvd1Bhc3NlZCIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJtYXJrUmVzb3VyY2VUaW1pbmciLCJocmVmIiwiZ2xvYmFsVGhpcyIsInBlcmZvcm1hbmNlIiwiYm9keSIsInN0cmVhbSIsImNhbmNlbCIsImNhdGNoIiwiZXJyIiwiY29kZSIsIl9yZWYiLCJwcm9jZXNzUmVxdWVzdEJvZHlDaHVua0xlbmd0aCIsInByb2Nlc3NSZXF1ZXN0RW5kT2ZCb2R5IiwicHJvY2Vzc1Jlc3BvbnNlQ29uc3VtZUJvZHkiLCJ1c2VQYXJhbGxlbFF1ZXVlIiwidGFza0Rlc3RpbmF0aW9uIiwiY3Jvc3NPcmlnaW5Jc29sYXRlZENhcGFiaWxpdHkiLCJjdXJyZW50VGltZSIsImZldGNoUGFyYW1zIiwid2luZG93Iiwib3JpZ2luIiwicG9saWN5Q29udGFpbmVyIiwiaGVhZGVyc0xpc3QiLCJjb250YWlucyIsInZhbHVlIiwiYXBwZW5kIiwicHJpb3JpdHkiLCJoYXMiLCJkZXN0aW5hdGlvbiIsIm1haW5GZXRjaCIsInJlY3Vyc2l2ZSIsImxvY2FsVVJMc09ubHkiLCJyZWZlcnJlclBvbGljeSIsInJlZmVycmVyIiwiY3VycmVudFVSTCIsInVybCIsInJlc3BvbnNlVGFpbnRpbmciLCJwcm90b2NvbCIsIm1vZGUiLCJzY2hlbWVGZXRjaCIsInJlZGlyZWN0IiwiaHR0cEZldGNoIiwic3RhdHVzIiwiaW50ZXJuYWxSZXNwb25zZSIsInB1c2giLCJ0aW1pbmdBbGxvd0ZhaWxlZCIsInJhbmdlUmVxdWVzdGVkIiwiaGVhZGVycyIsIm1ldGhvZCIsImluY2x1ZGVzIiwiaW50ZWdyaXR5IiwicHJvY2Vzc0JvZHlFcnJvciIsImZldGNoRmluYWxlIiwicHJvY2Vzc0JvZHkiLCJieXRlcyIsInJlZGlyZWN0Q291bnQiLCJQcm9taXNlIiwic2NoZW1lIiwiYmxvYlVSTEVudHJ5Iiwic2VhcmNoIiwiYmxvYiIsInRvU3RyaW5nIiwiZnVsbExlbmd0aCIsInNpemUiLCJzZXJpYWxpemVkRnVsbExlbmd0aCIsImJvZHlXaXRoVHlwZSIsInN0YXR1c1RleHQiLCJzZXQiLCJyYW5nZUhlYWRlciIsImdldCIsInJhbmdlVmFsdWUiLCJyYW5nZVN0YXJ0VmFsdWUiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmRWYWx1ZSIsInJhbmdlRW5kIiwic2xpY2VkQmxvYiIsInNsaWNlIiwic2xpY2VkQm9keVdpdGhUeXBlIiwic2VyaWFsaXplZFNsaWNlZExlbmd0aCIsImNvbnRlbnRSYW5nZSIsImRhdGFVUkxTdHJ1Y3QiLCJtaW1lVHlwZSIsImZpbmFsaXplUmVzcG9uc2UiLCJkb25lIiwicHJvY2Vzc1Jlc3BvbnNlRG9uZSIsInF1ZXVlTWljcm90YXNrIiwidW5zYWZlRW5kVGltZSIsIkRhdGUiLCJub3ciLCJmdWxsVGltaW5nSW5mbyIsInJlcG9ydFRpbWluZ1N0ZXBzIiwiYm9keUluZm8iLCJyZXNwb25zZVN0YXR1cyIsImhhc0Nyb3NzT3JpZ2luUmVkaXJlY3RzIiwiY29udGVudFR5cGUiLCJwcm9jZXNzUmVzcG9uc2VFbmRPZkJvZHlUYXNrIiwiYWN0dWFsUmVzcG9uc2UiLCJodHRwTmV0d29ya09yQ2FjaGVGZXRjaCIsImh0dHBSZWRpcmVjdEZldGNoIiwibG9jYXRpb25VUkwiLCJoYXNoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInNvdXJjZSIsImhlYWRlck5hbWUiLCJkZWxldGUiLCJyZWRpcmVjdEVuZFRpbWUiLCJwb3N0UmVkaXJlY3RTdGFydFRpbWUiLCJyZWRpcmVjdFN0YXJ0VGltZSIsImlzQXV0aGVudGljYXRpb25GZXRjaCIsImlzTmV3Q29ubmVjdGlvbkZldGNoIiwiaHR0cEZldGNoUGFyYW1zIiwiaHR0cFJlcXVlc3QiLCJodHRwQ2FjaGUiLCJyZXZhbGlkYXRpbmdGbGFnIiwiaW5jbHVkZUNyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHMiLCJjb250ZW50TGVuZ3RoIiwiY29udGVudExlbmd0aEhlYWRlclZhbHVlIiwia2VlcGFsaXZlIiwiVVJMIiwiY2FjaGUiLCJwcmV2ZW50Tm9DYWNoZUNhY2hlQ29udHJvbEhlYWRlck1vZGlmaWNhdGlvbiIsImZvcndhcmRSZXNwb25zZSIsImh0dHBOZXR3b3JrRmV0Y2giLCJyZXF1ZXN0SW5jbHVkZXNDcmVkZW50aWFscyIsImZvcmNlTmV3Q29ubmVjdGlvbiIsImRlc3Ryb3llZCIsIm5ld0Nvbm5lY3Rpb24iLCJyZXF1ZXN0Qm9keSIsInByb2Nlc3NCb2R5Q2h1bmsiLCJieXRlTGVuZ3RoIiwicHJvY2Vzc0VuZE9mQm9keSIsInNvY2tldCIsImRpc3BhdGNoIiwiaXRlcmF0b3IiLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwibmV4dCIsInB1bGxBbGdvcml0aG0iLCJyZXN1bWUiLCJjYW5jZWxBbGdvcml0aG0iLCJSZWFkYWJsZVN0cmVhbSIsInN0YXJ0IiwicHVsbCIsIm9uQWJvcnRlZCIsIm9uIiwiaXNGYWlsdXJlIiwiZW5kZWQiLCJlbmNvZGVkQm9keVNpemUiLCJkZWNvZGVkQm9keVNpemUiLCJidWZmZXIiLCJVaW50OEFycmF5IiwiZW5xdWV1ZSIsImRlc2lyZWRTaXplIiwiX3JlZjIiLCJhZ2VudCIsInBhdGgiLCJwYXRobmFtZSIsImlzTW9ja0FjdGl2ZSIsImVudHJpZXMiLCJtYXhSZWRpcmVjdGlvbnMiLCJ1cGdyYWRlIiwib25Db25uZWN0IiwiZmluYWxDb25uZWN0aW9uVGltaW5nSW5mbyIsImZpbmFsTmV0d29ya1JlcXVlc3RTdGFydFRpbWUiLCJvblJlc3BvbnNlU3RhcnRlZCIsImZpbmFsTmV0d29ya1Jlc3BvbnNlU3RhcnRUaW1lIiwib25IZWFkZXJzIiwicmF3SGVhZGVycyIsImNvZGluZ3MiLCJsb2NhdGlvbiIsImkiLCJjb250ZW50RW5jb2RpbmciLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwibWFwIiwieCIsInRyaW0iLCJyZWFkIiwiZGVjb2RlcnMiLCJ3aWxsRm9sbG93IiwiY29kaW5nIiwiY3JlYXRlR3VuemlwIiwiZmx1c2giLCJjb25zdGFudHMiLCJaX1NZTkNfRkxVU0giLCJmaW5pc2hGbHVzaCIsImNyZWF0ZUJyb3RsaURlY29tcHJlc3MiLCJvbkRhdGEiLCJjaHVuayIsIm9uQ29tcGxldGUiLCJvZmYiLCJvbkVycm9yIiwib25VcGdyYWRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/request.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/request.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* globals AbortController */\n\n\n\nconst {\n  extractBody,\n  mixinBody,\n  cloneBody\n} = __webpack_require__(/*! ./body */ \"(ssr)/./node_modules/undici/lib/web/fetch/body.js\");\nconst {\n  Headers,\n  fill: fillHeaders,\n  HeadersList,\n  setHeadersGuard,\n  getHeadersGuard,\n  setHeadersList,\n  getHeadersList\n} = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\nconst {\n  FinalizationRegistry\n} = __webpack_require__(/*! ./dispatcher-weakref */ \"(ssr)/./node_modules/undici/lib/web/fetch/dispatcher-weakref.js\")();\nconst util = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst nodeUtil = __webpack_require__(/*! node:util */ \"node:util\");\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  environmentSettingsObject\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst {\n  forbiddenMethodsSet,\n  corsSafeListedMethodsSet,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/fetch/constants.js\");\nconst {\n  kEnumerableProperty,\n  normalizedMethodRecordsBase,\n  normalizedMethodRecords\n} = util;\nconst {\n  kHeaders,\n  kSignal,\n  kState,\n  kDispatcher\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  URLSerializer\n} = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  kConstruct\n} = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  getMaxListeners,\n  setMaxListeners,\n  getEventListeners,\n  defaultMaxListeners\n} = __webpack_require__(/*! node:events */ \"node:events\");\nconst kAbortController = Symbol('abortController');\nconst requestFinalizer = new FinalizationRegistry(_ref => {\n  let {\n    signal,\n    abort\n  } = _ref;\n  signal.removeEventListener('abort', abort);\n});\nconst dependentControllerMap = new WeakMap();\nfunction buildAbort(acRef) {\n  return abort;\n  function abort() {\n    const ac = acRef.deref();\n    if (ac !== undefined) {\n      // Currently, there is a problem with FinalizationRegistry.\n      // https://github.com/nodejs/node/issues/49344\n      // https://github.com/nodejs/node/issues/47748\n      // In the case of abort, the first step is to unregister from it.\n      // If the controller can refer to it, it is still registered.\n      // It will be removed in the future.\n      requestFinalizer.unregister(abort);\n\n      // Unsubscribe a listener.\n      // FinalizationRegistry will no longer be called, so this must be done.\n      this.removeEventListener('abort', abort);\n      ac.abort(this.reason);\n      const controllerList = dependentControllerMap.get(ac.signal);\n      if (controllerList !== undefined) {\n        if (controllerList.size !== 0) {\n          for (const ref of controllerList) {\n            const ctrl = ref.deref();\n            if (ctrl !== undefined) {\n              ctrl.abort(this.reason);\n            }\n          }\n          controllerList.clear();\n        }\n        dependentControllerMap.delete(ac.signal);\n      }\n    }\n  }\n}\nlet patchMethodWarning = false;\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor(input) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (input === kConstruct) {\n      return;\n    }\n    const prefix = 'Request constructor';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    input = webidl.converters.RequestInfo(input, prefix, 'input');\n    init = webidl.converters.RequestInit(init, prefix, 'init');\n\n    // 1. Let request be null.\n    let request = null;\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null;\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = environmentSettingsObject.settingsObject.baseUrl;\n\n    // 4. Let signal be null.\n    let signal = null;\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      this[kDispatcher] = init.dispatcher;\n\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL;\n      try {\n        parsedURL = new URL(input, baseUrl);\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, {\n          cause: err\n        });\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError('Request cannot be constructed from a URL that includes credentials: ' + input);\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({\n        urlList: [parsedURL]\n      });\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors';\n    } else {\n      this[kDispatcher] = init.dispatcher || input[kDispatcher];\n\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request);\n\n      // 8. Set request to input’s request.\n      request = input[kState];\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal];\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = environmentSettingsObject.settingsObject.origin;\n\n    // 8. Let window be \"client\".\n    let window = 'client';\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (request.window?.constructor?.name === 'EnvironmentSettingsObject' && sameOrigin(request.window, origin)) {\n      window = request.window;\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`);\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if ('window' in init) {\n      window = 'no-window';\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: environmentSettingsObject.settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    });\n    const initHasKey = Object.keys(init).length !== 0;\n\n    // 13. If init is not empty, then:\n    if (initHasKey) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin';\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false;\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false;\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client';\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client';\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = '';\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1];\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url];\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer;\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer';\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer;\n        try {\n          parsedReferrer = new URL(referrer, baseUrl);\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, {\n            cause: err\n          });\n        }\n\n        // 3. If one of the following is true\n        // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n        // - parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        if (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client' || origin && !sameOrigin(parsedReferrer, environmentSettingsObject.settingsObject.baseUrl)) {\n          request.referrer = 'client';\n        } else {\n          // 4. Otherwise, set request’s referrer to parsedReferrer.\n          request.referrer = parsedReferrer;\n        }\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy;\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode;\n    if (init.mode !== undefined) {\n      mode = init.mode;\n    } else {\n      mode = fallbackMode;\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      });\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode;\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials;\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache;\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect;\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity != null) {\n      request.integrity = String(init.integrity);\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive);\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method;\n      const mayBeNormalized = normalizedMethodRecords[method];\n      if (mayBeNormalized !== undefined) {\n        // Note: Bypass validation DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH and these lowercase ones\n        request.method = mayBeNormalized;\n      } else {\n        // 2. If method is not a method or method is a forbidden method, then\n        // throw a TypeError.\n        if (!isValidHTTPToken(method)) {\n          throw new TypeError(`'${method}' is not a valid HTTP method.`);\n        }\n        const upperCase = method.toUpperCase();\n        if (forbiddenMethodsSet.has(upperCase)) {\n          throw new TypeError(`'${method}' HTTP method is unsupported.`);\n        }\n\n        // 3. Normalize method.\n        // https://fetch.spec.whatwg.org/#concept-method-normalize\n        // Note: must be in uppercase\n        method = normalizedMethodRecordsBase[upperCase] ?? method;\n\n        // 4. Set request’s method to method.\n        request.method = method;\n      }\n      if (!patchMethodWarning && request.method === 'patch') {\n        process.emitWarning('Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.', {\n          code: 'UNDICI-FETCH-patch'\n        });\n        patchMethodWarning = true;\n      }\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal;\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request;\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    // TODO: could this be simplified with AbortSignal.any\n    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n    const ac = new AbortController();\n    this[kSignal] = ac.signal;\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (!signal || typeof signal.aborted !== 'boolean' || typeof signal.addEventListener !== 'function') {\n        throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");\n      }\n      if (signal.aborted) {\n        ac.abort(signal.reason);\n      } else {\n        // Keep a strong ref to ac while request object\n        // is alive. This is needed to prevent AbortController\n        // from being prematurely garbage collected.\n        // See, https://github.com/nodejs/undici/issues/1926.\n        this[kAbortController] = ac;\n        const acRef = new WeakRef(ac);\n        const abort = buildAbort(acRef);\n\n        // Third-party AbortControllers may not work with these.\n        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n        try {\n          // If the max amount of listeners is equal to the default, increase it\n          // This is only available in node >= v19.9.0\n          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n            setMaxListeners(1500, signal);\n          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n            setMaxListeners(1500, signal);\n          }\n        } catch {}\n        util.addAbortListener(signal, abort);\n        // The third argument must be a registry key to be unregistered.\n        // Without it, you cannot unregister.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n        // abort is used as the unregister key. (because it is unique)\n        requestFinalizer.register(ac, {\n          signal,\n          abort\n        }, abort);\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers(kConstruct);\n    setHeadersList(this[kHeaders], request.headersList);\n    setHeadersGuard(this[kHeaders], 'request');\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethodsSet.has(request.method)) {\n        throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      setHeadersGuard(this[kHeaders], 'request-no-cors');\n    }\n\n    // 32. If init is not empty, then:\n    if (initHasKey) {\n      /** @type {HeadersList} */\n      const headersList = getHeadersList(this[kHeaders]);\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList);\n\n      // 3. Empty this’s headers’s header list.\n      headersList.clear();\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers instanceof HeadersList) {\n        for (const {\n          name,\n          value\n        } of headers.rawValues()) {\n          headersList.append(name, value, false);\n        }\n        // Note: Copy the `set-cookie` meta-data.\n        headersList.cookies = headers.cookies;\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers);\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null;\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if ((init.body != null || inputBody != null) && (request.method === 'GET' || request.method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.');\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null;\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(init.body, request.keepalive);\n      initBody = extractedBody;\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !getHeadersList(this[kHeaders]).contains('content-type', true)) {\n        this[kHeaders].append('content-type', contentType);\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody;\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.');\n      }\n\n      // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');\n      }\n\n      // 3. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true;\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody;\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError('Cannot construct a Request with a Request object that has already been used.');\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream();\n      inputBody.stream.pipeThrough(identityTransform);\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      };\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody;\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method() {\n    webidl.brandCheck(this, Request);\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method;\n  }\n\n  // Returns the URL of request as a string.\n  get url() {\n    webidl.brandCheck(this, Request);\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return URLSerializer(this[kState].url);\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers() {\n    webidl.brandCheck(this, Request);\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders];\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination() {\n    webidl.brandCheck(this, Request);\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination;\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer() {\n    webidl.brandCheck(this, Request);\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return '';\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client';\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString();\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy() {\n    webidl.brandCheck(this, Request);\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy;\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode() {\n    webidl.brandCheck(this, Request);\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode;\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials() {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials;\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache() {\n    webidl.brandCheck(this, Request);\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache;\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect() {\n    webidl.brandCheck(this, Request);\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect;\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity() {\n    webidl.brandCheck(this, Request);\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity;\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive() {\n    webidl.brandCheck(this, Request);\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive;\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation() {\n    webidl.brandCheck(this, Request);\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation;\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-forward navigation).\n  get isHistoryNavigation() {\n    webidl.brandCheck(this, Request);\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation;\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal() {\n    webidl.brandCheck(this, Request);\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal];\n  }\n  get body() {\n    webidl.brandCheck(this, Request);\n    return this[kState].body ? this[kState].body.stream : null;\n  }\n  get bodyUsed() {\n    webidl.brandCheck(this, Request);\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n  }\n  get duplex() {\n    webidl.brandCheck(this, Request);\n    return 'half';\n  }\n\n  // Returns a clone of request.\n  clone() {\n    webidl.brandCheck(this, Request);\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable');\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState]);\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController();\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason);\n    } else {\n      let list = dependentControllerMap.get(this.signal);\n      if (list === undefined) {\n        list = new Set();\n        dependentControllerMap.set(this.signal, list);\n      }\n      const acRef = new WeakRef(ac);\n      list.add(acRef);\n      util.addAbortListener(ac.signal, buildAbort(acRef));\n    }\n\n    // 4. Return clonedRequestObject.\n    return fromInnerRequest(clonedRequest, ac.signal, getHeadersGuard(this[kHeaders]));\n  }\n  [nodeUtil.inspect.custom](depth, options) {\n    if (options.depth === null) {\n      options.depth = 2;\n    }\n    options.colors ??= true;\n    const properties = {\n      method: this.method,\n      url: this.url,\n      headers: this.headers,\n      destination: this.destination,\n      referrer: this.referrer,\n      referrerPolicy: this.referrerPolicy,\n      mode: this.mode,\n      credentials: this.credentials,\n      cache: this.cache,\n      redirect: this.redirect,\n      integrity: this.integrity,\n      keepalive: this.keepalive,\n      isReloadNavigation: this.isReloadNavigation,\n      isHistoryNavigation: this.isHistoryNavigation,\n      signal: this.signal\n    };\n    return `Request ${nodeUtil.formatWithOptions(options, properties)}`;\n  }\n}\nmixinBody(Request);\n\n// https://fetch.spec.whatwg.org/#requests\nfunction makeRequest(init) {\n  return {\n    method: init.method ?? 'GET',\n    localURLsOnly: init.localURLsOnly ?? false,\n    unsafeRequest: init.unsafeRequest ?? false,\n    body: init.body ?? null,\n    client: init.client ?? null,\n    reservedClient: init.reservedClient ?? null,\n    replacesClientId: init.replacesClientId ?? '',\n    window: init.window ?? 'client',\n    keepalive: init.keepalive ?? false,\n    serviceWorkers: init.serviceWorkers ?? 'all',\n    initiator: init.initiator ?? '',\n    destination: init.destination ?? '',\n    priority: init.priority ?? null,\n    origin: init.origin ?? 'client',\n    policyContainer: init.policyContainer ?? 'client',\n    referrer: init.referrer ?? 'client',\n    referrerPolicy: init.referrerPolicy ?? '',\n    mode: init.mode ?? 'no-cors',\n    useCORSPreflightFlag: init.useCORSPreflightFlag ?? false,\n    credentials: init.credentials ?? 'same-origin',\n    useCredentials: init.useCredentials ?? false,\n    cache: init.cache ?? 'default',\n    redirect: init.redirect ?? 'follow',\n    integrity: init.integrity ?? '',\n    cryptoGraphicsNonceMetadata: init.cryptoGraphicsNonceMetadata ?? '',\n    parserMetadata: init.parserMetadata ?? '',\n    reloadNavigation: init.reloadNavigation ?? false,\n    historyNavigation: init.historyNavigation ?? false,\n    userActivation: init.userActivation ?? false,\n    taintedOrigin: init.taintedOrigin ?? false,\n    redirectCount: init.redirectCount ?? 0,\n    responseTainting: init.responseTainting ?? 'basic',\n    preventNoCacheCacheControlHeaderModification: init.preventNoCacheCacheControlHeaderModification ?? false,\n    done: init.done ?? false,\n    timingAllowFailed: init.timingAllowFailed ?? false,\n    urlList: init.urlList,\n    url: init.urlList[0],\n    headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()\n  };\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest(request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({\n    ...request,\n    body: null\n  });\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body);\n  }\n\n  // 3. Return newRequest.\n  return newRequest;\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#request-create\n * @param {any} innerRequest\n * @param {AbortSignal} signal\n * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard\n * @returns {Request}\n */\nfunction fromInnerRequest(innerRequest, signal, guard) {\n  const request = new Request(kConstruct);\n  request[kState] = innerRequest;\n  request[kSignal] = signal;\n  request[kHeaders] = new Headers(kConstruct);\n  setHeadersList(request[kHeaders], innerRequest.headersList);\n  setHeadersGuard(request[kHeaders], guard);\n  return request;\n}\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n});\nwebidl.converters.Request = webidl.interfaceConverter(Request);\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V, prefix, argument) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V, prefix, argument);\n  }\n  if (V instanceof Request) {\n    return webidl.converters.Request(V, prefix, argument);\n  }\n  return webidl.converters.USVString(V, prefix, argument);\n};\nwebidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([{\n  key: 'method',\n  converter: webidl.converters.ByteString\n}, {\n  key: 'headers',\n  converter: webidl.converters.HeadersInit\n}, {\n  key: 'body',\n  converter: webidl.nullableConverter(webidl.converters.BodyInit)\n}, {\n  key: 'referrer',\n  converter: webidl.converters.USVString\n}, {\n  key: 'referrerPolicy',\n  converter: webidl.converters.DOMString,\n  // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n  allowedValues: referrerPolicy\n}, {\n  key: 'mode',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#concept-request-mode\n  allowedValues: requestMode\n}, {\n  key: 'credentials',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcredentials\n  allowedValues: requestCredentials\n}, {\n  key: 'cache',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcache\n  allowedValues: requestCache\n}, {\n  key: 'redirect',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestredirect\n  allowedValues: requestRedirect\n}, {\n  key: 'integrity',\n  converter: webidl.converters.DOMString\n}, {\n  key: 'keepalive',\n  converter: webidl.converters.boolean\n}, {\n  key: 'signal',\n  converter: webidl.nullableConverter(signal => webidl.converters.AbortSignal(signal, 'RequestInit', 'signal', {\n    strict: false\n  }))\n}, {\n  key: 'window',\n  converter: webidl.converters.any\n}, {\n  key: 'duplex',\n  converter: webidl.converters.DOMString,\n  allowedValues: requestDuplex\n}, {\n  key: 'dispatcher',\n  // undici specific option\n  converter: webidl.converters.any\n}]);\nmodule.exports = {\n  Request,\n  makeRequest,\n  fromInnerRequest,\n  cloneRequest\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/response.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/response.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  Headers,\n  HeadersList,\n  fill,\n  getHeadersGuard,\n  setHeadersGuard,\n  setHeadersList\n} = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\nconst {\n  extractBody,\n  cloneBody,\n  mixinBody\n} = __webpack_require__(/*! ./body */ \"(ssr)/./node_modules/undici/lib/web/fetch/body.js\");\nconst util = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst nodeUtil = __webpack_require__(/*! node:util */ \"node:util\");\nconst {\n  kEnumerableProperty\n} = util;\nconst {\n  isValidReasonPhrase,\n  isCancelled,\n  isAborted,\n  isBlobLike,\n  serializeJavascriptValueToJSONString,\n  isErrorLike,\n  isomorphicEncode,\n  environmentSettingsObject: relevantRealm\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst {\n  redirectStatusSet,\n  nullBodyStatus\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/fetch/constants.js\");\nconst {\n  kState,\n  kHeaders\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  FormData\n} = __webpack_require__(/*! ./formdata */ \"(ssr)/./node_modules/undici/lib/web/fetch/formdata.js\");\nconst {\n  URLSerializer\n} = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  kConstruct\n} = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  types\n} = __webpack_require__(/*! node:util */ \"node:util\");\nconst {\n  isDisturbed,\n  isErrored\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst textEncoder = new TextEncoder('utf-8');\nconst hasFinalizationRegistry = globalThis.FinalizationRegistry && process.version.indexOf('v18') !== 0;\nlet registry;\nif (hasFinalizationRegistry) {\n  registry = new FinalizationRegistry(weakRef => {\n    const stream = weakRef.deref();\n    if (stream && !stream.locked && !isDisturbed(stream) && !isErrored(stream)) {\n      stream.cancel('Response object has been garbage collected').catch(noop);\n    }\n  });\n}\nfunction noop() {}\n\n// https://fetch.spec.whatwg.org/#response-class\nclass Response {\n  // Creates network error Response.\n  static error() {\n    // The static error() method steps are to return the result of creating a\n    // Response object, given a new network error, \"immutable\", and this’s\n    // relevant Realm.\n    const responseObject = fromInnerResponse(makeNetworkError(), 'immutable');\n    return responseObject;\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response-json\n  static json(data) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    webidl.argumentLengthCheck(arguments, 1, 'Response.json');\n    if (init !== null) {\n      init = webidl.converters.ResponseInit(init);\n    }\n\n    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n    const bytes = textEncoder.encode(serializeJavascriptValueToJSONString(data));\n\n    // 2. Let body be the result of extracting bytes.\n    const body = extractBody(bytes);\n\n    // 3. Let responseObject be the result of creating a Response object, given a new response,\n    //    \"response\", and this’s relevant Realm.\n    const responseObject = fromInnerResponse(makeResponse({}), 'response');\n\n    // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n    initializeResponse(responseObject, init, {\n      body: body[0],\n      type: 'application/json'\n    });\n\n    // 5. Return responseObject.\n    return responseObject;\n  }\n\n  // Creates a redirect Response that redirects to url with status status.\n  static redirect(url) {\n    let status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 302;\n    webidl.argumentLengthCheck(arguments, 1, 'Response.redirect');\n    url = webidl.converters.USVString(url);\n    status = webidl.converters['unsigned short'](status);\n\n    // 1. Let parsedURL be the result of parsing url with current settings\n    // object’s API base URL.\n    // 2. If parsedURL is failure, then throw a TypeError.\n    // TODO: base-URL?\n    let parsedURL;\n    try {\n      parsedURL = new URL(url, relevantRealm.settingsObject.baseUrl);\n    } catch (err) {\n      throw new TypeError(`Failed to parse URL from ${url}`, {\n        cause: err\n      });\n    }\n\n    // 3. If status is not a redirect status, then throw a RangeError.\n    if (!redirectStatusSet.has(status)) {\n      throw new RangeError(`Invalid status code ${status}`);\n    }\n\n    // 4. Let responseObject be the result of creating a Response object,\n    // given a new response, \"immutable\", and this’s relevant Realm.\n    const responseObject = fromInnerResponse(makeResponse({}), 'immutable');\n\n    // 5. Set responseObject’s response’s status to status.\n    responseObject[kState].status = status;\n\n    // 6. Let value be parsedURL, serialized and isomorphic encoded.\n    const value = isomorphicEncode(URLSerializer(parsedURL));\n\n    // 7. Append `Location`/value to responseObject’s response’s header list.\n    responseObject[kState].headersList.append('location', value, true);\n\n    // 8. Return responseObject.\n    return responseObject;\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response\n  constructor() {\n    let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (body === kConstruct) {\n      return;\n    }\n    if (body !== null) {\n      body = webidl.converters.BodyInit(body);\n    }\n    init = webidl.converters.ResponseInit(init);\n\n    // 1. Set this’s response to a new response.\n    this[kState] = makeResponse({});\n\n    // 2. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is this’s response’s header list and guard\n    // is \"response\".\n    this[kHeaders] = new Headers(kConstruct);\n    setHeadersGuard(this[kHeaders], 'response');\n    setHeadersList(this[kHeaders], this[kState].headersList);\n\n    // 3. Let bodyWithType be null.\n    let bodyWithType = null;\n\n    // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n    if (body != null) {\n      const [extractedBody, type] = extractBody(body);\n      bodyWithType = {\n        body: extractedBody,\n        type\n      };\n    }\n\n    // 5. Perform initialize a response given this, init, and bodyWithType.\n    initializeResponse(this, init, bodyWithType);\n  }\n\n  // Returns response’s type, e.g., \"cors\".\n  get type() {\n    webidl.brandCheck(this, Response);\n\n    // The type getter steps are to return this’s response’s type.\n    return this[kState].type;\n  }\n\n  // Returns response’s URL, if it has one; otherwise the empty string.\n  get url() {\n    webidl.brandCheck(this, Response);\n    const urlList = this[kState].urlList;\n\n    // The url getter steps are to return the empty string if this’s\n    // response’s URL is null; otherwise this’s response’s URL,\n    // serialized with exclude fragment set to true.\n    const url = urlList[urlList.length - 1] ?? null;\n    if (url === null) {\n      return '';\n    }\n    return URLSerializer(url, true);\n  }\n\n  // Returns whether response was obtained through a redirect.\n  get redirected() {\n    webidl.brandCheck(this, Response);\n\n    // The redirected getter steps are to return true if this’s response’s URL\n    // list has more than one item; otherwise false.\n    return this[kState].urlList.length > 1;\n  }\n\n  // Returns response’s status.\n  get status() {\n    webidl.brandCheck(this, Response);\n\n    // The status getter steps are to return this’s response’s status.\n    return this[kState].status;\n  }\n\n  // Returns whether response’s status is an ok status.\n  get ok() {\n    webidl.brandCheck(this, Response);\n\n    // The ok getter steps are to return true if this’s response’s status is an\n    // ok status; otherwise false.\n    return this[kState].status >= 200 && this[kState].status <= 299;\n  }\n\n  // Returns response’s status message.\n  get statusText() {\n    webidl.brandCheck(this, Response);\n\n    // The statusText getter steps are to return this’s response’s status\n    // message.\n    return this[kState].statusText;\n  }\n\n  // Returns response’s headers as Headers.\n  get headers() {\n    webidl.brandCheck(this, Response);\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders];\n  }\n  get body() {\n    webidl.brandCheck(this, Response);\n    return this[kState].body ? this[kState].body.stream : null;\n  }\n  get bodyUsed() {\n    webidl.brandCheck(this, Response);\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n  }\n\n  // Returns a clone of response.\n  clone() {\n    webidl.brandCheck(this, Response);\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw webidl.errors.exception({\n        header: 'Response.clone',\n        message: 'Body has already been consumed.'\n      });\n    }\n\n    // 2. Let clonedResponse be the result of cloning this’s response.\n    const clonedResponse = cloneResponse(this[kState]);\n\n    // 3. Return the result of creating a Response object, given\n    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.\n    return fromInnerResponse(clonedResponse, getHeadersGuard(this[kHeaders]));\n  }\n  [nodeUtil.inspect.custom](depth, options) {\n    if (options.depth === null) {\n      options.depth = 2;\n    }\n    options.colors ??= true;\n    const properties = {\n      status: this.status,\n      statusText: this.statusText,\n      headers: this.headers,\n      body: this.body,\n      bodyUsed: this.bodyUsed,\n      ok: this.ok,\n      redirected: this.redirected,\n      type: this.type,\n      url: this.url\n    };\n    return `Response ${nodeUtil.formatWithOptions(options, properties)}`;\n  }\n}\nmixinBody(Response);\nObject.defineProperties(Response.prototype, {\n  type: kEnumerableProperty,\n  url: kEnumerableProperty,\n  status: kEnumerableProperty,\n  ok: kEnumerableProperty,\n  redirected: kEnumerableProperty,\n  statusText: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Response',\n    configurable: true\n  }\n});\nObject.defineProperties(Response, {\n  json: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  error: kEnumerableProperty\n});\n\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction cloneResponse(response) {\n  // To clone a response response, run these steps:\n\n  // 1. If response is a filtered response, then return a new identical\n  // filtered response whose internal response is a clone of response’s\n  // internal response.\n  if (response.internalResponse) {\n    return filterResponse(cloneResponse(response.internalResponse), response.type);\n  }\n\n  // 2. Let newResponse be a copy of response, except for its body.\n  const newResponse = makeResponse({\n    ...response,\n    body: null\n  });\n\n  // 3. If response’s body is non-null, then set newResponse’s body to the\n  // result of cloning response’s body.\n  if (response.body != null) {\n    newResponse.body = cloneBody(response.body);\n  }\n\n  // 4. Return newResponse.\n  return newResponse;\n}\nfunction makeResponse(init) {\n  return {\n    aborted: false,\n    rangeRequested: false,\n    timingAllowPassed: false,\n    requestIncludesCredentials: false,\n    type: 'default',\n    status: 200,\n    timingInfo: null,\n    cacheState: '',\n    statusText: '',\n    ...init,\n    headersList: init?.headersList ? new HeadersList(init?.headersList) : new HeadersList(),\n    urlList: init?.urlList ? [...init.urlList] : []\n  };\n}\nfunction makeNetworkError(reason) {\n  const isError = isErrorLike(reason);\n  return makeResponse({\n    type: 'error',\n    status: 0,\n    error: isError ? reason : new Error(reason ? String(reason) : reason),\n    aborted: reason && reason.name === 'AbortError'\n  });\n}\n\n// @see https://fetch.spec.whatwg.org/#concept-network-error\nfunction isNetworkError(response) {\n  return (\n    // A network error is a response whose type is \"error\",\n    response.type === 'error' &&\n    // status is 0\n    response.status === 0\n  );\n}\nfunction makeFilteredResponse(response, state) {\n  state = {\n    internalResponse: response,\n    ...state\n  };\n  return new Proxy(response, {\n    get(target, p) {\n      return p in state ? state[p] : target[p];\n    },\n    set(target, p, value) {\n      assert(!(p in state));\n      target[p] = value;\n      return true;\n    }\n  });\n}\n\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction filterResponse(response, type) {\n  // Set response to the following filtered response with response as its\n  // internal response, depending on request’s response tainting:\n  if (type === 'basic') {\n    // A basic filtered response is a filtered response whose type is \"basic\"\n    // and header list excludes any headers in internal response’s header list\n    // whose name is a forbidden response-header name.\n\n    // Note: undici does not implement forbidden response-header names\n    return makeFilteredResponse(response, {\n      type: 'basic',\n      headersList: response.headersList\n    });\n  } else if (type === 'cors') {\n    // A CORS filtered response is a filtered response whose type is \"cors\"\n    // and header list excludes any headers in internal response’s header\n    // list whose name is not a CORS-safelisted response-header name, given\n    // internal response’s CORS-exposed header-name list.\n\n    // Note: undici does not implement CORS-safelisted response-header names\n    return makeFilteredResponse(response, {\n      type: 'cors',\n      headersList: response.headersList\n    });\n  } else if (type === 'opaque') {\n    // An opaque filtered response is a filtered response whose type is\n    // \"opaque\", URL list is the empty list, status is 0, status message\n    // is the empty byte sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaque',\n      urlList: Object.freeze([]),\n      status: 0,\n      statusText: '',\n      body: null\n    });\n  } else if (type === 'opaqueredirect') {\n    // An opaque-redirect filtered response is a filtered response whose type\n    // is \"opaqueredirect\", status is 0, status message is the empty byte\n    // sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaqueredirect',\n      status: 0,\n      statusText: '',\n      headersList: [],\n      body: null\n    });\n  } else {\n    assert(false);\n  }\n}\n\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction makeAppropriateNetworkError(fetchParams) {\n  let err = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // 1. Assert: fetchParams is canceled.\n  assert(isCancelled(fetchParams));\n\n  // 2. Return an aborted network error if fetchParams is aborted;\n  // otherwise return a network error.\n  return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), {\n    cause: err\n  })) : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), {\n    cause: err\n  }));\n}\n\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction initializeResponse(response, init, body) {\n  // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n  //    throw a RangeError.\n  if (init.status !== null && (init.status < 200 || init.status > 599)) {\n    throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.');\n  }\n\n  // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n  //    then throw a TypeError.\n  if ('statusText' in init && init.statusText != null) {\n    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n    if (!isValidReasonPhrase(String(init.statusText))) {\n      throw new TypeError('Invalid statusText');\n    }\n  }\n\n  // 3. Set response’s response’s status to init[\"status\"].\n  if ('status' in init && init.status != null) {\n    response[kState].status = init.status;\n  }\n\n  // 4. Set response’s response’s status message to init[\"statusText\"].\n  if ('statusText' in init && init.statusText != null) {\n    response[kState].statusText = init.statusText;\n  }\n\n  // 5. If init[\"headers\"] exists, then fill response’s headers with init[\"headers\"].\n  if ('headers' in init && init.headers != null) {\n    fill(response[kHeaders], init.headers);\n  }\n\n  // 6. If body was given, then:\n  if (body) {\n    // 1. If response's status is a null body status, then throw a TypeError.\n    if (nullBodyStatus.includes(response.status)) {\n      throw webidl.errors.exception({\n        header: 'Response constructor',\n        message: `Invalid response status code ${response.status}`\n      });\n    }\n\n    // 2. Set response's body to body's body.\n    response[kState].body = body.body;\n\n    // 3. If body's type is non-null and response's header list does not contain\n    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n    if (body.type != null && !response[kState].headersList.contains('content-type', true)) {\n      response[kState].headersList.append('content-type', body.type, true);\n    }\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#response-create\n * @param {any} innerResponse\n * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard\n * @returns {Response}\n */\nfunction fromInnerResponse(innerResponse, guard) {\n  const response = new Response(kConstruct);\n  response[kState] = innerResponse;\n  response[kHeaders] = new Headers(kConstruct);\n  setHeadersList(response[kHeaders], innerResponse.headersList);\n  setHeadersGuard(response[kHeaders], guard);\n  if (hasFinalizationRegistry && innerResponse.body?.stream) {\n    // If the target (response) is reclaimed, the cleanup callback may be called at some point with\n    // the held value provided for it (innerResponse.body.stream). The held value can be any value:\n    // a primitive or an object, even undefined. If the held value is an object, the registry keeps\n    // a strong reference to it (so it can pass it to the cleanup callback later). Reworded from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n    registry.register(response, new WeakRef(innerResponse.body.stream));\n  }\n  return response;\n}\nwebidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream);\nwebidl.converters.FormData = webidl.interfaceConverter(FormData);\nwebidl.converters.URLSearchParams = webidl.interfaceConverter(URLSearchParams);\n\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\nwebidl.converters.XMLHttpRequestBodyInit = function (V, prefix, name) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V, prefix, name);\n  }\n  if (isBlobLike(V)) {\n    return webidl.converters.Blob(V, prefix, name, {\n      strict: false\n    });\n  }\n  if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {\n    return webidl.converters.BufferSource(V, prefix, name);\n  }\n  if (util.isFormDataLike(V)) {\n    return webidl.converters.FormData(V, prefix, name, {\n      strict: false\n    });\n  }\n  if (V instanceof URLSearchParams) {\n    return webidl.converters.URLSearchParams(V, prefix, name);\n  }\n  return webidl.converters.DOMString(V, prefix, name);\n};\n\n// https://fetch.spec.whatwg.org/#bodyinit\nwebidl.converters.BodyInit = function (V, prefix, argument) {\n  if (V instanceof ReadableStream) {\n    return webidl.converters.ReadableStream(V, prefix, argument);\n  }\n\n  // Note: the spec doesn't include async iterables,\n  // this is an undici extension.\n  if (V?.[Symbol.asyncIterator]) {\n    return V;\n  }\n  return webidl.converters.XMLHttpRequestBodyInit(V, prefix, argument);\n};\nwebidl.converters.ResponseInit = webidl.dictionaryConverter([{\n  key: 'status',\n  converter: webidl.converters['unsigned short'],\n  defaultValue: () => 200\n}, {\n  key: 'statusText',\n  converter: webidl.converters.ByteString,\n  defaultValue: () => ''\n}, {\n  key: 'headers',\n  converter: webidl.converters.HeadersInit\n}]);\nmodule.exports = {\n  isNetworkError,\n  makeNetworkError,\n  makeResponse,\n  makeAppropriateNetworkError,\n  filterResponse,\n  Response,\n  cloneResponse,\n  fromInnerResponse\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/response.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/symbols.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/symbols.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n  kUrl: Symbol('url'),\n  kHeaders: Symbol('headers'),\n  kSignal: Symbol('signal'),\n  kState: Symbol('state'),\n  kDispatcher: Symbol('dispatcher')\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsSUFBSSxFQUFFQyxNQUFNLENBQUMsS0FBSyxDQUFDO0VBQ25CQyxRQUFRLEVBQUVELE1BQU0sQ0FBQyxTQUFTLENBQUM7RUFDM0JFLE9BQU8sRUFBRUYsTUFBTSxDQUFDLFFBQVEsQ0FBQztFQUN6QkcsTUFBTSxFQUFFSCxNQUFNLENBQUMsT0FBTyxDQUFDO0VBQ3ZCSSxXQUFXLEVBQUVKLE1BQU0sQ0FBQyxZQUFZO0FBQ2xDLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmV0Y2gvc3ltYm9scy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtVcmw6IFN5bWJvbCgndXJsJyksXG4gIGtIZWFkZXJzOiBTeW1ib2woJ2hlYWRlcnMnKSxcbiAga1NpZ25hbDogU3ltYm9sKCdzaWduYWwnKSxcbiAga1N0YXRlOiBTeW1ib2woJ3N0YXRlJyksXG4gIGtEaXNwYXRjaGVyOiBTeW1ib2woJ2Rpc3BhdGNoZXInKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJrVXJsIiwiU3ltYm9sIiwia0hlYWRlcnMiLCJrU2lnbmFsIiwia1N0YXRlIiwia0Rpc3BhdGNoZXIiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/util.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/util.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _checkInRHS(e) { if (Object(e) !== e) throw TypeError(\"right-hand side of 'in' should be an object, got \" + (null !== e ? typeof e : \"null\")); return e; }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  Transform\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst {\n  redirectStatusSet,\n  referrerPolicySet: referrerPolicyTokens,\n  badPortsSet\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/fetch/constants.js\");\nconst {\n  getGlobalOrigin\n} = __webpack_require__(/*! ./global */ \"(ssr)/./node_modules/undici/lib/web/fetch/global.js\");\nconst {\n  collectASequenceOfCodePoints,\n  collectAnHTTPQuotedString,\n  removeChars,\n  parseMIMEType\n} = __webpack_require__(/*! ./data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  performance\n} = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nconst {\n  isBlobLike,\n  ReadableStreamFrom,\n  isValidHTTPToken,\n  normalizedMethodRecordsBase\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  isUint8Array\n} = __webpack_require__(/*! node:util/types */ \"node:util/types\");\nconst {\n  webidl\n} = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nlet supportedHashes = [];\n\n// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable\n/** @type {import('crypto')} */\nlet crypto;\ntry {\n  crypto = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n  const possibleRelevantHashes = ['sha256', 'sha384', 'sha512'];\n  supportedHashes = crypto.getHashes().filter(hash => possibleRelevantHashes.includes(hash));\n  /* c8 ignore next 3 */\n} catch {}\nfunction responseURL(response) {\n  // https://fetch.spec.whatwg.org/#responses\n  // A response has an associated URL. It is a pointer to the last URL\n  // in response’s URL list and null if response’s URL list is empty.\n  const urlList = response.urlList;\n  const length = urlList.length;\n  return length === 0 ? null : urlList[length - 1].toString();\n}\n\n// https://fetch.spec.whatwg.org/#concept-response-location-url\nfunction responseLocationURL(response, requestFragment) {\n  // 1. If response’s status is not a redirect status, then return null.\n  if (!redirectStatusSet.has(response.status)) {\n    return null;\n  }\n\n  // 2. Let location be the result of extracting header list values given\n  // `Location` and response’s header list.\n  let location = response.headersList.get('location', true);\n\n  // 3. If location is a header value, then set location to the result of\n  //    parsing location with response’s URL.\n  if (location !== null && isValidHeaderValue(location)) {\n    if (!isValidEncodedURL(location)) {\n      // Some websites respond location header in UTF-8 form without encoding them as ASCII\n      // and major browsers redirect them to correctly UTF-8 encoded addresses.\n      // Here, we handle that behavior in the same way.\n      location = normalizeBinaryStringToUtf8(location);\n    }\n    location = new URL(location, responseURL(response));\n  }\n\n  // 4. If location is a URL whose fragment is null, then set location’s\n  // fragment to requestFragment.\n  if (location && !location.hash) {\n    location.hash = requestFragment;\n  }\n\n  // 5. Return location.\n  return location;\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc1738#section-2.2\n * @param {string} url\n * @returns {boolean}\n */\nfunction isValidEncodedURL(url) {\n  for (let i = 0; i < url.length; ++i) {\n    const code = url.charCodeAt(i);\n    if (code > 0x7E ||\n    // Non-US-ASCII + DEL\n    code < 0x20 // Control characters NUL - US\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * If string contains non-ASCII characters, assumes it's UTF-8 encoded and decodes it.\n * Since UTF-8 is a superset of ASCII, this will work for ASCII strings as well.\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeBinaryStringToUtf8(value) {\n  return Buffer.from(value, 'binary').toString('utf8');\n}\n\n/** @returns {URL} */\nfunction requestCurrentURL(request) {\n  return request.urlList[request.urlList.length - 1];\n}\nfunction requestBadPort(request) {\n  // 1. Let url be request’s current URL.\n  const url = requestCurrentURL(request);\n\n  // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,\n  // then return blocked.\n  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {\n    return 'blocked';\n  }\n\n  // 3. Return allowed.\n  return 'allowed';\n}\nfunction isErrorLike(object) {\n  return object instanceof Error || object?.constructor?.name === 'Error' || object?.constructor?.name === 'DOMException';\n}\n\n// Check whether |statusText| is a ByteString and\n// matches the Reason-Phrase token production.\n// RFC 2616: https://tools.ietf.org/html/rfc2616\n// RFC 7230: https://tools.ietf.org/html/rfc7230\n// \"reason-phrase = *( HTAB / SP / VCHAR / obs-text )\"\n// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116\nfunction isValidReasonPhrase(statusText) {\n  for (let i = 0; i < statusText.length; ++i) {\n    const c = statusText.charCodeAt(i);\n    if (!(c === 0x09 ||\n    // HTAB\n    c >= 0x20 && c <= 0x7e ||\n    // SP / VCHAR\n    c >= 0x80 && c <= 0xff\n    // obs-text\n    )) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#header-name\n * @param {string} potentialValue\n */\nconst isValidHeaderName = isValidHTTPToken;\n\n/**\n * @see https://fetch.spec.whatwg.org/#header-value\n * @param {string} potentialValue\n */\nfunction isValidHeaderValue(potentialValue) {\n  // - Has no leading or trailing HTTP tab or space bytes.\n  // - Contains no 0x00 (NUL) or HTTP newline bytes.\n  return (potentialValue[0] === '\\t' || potentialValue[0] === ' ' || potentialValue[potentialValue.length - 1] === '\\t' || potentialValue[potentialValue.length - 1] === ' ' || potentialValue.includes('\\n') || potentialValue.includes('\\r') || potentialValue.includes('\\0')) === false;\n}\n\n// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect\nfunction setRequestReferrerPolicyOnRedirect(request, actualResponse) {\n  //  Given a request request and a response actualResponse, this algorithm\n  //  updates request’s referrer policy according to the Referrer-Policy\n  //  header (if any) in actualResponse.\n\n  // 1. Let policy be the result of executing § 8.1 Parse a referrer policy\n  // from a Referrer-Policy header on actualResponse.\n\n  // 8.1 Parse a referrer policy from a Referrer-Policy header\n  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.\n  const {\n    headersList\n  } = actualResponse;\n  // 2. Let policy be the empty string.\n  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.\n  // 4. Return policy.\n  const policyHeader = (headersList.get('referrer-policy', true) ?? '').split(',');\n\n  // Note: As the referrer-policy can contain multiple policies\n  // separated by comma, we need to loop through all of them\n  // and pick the first valid one.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy\n  let policy = '';\n  if (policyHeader.length > 0) {\n    // The right-most policy takes precedence.\n    // The left-most policy is the fallback.\n    for (let i = policyHeader.length; i !== 0; i--) {\n      const token = policyHeader[i - 1].trim();\n      if (referrerPolicyTokens.has(token)) {\n        policy = token;\n        break;\n      }\n    }\n  }\n\n  // 2. If policy is not the empty string, then set request’s referrer policy to policy.\n  if (policy !== '') {\n    request.referrerPolicy = policy;\n  }\n}\n\n// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check\nfunction crossOriginResourcePolicyCheck() {\n  // TODO\n  return 'allowed';\n}\n\n// https://fetch.spec.whatwg.org/#concept-cors-check\nfunction corsCheck() {\n  // TODO\n  return 'success';\n}\n\n// https://fetch.spec.whatwg.org/#concept-tao-check\nfunction TAOCheck() {\n  // TODO\n  return 'success';\n}\nfunction appendFetchMetadata(httpRequest) {\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header\n  //  TODO\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header\n\n  //  1. Assert: r’s url is a potentially trustworthy URL.\n  //  TODO\n\n  //  2. Let header be a Structured Header whose value is a token.\n  let header = null;\n\n  //  3. Set header’s value to r’s mode.\n  header = httpRequest.mode;\n\n  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.\n  httpRequest.headersList.set('sec-fetch-mode', header, true);\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header\n  //  TODO\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header\n  //  TODO\n}\n\n// https://fetch.spec.whatwg.org/#append-a-request-origin-header\nfunction appendRequestOriginHeader(request) {\n  // 1. Let serializedOrigin be the result of byte-serializing a request origin\n  //    with request.\n  // TODO: implement \"byte-serializing a request origin\"\n  let serializedOrigin = request.origin;\n\n  // - \"'client' is changed to an origin during fetching.\"\n  //   This doesn't happen in undici (in most cases) because undici, by default,\n  //   has no concept of origin.\n  // - request.origin can also be set to request.client.origin (client being\n  //   an environment settings object), which is undefined without using\n  //   setGlobalOrigin.\n  if (serializedOrigin === 'client' || serializedOrigin === undefined) {\n    return;\n  }\n\n  // 2. If request’s response tainting is \"cors\" or request’s mode is \"websocket\",\n  //    then append (`Origin`, serializedOrigin) to request’s header list.\n  // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:\n  if (request.responseTainting === 'cors' || request.mode === 'websocket') {\n    request.headersList.append('origin', serializedOrigin, true);\n  } else if (request.method !== 'GET' && request.method !== 'HEAD') {\n    // 1. Switch on request’s referrer policy:\n    switch (request.referrerPolicy) {\n      case 'no-referrer':\n        // Set serializedOrigin to `null`.\n        serializedOrigin = null;\n        break;\n      case 'no-referrer-when-downgrade':\n      case 'strict-origin':\n      case 'strict-origin-when-cross-origin':\n        // If request’s origin is a tuple origin, its scheme is \"https\", and\n        // request’s current URL’s scheme is not \"https\", then set\n        // serializedOrigin to `null`.\n        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {\n          serializedOrigin = null;\n        }\n        break;\n      case 'same-origin':\n        // If request’s origin is not same origin with request’s current URL’s\n        // origin, then set serializedOrigin to `null`.\n        if (!sameOrigin(request, requestCurrentURL(request))) {\n          serializedOrigin = null;\n        }\n        break;\n      default:\n      // Do nothing.\n    }\n\n    // 2. Append (`Origin`, serializedOrigin) to request’s header list.\n    request.headersList.append('origin', serializedOrigin, true);\n  }\n}\n\n// https://w3c.github.io/hr-time/#dfn-coarsen-time\nfunction coarsenTime(timestamp, crossOriginIsolatedCapability) {\n  // TODO\n  return timestamp;\n}\n\n// https://fetch.spec.whatwg.org/#clamp-and-coarsen-connection-timing-info\nfunction clampAndCoarsenConnectionTimingInfo(connectionTimingInfo, defaultStartTime, crossOriginIsolatedCapability) {\n  if (!connectionTimingInfo?.startTime || connectionTimingInfo.startTime < defaultStartTime) {\n    return {\n      domainLookupStartTime: defaultStartTime,\n      domainLookupEndTime: defaultStartTime,\n      connectionStartTime: defaultStartTime,\n      connectionEndTime: defaultStartTime,\n      secureConnectionStartTime: defaultStartTime,\n      ALPNNegotiatedProtocol: connectionTimingInfo?.ALPNNegotiatedProtocol\n    };\n  }\n  return {\n    domainLookupStartTime: coarsenTime(connectionTimingInfo.domainLookupStartTime, crossOriginIsolatedCapability),\n    domainLookupEndTime: coarsenTime(connectionTimingInfo.domainLookupEndTime, crossOriginIsolatedCapability),\n    connectionStartTime: coarsenTime(connectionTimingInfo.connectionStartTime, crossOriginIsolatedCapability),\n    connectionEndTime: coarsenTime(connectionTimingInfo.connectionEndTime, crossOriginIsolatedCapability),\n    secureConnectionStartTime: coarsenTime(connectionTimingInfo.secureConnectionStartTime, crossOriginIsolatedCapability),\n    ALPNNegotiatedProtocol: connectionTimingInfo.ALPNNegotiatedProtocol\n  };\n}\n\n// https://w3c.github.io/hr-time/#dfn-coarsened-shared-current-time\nfunction coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {\n  return coarsenTime(performance.now(), crossOriginIsolatedCapability);\n}\n\n// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info\nfunction createOpaqueTimingInfo(timingInfo) {\n  return {\n    startTime: timingInfo.startTime ?? 0,\n    redirectStartTime: 0,\n    redirectEndTime: 0,\n    postRedirectStartTime: timingInfo.startTime ?? 0,\n    finalServiceWorkerStartTime: 0,\n    finalNetworkResponseStartTime: 0,\n    finalNetworkRequestStartTime: 0,\n    endTime: 0,\n    encodedBodySize: 0,\n    decodedBodySize: 0,\n    finalConnectionTimingInfo: null\n  };\n}\n\n// https://html.spec.whatwg.org/multipage/origin.html#policy-container\nfunction makePolicyContainer() {\n  // Note: the fetch spec doesn't make use of embedder policy or CSP list\n  return {\n    referrerPolicy: 'strict-origin-when-cross-origin'\n  };\n}\n\n// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container\nfunction clonePolicyContainer(policyContainer) {\n  return {\n    referrerPolicy: policyContainer.referrerPolicy\n  };\n}\n\n// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer\nfunction determineRequestsReferrer(request) {\n  // 1. Let policy be request's referrer policy.\n  const policy = request.referrerPolicy;\n\n  // Note: policy cannot (shouldn't) be null or an empty string.\n  assert(policy);\n\n  // 2. Let environment be request’s client.\n\n  let referrerSource = null;\n\n  // 3. Switch on request’s referrer:\n  if (request.referrer === 'client') {\n    // Note: node isn't a browser and doesn't implement document/iframes,\n    // so we bypass this step and replace it with our own.\n\n    const globalOrigin = getGlobalOrigin();\n    if (!globalOrigin || globalOrigin.origin === 'null') {\n      return 'no-referrer';\n    }\n\n    // note: we need to clone it as it's mutated\n    referrerSource = new URL(globalOrigin);\n  } else if (request.referrer instanceof URL) {\n    // Let referrerSource be request’s referrer.\n    referrerSource = request.referrer;\n  }\n\n  // 4. Let request’s referrerURL be the result of stripping referrerSource for\n  //    use as a referrer.\n  let referrerURL = stripURLForReferrer(referrerSource);\n\n  // 5. Let referrerOrigin be the result of stripping referrerSource for use as\n  //    a referrer, with the origin-only flag set to true.\n  const referrerOrigin = stripURLForReferrer(referrerSource, true);\n\n  // 6. If the result of serializing referrerURL is a string whose length is\n  //    greater than 4096, set referrerURL to referrerOrigin.\n  if (referrerURL.toString().length > 4096) {\n    referrerURL = referrerOrigin;\n  }\n  const areSameOrigin = sameOrigin(request, referrerURL);\n  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);\n\n  // 8. Execute the switch statements corresponding to the value of policy:\n  switch (policy) {\n    case 'origin':\n      return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);\n    case 'unsafe-url':\n      return referrerURL;\n    case 'same-origin':\n      return areSameOrigin ? referrerOrigin : 'no-referrer';\n    case 'origin-when-cross-origin':\n      return areSameOrigin ? referrerURL : referrerOrigin;\n    case 'strict-origin-when-cross-origin':\n      {\n        const currentURL = requestCurrentURL(request);\n\n        // 1. If the origin of referrerURL and the origin of request’s current\n        //    URL are the same, then return referrerURL.\n        if (sameOrigin(referrerURL, currentURL)) {\n          return referrerURL;\n        }\n\n        // 2. If referrerURL is a potentially trustworthy URL and request’s\n        //    current URL is not a potentially trustworthy URL, then return no\n        //    referrer.\n        if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {\n          return 'no-referrer';\n        }\n\n        // 3. Return referrerOrigin.\n        return referrerOrigin;\n      }\n    case 'strict-origin': // eslint-disable-line\n    /**\n       * 1. If referrerURL is a potentially trustworthy URL and\n       * request’s current URL is not a potentially trustworthy URL,\n       * then return no referrer.\n       * 2. Return referrerOrigin\n      */\n    case 'no-referrer-when-downgrade': // eslint-disable-line\n    /**\n     * 1. If referrerURL is a potentially trustworthy URL and\n     * request’s current URL is not a potentially trustworthy URL,\n     * then return no referrer.\n     * 2. Return referrerOrigin\n    */\n\n    default:\n      // eslint-disable-line\n      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin;\n  }\n}\n\n/**\n * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url\n * @param {URL} url\n * @param {boolean|undefined} originOnly\n */\nfunction stripURLForReferrer(url, originOnly) {\n  // 1. Assert: url is a URL.\n  assert(url instanceof URL);\n  url = new URL(url);\n\n  // 2. If url’s scheme is a local scheme, then return no referrer.\n  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {\n    return 'no-referrer';\n  }\n\n  // 3. Set url’s username to the empty string.\n  url.username = '';\n\n  // 4. Set url’s password to the empty string.\n  url.password = '';\n\n  // 5. Set url’s fragment to null.\n  url.hash = '';\n\n  // 6. If the origin-only flag is true, then:\n  if (originOnly) {\n    // 1. Set url’s path to « the empty string ».\n    url.pathname = '';\n\n    // 2. Set url’s query to null.\n    url.search = '';\n  }\n\n  // 7. Return url.\n  return url;\n}\nfunction isURLPotentiallyTrustworthy(url) {\n  if (!(url instanceof URL)) {\n    return false;\n  }\n\n  // If child of about, return true\n  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {\n    return true;\n  }\n\n  // If scheme is data, return true\n  if (url.protocol === 'data:') return true;\n\n  // If file, return true\n  if (url.protocol === 'file:') return true;\n  return isOriginPotentiallyTrustworthy(url.origin);\n  function isOriginPotentiallyTrustworthy(origin) {\n    // If origin is explicitly null, return false\n    if (origin == null || origin === 'null') return false;\n    const originAsURL = new URL(origin);\n\n    // If secure, return true\n    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {\n      return true;\n    }\n\n    // If localhost or variants, return true\n    if (/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^\\[(?:0*:)*?:?0*1\\]$/.test(originAsURL.hostname) || originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.') || originAsURL.hostname.endsWith('.localhost')) {\n      return true;\n    }\n\n    // If any other, return false\n    return false;\n  }\n}\n\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist\n * @param {Uint8Array} bytes\n * @param {string} metadataList\n */\nfunction bytesMatch(bytes, metadataList) {\n  // If node is not built with OpenSSL support, we cannot check\n  // a request's integrity, so allow it by default (the spec will\n  // allow requests if an invalid hash is given, as precedence).\n  /* istanbul ignore if: only if node is built with --without-ssl */\n  if (crypto === undefined) {\n    return true;\n  }\n\n  // 1. Let parsedMetadata be the result of parsing metadataList.\n  const parsedMetadata = parseMetadata(metadataList);\n\n  // 2. If parsedMetadata is no metadata, return true.\n  if (parsedMetadata === 'no metadata') {\n    return true;\n  }\n\n  // 3. If response is not eligible for integrity validation, return false.\n  // TODO\n\n  // 4. If parsedMetadata is the empty set, return true.\n  if (parsedMetadata.length === 0) {\n    return true;\n  }\n\n  // 5. Let metadata be the result of getting the strongest\n  //    metadata from parsedMetadata.\n  const strongest = getStrongestMetadata(parsedMetadata);\n  const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);\n\n  // 6. For each item in metadata:\n  for (const item of metadata) {\n    // 1. Let algorithm be the alg component of item.\n    const algorithm = item.algo;\n\n    // 2. Let expectedValue be the val component of item.\n    const expectedValue = item.hash;\n\n    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e\n    // \"be liberal with padding\". This is annoying, and it's not even in the spec.\n\n    // 3. Let actualValue be the result of applying algorithm to bytes.\n    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64');\n    if (actualValue[actualValue.length - 1] === '=') {\n      if (actualValue[actualValue.length - 2] === '=') {\n        actualValue = actualValue.slice(0, -2);\n      } else {\n        actualValue = actualValue.slice(0, -1);\n      }\n    }\n\n    // 4. If actualValue is a case-sensitive match for expectedValue,\n    //    return true.\n    if (compareBase64Mixed(actualValue, expectedValue)) {\n      return true;\n    }\n  }\n\n  // 7. Return false.\n  return false;\n}\n\n// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options\n// https://www.w3.org/TR/CSP2/#source-list-syntax\n// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1\nconst parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\\s|$)( +[!-~]*)?)?/i;\n\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n * @param {string} metadata\n */\nfunction parseMetadata(metadata) {\n  // 1. Let result be the empty set.\n  /** @type {{ algo: string, hash: string }[]} */\n  const result = [];\n\n  // 2. Let empty be equal to true.\n  let empty = true;\n\n  // 3. For each token returned by splitting metadata on spaces:\n  for (const token of metadata.split(' ')) {\n    // 1. Set empty to false.\n    empty = false;\n\n    // 2. Parse token as a hash-with-options.\n    const parsedToken = parseHashWithOptions.exec(token);\n\n    // 3. If token does not parse, continue to the next token.\n    if (parsedToken === null || parsedToken.groups === undefined || parsedToken.groups.algo === undefined) {\n      // Note: Chromium blocks the request at this point, but Firefox\n      // gives a warning that an invalid integrity was given. The\n      // correct behavior is to ignore these, and subsequently not\n      // check the integrity of the resource.\n      continue;\n    }\n\n    // 4. Let algorithm be the hash-algo component of token.\n    const algorithm = parsedToken.groups.algo.toLowerCase();\n\n    // 5. If algorithm is a hash function recognized by the user\n    //    agent, add the parsed token to result.\n    if (supportedHashes.includes(algorithm)) {\n      result.push(parsedToken.groups);\n    }\n  }\n\n  // 4. Return no metadata if empty is true, otherwise return result.\n  if (empty === true) {\n    return 'no metadata';\n  }\n  return result;\n}\n\n/**\n * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList\n */\nfunction getStrongestMetadata(metadataList) {\n  // Let algorithm be the algo component of the first item in metadataList.\n  // Can be sha256\n  let algorithm = metadataList[0].algo;\n  // If the algorithm is sha512, then it is the strongest\n  // and we can return immediately\n  if (algorithm[3] === '5') {\n    return algorithm;\n  }\n  for (let i = 1; i < metadataList.length; ++i) {\n    const metadata = metadataList[i];\n    // If the algorithm is sha512, then it is the strongest\n    // and we can break the loop immediately\n    if (metadata.algo[3] === '5') {\n      algorithm = 'sha512';\n      break;\n      // If the algorithm is sha384, then a potential sha256 or sha384 is ignored\n    } else if (algorithm[3] === '3') {\n      continue;\n      // algorithm is sha256, check if algorithm is sha384 and if so, set it as\n      // the strongest\n    } else if (metadata.algo[3] === '3') {\n      algorithm = 'sha384';\n    }\n  }\n  return algorithm;\n}\nfunction filterMetadataListByAlgorithm(metadataList, algorithm) {\n  if (metadataList.length === 1) {\n    return metadataList;\n  }\n  let pos = 0;\n  for (let i = 0; i < metadataList.length; ++i) {\n    if (metadataList[i].algo === algorithm) {\n      metadataList[pos++] = metadataList[i];\n    }\n  }\n  metadataList.length = pos;\n  return metadataList;\n}\n\n/**\n * Compares two base64 strings, allowing for base64url\n * in the second string.\n *\n* @param {string} actualValue always base64\n * @param {string} expectedValue base64 or base64url\n * @returns {boolean}\n */\nfunction compareBase64Mixed(actualValue, expectedValue) {\n  if (actualValue.length !== expectedValue.length) {\n    return false;\n  }\n  for (let i = 0; i < actualValue.length; ++i) {\n    if (actualValue[i] !== expectedValue[i]) {\n      if (actualValue[i] === '+' && expectedValue[i] === '-' || actualValue[i] === '/' && expectedValue[i] === '_') {\n        continue;\n      }\n      return false;\n    }\n  }\n  return true;\n}\n\n// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request\nfunction tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {\n  // TODO\n}\n\n/**\n * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}\n * @param {URL} A\n * @param {URL} B\n */\nfunction sameOrigin(A, B) {\n  // 1. If A and B are the same opaque origin, then return true.\n  if (A.origin === B.origin && A.origin === 'null') {\n    return true;\n  }\n\n  // 2. If A and B are both tuple origins and their schemes,\n  //    hosts, and port are identical, then return true.\n  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {\n    return true;\n  }\n\n  // 3. Return false.\n  return false;\n}\nfunction createDeferredPromise() {\n  let res;\n  let rej;\n  const promise = new Promise((resolve, reject) => {\n    res = resolve;\n    rej = reject;\n  });\n  return {\n    promise,\n    resolve: res,\n    reject: rej\n  };\n}\nfunction isAborted(fetchParams) {\n  return fetchParams.controller.state === 'aborted';\n}\nfunction isCancelled(fetchParams) {\n  return fetchParams.controller.state === 'aborted' || fetchParams.controller.state === 'terminated';\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-method-normalize\n * @param {string} method\n */\nfunction normalizeMethod(method) {\n  return normalizedMethodRecordsBase[method.toLowerCase()] ?? method;\n}\n\n// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string\nfunction serializeJavascriptValueToJSONString(value) {\n  // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).\n  const result = JSON.stringify(value);\n\n  // 2. If result is undefined, then throw a TypeError.\n  if (result === undefined) {\n    throw new TypeError('Value is not JSON serializable');\n  }\n\n  // 3. Assert: result is a string.\n  assert(typeof result === 'string');\n\n  // 4. Return result.\n  return result;\n}\n\n// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object\nconst esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));\n\n/**\n * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n * @param {string} name name of the instance\n * @param {symbol} kInternalIterator\n * @param {string | number} [keyIndex]\n * @param {string | number} [valueIndex]\n */\nfunction createIterator(name, kInternalIterator) {\n  let keyIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let valueIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var _target = /*#__PURE__*/new WeakMap();\n  var _kind = /*#__PURE__*/new WeakMap();\n  var _index = /*#__PURE__*/new WeakMap();\n  class FastIterableIterator {\n    /**\n     * @see https://webidl.spec.whatwg.org/#dfn-default-iterator-object\n     * @param {unknown} target\n     * @param {'key' | 'value' | 'key+value'} kind\n     */\n    constructor(target, kind) {\n      /** @type {any} */\n      _classPrivateFieldInitSpec(this, _target, void 0);\n      /** @type {'key' | 'value' | 'key+value'} */\n      _classPrivateFieldInitSpec(this, _kind, void 0);\n      /** @type {number} */\n      _classPrivateFieldInitSpec(this, _index, void 0);\n      _classPrivateFieldSet(_target, this, target);\n      _classPrivateFieldSet(_kind, this, kind);\n      _classPrivateFieldSet(_index, this, 0);\n    }\n    next() {\n      // 1. Let interface be the interface for which the iterator prototype object exists.\n      // 2. Let thisValue be the this value.\n      // 3. Let object be ? ToObject(thisValue).\n      // 4. If object is a platform object, then perform a security\n      //    check, passing:\n      // 5. If object is not a default iterator object for interface,\n      //    then throw a TypeError.\n      if (typeof this !== 'object' || this === null || !_target.has(_checkInRHS(this))) {\n        throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);\n      }\n\n      // 6. Let index be object’s index.\n      // 7. Let kind be object’s kind.\n      // 8. Let values be object’s target's value pairs to iterate over.\n      const index = _classPrivateFieldGet(_index, this);\n      const values = _classPrivateFieldGet(_target, this)[kInternalIterator];\n\n      // 9. Let len be the length of values.\n      const len = values.length;\n\n      // 10. If index is greater than or equal to len, then return\n      //     CreateIterResultObject(undefined, true).\n      if (index >= len) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      // 11. Let pair be the entry in values at index index.\n      const {\n        [keyIndex]: key,\n        [valueIndex]: value\n      } = values[index];\n\n      // 12. Set object’s index to index + 1.\n      _classPrivateFieldSet(_index, this, index + 1);\n\n      // 13. Return the iterator result for pair and kind.\n\n      // https://webidl.spec.whatwg.org/#iterator-result\n\n      // 1. Let result be a value determined by the value of kind:\n      let result;\n      switch (_classPrivateFieldGet(_kind, this)) {\n        case 'key':\n          // 1. Let idlKey be pair’s key.\n          // 2. Let key be the result of converting idlKey to an\n          //    ECMAScript value.\n          // 3. result is key.\n          result = key;\n          break;\n        case 'value':\n          // 1. Let idlValue be pair’s value.\n          // 2. Let value be the result of converting idlValue to\n          //    an ECMAScript value.\n          // 3. result is value.\n          result = value;\n          break;\n        case 'key+value':\n          // 1. Let idlKey be pair’s key.\n          // 2. Let idlValue be pair’s value.\n          // 3. Let key be the result of converting idlKey to an\n          //    ECMAScript value.\n          // 4. Let value be the result of converting idlValue to\n          //    an ECMAScript value.\n          // 5. Let array be ! ArrayCreate(2).\n          // 6. Call ! CreateDataProperty(array, \"0\", key).\n          // 7. Call ! CreateDataProperty(array, \"1\", value).\n          // 8. result is array.\n          result = [key, value];\n          break;\n      }\n\n      // 2. Return CreateIterResultObject(result, false).\n      return {\n        value: result,\n        done: false\n      };\n    }\n  }\n\n  // https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n  // @ts-ignore\n  delete FastIterableIterator.prototype.constructor;\n  Object.setPrototypeOf(FastIterableIterator.prototype, esIteratorPrototype);\n  Object.defineProperties(FastIterableIterator.prototype, {\n    [Symbol.toStringTag]: {\n      writable: false,\n      enumerable: false,\n      configurable: true,\n      value: `${name} Iterator`\n    },\n    next: {\n      writable: true,\n      enumerable: true,\n      configurable: true\n    }\n  });\n\n  /**\n   * @param {unknown} target\n   * @param {'key' | 'value' | 'key+value'} kind\n   * @returns {IterableIterator<any>}\n   */\n  return function (target, kind) {\n    return new FastIterableIterator(target, kind);\n  };\n}\n\n/**\n * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n * @param {string} name name of the instance\n * @param {any} object class\n * @param {symbol} kInternalIterator\n * @param {string | number} [keyIndex]\n * @param {string | number} [valueIndex]\n */\nfunction iteratorMixin(name, object, kInternalIterator) {\n  let keyIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let valueIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  const makeIterator = createIterator(name, kInternalIterator, keyIndex, valueIndex);\n  const properties = {\n    keys: {\n      writable: true,\n      enumerable: true,\n      configurable: true,\n      value: function keys() {\n        webidl.brandCheck(this, object);\n        return makeIterator(this, 'key');\n      }\n    },\n    values: {\n      writable: true,\n      enumerable: true,\n      configurable: true,\n      value: function values() {\n        webidl.brandCheck(this, object);\n        return makeIterator(this, 'value');\n      }\n    },\n    entries: {\n      writable: true,\n      enumerable: true,\n      configurable: true,\n      value: function entries() {\n        webidl.brandCheck(this, object);\n        return makeIterator(this, 'key+value');\n      }\n    },\n    forEach: {\n      writable: true,\n      enumerable: true,\n      configurable: true,\n      value: function forEach(callbackfn) {\n        let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalThis;\n        webidl.brandCheck(this, object);\n        webidl.argumentLengthCheck(arguments, 1, `${name}.forEach`);\n        if (typeof callbackfn !== 'function') {\n          throw new TypeError(`Failed to execute 'forEach' on '${name}': parameter 1 is not of type 'Function'.`);\n        }\n        for (const {\n          0: key,\n          1: value\n        } of makeIterator(this, 'key+value')) {\n          callbackfn.call(thisArg, value, key, this);\n        }\n      }\n    }\n  };\n  return Object.defineProperties(object.prototype, {\n    ...properties,\n    [Symbol.iterator]: {\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      value: properties.entries.value\n    }\n  });\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#body-fully-read\n */\nasync function fullyReadBody(body, processBody, processBodyError) {\n  // 1. If taskDestination is null, then set taskDestination to\n  //    the result of starting a new parallel queue.\n\n  // 2. Let successSteps given a byte sequence bytes be to queue a\n  //    fetch task to run processBody given bytes, with taskDestination.\n  const successSteps = processBody;\n\n  // 3. Let errorSteps be to queue a fetch task to run processBodyError,\n  //    with taskDestination.\n  const errorSteps = processBodyError;\n\n  // 4. Let reader be the result of getting a reader for body’s stream.\n  //    If that threw an exception, then run errorSteps with that\n  //    exception and return.\n  let reader;\n  try {\n    reader = body.stream.getReader();\n  } catch (e) {\n    errorSteps(e);\n    return;\n  }\n\n  // 5. Read all bytes from reader, given successSteps and errorSteps.\n  try {\n    successSteps(await readAllBytes(reader));\n  } catch (e) {\n    errorSteps(e);\n  }\n}\nfunction isReadableStreamLike(stream) {\n  return stream instanceof ReadableStream || stream[Symbol.toStringTag] === 'ReadableStream' && typeof stream.tee === 'function';\n}\n\n/**\n * @param {ReadableStreamController<Uint8Array>} controller\n */\nfunction readableStreamClose(controller) {\n  try {\n    controller.close();\n    controller.byobRequest?.respond(0);\n  } catch (err) {\n    // TODO: add comment explaining why this error occurs.\n    if (!err.message.includes('Controller is already closed') && !err.message.includes('ReadableStream is already closed')) {\n      throw err;\n    }\n  }\n}\nconst invalidIsomorphicEncodeValueRegex = /[^\\x00-\\xFF]/; // eslint-disable-line\n\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-encode\n * @param {string} input\n */\nfunction isomorphicEncode(input) {\n  // 1. Assert: input contains no code points greater than U+00FF.\n  assert(!invalidIsomorphicEncodeValueRegex.test(input));\n\n  // 2. Return a byte sequence whose length is equal to input’s code\n  //    point length and whose bytes have the same values as the\n  //    values of input’s code points, in the same order\n  return input;\n}\n\n/**\n * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes\n * @see https://streams.spec.whatwg.org/#read-loop\n * @param {ReadableStreamDefaultReader} reader\n */\nasync function readAllBytes(reader) {\n  const bytes = [];\n  let byteLength = 0;\n  while (true) {\n    const {\n      done,\n      value: chunk\n    } = await reader.read();\n    if (done) {\n      // 1. Call successSteps with bytes.\n      return Buffer.concat(bytes, byteLength);\n    }\n\n    // 1. If chunk is not a Uint8Array object, call failureSteps\n    //    with a TypeError and abort these steps.\n    if (!isUint8Array(chunk)) {\n      throw new TypeError('Received non-Uint8Array chunk');\n    }\n\n    // 2. Append the bytes represented by chunk to bytes.\n    bytes.push(chunk);\n    byteLength += chunk.length;\n\n    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#is-local\n * @param {URL} url\n */\nfunction urlIsLocal(url) {\n  assert('protocol' in url); // ensure it's a url object\n\n  const protocol = url.protocol;\n  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:';\n}\n\n/**\n * @param {string|URL} url\n * @returns {boolean}\n */\nfunction urlHasHttpsScheme(url) {\n  return typeof url === 'string' && url[5] === ':' && url[0] === 'h' && url[1] === 't' && url[2] === 't' && url[3] === 'p' && url[4] === 's' || url.protocol === 'https:';\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-scheme\n * @param {URL} url\n */\nfunction urlIsHttpHttpsScheme(url) {\n  assert('protocol' in url); // ensure it's a url object\n\n  const protocol = url.protocol;\n  return protocol === 'http:' || protocol === 'https:';\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#simple-range-header-value\n * @param {string} value\n * @param {boolean} allowWhitespace\n */\nfunction simpleRangeHeaderValue(value, allowWhitespace) {\n  // 1. Let data be the isomorphic decoding of value.\n  // Note: isomorphic decoding takes a sequence of bytes (ie. a Uint8Array) and turns it into a string,\n  // nothing more. We obviously don't need to do that if value is a string already.\n  const data = value;\n\n  // 2. If data does not start with \"bytes\", then return failure.\n  if (!data.startsWith('bytes')) {\n    return 'failure';\n  }\n\n  // 3. Let position be a position variable for data, initially pointing at the 5th code point of data.\n  const position = {\n    position: 5\n  };\n\n  // 4. If allowWhitespace is true, collect a sequence of code points that are HTTP tab or space,\n  //    from data given position.\n  if (allowWhitespace) {\n    collectASequenceOfCodePoints(char => char === '\\t' || char === ' ', data, position);\n  }\n\n  // 5. If the code point at position within data is not U+003D (=), then return failure.\n  if (data.charCodeAt(position.position) !== 0x3D) {\n    return 'failure';\n  }\n\n  // 6. Advance position by 1.\n  position.position++;\n\n  // 7. If allowWhitespace is true, collect a sequence of code points that are HTTP tab or space, from\n  //    data given position.\n  if (allowWhitespace) {\n    collectASequenceOfCodePoints(char => char === '\\t' || char === ' ', data, position);\n  }\n\n  // 8. Let rangeStart be the result of collecting a sequence of code points that are ASCII digits,\n  //    from data given position.\n  const rangeStart = collectASequenceOfCodePoints(char => {\n    const code = char.charCodeAt(0);\n    return code >= 0x30 && code <= 0x39;\n  }, data, position);\n\n  // 9. Let rangeStartValue be rangeStart, interpreted as decimal number, if rangeStart is not the\n  //    empty string; otherwise null.\n  const rangeStartValue = rangeStart.length ? Number(rangeStart) : null;\n\n  // 10. If allowWhitespace is true, collect a sequence of code points that are HTTP tab or space,\n  //     from data given position.\n  if (allowWhitespace) {\n    collectASequenceOfCodePoints(char => char === '\\t' || char === ' ', data, position);\n  }\n\n  // 11. If the code point at position within data is not U+002D (-), then return failure.\n  if (data.charCodeAt(position.position) !== 0x2D) {\n    return 'failure';\n  }\n\n  // 12. Advance position by 1.\n  position.position++;\n\n  // 13. If allowWhitespace is true, collect a sequence of code points that are HTTP tab\n  //     or space, from data given position.\n  // Note from Khafra: its the same step as in #8 again lol\n  if (allowWhitespace) {\n    collectASequenceOfCodePoints(char => char === '\\t' || char === ' ', data, position);\n  }\n\n  // 14. Let rangeEnd be the result of collecting a sequence of code points that are\n  //     ASCII digits, from data given position.\n  // Note from Khafra: you wouldn't guess it, but this is also the same step as #8\n  const rangeEnd = collectASequenceOfCodePoints(char => {\n    const code = char.charCodeAt(0);\n    return code >= 0x30 && code <= 0x39;\n  }, data, position);\n\n  // 15. Let rangeEndValue be rangeEnd, interpreted as decimal number, if rangeEnd\n  //     is not the empty string; otherwise null.\n  // Note from Khafra: THE SAME STEP, AGAIN!!!\n  // Note: why interpret as a decimal if we only collect ascii digits?\n  const rangeEndValue = rangeEnd.length ? Number(rangeEnd) : null;\n\n  // 16. If position is not past the end of data, then return failure.\n  if (position.position < data.length) {\n    return 'failure';\n  }\n\n  // 17. If rangeEndValue and rangeStartValue are null, then return failure.\n  if (rangeEndValue === null && rangeStartValue === null) {\n    return 'failure';\n  }\n\n  // 18. If rangeStartValue and rangeEndValue are numbers, and rangeStartValue is\n  //     greater than rangeEndValue, then return failure.\n  // Note: ... when can they not be numbers?\n  if (rangeStartValue > rangeEndValue) {\n    return 'failure';\n  }\n\n  // 19. Return (rangeStartValue, rangeEndValue).\n  return {\n    rangeStartValue,\n    rangeEndValue\n  };\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#build-a-content-range\n * @param {number} rangeStart\n * @param {number} rangeEnd\n * @param {number} fullLength\n */\nfunction buildContentRange(rangeStart, rangeEnd, fullLength) {\n  // 1. Let contentRange be `bytes `.\n  let contentRange = 'bytes ';\n\n  // 2. Append rangeStart, serialized and isomorphic encoded, to contentRange.\n  contentRange += isomorphicEncode(`${rangeStart}`);\n\n  // 3. Append 0x2D (-) to contentRange.\n  contentRange += '-';\n\n  // 4. Append rangeEnd, serialized and isomorphic encoded to contentRange.\n  contentRange += isomorphicEncode(`${rangeEnd}`);\n\n  // 5. Append 0x2F (/) to contentRange.\n  contentRange += '/';\n\n  // 6. Append fullLength, serialized and isomorphic encoded to contentRange.\n  contentRange += isomorphicEncode(`${fullLength}`);\n\n  // 7. Return contentRange.\n  return contentRange;\n}\n\n// A Stream, which pipes the response to zlib.createInflate() or\n// zlib.createInflateRaw() depending on the first byte of the Buffer.\n// If the lower byte of the first byte is 0x08, then the stream is\n// interpreted as a zlib stream, otherwise it's interpreted as a\n// raw deflate stream.\nclass InflateStream extends Transform {\n  _transform(chunk, encoding, callback) {\n    if (!this._inflateStream) {\n      if (chunk.length === 0) {\n        callback();\n        return;\n      }\n      this._inflateStream = (chunk[0] & 0x0F) === 0x08 ? zlib.createInflate() : zlib.createInflateRaw();\n      this._inflateStream.on('data', this.push.bind(this));\n      this._inflateStream.on('end', () => this.push(null));\n      this._inflateStream.on('error', err => this.destroy(err));\n    }\n    this._inflateStream.write(chunk, encoding, callback);\n  }\n  _final(callback) {\n    if (this._inflateStream) {\n      this._inflateStream.end();\n      this._inflateStream = null;\n    }\n    callback();\n  }\n}\nfunction createInflate() {\n  return new InflateStream();\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-extract-mime-type\n * @param {import('./headers').HeadersList} headers\n */\nfunction extractMimeType(headers) {\n  // 1. Let charset be null.\n  let charset = null;\n\n  // 2. Let essence be null.\n  let essence = null;\n\n  // 3. Let mimeType be null.\n  let mimeType = null;\n\n  // 4. Let values be the result of getting, decoding, and splitting `Content-Type` from headers.\n  const values = getDecodeSplit('content-type', headers);\n\n  // 5. If values is null, then return failure.\n  if (values === null) {\n    return 'failure';\n  }\n\n  // 6. For each value of values:\n  for (const value of values) {\n    // 6.1. Let temporaryMimeType be the result of parsing value.\n    const temporaryMimeType = parseMIMEType(value);\n\n    // 6.2. If temporaryMimeType is failure or its essence is \"*/*\", then continue.\n    if (temporaryMimeType === 'failure' || temporaryMimeType.essence === '*/*') {\n      continue;\n    }\n\n    // 6.3. Set mimeType to temporaryMimeType.\n    mimeType = temporaryMimeType;\n\n    // 6.4. If mimeType’s essence is not essence, then:\n    if (mimeType.essence !== essence) {\n      // 6.4.1. Set charset to null.\n      charset = null;\n\n      // 6.4.2. If mimeType’s parameters[\"charset\"] exists, then set charset to\n      //        mimeType’s parameters[\"charset\"].\n      if (mimeType.parameters.has('charset')) {\n        charset = mimeType.parameters.get('charset');\n      }\n\n      // 6.4.3. Set essence to mimeType’s essence.\n      essence = mimeType.essence;\n    } else if (!mimeType.parameters.has('charset') && charset !== null) {\n      // 6.5. Otherwise, if mimeType’s parameters[\"charset\"] does not exist, and\n      //      charset is non-null, set mimeType’s parameters[\"charset\"] to charset.\n      mimeType.parameters.set('charset', charset);\n    }\n  }\n\n  // 7. If mimeType is null, then return failure.\n  if (mimeType == null) {\n    return 'failure';\n  }\n\n  // 8. Return mimeType.\n  return mimeType;\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#header-value-get-decode-and-split\n * @param {string|null} value\n */\nfunction gettingDecodingSplitting(value) {\n  // 1. Let input be the result of isomorphic decoding value.\n  const input = value;\n\n  // 2. Let position be a position variable for input, initially pointing at the start of input.\n  const position = {\n    position: 0\n  };\n\n  // 3. Let values be a list of strings, initially empty.\n  const values = [];\n\n  // 4. Let temporaryValue be the empty string.\n  let temporaryValue = '';\n\n  // 5. While position is not past the end of input:\n  while (position.position < input.length) {\n    // 5.1. Append the result of collecting a sequence of code points that are not U+0022 (\")\n    //      or U+002C (,) from input, given position, to temporaryValue.\n    temporaryValue += collectASequenceOfCodePoints(char => char !== '\"' && char !== ',', input, position);\n\n    // 5.2. If position is not past the end of input, then:\n    if (position.position < input.length) {\n      // 5.2.1. If the code point at position within input is U+0022 (\"), then:\n      if (input.charCodeAt(position.position) === 0x22) {\n        // 5.2.1.1. Append the result of collecting an HTTP quoted string from input, given position, to temporaryValue.\n        temporaryValue += collectAnHTTPQuotedString(input, position);\n\n        // 5.2.1.2. If position is not past the end of input, then continue.\n        if (position.position < input.length) {\n          continue;\n        }\n      } else {\n        // 5.2.2. Otherwise:\n\n        // 5.2.2.1. Assert: the code point at position within input is U+002C (,).\n        assert(input.charCodeAt(position.position) === 0x2C);\n\n        // 5.2.2.2. Advance position by 1.\n        position.position++;\n      }\n    }\n\n    // 5.3. Remove all HTTP tab or space from the start and end of temporaryValue.\n    temporaryValue = removeChars(temporaryValue, true, true, char => char === 0x9 || char === 0x20);\n\n    // 5.4. Append temporaryValue to values.\n    values.push(temporaryValue);\n\n    // 5.6. Set temporaryValue to the empty string.\n    temporaryValue = '';\n  }\n\n  // 6. Return values.\n  return values;\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-list-get-decode-split\n * @param {string} name lowercase header name\n * @param {import('./headers').HeadersList} list\n */\nfunction getDecodeSplit(name, list) {\n  // 1. Let value be the result of getting name from list.\n  const value = list.get(name, true);\n\n  // 2. If value is null, then return null.\n  if (value === null) {\n    return null;\n  }\n\n  // 3. Return the result of getting, decoding, and splitting value.\n  return gettingDecodingSplitting(value);\n}\nconst textDecoder = new TextDecoder();\n\n/**\n * @see https://encoding.spec.whatwg.org/#utf-8-decode\n * @param {Buffer} buffer\n */\nfunction utf8DecodeBytes(buffer) {\n  if (buffer.length === 0) {\n    return '';\n  }\n\n  // 1. Let buffer be the result of peeking three bytes from\n  //    ioQueue, converted to a byte sequence.\n\n  // 2. If buffer is 0xEF 0xBB 0xBF, then read three\n  //    bytes from ioQueue. (Do nothing with those bytes.)\n  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n    buffer = buffer.subarray(3);\n  }\n\n  // 3. Process a queue with an instance of UTF-8’s\n  //    decoder, ioQueue, output, and \"replacement\".\n  const output = textDecoder.decode(buffer);\n\n  // 4. Return output.\n  return output;\n}\nclass EnvironmentSettingsObjectBase {\n  constructor() {\n    _defineProperty(this, \"policyContainer\", makePolicyContainer());\n  }\n  get baseUrl() {\n    return getGlobalOrigin();\n  }\n  get origin() {\n    return this.baseUrl?.origin;\n  }\n}\nclass EnvironmentSettingsObject {\n  constructor() {\n    _defineProperty(this, \"settingsObject\", new EnvironmentSettingsObjectBase());\n  }\n}\nconst environmentSettingsObject = new EnvironmentSettingsObject();\nmodule.exports = {\n  isAborted,\n  isCancelled,\n  isValidEncodedURL,\n  createDeferredPromise,\n  ReadableStreamFrom,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  clampAndCoarsenConnectionTimingInfo,\n  coarsenedSharedCurrentTime,\n  determineRequestsReferrer,\n  makePolicyContainer,\n  clonePolicyContainer,\n  appendFetchMetadata,\n  appendRequestOriginHeader,\n  TAOCheck,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  createOpaqueTimingInfo,\n  setRequestReferrerPolicyOnRedirect,\n  isValidHTTPToken,\n  requestBadPort,\n  requestCurrentURL,\n  responseURL,\n  responseLocationURL,\n  isBlobLike,\n  isURLPotentiallyTrustworthy,\n  isValidReasonPhrase,\n  sameOrigin,\n  normalizeMethod,\n  serializeJavascriptValueToJSONString,\n  iteratorMixin,\n  createIterator,\n  isValidHeaderName,\n  isValidHeaderValue,\n  isErrorLike,\n  fullyReadBody,\n  bytesMatch,\n  isReadableStreamLike,\n  readableStreamClose,\n  isomorphicEncode,\n  urlIsLocal,\n  urlHasHttpsScheme,\n  urlIsHttpHttpsScheme,\n  readAllBytes,\n  simpleRangeHeaderValue,\n  buildContentRange,\n  parseMetadata,\n  createInflate,\n  extractMimeType,\n  getDecodeSplit,\n  utf8DecodeBytes,\n  environmentSettingsObject\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fetch/webidl.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/web/fetch/webidl.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  types,\n  inspect\n} = __webpack_require__(/*! node:util */ \"node:util\");\nconst {\n  toUSVString\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\n\n/** @type {import('../../../types/webidl').Webidl} */\nconst webidl = {};\nwebidl.converters = {};\nwebidl.util = {};\nwebidl.errors = {};\nwebidl.errors.exception = function (message) {\n  return new TypeError(`${message.header}: ${message.message}`);\n};\nwebidl.errors.conversionFailed = function (context) {\n  const plural = context.types.length === 1 ? '' : ' one of';\n  const message = `${context.argument} could not be converted to` + `${plural}: ${context.types.join(', ')}.`;\n  return webidl.errors.exception({\n    header: context.prefix,\n    message\n  });\n};\nwebidl.errors.invalidArgument = function (context) {\n  return webidl.errors.exception({\n    header: context.prefix,\n    message: `\"${context.value}\" is an invalid ${context.type}.`\n  });\n};\n\n// https://webidl.spec.whatwg.org/#implements\nwebidl.brandCheck = function (V, I, opts) {\n  if (opts?.strict !== false) {\n    if (!(V instanceof I)) {\n      const err = new TypeError('Illegal invocation');\n      err.code = 'ERR_INVALID_THIS'; // node compat.\n      throw err;\n    }\n  } else {\n    if (V?.[Symbol.toStringTag] !== I.prototype[Symbol.toStringTag]) {\n      const err = new TypeError('Illegal invocation');\n      err.code = 'ERR_INVALID_THIS'; // node compat.\n      throw err;\n    }\n  }\n};\nwebidl.argumentLengthCheck = function (_ref, min, ctx) {\n  let {\n    length\n  } = _ref;\n  if (length < min) {\n    throw webidl.errors.exception({\n      message: `${min} argument${min !== 1 ? 's' : ''} required, ` + `but${length ? ' only' : ''} ${length} found.`,\n      header: ctx\n    });\n  }\n};\nwebidl.illegalConstructor = function () {\n  throw webidl.errors.exception({\n    header: 'TypeError',\n    message: 'Illegal constructor'\n  });\n};\n\n// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\nwebidl.util.Type = function (V) {\n  switch (typeof V) {\n    case 'undefined':\n      return 'Undefined';\n    case 'boolean':\n      return 'Boolean';\n    case 'string':\n      return 'String';\n    case 'symbol':\n      return 'Symbol';\n    case 'number':\n      return 'Number';\n    case 'bigint':\n      return 'BigInt';\n    case 'function':\n    case 'object':\n      {\n        if (V === null) {\n          return 'Null';\n        }\n        return 'Object';\n      }\n  }\n};\n\n// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\nwebidl.util.ConvertToInt = function (V, bitLength, signedness, opts) {\n  let upperBound;\n  let lowerBound;\n\n  // 1. If bitLength is 64, then:\n  if (bitLength === 64) {\n    // 1. Let upperBound be 2^53 − 1.\n    upperBound = Math.pow(2, 53) - 1;\n\n    // 2. If signedness is \"unsigned\", then let lowerBound be 0.\n    if (signedness === 'unsigned') {\n      lowerBound = 0;\n    } else {\n      // 3. Otherwise let lowerBound be −2^53 + 1.\n      lowerBound = Math.pow(-2, 53) + 1;\n    }\n  } else if (signedness === 'unsigned') {\n    // 2. Otherwise, if signedness is \"unsigned\", then:\n\n    // 1. Let lowerBound be 0.\n    lowerBound = 0;\n\n    // 2. Let upperBound be 2^bitLength − 1.\n    upperBound = Math.pow(2, bitLength) - 1;\n  } else {\n    // 3. Otherwise:\n\n    // 1. Let lowerBound be -2^bitLength − 1.\n    lowerBound = Math.pow(-2, bitLength) - 1;\n\n    // 2. Let upperBound be 2^bitLength − 1 − 1.\n    upperBound = Math.pow(2, bitLength - 1) - 1;\n  }\n\n  // 4. Let x be ? ToNumber(V).\n  let x = Number(V);\n\n  // 5. If x is −0, then set x to +0.\n  if (x === 0) {\n    x = 0;\n  }\n\n  // 6. If the conversion is to an IDL type associated\n  //    with the [EnforceRange] extended attribute, then:\n  if (opts?.enforceRange === true) {\n    // 1. If x is NaN, +∞, or −∞, then throw a TypeError.\n    if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {\n      throw webidl.errors.exception({\n        header: 'Integer conversion',\n        message: `Could not convert ${webidl.util.Stringify(V)} to an integer.`\n      });\n    }\n\n    // 2. Set x to IntegerPart(x).\n    x = webidl.util.IntegerPart(x);\n\n    // 3. If x < lowerBound or x > upperBound, then\n    //    throw a TypeError.\n    if (x < lowerBound || x > upperBound) {\n      throw webidl.errors.exception({\n        header: 'Integer conversion',\n        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`\n      });\n    }\n\n    // 4. Return x.\n    return x;\n  }\n\n  // 7. If x is not NaN and the conversion is to an IDL\n  //    type associated with the [Clamp] extended\n  //    attribute, then:\n  if (!Number.isNaN(x) && opts?.clamp === true) {\n    // 1. Set x to min(max(x, lowerBound), upperBound).\n    x = Math.min(Math.max(x, lowerBound), upperBound);\n\n    // 2. Round x to the nearest integer, choosing the\n    //    even integer if it lies halfway between two,\n    //    and choosing +0 rather than −0.\n    if (Math.floor(x) % 2 === 0) {\n      x = Math.floor(x);\n    } else {\n      x = Math.ceil(x);\n    }\n\n    // 3. Return x.\n    return x;\n  }\n\n  // 8. If x is NaN, +0, +∞, or −∞, then return +0.\n  if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {\n    return 0;\n  }\n\n  // 9. Set x to IntegerPart(x).\n  x = webidl.util.IntegerPart(x);\n\n  // 10. Set x to x modulo 2^bitLength.\n  x = x % Math.pow(2, bitLength);\n\n  // 11. If signedness is \"signed\" and x ≥ 2^bitLength − 1,\n  //    then return x − 2^bitLength.\n  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {\n    return x - Math.pow(2, bitLength);\n  }\n\n  // 12. Otherwise, return x.\n  return x;\n};\n\n// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart\nwebidl.util.IntegerPart = function (n) {\n  // 1. Let r be floor(abs(n)).\n  const r = Math.floor(Math.abs(n));\n\n  // 2. If n < 0, then return -1 × r.\n  if (n < 0) {\n    return -1 * r;\n  }\n\n  // 3. Otherwise, return r.\n  return r;\n};\nwebidl.util.Stringify = function (V) {\n  const type = webidl.util.Type(V);\n  switch (type) {\n    case 'Symbol':\n      return `Symbol(${V.description})`;\n    case 'Object':\n      return inspect(V);\n    case 'String':\n      return `\"${V}\"`;\n    default:\n      return `${V}`;\n  }\n};\n\n// https://webidl.spec.whatwg.org/#es-sequence\nwebidl.sequenceConverter = function (converter) {\n  return (V, prefix, argument, Iterable) => {\n    // 1. If Type(V) is not Object, throw a TypeError.\n    if (webidl.util.Type(V) !== 'Object') {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: `${argument} (${webidl.util.Stringify(V)}) is not iterable.`\n      });\n    }\n\n    // 2. Let method be ? GetMethod(V, @@iterator).\n    /** @type {Generator} */\n    const method = typeof Iterable === 'function' ? Iterable() : V?.[Symbol.iterator]?.();\n    const seq = [];\n    let index = 0;\n\n    // 3. If method is undefined, throw a TypeError.\n    if (method === undefined || typeof method.next !== 'function') {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: `${argument} is not iterable.`\n      });\n    }\n\n    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable\n    while (true) {\n      const {\n        done,\n        value\n      } = method.next();\n      if (done) {\n        break;\n      }\n      seq.push(converter(value, prefix, `${argument}[${index++}]`));\n    }\n    return seq;\n  };\n};\n\n// https://webidl.spec.whatwg.org/#es-to-record\nwebidl.recordConverter = function (keyConverter, valueConverter) {\n  return (O, prefix, argument) => {\n    // 1. If Type(O) is not Object, throw a TypeError.\n    if (webidl.util.Type(O) !== 'Object') {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: `${argument} (\"${webidl.util.Type(O)}\") is not an Object.`\n      });\n    }\n\n    // 2. Let result be a new empty instance of record<K, V>.\n    const result = {};\n    if (!types.isProxy(O)) {\n      // 1. Let desc be ? O.[[GetOwnProperty]](key).\n      const keys = [...Object.getOwnPropertyNames(O), ...Object.getOwnPropertySymbols(O)];\n      for (const key of keys) {\n        // 1. Let typedKey be key converted to an IDL value of type K.\n        const typedKey = keyConverter(key, prefix, argument);\n\n        // 2. Let value be ? Get(O, key).\n        // 3. Let typedValue be value converted to an IDL value of type V.\n        const typedValue = valueConverter(O[key], prefix, argument);\n\n        // 4. Set result[typedKey] to typedValue.\n        result[typedKey] = typedValue;\n      }\n\n      // 5. Return result.\n      return result;\n    }\n\n    // 3. Let keys be ? O.[[OwnPropertyKeys]]().\n    const keys = Reflect.ownKeys(O);\n\n    // 4. For each key of keys.\n    for (const key of keys) {\n      // 1. Let desc be ? O.[[GetOwnProperty]](key).\n      const desc = Reflect.getOwnPropertyDescriptor(O, key);\n\n      // 2. If desc is not undefined and desc.[[Enumerable]] is true:\n      if (desc?.enumerable) {\n        // 1. Let typedKey be key converted to an IDL value of type K.\n        const typedKey = keyConverter(key, prefix, argument);\n\n        // 2. Let value be ? Get(O, key).\n        // 3. Let typedValue be value converted to an IDL value of type V.\n        const typedValue = valueConverter(O[key], prefix, argument);\n\n        // 4. Set result[typedKey] to typedValue.\n        result[typedKey] = typedValue;\n      }\n    }\n\n    // 5. Return result.\n    return result;\n  };\n};\nwebidl.interfaceConverter = function (i) {\n  return (V, prefix, argument, opts) => {\n    if (opts?.strict !== false && !(V instanceof i)) {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: `Expected ${argument} (\"${webidl.util.Stringify(V)}\") to be an instance of ${i.name}.`\n      });\n    }\n    return V;\n  };\n};\nwebidl.dictionaryConverter = function (converters) {\n  return (dictionary, prefix, argument) => {\n    const type = webidl.util.Type(dictionary);\n    const dict = {};\n    if (type === 'Null' || type === 'Undefined') {\n      return dict;\n    } else if (type !== 'Object') {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`\n      });\n    }\n    for (const options of converters) {\n      const {\n        key,\n        defaultValue,\n        required,\n        converter\n      } = options;\n      if (required === true) {\n        if (!Object.hasOwn(dictionary, key)) {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: `Missing required key \"${key}\".`\n          });\n        }\n      }\n      let value = dictionary[key];\n      const hasDefault = Object.hasOwn(options, 'defaultValue');\n\n      // Only use defaultValue if value is undefined and\n      // a defaultValue options was provided.\n      if (hasDefault && value !== null) {\n        value ??= defaultValue();\n      }\n\n      // A key can be optional and have no default value.\n      // When this happens, do not perform a conversion,\n      // and do not assign the key a value.\n      if (required || hasDefault || value !== undefined) {\n        value = converter(value, prefix, `${argument}.${key}`);\n        if (options.allowedValues && !options.allowedValues.includes(value)) {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`\n          });\n        }\n        dict[key] = value;\n      }\n    }\n    return dict;\n  };\n};\nwebidl.nullableConverter = function (converter) {\n  return (V, prefix, argument) => {\n    if (V === null) {\n      return V;\n    }\n    return converter(V, prefix, argument);\n  };\n};\n\n// https://webidl.spec.whatwg.org/#es-DOMString\nwebidl.converters.DOMString = function (V, prefix, argument, opts) {\n  // 1. If V is null and the conversion is to an IDL type\n  //    associated with the [LegacyNullToEmptyString]\n  //    extended attribute, then return the DOMString value\n  //    that represents the empty string.\n  if (V === null && opts?.legacyNullToEmptyString) {\n    return '';\n  }\n\n  // 2. Let x be ? ToString(V).\n  if (typeof V === 'symbol') {\n    throw webidl.errors.exception({\n      header: prefix,\n      message: `${argument} is a symbol, which cannot be converted to a DOMString.`\n    });\n  }\n\n  // 3. Return the IDL DOMString value that represents the\n  //    same sequence of code units as the one the\n  //    ECMAScript String value x represents.\n  return String(V);\n};\n\n// https://webidl.spec.whatwg.org/#es-ByteString\nwebidl.converters.ByteString = function (V, prefix, argument) {\n  // 1. Let x be ? ToString(V).\n  // Note: DOMString converter perform ? ToString(V)\n  const x = webidl.converters.DOMString(V, prefix, argument);\n\n  // 2. If the value of any element of x is greater than\n  //    255, then throw a TypeError.\n  for (let index = 0; index < x.length; index++) {\n    if (x.charCodeAt(index) > 255) {\n      throw new TypeError('Cannot convert argument to a ByteString because the character at ' + `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);\n    }\n  }\n\n  // 3. Return an IDL ByteString value whose length is the\n  //    length of x, and where the value of each element is\n  //    the value of the corresponding element of x.\n  return x;\n};\n\n// https://webidl.spec.whatwg.org/#es-USVString\n// TODO: rewrite this so we can control the errors thrown\nwebidl.converters.USVString = toUSVString;\n\n// https://webidl.spec.whatwg.org/#es-boolean\nwebidl.converters.boolean = function (V) {\n  // 1. Let x be the result of computing ToBoolean(V).\n  const x = Boolean(V);\n\n  // 2. Return the IDL boolean value that is the one that represents\n  //    the same truth value as the ECMAScript Boolean value x.\n  return x;\n};\n\n// https://webidl.spec.whatwg.org/#es-any\nwebidl.converters.any = function (V) {\n  return V;\n};\n\n// https://webidl.spec.whatwg.org/#es-long-long\nwebidl.converters['long long'] = function (V, prefix, argument) {\n  // 1. Let x be ? ConvertToInt(V, 64, \"signed\").\n  const x = webidl.util.ConvertToInt(V, 64, 'signed', undefined, prefix, argument);\n\n  // 2. Return the IDL long long value that represents\n  //    the same numeric value as x.\n  return x;\n};\n\n// https://webidl.spec.whatwg.org/#es-unsigned-long-long\nwebidl.converters['unsigned long long'] = function (V, prefix, argument) {\n  // 1. Let x be ? ConvertToInt(V, 64, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 64, 'unsigned', undefined, prefix, argument);\n\n  // 2. Return the IDL unsigned long long value that\n  //    represents the same numeric value as x.\n  return x;\n};\n\n// https://webidl.spec.whatwg.org/#es-unsigned-long\nwebidl.converters['unsigned long'] = function (V, prefix, argument) {\n  // 1. Let x be ? ConvertToInt(V, 32, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 32, 'unsigned', undefined, prefix, argument);\n\n  // 2. Return the IDL unsigned long value that\n  //    represents the same numeric value as x.\n  return x;\n};\n\n// https://webidl.spec.whatwg.org/#es-unsigned-short\nwebidl.converters['unsigned short'] = function (V, prefix, argument, opts) {\n  // 1. Let x be ? ConvertToInt(V, 16, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts, prefix, argument);\n\n  // 2. Return the IDL unsigned short value that represents\n  //    the same numeric value as x.\n  return x;\n};\n\n// https://webidl.spec.whatwg.org/#idl-ArrayBuffer\nwebidl.converters.ArrayBuffer = function (V, prefix, argument, opts) {\n  // 1. If Type(V) is not Object, or V does not have an\n  //    [[ArrayBufferData]] internal slot, then throw a\n  //    TypeError.\n  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances\n  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances\n  if (webidl.util.Type(V) !== 'Object' || !types.isAnyArrayBuffer(V)) {\n    throw webidl.errors.conversionFailed({\n      prefix,\n      argument: `${argument} (\"${webidl.util.Stringify(V)}\")`,\n      types: ['ArrayBuffer']\n    });\n  }\n\n  // 2. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V) is true, then throw a\n  //    TypeError.\n  if (opts?.allowShared === false && types.isSharedArrayBuffer(V)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    });\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V) is true, then throw a\n  //    TypeError.\n  if (V.resizable || V.growable) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'Received a resizable ArrayBuffer.'\n    });\n  }\n\n  // 4. Return the IDL ArrayBuffer value that is a\n  //    reference to the same object as V.\n  return V;\n};\nwebidl.converters.TypedArray = function (V, T, prefix, name, opts) {\n  // 1. Let T be the IDL type V is being converted to.\n\n  // 2. If Type(V) is not Object, or V does not have a\n  //    [[TypedArrayName]] internal slot with a value\n  //    equal to T’s name, then throw a TypeError.\n  if (webidl.util.Type(V) !== 'Object' || !types.isTypedArray(V) || V.constructor.name !== T.name) {\n    throw webidl.errors.conversionFailed({\n      prefix,\n      argument: `${name} (\"${webidl.util.Stringify(V)}\")`,\n      types: [T.name]\n    });\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    });\n  }\n\n  // 4. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  if (V.buffer.resizable || V.buffer.growable) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'Received a resizable ArrayBuffer.'\n    });\n  }\n\n  // 5. Return the IDL value of type T that is a reference\n  //    to the same object as V.\n  return V;\n};\nwebidl.converters.DataView = function (V, prefix, name, opts) {\n  // 1. If Type(V) is not Object, or V does not have a\n  //    [[DataView]] internal slot, then throw a TypeError.\n  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {\n    throw webidl.errors.exception({\n      header: prefix,\n      message: `${name} is not a DataView.`\n    });\n  }\n\n  // 2. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,\n  //    then throw a TypeError.\n  if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    });\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  if (V.buffer.resizable || V.buffer.growable) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'Received a resizable ArrayBuffer.'\n    });\n  }\n\n  // 4. Return the IDL DataView value that is a reference\n  //    to the same object as V.\n  return V;\n};\n\n// https://webidl.spec.whatwg.org/#BufferSource\nwebidl.converters.BufferSource = function (V, prefix, name, opts) {\n  if (types.isAnyArrayBuffer(V)) {\n    return webidl.converters.ArrayBuffer(V, prefix, name, {\n      ...opts,\n      allowShared: false\n    });\n  }\n  if (types.isTypedArray(V)) {\n    return webidl.converters.TypedArray(V, V.constructor, prefix, name, {\n      ...opts,\n      allowShared: false\n    });\n  }\n  if (types.isDataView(V)) {\n    return webidl.converters.DataView(V, prefix, name, {\n      ...opts,\n      allowShared: false\n    });\n  }\n  throw webidl.errors.conversionFailed({\n    prefix,\n    argument: `${name} (\"${webidl.util.Stringify(V)}\")`,\n    types: ['BufferSource']\n  });\n};\nwebidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(webidl.converters.ByteString);\nwebidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(webidl.converters['sequence<ByteString>']);\nwebidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(webidl.converters.ByteString, webidl.converters.ByteString);\nmodule.exports = {\n  webidl\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/encoding.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/encoding.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * @see https://encoding.spec.whatwg.org/#concept-encoding-get\n * @param {string|undefined} label\n */\nfunction getEncoding(label) {\n  if (!label) {\n    return 'failure';\n  }\n\n  // 1. Remove any leading and trailing ASCII whitespace from label.\n  // 2. If label is an ASCII case-insensitive match for any of the\n  //    labels listed in the table below, then return the\n  //    corresponding encoding; otherwise return failure.\n  switch (label.trim().toLowerCase()) {\n    case 'unicode-1-1-utf-8':\n    case 'unicode11utf8':\n    case 'unicode20utf8':\n    case 'utf-8':\n    case 'utf8':\n    case 'x-unicode20utf8':\n      return 'UTF-8';\n    case '866':\n    case 'cp866':\n    case 'csibm866':\n    case 'ibm866':\n      return 'IBM866';\n    case 'csisolatin2':\n    case 'iso-8859-2':\n    case 'iso-ir-101':\n    case 'iso8859-2':\n    case 'iso88592':\n    case 'iso_8859-2':\n    case 'iso_8859-2:1987':\n    case 'l2':\n    case 'latin2':\n      return 'ISO-8859-2';\n    case 'csisolatin3':\n    case 'iso-8859-3':\n    case 'iso-ir-109':\n    case 'iso8859-3':\n    case 'iso88593':\n    case 'iso_8859-3':\n    case 'iso_8859-3:1988':\n    case 'l3':\n    case 'latin3':\n      return 'ISO-8859-3';\n    case 'csisolatin4':\n    case 'iso-8859-4':\n    case 'iso-ir-110':\n    case 'iso8859-4':\n    case 'iso88594':\n    case 'iso_8859-4':\n    case 'iso_8859-4:1988':\n    case 'l4':\n    case 'latin4':\n      return 'ISO-8859-4';\n    case 'csisolatincyrillic':\n    case 'cyrillic':\n    case 'iso-8859-5':\n    case 'iso-ir-144':\n    case 'iso8859-5':\n    case 'iso88595':\n    case 'iso_8859-5':\n    case 'iso_8859-5:1988':\n      return 'ISO-8859-5';\n    case 'arabic':\n    case 'asmo-708':\n    case 'csiso88596e':\n    case 'csiso88596i':\n    case 'csisolatinarabic':\n    case 'ecma-114':\n    case 'iso-8859-6':\n    case 'iso-8859-6-e':\n    case 'iso-8859-6-i':\n    case 'iso-ir-127':\n    case 'iso8859-6':\n    case 'iso88596':\n    case 'iso_8859-6':\n    case 'iso_8859-6:1987':\n      return 'ISO-8859-6';\n    case 'csisolatingreek':\n    case 'ecma-118':\n    case 'elot_928':\n    case 'greek':\n    case 'greek8':\n    case 'iso-8859-7':\n    case 'iso-ir-126':\n    case 'iso8859-7':\n    case 'iso88597':\n    case 'iso_8859-7':\n    case 'iso_8859-7:1987':\n    case 'sun_eu_greek':\n      return 'ISO-8859-7';\n    case 'csiso88598e':\n    case 'csisolatinhebrew':\n    case 'hebrew':\n    case 'iso-8859-8':\n    case 'iso-8859-8-e':\n    case 'iso-ir-138':\n    case 'iso8859-8':\n    case 'iso88598':\n    case 'iso_8859-8':\n    case 'iso_8859-8:1988':\n    case 'visual':\n      return 'ISO-8859-8';\n    case 'csiso88598i':\n    case 'iso-8859-8-i':\n    case 'logical':\n      return 'ISO-8859-8-I';\n    case 'csisolatin6':\n    case 'iso-8859-10':\n    case 'iso-ir-157':\n    case 'iso8859-10':\n    case 'iso885910':\n    case 'l6':\n    case 'latin6':\n      return 'ISO-8859-10';\n    case 'iso-8859-13':\n    case 'iso8859-13':\n    case 'iso885913':\n      return 'ISO-8859-13';\n    case 'iso-8859-14':\n    case 'iso8859-14':\n    case 'iso885914':\n      return 'ISO-8859-14';\n    case 'csisolatin9':\n    case 'iso-8859-15':\n    case 'iso8859-15':\n    case 'iso885915':\n    case 'iso_8859-15':\n    case 'l9':\n      return 'ISO-8859-15';\n    case 'iso-8859-16':\n      return 'ISO-8859-16';\n    case 'cskoi8r':\n    case 'koi':\n    case 'koi8':\n    case 'koi8-r':\n    case 'koi8_r':\n      return 'KOI8-R';\n    case 'koi8-ru':\n    case 'koi8-u':\n      return 'KOI8-U';\n    case 'csmacintosh':\n    case 'mac':\n    case 'macintosh':\n    case 'x-mac-roman':\n      return 'macintosh';\n    case 'iso-8859-11':\n    case 'iso8859-11':\n    case 'iso885911':\n    case 'tis-620':\n    case 'windows-874':\n      return 'windows-874';\n    case 'cp1250':\n    case 'windows-1250':\n    case 'x-cp1250':\n      return 'windows-1250';\n    case 'cp1251':\n    case 'windows-1251':\n    case 'x-cp1251':\n      return 'windows-1251';\n    case 'ansi_x3.4-1968':\n    case 'ascii':\n    case 'cp1252':\n    case 'cp819':\n    case 'csisolatin1':\n    case 'ibm819':\n    case 'iso-8859-1':\n    case 'iso-ir-100':\n    case 'iso8859-1':\n    case 'iso88591':\n    case 'iso_8859-1':\n    case 'iso_8859-1:1987':\n    case 'l1':\n    case 'latin1':\n    case 'us-ascii':\n    case 'windows-1252':\n    case 'x-cp1252':\n      return 'windows-1252';\n    case 'cp1253':\n    case 'windows-1253':\n    case 'x-cp1253':\n      return 'windows-1253';\n    case 'cp1254':\n    case 'csisolatin5':\n    case 'iso-8859-9':\n    case 'iso-ir-148':\n    case 'iso8859-9':\n    case 'iso88599':\n    case 'iso_8859-9':\n    case 'iso_8859-9:1989':\n    case 'l5':\n    case 'latin5':\n    case 'windows-1254':\n    case 'x-cp1254':\n      return 'windows-1254';\n    case 'cp1255':\n    case 'windows-1255':\n    case 'x-cp1255':\n      return 'windows-1255';\n    case 'cp1256':\n    case 'windows-1256':\n    case 'x-cp1256':\n      return 'windows-1256';\n    case 'cp1257':\n    case 'windows-1257':\n    case 'x-cp1257':\n      return 'windows-1257';\n    case 'cp1258':\n    case 'windows-1258':\n    case 'x-cp1258':\n      return 'windows-1258';\n    case 'x-mac-cyrillic':\n    case 'x-mac-ukrainian':\n      return 'x-mac-cyrillic';\n    case 'chinese':\n    case 'csgb2312':\n    case 'csiso58gb231280':\n    case 'gb2312':\n    case 'gb_2312':\n    case 'gb_2312-80':\n    case 'gbk':\n    case 'iso-ir-58':\n    case 'x-gbk':\n      return 'GBK';\n    case 'gb18030':\n      return 'gb18030';\n    case 'big5':\n    case 'big5-hkscs':\n    case 'cn-big5':\n    case 'csbig5':\n    case 'x-x-big5':\n      return 'Big5';\n    case 'cseucpkdfmtjapanese':\n    case 'euc-jp':\n    case 'x-euc-jp':\n      return 'EUC-JP';\n    case 'csiso2022jp':\n    case 'iso-2022-jp':\n      return 'ISO-2022-JP';\n    case 'csshiftjis':\n    case 'ms932':\n    case 'ms_kanji':\n    case 'shift-jis':\n    case 'shift_jis':\n    case 'sjis':\n    case 'windows-31j':\n    case 'x-sjis':\n      return 'Shift_JIS';\n    case 'cseuckr':\n    case 'csksc56011987':\n    case 'euc-kr':\n    case 'iso-ir-149':\n    case 'korean':\n    case 'ks_c_5601-1987':\n    case 'ks_c_5601-1989':\n    case 'ksc5601':\n    case 'ksc_5601':\n    case 'windows-949':\n      return 'EUC-KR';\n    case 'csiso2022kr':\n    case 'hz-gb-2312':\n    case 'iso-2022-cn':\n    case 'iso-2022-cn-ext':\n    case 'iso-2022-kr':\n    case 'replacement':\n      return 'replacement';\n    case 'unicodefffe':\n    case 'utf-16be':\n      return 'UTF-16BE';\n    case 'csunicode':\n    case 'iso-10646-ucs-2':\n    case 'ucs-2':\n    case 'unicode':\n    case 'unicodefeff':\n    case 'utf-16':\n    case 'utf-16le':\n      return 'UTF-16LE';\n    case 'x-user-defined':\n      return 'x-user-defined';\n    default:\n      return 'failure';\n  }\n}\nmodule.exports = {\n  getEncoding\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/filereader.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/filereader.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  staticPropertyDescriptors,\n  readOperation,\n  fireAProgressEvent\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/fileapi/util.js\");\nconst {\n  kState,\n  kError,\n  kResult,\n  kEvents,\n  kAborted\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fileapi/symbols.js\");\nconst {\n  webidl\n} = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  kEnumerableProperty\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nclass FileReader extends EventTarget {\n  constructor() {\n    super();\n    this[kState] = 'empty';\n    this[kResult] = null;\n    this[kError] = null;\n    this[kEvents] = {\n      loadend: null,\n      error: null,\n      abort: null,\n      load: null,\n      progress: null,\n      loadstart: null\n    };\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer\n   * @param {import('buffer').Blob} blob\n   */\n  readAsArrayBuffer(blob) {\n    webidl.brandCheck(this, FileReader);\n    webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsArrayBuffer');\n    blob = webidl.converters.Blob(blob, {\n      strict: false\n    });\n\n    // The readAsArrayBuffer(blob) method, when invoked,\n    // must initiate a read operation for blob with ArrayBuffer.\n    readOperation(this, blob, 'ArrayBuffer');\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#readAsBinaryString\n   * @param {import('buffer').Blob} blob\n   */\n  readAsBinaryString(blob) {\n    webidl.brandCheck(this, FileReader);\n    webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsBinaryString');\n    blob = webidl.converters.Blob(blob, {\n      strict: false\n    });\n\n    // The readAsBinaryString(blob) method, when invoked,\n    // must initiate a read operation for blob with BinaryString.\n    readOperation(this, blob, 'BinaryString');\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#readAsDataText\n   * @param {import('buffer').Blob} blob\n   * @param {string?} encoding\n   */\n  readAsText(blob) {\n    let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    webidl.brandCheck(this, FileReader);\n    webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsText');\n    blob = webidl.converters.Blob(blob, {\n      strict: false\n    });\n    if (encoding !== undefined) {\n      encoding = webidl.converters.DOMString(encoding, 'FileReader.readAsText', 'encoding');\n    }\n\n    // The readAsText(blob, encoding) method, when invoked,\n    // must initiate a read operation for blob with Text and encoding.\n    readOperation(this, blob, 'Text', encoding);\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL\n   * @param {import('buffer').Blob} blob\n   */\n  readAsDataURL(blob) {\n    webidl.brandCheck(this, FileReader);\n    webidl.argumentLengthCheck(arguments, 1, 'FileReader.readAsDataURL');\n    blob = webidl.converters.Blob(blob, {\n      strict: false\n    });\n\n    // The readAsDataURL(blob) method, when invoked, must\n    // initiate a read operation for blob with DataURL.\n    readOperation(this, blob, 'DataURL');\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-abort\n   */\n  abort() {\n    // 1. If this's state is \"empty\" or if this's state is\n    //    \"done\" set this's result to null and terminate\n    //    this algorithm.\n    if (this[kState] === 'empty' || this[kState] === 'done') {\n      this[kResult] = null;\n      return;\n    }\n\n    // 2. If this's state is \"loading\" set this's state to\n    //    \"done\" and set this's result to null.\n    if (this[kState] === 'loading') {\n      this[kState] = 'done';\n      this[kResult] = null;\n    }\n\n    // 3. If there are any tasks from this on the file reading\n    //    task source in an affiliated task queue, then remove\n    //    those tasks from that task queue.\n    this[kAborted] = true;\n\n    // 4. Terminate the algorithm for the read method being processed.\n    // TODO\n\n    // 5. Fire a progress event called abort at this.\n    fireAProgressEvent('abort', this);\n\n    // 6. If this's state is not \"loading\", fire a progress\n    //    event called loadend at this.\n    if (this[kState] !== 'loading') {\n      fireAProgressEvent('loadend', this);\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate\n   */\n  get readyState() {\n    webidl.brandCheck(this, FileReader);\n    switch (this[kState]) {\n      case 'empty':\n        return this.EMPTY;\n      case 'loading':\n        return this.LOADING;\n      case 'done':\n        return this.DONE;\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-result\n   */\n  get result() {\n    webidl.brandCheck(this, FileReader);\n\n    // The result attribute’s getter, when invoked, must return\n    // this's result.\n    return this[kResult];\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-error\n   */\n  get error() {\n    webidl.brandCheck(this, FileReader);\n\n    // The error attribute’s getter, when invoked, must return\n    // this's error.\n    return this[kError];\n  }\n  get onloadend() {\n    webidl.brandCheck(this, FileReader);\n    return this[kEvents].loadend;\n  }\n  set onloadend(fn) {\n    webidl.brandCheck(this, FileReader);\n    if (this[kEvents].loadend) {\n      this.removeEventListener('loadend', this[kEvents].loadend);\n    }\n    if (typeof fn === 'function') {\n      this[kEvents].loadend = fn;\n      this.addEventListener('loadend', fn);\n    } else {\n      this[kEvents].loadend = null;\n    }\n  }\n  get onerror() {\n    webidl.brandCheck(this, FileReader);\n    return this[kEvents].error;\n  }\n  set onerror(fn) {\n    webidl.brandCheck(this, FileReader);\n    if (this[kEvents].error) {\n      this.removeEventListener('error', this[kEvents].error);\n    }\n    if (typeof fn === 'function') {\n      this[kEvents].error = fn;\n      this.addEventListener('error', fn);\n    } else {\n      this[kEvents].error = null;\n    }\n  }\n  get onloadstart() {\n    webidl.brandCheck(this, FileReader);\n    return this[kEvents].loadstart;\n  }\n  set onloadstart(fn) {\n    webidl.brandCheck(this, FileReader);\n    if (this[kEvents].loadstart) {\n      this.removeEventListener('loadstart', this[kEvents].loadstart);\n    }\n    if (typeof fn === 'function') {\n      this[kEvents].loadstart = fn;\n      this.addEventListener('loadstart', fn);\n    } else {\n      this[kEvents].loadstart = null;\n    }\n  }\n  get onprogress() {\n    webidl.brandCheck(this, FileReader);\n    return this[kEvents].progress;\n  }\n  set onprogress(fn) {\n    webidl.brandCheck(this, FileReader);\n    if (this[kEvents].progress) {\n      this.removeEventListener('progress', this[kEvents].progress);\n    }\n    if (typeof fn === 'function') {\n      this[kEvents].progress = fn;\n      this.addEventListener('progress', fn);\n    } else {\n      this[kEvents].progress = null;\n    }\n  }\n  get onload() {\n    webidl.brandCheck(this, FileReader);\n    return this[kEvents].load;\n  }\n  set onload(fn) {\n    webidl.brandCheck(this, FileReader);\n    if (this[kEvents].load) {\n      this.removeEventListener('load', this[kEvents].load);\n    }\n    if (typeof fn === 'function') {\n      this[kEvents].load = fn;\n      this.addEventListener('load', fn);\n    } else {\n      this[kEvents].load = null;\n    }\n  }\n  get onabort() {\n    webidl.brandCheck(this, FileReader);\n    return this[kEvents].abort;\n  }\n  set onabort(fn) {\n    webidl.brandCheck(this, FileReader);\n    if (this[kEvents].abort) {\n      this.removeEventListener('abort', this[kEvents].abort);\n    }\n    if (typeof fn === 'function') {\n      this[kEvents].abort = fn;\n      this.addEventListener('abort', fn);\n    } else {\n      this[kEvents].abort = null;\n    }\n  }\n}\n\n// https://w3c.github.io/FileAPI/#dom-filereader-empty\nFileReader.EMPTY = FileReader.prototype.EMPTY = 0;\n// https://w3c.github.io/FileAPI/#dom-filereader-loading\nFileReader.LOADING = FileReader.prototype.LOADING = 1;\n// https://w3c.github.io/FileAPI/#dom-filereader-done\nFileReader.DONE = FileReader.prototype.DONE = 2;\nObject.defineProperties(FileReader.prototype, {\n  EMPTY: staticPropertyDescriptors,\n  LOADING: staticPropertyDescriptors,\n  DONE: staticPropertyDescriptors,\n  readAsArrayBuffer: kEnumerableProperty,\n  readAsBinaryString: kEnumerableProperty,\n  readAsText: kEnumerableProperty,\n  readAsDataURL: kEnumerableProperty,\n  abort: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  result: kEnumerableProperty,\n  error: kEnumerableProperty,\n  onloadstart: kEnumerableProperty,\n  onprogress: kEnumerableProperty,\n  onload: kEnumerableProperty,\n  onabort: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onloadend: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'FileReader',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n});\nObject.defineProperties(FileReader, {\n  EMPTY: staticPropertyDescriptors,\n  LOADING: staticPropertyDescriptors,\n  DONE: staticPropertyDescriptors\n});\nmodule.exports = {\n  FileReader\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/filereader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/progressevent.js":
/*!**************************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/progressevent.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  webidl\n} = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst kState = Symbol('ProgressEvent state');\n\n/**\n * @see https://xhr.spec.whatwg.org/#progressevent\n */\nclass ProgressEvent extends Event {\n  constructor(type) {\n    let eventInitDict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    type = webidl.converters.DOMString(type, 'ProgressEvent constructor', 'type');\n    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});\n    super(type, eventInitDict);\n    this[kState] = {\n      lengthComputable: eventInitDict.lengthComputable,\n      loaded: eventInitDict.loaded,\n      total: eventInitDict.total\n    };\n  }\n  get lengthComputable() {\n    webidl.brandCheck(this, ProgressEvent);\n    return this[kState].lengthComputable;\n  }\n  get loaded() {\n    webidl.brandCheck(this, ProgressEvent);\n    return this[kState].loaded;\n  }\n  get total() {\n    webidl.brandCheck(this, ProgressEvent);\n    return this[kState].total;\n  }\n}\nwebidl.converters.ProgressEventInit = webidl.dictionaryConverter([{\n  key: 'lengthComputable',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'loaded',\n  converter: webidl.converters['unsigned long long'],\n  defaultValue: () => 0\n}, {\n  key: 'total',\n  converter: webidl.converters['unsigned long long'],\n  defaultValue: () => 0\n}, {\n  key: 'bubbles',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'cancelable',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'composed',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}]);\nmodule.exports = {\n  ProgressEvent\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmlsZWFwaS9wcm9ncmVzc2V2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLE1BQU07RUFBRUE7QUFBTyxDQUFDLEdBQUdDLG1CQUFPLENBQUMsNEVBQWlCLENBQUM7QUFFN0MsTUFBTUMsTUFBTSxHQUFHQyxNQUFNLENBQUMscUJBQXFCLENBQUM7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGFBQWEsU0FBU0MsS0FBSyxDQUFDO0VBQ2hDQyxXQUFXQSxDQUFFQyxJQUFJLEVBQXNCO0lBQUEsSUFBcEJDLGFBQWEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0lBQ25DRixJQUFJLEdBQUdQLE1BQU0sQ0FBQ1ksVUFBVSxDQUFDQyxTQUFTLENBQUNOLElBQUksRUFBRSwyQkFBMkIsRUFBRSxNQUFNLENBQUM7SUFDN0VDLGFBQWEsR0FBR1IsTUFBTSxDQUFDWSxVQUFVLENBQUNFLGlCQUFpQixDQUFDTixhQUFhLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFeEUsS0FBSyxDQUFDRCxJQUFJLEVBQUVDLGFBQWEsQ0FBQztJQUUxQixJQUFJLENBQUNOLE1BQU0sQ0FBQyxHQUFHO01BQ2JhLGdCQUFnQixFQUFFUCxhQUFhLENBQUNPLGdCQUFnQjtNQUNoREMsTUFBTSxFQUFFUixhQUFhLENBQUNRLE1BQU07TUFDNUJDLEtBQUssRUFBRVQsYUFBYSxDQUFDUztJQUN2QixDQUFDO0VBQ0g7RUFFQSxJQUFJRixnQkFBZ0JBLENBQUEsRUFBSTtJQUN0QmYsTUFBTSxDQUFDa0IsVUFBVSxDQUFDLElBQUksRUFBRWQsYUFBYSxDQUFDO0lBRXRDLE9BQU8sSUFBSSxDQUFDRixNQUFNLENBQUMsQ0FBQ2EsZ0JBQWdCO0VBQ3RDO0VBRUEsSUFBSUMsTUFBTUEsQ0FBQSxFQUFJO0lBQ1poQixNQUFNLENBQUNrQixVQUFVLENBQUMsSUFBSSxFQUFFZCxhQUFhLENBQUM7SUFFdEMsT0FBTyxJQUFJLENBQUNGLE1BQU0sQ0FBQyxDQUFDYyxNQUFNO0VBQzVCO0VBRUEsSUFBSUMsS0FBS0EsQ0FBQSxFQUFJO0lBQ1hqQixNQUFNLENBQUNrQixVQUFVLENBQUMsSUFBSSxFQUFFZCxhQUFhLENBQUM7SUFFdEMsT0FBTyxJQUFJLENBQUNGLE1BQU0sQ0FBQyxDQUFDZSxLQUFLO0VBQzNCO0FBQ0Y7QUFFQWpCLE1BQU0sQ0FBQ1ksVUFBVSxDQUFDRSxpQkFBaUIsR0FBR2QsTUFBTSxDQUFDbUIsbUJBQW1CLENBQUMsQ0FDL0Q7RUFDRUMsR0FBRyxFQUFFLGtCQUFrQjtFQUN2QkMsU0FBUyxFQUFFckIsTUFBTSxDQUFDWSxVQUFVLENBQUNVLE9BQU87RUFDcENDLFlBQVksRUFBRUEsQ0FBQSxLQUFNO0FBQ3RCLENBQUMsRUFDRDtFQUNFSCxHQUFHLEVBQUUsUUFBUTtFQUNiQyxTQUFTLEVBQUVyQixNQUFNLENBQUNZLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztFQUNsRFcsWUFBWSxFQUFFQSxDQUFBLEtBQU07QUFDdEIsQ0FBQyxFQUNEO0VBQ0VILEdBQUcsRUFBRSxPQUFPO0VBQ1pDLFNBQVMsRUFBRXJCLE1BQU0sQ0FBQ1ksVUFBVSxDQUFDLG9CQUFvQixDQUFDO0VBQ2xEVyxZQUFZLEVBQUVBLENBQUEsS0FBTTtBQUN0QixDQUFDLEVBQ0Q7RUFDRUgsR0FBRyxFQUFFLFNBQVM7RUFDZEMsU0FBUyxFQUFFckIsTUFBTSxDQUFDWSxVQUFVLENBQUNVLE9BQU87RUFDcENDLFlBQVksRUFBRUEsQ0FBQSxLQUFNO0FBQ3RCLENBQUMsRUFDRDtFQUNFSCxHQUFHLEVBQUUsWUFBWTtFQUNqQkMsU0FBUyxFQUFFckIsTUFBTSxDQUFDWSxVQUFVLENBQUNVLE9BQU87RUFDcENDLFlBQVksRUFBRUEsQ0FBQSxLQUFNO0FBQ3RCLENBQUMsRUFDRDtFQUNFSCxHQUFHLEVBQUUsVUFBVTtFQUNmQyxTQUFTLEVBQUVyQixNQUFNLENBQUNZLFVBQVUsQ0FBQ1UsT0FBTztFQUNwQ0MsWUFBWSxFQUFFQSxDQUFBLEtBQU07QUFDdEIsQ0FBQyxDQUNGLENBQUM7QUFFRkMsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZnJCO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL3dlYi9maWxlYXBpL3Byb2dyZXNzZXZlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgd2ViaWRsIH0gPSByZXF1aXJlKCcuLi9mZXRjaC93ZWJpZGwnKVxuXG5jb25zdCBrU3RhdGUgPSBTeW1ib2woJ1Byb2dyZXNzRXZlbnQgc3RhdGUnKVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNwcm9ncmVzc2V2ZW50XG4gKi9cbmNsYXNzIFByb2dyZXNzRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIGNvbnN0cnVjdG9yICh0eXBlLCBldmVudEluaXREaWN0ID0ge30pIHtcbiAgICB0eXBlID0gd2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nKHR5cGUsICdQcm9ncmVzc0V2ZW50IGNvbnN0cnVjdG9yJywgJ3R5cGUnKVxuICAgIGV2ZW50SW5pdERpY3QgPSB3ZWJpZGwuY29udmVydGVycy5Qcm9ncmVzc0V2ZW50SW5pdChldmVudEluaXREaWN0ID8/IHt9KVxuXG4gICAgc3VwZXIodHlwZSwgZXZlbnRJbml0RGljdClcblxuICAgIHRoaXNba1N0YXRlXSA9IHtcbiAgICAgIGxlbmd0aENvbXB1dGFibGU6IGV2ZW50SW5pdERpY3QubGVuZ3RoQ29tcHV0YWJsZSxcbiAgICAgIGxvYWRlZDogZXZlbnRJbml0RGljdC5sb2FkZWQsXG4gICAgICB0b3RhbDogZXZlbnRJbml0RGljdC50b3RhbFxuICAgIH1cbiAgfVxuXG4gIGdldCBsZW5ndGhDb21wdXRhYmxlICgpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBQcm9ncmVzc0V2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXNba1N0YXRlXS5sZW5ndGhDb21wdXRhYmxlXG4gIH1cblxuICBnZXQgbG9hZGVkICgpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBQcm9ncmVzc0V2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXNba1N0YXRlXS5sb2FkZWRcbiAgfVxuXG4gIGdldCB0b3RhbCAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgUHJvZ3Jlc3NFdmVudClcblxuICAgIHJldHVybiB0aGlzW2tTdGF0ZV0udG90YWxcbiAgfVxufVxuXG53ZWJpZGwuY29udmVydGVycy5Qcm9ncmVzc0V2ZW50SW5pdCA9IHdlYmlkbC5kaWN0aW9uYXJ5Q29udmVydGVyKFtcbiAge1xuICAgIGtleTogJ2xlbmd0aENvbXB1dGFibGUnLFxuICAgIGNvbnZlcnRlcjogd2ViaWRsLmNvbnZlcnRlcnMuYm9vbGVhbixcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+IGZhbHNlXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdsb2FkZWQnLFxuICAgIGNvbnZlcnRlcjogd2ViaWRsLmNvbnZlcnRlcnNbJ3Vuc2lnbmVkIGxvbmcgbG9uZyddLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gMFxuICB9LFxuICB7XG4gICAga2V5OiAndG90YWwnLFxuICAgIGNvbnZlcnRlcjogd2ViaWRsLmNvbnZlcnRlcnNbJ3Vuc2lnbmVkIGxvbmcgbG9uZyddLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gMFxuICB9LFxuICB7XG4gICAga2V5OiAnYnViYmxlcycsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVycy5ib29sZWFuLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gZmFsc2VcbiAgfSxcbiAge1xuICAgIGtleTogJ2NhbmNlbGFibGUnLFxuICAgIGNvbnZlcnRlcjogd2ViaWRsLmNvbnZlcnRlcnMuYm9vbGVhbixcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+IGZhbHNlXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdjb21wb3NlZCcsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVycy5ib29sZWFuLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gZmFsc2VcbiAgfVxuXSlcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFByb2dyZXNzRXZlbnRcbn1cbiJdLCJuYW1lcyI6WyJ3ZWJpZGwiLCJyZXF1aXJlIiwia1N0YXRlIiwiU3ltYm9sIiwiUHJvZ3Jlc3NFdmVudCIsIkV2ZW50IiwiY29uc3RydWN0b3IiLCJ0eXBlIiwiZXZlbnRJbml0RGljdCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImNvbnZlcnRlcnMiLCJET01TdHJpbmciLCJQcm9ncmVzc0V2ZW50SW5pdCIsImxlbmd0aENvbXB1dGFibGUiLCJsb2FkZWQiLCJ0b3RhbCIsImJyYW5kQ2hlY2siLCJkaWN0aW9uYXJ5Q29udmVydGVyIiwia2V5IiwiY29udmVydGVyIiwiYm9vbGVhbiIsImRlZmF1bHRWYWx1ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/progressevent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/symbols.js":
/*!********************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/symbols.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n  kState: Symbol('FileReader state'),\n  kResult: Symbol('FileReader result'),\n  kError: Symbol('FileReader error'),\n  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),\n  kEvents: Symbol('FileReader events'),\n  kAborted: Symbol('FileReader aborted')\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmlsZWFwaS9zeW1ib2xzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaQSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmQyxNQUFNLEVBQUVDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQztFQUNsQ0MsT0FBTyxFQUFFRCxNQUFNLENBQUMsbUJBQW1CLENBQUM7RUFDcENFLE1BQU0sRUFBRUYsTUFBTSxDQUFDLGtCQUFrQixDQUFDO0VBQ2xDRyx1QkFBdUIsRUFBRUgsTUFBTSxDQUFDLGdEQUFnRCxDQUFDO0VBQ2pGSSxPQUFPLEVBQUVKLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztFQUNwQ0ssUUFBUSxFQUFFTCxNQUFNLENBQUMsb0JBQW9CO0FBQ3ZDLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmlsZWFwaS9zeW1ib2xzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAga1N0YXRlOiBTeW1ib2woJ0ZpbGVSZWFkZXIgc3RhdGUnKSxcbiAga1Jlc3VsdDogU3ltYm9sKCdGaWxlUmVhZGVyIHJlc3VsdCcpLFxuICBrRXJyb3I6IFN5bWJvbCgnRmlsZVJlYWRlciBlcnJvcicpLFxuICBrTGFzdFByb2dyZXNzRXZlbnRGaXJlZDogU3ltYm9sKCdGaWxlUmVhZGVyIGxhc3QgcHJvZ3Jlc3MgZXZlbnQgZmlyZWQgdGltZXN0YW1wJyksXG4gIGtFdmVudHM6IFN5bWJvbCgnRmlsZVJlYWRlciBldmVudHMnKSxcbiAga0Fib3J0ZWQ6IFN5bWJvbCgnRmlsZVJlYWRlciBhYm9ydGVkJylcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwia1N0YXRlIiwiU3ltYm9sIiwia1Jlc3VsdCIsImtFcnJvciIsImtMYXN0UHJvZ3Jlc3NFdmVudEZpcmVkIiwia0V2ZW50cyIsImtBYm9ydGVkIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/fileapi/util.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/web/fileapi/util.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  kState,\n  kError,\n  kResult,\n  kAborted,\n  kLastProgressEventFired\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/fileapi/symbols.js\");\nconst {\n  ProgressEvent\n} = __webpack_require__(/*! ./progressevent */ \"(ssr)/./node_modules/undici/lib/web/fileapi/progressevent.js\");\nconst {\n  getEncoding\n} = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/undici/lib/web/fileapi/encoding.js\");\nconst {\n  serializeAMimeType,\n  parseMIMEType\n} = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  types\n} = __webpack_require__(/*! node:util */ \"node:util\");\nconst {\n  StringDecoder\n} = __webpack_require__(/*! string_decoder */ \"string_decoder\");\nconst {\n  btoa\n} = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n\n/** @type {PropertyDescriptor} */\nconst staticPropertyDescriptors = {\n  enumerable: true,\n  writable: false,\n  configurable: false\n};\n\n/**\n * @see https://w3c.github.io/FileAPI/#readOperation\n * @param {import('./filereader').FileReader} fr\n * @param {import('buffer').Blob} blob\n * @param {string} type\n * @param {string?} encodingName\n */\nfunction readOperation(fr, blob, type, encodingName) {\n  // 1. If fr’s state is \"loading\", throw an InvalidStateError\n  //    DOMException.\n  if (fr[kState] === 'loading') {\n    throw new DOMException('Invalid state', 'InvalidStateError');\n  }\n\n  // 2. Set fr’s state to \"loading\".\n  fr[kState] = 'loading';\n\n  // 3. Set fr’s result to null.\n  fr[kResult] = null;\n\n  // 4. Set fr’s error to null.\n  fr[kError] = null;\n\n  // 5. Let stream be the result of calling get stream on blob.\n  /** @type {import('stream/web').ReadableStream} */\n  const stream = blob.stream();\n\n  // 6. Let reader be the result of getting a reader from stream.\n  const reader = stream.getReader();\n\n  // 7. Let bytes be an empty byte sequence.\n  /** @type {Uint8Array[]} */\n  const bytes = [];\n\n  // 8. Let chunkPromise be the result of reading a chunk from\n  //    stream with reader.\n  let chunkPromise = reader.read();\n\n  // 9. Let isFirstChunk be true.\n  let isFirstChunk = true\n\n  // 10. In parallel, while true:\n  // Note: \"In parallel\" just means non-blocking\n  // Note 2: readOperation itself cannot be async as double\n  // reading the body would then reject the promise, instead\n  // of throwing an error.\n  ;\n  (async () => {\n    while (!fr[kAborted]) {\n      // 1. Wait for chunkPromise to be fulfilled or rejected.\n      try {\n        const {\n          done,\n          value\n        } = await chunkPromise;\n\n        // 2. If chunkPromise is fulfilled, and isFirstChunk is\n        //    true, queue a task to fire a progress event called\n        //    loadstart at fr.\n        if (isFirstChunk && !fr[kAborted]) {\n          queueMicrotask(() => {\n            fireAProgressEvent('loadstart', fr);\n          });\n        }\n\n        // 3. Set isFirstChunk to false.\n        isFirstChunk = false;\n\n        // 4. If chunkPromise is fulfilled with an object whose\n        //    done property is false and whose value property is\n        //    a Uint8Array object, run these steps:\n        if (!done && types.isUint8Array(value)) {\n          // 1. Let bs be the byte sequence represented by the\n          //    Uint8Array object.\n\n          // 2. Append bs to bytes.\n          bytes.push(value);\n\n          // 3. If roughly 50ms have passed since these steps\n          //    were last invoked, queue a task to fire a\n          //    progress event called progress at fr.\n          if ((fr[kLastProgressEventFired] === undefined || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {\n            fr[kLastProgressEventFired] = Date.now();\n            queueMicrotask(() => {\n              fireAProgressEvent('progress', fr);\n            });\n          }\n\n          // 4. Set chunkPromise to the result of reading a\n          //    chunk from stream with reader.\n          chunkPromise = reader.read();\n        } else if (done) {\n          // 5. Otherwise, if chunkPromise is fulfilled with an\n          //    object whose done property is true, queue a task\n          //    to run the following steps and abort this algorithm:\n          queueMicrotask(() => {\n            // 1. Set fr’s state to \"done\".\n            fr[kState] = 'done';\n\n            // 2. Let result be the result of package data given\n            //    bytes, type, blob’s type, and encodingName.\n            try {\n              const result = packageData(bytes, type, blob.type, encodingName);\n\n              // 4. Else:\n\n              if (fr[kAborted]) {\n                return;\n              }\n\n              // 1. Set fr’s result to result.\n              fr[kResult] = result;\n\n              // 2. Fire a progress event called load at the fr.\n              fireAProgressEvent('load', fr);\n            } catch (error) {\n              // 3. If package data threw an exception error:\n\n              // 1. Set fr’s error to error.\n              fr[kError] = error;\n\n              // 2. Fire a progress event called error at fr.\n              fireAProgressEvent('error', fr);\n            }\n\n            // 5. If fr’s state is not \"loading\", fire a progress\n            //    event called loadend at the fr.\n            if (fr[kState] !== 'loading') {\n              fireAProgressEvent('loadend', fr);\n            }\n          });\n          break;\n        }\n      } catch (error) {\n        if (fr[kAborted]) {\n          return;\n        }\n\n        // 6. Otherwise, if chunkPromise is rejected with an\n        //    error error, queue a task to run the following\n        //    steps and abort this algorithm:\n        queueMicrotask(() => {\n          // 1. Set fr’s state to \"done\".\n          fr[kState] = 'done';\n\n          // 2. Set fr’s error to error.\n          fr[kError] = error;\n\n          // 3. Fire a progress event called error at fr.\n          fireAProgressEvent('error', fr);\n\n          // 4. If fr’s state is not \"loading\", fire a progress\n          //    event called loadend at fr.\n          if (fr[kState] !== 'loading') {\n            fireAProgressEvent('loadend', fr);\n          }\n        });\n        break;\n      }\n    }\n  })();\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#fire-a-progress-event\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e The name of the event\n * @param {import('./filereader').FileReader} reader\n */\nfunction fireAProgressEvent(e, reader) {\n  // The progress event e does not bubble. e.bubbles must be false\n  // The progress event e is NOT cancelable. e.cancelable must be false\n  const event = new ProgressEvent(e, {\n    bubbles: false,\n    cancelable: false\n  });\n  reader.dispatchEvent(event);\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#blob-package-data\n * @param {Uint8Array[]} bytes\n * @param {string} type\n * @param {string?} mimeType\n * @param {string?} encodingName\n */\nfunction packageData(bytes, type, mimeType, encodingName) {\n  // 1. A Blob has an associated package data algorithm, given\n  //    bytes, a type, a optional mimeType, and a optional\n  //    encodingName, which switches on type and runs the\n  //    associated steps:\n\n  switch (type) {\n    case 'DataURL':\n      {\n        // 1. Return bytes as a DataURL [RFC2397] subject to\n        //    the considerations below:\n        //  * Use mimeType as part of the Data URL if it is\n        //    available in keeping with the Data URL\n        //    specification [RFC2397].\n        //  * If mimeType is not available return a Data URL\n        //    without a media-type. [RFC2397].\n\n        // https://datatracker.ietf.org/doc/html/rfc2397#section-3\n        // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n        // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n        // data       := *urlchar\n        // parameter  := attribute \"=\" value\n        let dataURL = 'data:';\n        const parsed = parseMIMEType(mimeType || 'application/octet-stream');\n        if (parsed !== 'failure') {\n          dataURL += serializeAMimeType(parsed);\n        }\n        dataURL += ';base64,';\n        const decoder = new StringDecoder('latin1');\n        for (const chunk of bytes) {\n          dataURL += btoa(decoder.write(chunk));\n        }\n        dataURL += btoa(decoder.end());\n        return dataURL;\n      }\n    case 'Text':\n      {\n        // 1. Let encoding be failure\n        let encoding = 'failure';\n\n        // 2. If the encodingName is present, set encoding to the\n        //    result of getting an encoding from encodingName.\n        if (encodingName) {\n          encoding = getEncoding(encodingName);\n        }\n\n        // 3. If encoding is failure, and mimeType is present:\n        if (encoding === 'failure' && mimeType) {\n          // 1. Let type be the result of parse a MIME type\n          //    given mimeType.\n          const type = parseMIMEType(mimeType);\n\n          // 2. If type is not failure, set encoding to the result\n          //    of getting an encoding from type’s parameters[\"charset\"].\n          if (type !== 'failure') {\n            encoding = getEncoding(type.parameters.get('charset'));\n          }\n        }\n\n        // 4. If encoding is failure, then set encoding to UTF-8.\n        if (encoding === 'failure') {\n          encoding = 'UTF-8';\n        }\n\n        // 5. Decode bytes using fallback encoding encoding, and\n        //    return the result.\n        return decode(bytes, encoding);\n      }\n    case 'ArrayBuffer':\n      {\n        // Return a new ArrayBuffer whose contents are bytes.\n        const sequence = combineByteSequences(bytes);\n        return sequence.buffer;\n      }\n    case 'BinaryString':\n      {\n        // Return bytes as a binary string, in which every byte\n        //  is represented by a code unit of equal value [0..255].\n        let binaryString = '';\n        const decoder = new StringDecoder('latin1');\n        for (const chunk of bytes) {\n          binaryString += decoder.write(chunk);\n        }\n        binaryString += decoder.end();\n        return binaryString;\n      }\n  }\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#decode\n * @param {Uint8Array[]} ioQueue\n * @param {string} encoding\n */\nfunction decode(ioQueue, encoding) {\n  const bytes = combineByteSequences(ioQueue);\n\n  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.\n  const BOMEncoding = BOMSniffing(bytes);\n  let slice = 0;\n\n  // 2. If BOMEncoding is non-null:\n  if (BOMEncoding !== null) {\n    // 1. Set encoding to BOMEncoding.\n    encoding = BOMEncoding;\n\n    // 2. Read three bytes from ioQueue, if BOMEncoding is\n    //    UTF-8; otherwise read two bytes.\n    //    (Do nothing with those bytes.)\n    slice = BOMEncoding === 'UTF-8' ? 3 : 2;\n  }\n\n  // 3. Process a queue with an instance of encoding’s\n  //    decoder, ioQueue, output, and \"replacement\".\n\n  // 4. Return output.\n\n  const sliced = bytes.slice(slice);\n  return new TextDecoder(encoding).decode(sliced);\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#bom-sniff\n * @param {Uint8Array} ioQueue\n */\nfunction BOMSniffing(ioQueue) {\n  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,\n  //    converted to a byte sequence.\n  const [a, b, c] = ioQueue;\n\n  // 2. For each of the rows in the table below, starting with\n  //    the first one and going down, if BOM starts with the\n  //    bytes given in the first column, then return the\n  //    encoding given in the cell in the second column of that\n  //    row. Otherwise, return null.\n  if (a === 0xEF && b === 0xBB && c === 0xBF) {\n    return 'UTF-8';\n  } else if (a === 0xFE && b === 0xFF) {\n    return 'UTF-16BE';\n  } else if (a === 0xFF && b === 0xFE) {\n    return 'UTF-16LE';\n  }\n  return null;\n}\n\n/**\n * @param {Uint8Array[]} sequences\n */\nfunction combineByteSequences(sequences) {\n  const size = sequences.reduce((a, b) => {\n    return a + b.byteLength;\n  }, 0);\n  let offset = 0;\n  return sequences.reduce((a, b) => {\n    a.set(b, offset);\n    offset += b.byteLength;\n    return a;\n  }, new Uint8Array(size));\n}\nmodule.exports = {\n  staticPropertyDescriptors,\n  readOperation,\n  fireAProgressEvent\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvZmlsZWFwaS91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLE1BQU07RUFDSkEsTUFBTTtFQUNOQyxNQUFNO0VBQ05DLE9BQU87RUFDUEMsUUFBUTtFQUNSQztBQUNGLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyx5RUFBVyxDQUFDO0FBQ3hCLE1BQU07RUFBRUM7QUFBYyxDQUFDLEdBQUdELG1CQUFPLENBQUMscUZBQWlCLENBQUM7QUFDcEQsTUFBTTtFQUFFRTtBQUFZLENBQUMsR0FBR0YsbUJBQU8sQ0FBQywyRUFBWSxDQUFDO0FBQzdDLE1BQU07RUFBRUcsa0JBQWtCO0VBQUVDO0FBQWMsQ0FBQyxHQUFHSixtQkFBTyxDQUFDLGdGQUFtQixDQUFDO0FBQzFFLE1BQU07RUFBRUs7QUFBTSxDQUFDLEdBQUdMLG1CQUFPLENBQUMsNEJBQVcsQ0FBQztBQUN0QyxNQUFNO0VBQUVNO0FBQWMsQ0FBQyxHQUFHTixtQkFBTyxDQUFDLHNDQUFnQixDQUFDO0FBQ25ELE1BQU07RUFBRU87QUFBSyxDQUFDLEdBQUdQLG1CQUFPLENBQUMsZ0NBQWEsQ0FBQzs7QUFFdkM7QUFDQSxNQUFNUSx5QkFBeUIsR0FBRztFQUNoQ0MsVUFBVSxFQUFFLElBQUk7RUFDaEJDLFFBQVEsRUFBRSxLQUFLO0VBQ2ZDLFlBQVksRUFBRTtBQUNoQixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsYUFBYUEsQ0FBRUMsRUFBRSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsWUFBWSxFQUFFO0VBQ3BEO0VBQ0E7RUFDQSxJQUFJSCxFQUFFLENBQUNsQixNQUFNLENBQUMsS0FBSyxTQUFTLEVBQUU7SUFDNUIsTUFBTSxJQUFJc0IsWUFBWSxDQUFDLGVBQWUsRUFBRSxtQkFBbUIsQ0FBQztFQUM5RDs7RUFFQTtFQUNBSixFQUFFLENBQUNsQixNQUFNLENBQUMsR0FBRyxTQUFTOztF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RUFDekJJLGFBQWE7RUFDYmdCO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JheS9EZXNrdG9wL3Byb2plY3QvS1IxL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL3dlYi9maWxlYXBpL3V0aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHtcbiAga1N0YXRlLFxuICBrRXJyb3IsXG4gIGtSZXN1bHQsXG4gIGtBYm9ydGVkLFxuICBrTGFzdFByb2dyZXNzRXZlbnRGaXJlZFxufSA9IHJlcXVpcmUoJy4vc3ltYm9scycpXG5jb25zdCB7IFByb2dyZXNzRXZlbnQgfSA9IHJlcXVpcmUoJy4vcHJvZ3Jlc3NldmVudCcpXG5jb25zdCB7IGdldEVuY29kaW5nIH0gPSByZXF1aXJlKCcuL2VuY29kaW5nJylcbmNvbnN0IHsgc2VyaWFsaXplQU1pbWVUeXBlLCBwYXJzZU1JTUVUeXBlIH0gPSByZXF1aXJlKCcuLi9mZXRjaC9kYXRhLXVybCcpXG5jb25zdCB7IHR5cGVzIH0gPSByZXF1aXJlKCdub2RlOnV0aWwnKVxuY29uc3QgeyBTdHJpbmdEZWNvZGVyIH0gPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpXG5jb25zdCB7IGJ0b2EgfSA9IHJlcXVpcmUoJ25vZGU6YnVmZmVyJylcblxuLyoqIEB0eXBlIHtQcm9wZXJ0eURlc2NyaXB0b3J9ICovXG5jb25zdCBzdGF0aWNQcm9wZXJ0eURlc2NyaXB0b3JzID0ge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICB3cml0YWJsZTogZmFsc2UsXG4gIGNvbmZpZ3VyYWJsZTogZmFsc2Vcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9GaWxlQVBJLyNyZWFkT3BlcmF0aW9uXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9maWxlcmVhZGVyJykuRmlsZVJlYWRlcn0gZnJcbiAqIEBwYXJhbSB7aW1wb3J0KCdidWZmZXInKS5CbG9ifSBibG9iXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmc/fSBlbmNvZGluZ05hbWVcbiAqL1xuZnVuY3Rpb24gcmVhZE9wZXJhdGlvbiAoZnIsIGJsb2IsIHR5cGUsIGVuY29kaW5nTmFtZSkge1xuICAvLyAxLiBJZiBmcuKAmXMgc3RhdGUgaXMgXCJsb2FkaW5nXCIsIHRocm93IGFuIEludmFsaWRTdGF0ZUVycm9yXG4gIC8vICAgIERPTUV4Y2VwdGlvbi5cbiAgaWYgKGZyW2tTdGF0ZV0gPT09ICdsb2FkaW5nJykge1xuICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ0ludmFsaWQgc3RhdGUnLCAnSW52YWxpZFN0YXRlRXJyb3InKVxuICB9XG5cbiAgLy8gMi4gU2V0IGZy4oCZcyBzdGF0ZSB0byBcImxvYWRpbmdcIi5cbiAgZnJba1N0YXRlXSA9ICdsb2FkaW5nJ1xuXG4gIC8vIDMuIFNldCBmcuKAmXMgcmVzdWx0IHRvIG51bGwuXG4gIGZyW2tSZXN1bHRdID0gbnVsbFxuXG4gIC8vIDQuIFNldCBmcuKAmXMgZXJyb3IgdG8gbnVsbC5cbiAgZnJba0Vycm9yXSA9IG51bGxcblxuICAvLyA1LiBMZXQgc3RyZWFtIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyBnZXQgc3RyZWFtIG9uIGJsb2IuXG4gIC8qKiBAdHlwZSB7aW1wb3J0KCdzdHJlYW0vd2ViJykuUmVhZGFibGVTdHJlYW19ICovXG4gIGNvbnN0IHN0cmVhbSA9IGJsb2Iuc3RyZWFtKClcblxuICAvLyA2LiBMZXQgcmVhZGVyIGJlIHRoZSByZXN1bHQgb2YgZ2V0dGluZyBhIHJlYWRlciBmcm9tIHN0cmVhbS5cbiAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpXG5cbiAgLy8gNy4gTGV0IGJ5dGVzIGJlIGFuIGVtcHR5IGJ5dGUgc2VxdWVuY2UuXG4gIC8qKiBAdHlwZSB7VWludDhBcnJheVtdfSAqL1xuICBjb25zdCBieXRlcyA9IFtdXG5cbiAgLy8gOC4gTGV0IGNodW5rUHJvbWlzZSBiZSB0aGUgcmVzdWx0IG9mIHJlYWRpbmcgYSBjaHVuayBmcm9tXG4gIC8vICAgIHN0cmVhbSB3aXRoIHJlYWRlci5cbiAgbGV0IGNodW5rUHJvbWlzZSA9IHJlYWRlci5yZWFkKClcblxuICAvLyA5LiBMZXQgaXNGaXJzdENodW5rIGJlIHRydWUuXG4gIGxldCBpc0ZpcnN0Q2h1bmsgPSB0cnVlXG5cbiAgLy8gMTAuIEluIHBhcmFsbGVsLCB3aGlsZSB0cnVlOlxuICAvLyBOb3RlOiBcIkluIHBhcmFsbGVsXCIganVzdCBtZWFucyBub24tYmxvY2tpbmdcbiAgLy8gTm90ZSAyOiByZWFkT3BlcmF0aW9uIGl0c2VsZiBjYW5ub3QgYmUgYXN5bmMgYXMgZG91YmxlXG4gIC8vIHJlYWRpbmcgdGhlIGJvZHkgd291bGQgdGhlbiByZWplY3QgdGhlIHByb21pc2UsIGluc3RlYWRcbiAgLy8gb2YgdGhyb3dpbmcgYW4gZXJyb3IuXG4gIDsoYXN5bmMgKCkgPT4ge1xuICAgIHdoaWxlICghZnJba0Fib3J0ZWRdKSB7XG4gICAgICAvLyAxLiBXYWl0IGZvciBjaHVua1Byb21pc2UgdG8gYmUgZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgY2h1bmtQcm9taXNlXG5cbiAgICAgICAgLy8gMi4gSWYgY2h1bmtQcm9taXNlIGlzIGZ1bGZpbGxlZCwgYW5kIGlzRmlyc3RDaHVuayBpc1xuICAgICAgICAvLyAgICB0cnVlLCBxdWV1ZSBhIHRhc2sgdG8gZmlyZSBhIHByb2dyZXNzIGV2ZW50IGNhbGxlZFxuICAgICAgICAvLyAgICBsb2Fkc3RhcnQgYXQgZnIuXG4gICAgICAgIGlmIChpc0ZpcnN0Q2h1bmsgJiYgIWZyW2tBYm9ydGVkXSkge1xuICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgIGZpcmVBUHJvZ3Jlc3NFdmVudCgnbG9hZHN0YXJ0JywgZnIpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDMuIFNldCBpc0ZpcnN0Q2h1bmsgdG8gZmFsc2UuXG4gICAgICAgIGlzRmlyc3RDaHVuayA9IGZhbHNlXG5cbiAgICAgICAgLy8gNC4gSWYgY2h1bmtQcm9taXNlIGlzIGZ1bGZpbGxlZCB3aXRoIGFuIG9iamVjdCB3aG9zZVxuICAgICAgICAvLyAgICBkb25lIHByb3BlcnR5IGlzIGZhbHNlIGFuZCB3aG9zZSB2YWx1ZSBwcm9wZXJ0eSBpc1xuICAgICAgICAvLyAgICBhIFVpbnQ4QXJyYXkgb2JqZWN0LCBydW4gdGhlc2Ugc3RlcHM6XG4gICAgICAgIGlmICghZG9uZSAmJiB0eXBlcy5pc1VpbnQ4QXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgLy8gMS4gTGV0IGJzIGJlIHRoZSBieXRlIHNlcXVlbmNlIHJlcHJlc2VudGVkIGJ5IHRoZVxuICAgICAgICAgIC8vICAgIFVpbnQ4QXJyYXkgb2JqZWN0LlxuXG4gICAgICAgICAgLy8gMi4gQXBwZW5kIGJzIHRvIGJ5dGVzLlxuICAgICAgICAgIGJ5dGVzLnB1c2godmFsdWUpXG5cbiAgICAgICAgICAvLyAzLiBJZiByb3VnaGx5IDUwbXMgaGF2ZSBwYXNzZWQgc2luY2UgdGhlc2Ugc3RlcHNcbiAgICAgICAgICAvLyAgICB3ZXJlIGxhc3QgaW52b2tlZCwgcXVldWUgYSB0YXNrIHRvIGZpcmUgYVxuICAgICAgICAgIC8vICAgIHByb2dyZXNzIGV2ZW50IGNhbGxlZCBwcm9ncmVzcyBhdCBmci5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgIGZyW2tMYXN0UHJvZ3Jlc3NFdmVudEZpcmVkXSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIERhdGUubm93KCkgLSBmcltrTGFzdFByb2dyZXNzRXZlbnRGaXJlZF0gPj0gNTBcbiAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICFmcltrQWJvcnRlZF1cbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGZyW2tMYXN0UHJvZ3Jlc3NFdmVudEZpcmVkXSA9IERhdGUubm93KClcbiAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgICAgZmlyZUFQcm9ncmVzc0V2ZW50KCdwcm9ncmVzcycsIGZyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyA0LiBTZXQgY2h1bmtQcm9taXNlIHRvIHRoZSByZXN1bHQgb2YgcmVhZGluZyBhXG4gICAgICAgICAgLy8gICAgY2h1bmsgZnJvbSBzdHJlYW0gd2l0aCByZWFkZXIuXG4gICAgICAgICAgY2h1bmtQcm9taXNlID0gcmVhZGVyLnJlYWQoKVxuICAgICAgICB9IGVsc2UgaWYgKGRvbmUpIHtcbiAgICAgICAgICAvLyA1LiBPdGhlcndpc2UsIGlmIGNodW5rUHJvbWlzZSBpcyBmdWxmaWxsZWQgd2l0aCBhblxuICAgICAgICAgIC8vICAgIG9iamVjdCB3aG9zZSBkb25lIHByb3BlcnR5IGlzIHRydWUsIHF1ZXVlIGEgdGFza1xuICAgICAgICAgIC8vICAgIHRvIHJ1biB0aGUgZm9sbG93aW5nIHN0ZXBzIGFuZCBhYm9ydCB0aGlzIGFsZ29yaXRobTpcbiAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgICAgICAvLyAxLiBTZXQgZnLigJlzIHN0YXRlIHRvIFwiZG9uZVwiLlxuICAgICAgICAgICAgZnJba1N0YXRlXSA9ICdkb25lJ1xuXG4gICAgICAgICAgICAvLyAyLiBMZXQgcmVzdWx0IGJlIHRoZSByZXN1bHQgb2YgcGFja2FnZSBkYXRhIGdpdmVuXG4gICAgICAgICAgICAvLyAgICBieXRlcywgdHlwZSwgYmxvYuKAmXMgdHlwZSwgYW5kIGVuY29kaW5nTmFtZS5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHBhY2thZ2VEYXRhKGJ5dGVzLCB0eXBlLCBibG9iLnR5cGUsIGVuY29kaW5nTmFtZSlcblxuICAgICAgICAgICAgICAvLyA0LiBFbHNlOlxuXG4gICAgICAgICAgICAgIGlmIChmcltrQWJvcnRlZF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIDEuIFNldCBmcuKAmXMgcmVzdWx0IHRvIHJlc3VsdC5cbiAgICAgICAgICAgICAgZnJba1Jlc3VsdF0gPSByZXN1bHRcblxuICAgICAgICAgICAgICAvLyAyLiBGaXJlIGEgcHJvZ3Jlc3MgZXZlbnQgY2FsbGVkIGxvYWQgYXQgdGhlIGZyLlxuICAgICAgICAgICAgICBmaXJlQVByb2dyZXNzRXZlbnQoJ2xvYWQnLCBmcilcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIDMuIElmIHBhY2thZ2UgZGF0YSB0aHJldyBhbiBleGNlcHRpb24gZXJyb3I6XG5cbiAgICAgICAgICAgICAgLy8gMS4gU2V0IGZy4oCZcyBlcnJvciB0byBlcnJvci5cbiAgICAgICAgICAgICAgZnJba0Vycm9yXSA9IGVycm9yXG5cbiAgICAgICAgICAgICAgLy8gMi4gRmlyZSBhIHByb2dyZXNzIGV2ZW50IGNhbGxlZCBlcnJvciBhdCBmci5cbiAgICAgICAgICAgICAgZmlyZUFQcm9ncmVzc0V2ZW50KCdlcnJvcicsIGZyKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyA1LiBJZiBmcuKAmXMgc3RhdGUgaXMgbm90IFwibG9hZGluZ1wiLCBmaXJlIGEgcHJvZ3Jlc3NcbiAgICAgICAgICAgIC8vICAgIGV2ZW50IGNhbGxlZCBsb2FkZW5kIGF0IHRoZSBmci5cbiAgICAgICAgICAgIGlmIChmcltrU3RhdGVdICE9PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAgICAgZmlyZUFQcm9ncmVzc0V2ZW50KCdsb2FkZW5kJywgZnIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChmcltrQWJvcnRlZF0pIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDYuIE90aGVyd2lzZSwgaWYgY2h1bmtQcm9taXNlIGlzIHJlamVjdGVkIHdpdGggYW5cbiAgICAgICAgLy8gICAgZXJyb3IgZXJyb3IsIHF1ZXVlIGEgdGFzayB0byBydW4gdGhlIGZvbGxvd2luZ1xuICAgICAgICAvLyAgICBzdGVwcyBhbmQgYWJvcnQgdGhpcyBhbGdvcml0aG06XG4gICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAvLyAxLiBTZXQgZnLigJlzIHN0YXRlIHRvIFwiZG9uZVwiLlxuICAgICAgICAgIGZyW2tTdGF0ZV0gPSAnZG9uZSdcblxuICAgICAgICAgIC8vIDIuIFNldCBmcuKAmXMgZXJyb3IgdG8gZXJyb3IuXG4gICAgICAgICAgZnJba0Vycm9yXSA9IGVycm9yXG5cbiAgICAgICAgICAvLyAzLiBGaXJlIGEgcHJvZ3Jlc3MgZXZlbnQgY2FsbGVkIGVycm9yIGF0IGZyLlxuICAgICAgICAgIGZpcmVBUHJvZ3Jlc3NFdmVudCgnZXJyb3InLCBmcilcblxuICAgICAgICAgIC8vIDQuIElmIGZy4oCZcyBzdGF0ZSBpcyBub3QgXCJsb2FkaW5nXCIsIGZpcmUgYSBwcm9ncmVzc1xuICAgICAgICAgIC8vICAgIGV2ZW50IGNhbGxlZCBsb2FkZW5kIGF0IGZyLlxuICAgICAgICAgIGlmIChmcltrU3RhdGVdICE9PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAgIGZpcmVBUHJvZ3Jlc3NFdmVudCgnbG9hZGVuZCcsIGZyKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfSkoKVxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ZpbGVBUEkvI2ZpcmUtYS1wcm9ncmVzcy1ldmVudFxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtZXZlbnQtZmlyZVxuICogQHBhcmFtIHtzdHJpbmd9IGUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9maWxlcmVhZGVyJykuRmlsZVJlYWRlcn0gcmVhZGVyXG4gKi9cbmZ1bmN0aW9uIGZpcmVBUHJvZ3Jlc3NFdmVudCAoZSwgcmVhZGVyKSB7XG4gIC8vIFRoZSBwcm9ncmVzcyBldmVudCBlIGRvZXMgbm90IGJ1YmJsZS4gZS5idWJibGVzIG11c3QgYmUgZmFsc2VcbiAgLy8gVGhlIHByb2dyZXNzIGV2ZW50IGUgaXMgTk9UIGNhbmNlbGFibGUuIGUuY2FuY2VsYWJsZSBtdXN0IGJlIGZhbHNlXG4gIGNvbnN0IGV2ZW50ID0gbmV3IFByb2dyZXNzRXZlbnQoZSwge1xuICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgIGNhbmNlbGFibGU6IGZhbHNlXG4gIH0pXG5cbiAgcmVhZGVyLmRpc3BhdGNoRXZlbnQoZXZlbnQpXG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL3czYy5naXRodWIuaW8vRmlsZUFQSS8jYmxvYi1wYWNrYWdlLWRhdGFcbiAqIEBwYXJhbSB7VWludDhBcnJheVtdfSBieXRlc1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nP30gbWltZVR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nP30gZW5jb2RpbmdOYW1lXG4gKi9cbmZ1bmN0aW9uIHBhY2thZ2VEYXRhIChieXRlcywgdHlwZSwgbWltZVR5cGUsIGVuY29kaW5nTmFtZSkge1xuICAvLyAxLiBBIEJsb2IgaGFzIGFuIGFzc29jaWF0ZWQgcGFja2FnZSBkYXRhIGFsZ29yaXRobSwgZ2l2ZW5cbiAgLy8gICAgYnl0ZXMsIGEgdHlwZSwgYSBvcHRpb25hbCBtaW1lVHlwZSwgYW5kIGEgb3B0aW9uYWxcbiAgLy8gICAgZW5jb2RpbmdOYW1lLCB3aGljaCBzd2l0Y2hlcyBvbiB0eXBlIGFuZCBydW5zIHRoZVxuICAvLyAgICBhc3NvY2lhdGVkIHN0ZXBzOlxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0RhdGFVUkwnOiB7XG4gICAgICAvLyAxLiBSZXR1cm4gYnl0ZXMgYXMgYSBEYXRhVVJMIFtSRkMyMzk3XSBzdWJqZWN0IHRvXG4gICAgICAvLyAgICB0aGUgY29uc2lkZXJhdGlvbnMgYmVsb3c6XG4gICAgICAvLyAgKiBVc2UgbWltZVR5cGUgYXMgcGFydCBvZiB0aGUgRGF0YSBVUkwgaWYgaXQgaXNcbiAgICAgIC8vICAgIGF2YWlsYWJsZSBpbiBrZWVwaW5nIHdpdGggdGhlIERhdGEgVVJMXG4gICAgICAvLyAgICBzcGVjaWZpY2F0aW9uIFtSRkMyMzk3XS5cbiAgICAgIC8vICAqIElmIG1pbWVUeXBlIGlzIG5vdCBhdmFpbGFibGUgcmV0dXJuIGEgRGF0YSBVUkxcbiAgICAgIC8vICAgIHdpdGhvdXQgYSBtZWRpYS10eXBlLiBbUkZDMjM5N10uXG5cbiAgICAgIC8vIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvcmZjMjM5NyNzZWN0aW9uLTNcbiAgICAgIC8vIGRhdGF1cmwgICAgOj0gXCJkYXRhOlwiIFsgbWVkaWF0eXBlIF0gWyBcIjtiYXNlNjRcIiBdIFwiLFwiIGRhdGFcbiAgICAgIC8vIG1lZGlhdHlwZSAgOj0gWyB0eXBlIFwiL1wiIHN1YnR5cGUgXSAqKCBcIjtcIiBwYXJhbWV0ZXIgKVxuICAgICAgLy8gZGF0YSAgICAgICA6PSAqdXJsY2hhclxuICAgICAgLy8gcGFyYW1ldGVyICA6PSBhdHRyaWJ1dGUgXCI9XCIgdmFsdWVcbiAgICAgIGxldCBkYXRhVVJMID0gJ2RhdGE6J1xuXG4gICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZU1JTUVUeXBlKG1pbWVUeXBlIHx8ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKVxuXG4gICAgICBpZiAocGFyc2VkICE9PSAnZmFpbHVyZScpIHtcbiAgICAgICAgZGF0YVVSTCArPSBzZXJpYWxpemVBTWltZVR5cGUocGFyc2VkKVxuICAgICAgfVxuXG4gICAgICBkYXRhVVJMICs9ICc7YmFzZTY0LCdcblxuICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKCdsYXRpbjEnKVxuXG4gICAgICBmb3IgKGNvbnN0IGNodW5rIG9mIGJ5dGVzKSB7XG4gICAgICAgIGRhdGFVUkwgKz0gYnRvYShkZWNvZGVyLndyaXRlKGNodW5rKSlcbiAgICAgIH1cblxuICAgICAgZGF0YVVSTCArPSBidG9hKGRlY29kZXIuZW5kKCkpXG5cbiAgICAgIHJldHVybiBkYXRhVVJMXG4gICAgfVxuICAgIGNhc2UgJ1RleHQnOiB7XG4gICAgICAvLyAxLiBMZXQgZW5jb2RpbmcgYmUgZmFpbHVyZVxuICAgICAgbGV0IGVuY29kaW5nID0gJ2ZhaWx1cmUnXG5cbiAgICAgIC8vIDIuIElmIHRoZSBlbmNvZGluZ05hbWUgaXMgcHJlc2VudCwgc2V0IGVuY29kaW5nIHRvIHRoZVxuICAgICAgLy8gICAgcmVzdWx0IG9mIGdldHRpbmcgYW4gZW5jb2RpbmcgZnJvbSBlbmNvZGluZ05hbWUuXG4gICAgICBpZiAoZW5jb2RpbmdOYW1lKSB7XG4gICAgICAgIGVuY29kaW5nID0gZ2V0RW5jb2RpbmcoZW5jb2RpbmdOYW1lKVxuICAgICAgfVxuXG4gICAgICAvLyAzLiBJZiBlbmNvZGluZyBpcyBmYWlsdXJlLCBhbmQgbWltZVR5cGUgaXMgcHJlc2VudDpcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gJ2ZhaWx1cmUnICYmIG1pbWVUeXBlKSB7XG4gICAgICAgIC8vIDEuIExldCB0eXBlIGJlIHRoZSByZXN1bHQgb2YgcGFyc2UgYSBNSU1FIHR5cGVcbiAgICAgICAgLy8gICAgZ2l2ZW4gbWltZVR5cGUuXG4gICAgICAgIGNvbnN0IHR5cGUgPSBwYXJzZU1JTUVUeXBlKG1pbWVUeXBlKVxuXG4gICAgICAgIC8vIDIuIElmIHR5cGUgaXMgbm90IGZhaWx1cmUsIHNldCBlbmNvZGluZyB0byB0aGUgcmVzdWx0XG4gICAgICAgIC8vICAgIG9mIGdldHRpbmcgYW4gZW5jb2RpbmcgZnJvbSB0eXBl4oCZcyBwYXJhbWV0ZXJzW1wiY2hhcnNldFwiXS5cbiAgICAgICAgaWYgKHR5cGUgIT09ICdmYWlsdXJlJykge1xuICAgICAgICAgIGVuY29kaW5nID0gZ2V0RW5jb2RpbmcodHlwZS5wYXJhbWV0ZXJzLmdldCgnY2hhcnNldCcpKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIDQuIElmIGVuY29kaW5nIGlzIGZhaWx1cmUsIHRoZW4gc2V0IGVuY29kaW5nIHRvIFVURi04LlxuICAgICAgaWYgKGVuY29kaW5nID09PSAnZmFpbHVyZScpIHtcbiAgICAgICAgZW5jb2RpbmcgPSAnVVRGLTgnXG4gICAgICB9XG5cbiAgICAgIC8vIDUuIERlY29kZSBieXRlcyB1c2luZyBmYWxsYmFjayBlbmNvZGluZyBlbmNvZGluZywgYW5kXG4gICAgICAvLyAgICByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICAgIHJldHVybiBkZWNvZGUoYnl0ZXMsIGVuY29kaW5nKVxuICAgIH1cbiAgICBjYXNlICdBcnJheUJ1ZmZlcic6IHtcbiAgICAgIC8vIFJldHVybiBhIG5ldyBBcnJheUJ1ZmZlciB3aG9zZSBjb250ZW50cyBhcmUgYnl0ZXMuXG4gICAgICBjb25zdCBzZXF1ZW5jZSA9IGNvbWJpbmVCeXRlU2VxdWVuY2VzKGJ5dGVzKVxuXG4gICAgICByZXR1cm4gc2VxdWVuY2UuYnVmZmVyXG4gICAgfVxuICAgIGNhc2UgJ0JpbmFyeVN0cmluZyc6IHtcbiAgICAgIC8vIFJldHVybiBieXRlcyBhcyBhIGJpbmFyeSBzdHJpbmcsIGluIHdoaWNoIGV2ZXJ5IGJ5dGVcbiAgICAgIC8vICBpcyByZXByZXNlbnRlZCBieSBhIGNvZGUgdW5pdCBvZiBlcXVhbCB2YWx1ZSBbMC4uMjU1XS5cbiAgICAgIGxldCBiaW5hcnlTdHJpbmcgPSAnJ1xuXG4gICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoJ2xhdGluMScpXG5cbiAgICAgIGZvciAoY29uc3QgY2h1bmsgb2YgYnl0ZXMpIHtcbiAgICAgICAgYmluYXJ5U3RyaW5nICs9IGRlY29kZXIud3JpdGUoY2h1bmspXG4gICAgICB9XG5cbiAgICAgIGJpbmFyeVN0cmluZyArPSBkZWNvZGVyLmVuZCgpXG5cbiAgICAgIHJldHVybiBiaW5hcnlTdHJpbmdcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZW5jb2Rpbmcuc3BlYy53aGF0d2cub3JnLyNkZWNvZGVcbiAqIEBwYXJhbSB7VWludDhBcnJheVtdfSBpb1F1ZXVlXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5jb2RpbmdcbiAqL1xuZnVuY3Rpb24gZGVjb2RlIChpb1F1ZXVlLCBlbmNvZGluZykge1xuICBjb25zdCBieXRlcyA9IGNvbWJpbmVCeXRlU2VxdWVuY2VzKGlvUXVldWUpXG5cbiAgLy8gMS4gTGV0IEJPTUVuY29kaW5nIGJlIHRoZSByZXN1bHQgb2YgQk9NIHNuaWZmaW5nIGlvUXVldWUuXG4gIGNvbnN0IEJPTUVuY29kaW5nID0gQk9NU25pZmZpbmcoYnl0ZXMpXG5cbiAgbGV0IHNsaWNlID0gMFxuXG4gIC8vIDIuIElmIEJPTUVuY29kaW5nIGlzIG5vbi1udWxsOlxuICBpZiAoQk9NRW5jb2RpbmcgIT09IG51bGwpIHtcbiAgICAvLyAxLiBTZXQgZW5jb2RpbmcgdG8gQk9NRW5jb2RpbmcuXG4gICAgZW5jb2RpbmcgPSBCT01FbmNvZGluZ1xuXG4gICAgLy8gMi4gUmVhZCB0aHJlZSBieXRlcyBmcm9tIGlvUXVldWUsIGlmIEJPTUVuY29kaW5nIGlzXG4gICAgLy8gICAgVVRGLTg7IG90aGVyd2lzZSByZWFkIHR3byBieXRlcy5cbiAgICAvLyAgICAoRG8gbm90aGluZyB3aXRoIHRob3NlIGJ5dGVzLilcbiAgICBzbGljZSA9IEJPTUVuY29kaW5nID09PSAnVVRGLTgnID8gMyA6IDJcbiAgfVxuXG4gIC8vIDMuIFByb2Nlc3MgYSBxdWV1ZSB3aXRoIGFuIGluc3RhbmNlIG9mIGVuY29kaW5n4oCZc1xuICAvLyAgICBkZWNvZGVyLCBpb1F1ZXVlLCBvdXRwdXQsIGFuZCBcInJlcGxhY2VtZW50XCIuXG5cbiAgLy8gNC4gUmV0dXJuIG91dHB1dC5cblxuICBjb25zdCBzbGljZWQgPSBieXRlcy5zbGljZShzbGljZSlcbiAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZykuZGVjb2RlKHNsaWNlZClcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZW5jb2Rpbmcuc3BlYy53aGF0d2cub3JnLyNib20tc25pZmZcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gaW9RdWV1ZVxuICovXG5mdW5jdGlvbiBCT01TbmlmZmluZyAoaW9RdWV1ZSkge1xuICAvLyAxLiBMZXQgQk9NIGJlIHRoZSByZXN1bHQgb2YgcGVla2luZyAzIGJ5dGVzIGZyb20gaW9RdWV1ZSxcbiAgLy8gICAgY29udmVydGVkIHRvIGEgYnl0ZSBzZXF1ZW5jZS5cbiAgY29uc3QgW2EsIGIsIGNdID0gaW9RdWV1ZVxuXG4gIC8vIDIuIEZvciBlYWNoIG9mIHRoZSByb3dzIGluIHRoZSB0YWJsZSBiZWxvdywgc3RhcnRpbmcgd2l0aFxuICAvLyAgICB0aGUgZmlyc3Qgb25lIGFuZCBnb2luZyBkb3duLCBpZiBCT00gc3RhcnRzIHdpdGggdGhlXG4gIC8vICAgIGJ5dGVzIGdpdmVuIGluIHRoZSBmaXJzdCBjb2x1bW4sIHRoZW4gcmV0dXJuIHRoZVxuICAvLyAgICBlbmNvZGluZyBnaXZlbiBpbiB0aGUgY2VsbCBpbiB0aGUgc2Vjb25kIGNvbHVtbiBvZiB0aGF0XG4gIC8vICAgIHJvdy4gT3RoZXJ3aXNlLCByZXR1cm4gbnVsbC5cbiAgaWYgKGEgPT09IDB4RUYgJiYgYiA9PT0gMHhCQiAmJiBjID09PSAweEJGKSB7XG4gICAgcmV0dXJuICdVVEYtOCdcbiAgfSBlbHNlIGlmIChhID09PSAweEZFICYmIGIgPT09IDB4RkYpIHtcbiAgICByZXR1cm4gJ1VURi0xNkJFJ1xuICB9IGVsc2UgaWYgKGEgPT09IDB4RkYgJiYgYiA9PT0gMHhGRSkge1xuICAgIHJldHVybiAnVVRGLTE2TEUnXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheVtdfSBzZXF1ZW5jZXNcbiAqL1xuZnVuY3Rpb24gY29tYmluZUJ5dGVTZXF1ZW5jZXMgKHNlcXVlbmNlcykge1xuICBjb25zdCBzaXplID0gc2VxdWVuY2VzLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgIHJldHVybiBhICsgYi5ieXRlTGVuZ3RoXG4gIH0sIDApXG5cbiAgbGV0IG9mZnNldCA9IDBcblxuICByZXR1cm4gc2VxdWVuY2VzLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgIGEuc2V0KGIsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gYi5ieXRlTGVuZ3RoXG4gICAgcmV0dXJuIGFcbiAgfSwgbmV3IFVpbnQ4QXJyYXkoc2l6ZSkpXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdGF0aWNQcm9wZXJ0eURlc2NyaXB0b3JzLFxuICByZWFkT3BlcmF0aW9uLFxuICBmaXJlQVByb2dyZXNzRXZlbnRcbn1cbiJdLCJuYW1lcyI6WyJrU3RhdGUiLCJrRXJyb3IiLCJrUmVzdWx0Iiwia0Fib3J0ZWQiLCJrTGFzdFByb2dyZXNzRXZlbnRGaXJlZCIsInJlcXVpcmUiLCJQcm9ncmVzc0V2ZW50IiwiZ2V0RW5jb2RpbmciLCJzZXJpYWxpemVBTWltZVR5cGUiLCJwYXJzZU1JTUVUeXBlIiwidHlwZXMiLCJTdHJpbmdEZWNvZGVyIiwiYnRvYSIsInN0YXRpY1Byb3BlcnR5RGVzY3JpcHRvcnMiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJyZWFkT3BlcmF0aW9uIiwiZnIiLCJibG9iIiwidHlwZSIsImVuY29kaW5nTmFtZSIsIkRPTUV4Y2VwdGlvbiIsInN0cmVhbSIsInJlYWRlciIsImdldFJlYWRlciIsImJ5dGVzIiwiY2h1bmtQcm9taXNlIiwicmVhZCIsImlzRmlyc3RDaHVuayIsImRvbmUiLCJ2YWx1ZSIsInF1ZXVlTWljcm90YXNrIiwiZmlyZUFQcm9ncmVzc0V2ZW50IiwiaXNVaW50OEFycmF5IiwicHVzaCIsInVuZGVmaW5lZCIsIkRhdGUiLCJub3ciLCJyZXN1bHQiLCJwYWNrYWdlRGF0YSIsImVycm9yIiwiZSIsImV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkaXNwYXRjaEV2ZW50IiwibWltZVR5cGUiLCJkYXRhVVJMIiwicGFyc2VkIiwiZGVjb2RlciIsImNodW5rIiwid3JpdGUiLCJlbmQiLCJlbmNvZGluZyIsInBhcmFtZXRlcnMiLCJnZXQiLCJkZWNvZGUiLCJzZXF1ZW5jZSIsImNvbWJpbmVCeXRlU2VxdWVuY2VzIiwiYnVmZmVyIiwiYmluYXJ5U3RyaW5nIiwiaW9RdWV1ZSIsIkJPTUVuY29kaW5nIiwiQk9NU25pZmZpbmciLCJzbGljZSIsInNsaWNlZCIsIlRleHREZWNvZGVyIiwiYSIsImIiLCJjIiwic2VxdWVuY2VzIiwic2l6ZSIsInJlZHVjZSIsImJ5dGVMZW5ndGgiLCJvZmZzZXQiLCJzZXQiLCJVaW50OEFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/fileapi/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/connection.js":
/*!*************************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/connection.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  uid,\n  states,\n  sentCloseFrameState,\n  emptyBuffer,\n  opcodes\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst {\n  kReadyState,\n  kSentClose,\n  kByteParser,\n  kReceivedClose,\n  kResponse\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\");\nconst {\n  fireEvent,\n  failWebsocketConnection,\n  isClosing,\n  isClosed,\n  isEstablished,\n  parseExtensions\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/websocket/util.js\");\nconst {\n  channels\n} = __webpack_require__(/*! ../../core/diagnostics */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst {\n  CloseEvent\n} = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nconst {\n  makeRequest\n} = __webpack_require__(/*! ../fetch/request */ \"(ssr)/./node_modules/undici/lib/web/fetch/request.js\");\nconst {\n  fetching\n} = __webpack_require__(/*! ../fetch/index */ \"(ssr)/./node_modules/undici/lib/web/fetch/index.js\");\nconst {\n  Headers,\n  getHeadersList\n} = __webpack_require__(/*! ../fetch/headers */ \"(ssr)/./node_modules/undici/lib/web/fetch/headers.js\");\nconst {\n  getDecodeSplit\n} = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst {\n  WebsocketFrameSend\n} = __webpack_require__(/*! ./frame */ \"(ssr)/./node_modules/undici/lib/web/websocket/frame.js\");\n\n/** @type {import('crypto')} */\nlet crypto;\ntry {\n  crypto = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n  /* c8 ignore next 3 */\n} catch {}\n\n/**\n * @see https://websockets.spec.whatwg.org/#concept-websocket-establish\n * @param {URL} url\n * @param {string|string[]} protocols\n * @param {import('./websocket').WebSocket} ws\n * @param {(response: any, extensions: string[] | undefined) => void} onEstablish\n * @param {Partial<import('../../types/websocket').WebSocketInit>} options\n */\nfunction establishWebSocketConnection(url, protocols, client, ws, onEstablish, options) {\n  // 1. Let requestURL be a copy of url, with its scheme set to \"http\", if url’s\n  //    scheme is \"ws\", and to \"https\" otherwise.\n  const requestURL = url;\n  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:';\n\n  // 2. Let request be a new request, whose URL is requestURL, client is client,\n  //    service-workers mode is \"none\", referrer is \"no-referrer\", mode is\n  //    \"websocket\", credentials mode is \"include\", cache mode is \"no-store\" ,\n  //    and redirect mode is \"error\".\n  const request = makeRequest({\n    urlList: [requestURL],\n    client,\n    serviceWorkers: 'none',\n    referrer: 'no-referrer',\n    mode: 'websocket',\n    credentials: 'include',\n    cache: 'no-store',\n    redirect: 'error'\n  });\n\n  // Note: undici extension, allow setting custom headers.\n  if (options.headers) {\n    const headersList = getHeadersList(new Headers(options.headers));\n    request.headersList = headersList;\n  }\n\n  // 3. Append (`Upgrade`, `websocket`) to request’s header list.\n  // 4. Append (`Connection`, `Upgrade`) to request’s header list.\n  // Note: both of these are handled by undici currently.\n  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397\n\n  // 5. Let keyValue be a nonce consisting of a randomly selected\n  //    16-byte value that has been forgiving-base64-encoded and\n  //    isomorphic encoded.\n  const keyValue = crypto.randomBytes(16).toString('base64');\n\n  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s\n  //    header list.\n  request.headersList.append('sec-websocket-key', keyValue);\n\n  // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s\n  //    header list.\n  request.headersList.append('sec-websocket-version', '13');\n\n  // 8. For each protocol in protocols, combine\n  //    (`Sec-WebSocket-Protocol`, protocol) in request’s header\n  //    list.\n  for (const protocol of protocols) {\n    request.headersList.append('sec-websocket-protocol', protocol);\n  }\n\n  // 9. Let permessageDeflate be a user-agent defined\n  //    \"permessage-deflate\" extension header value.\n  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673\n  const permessageDeflate = 'permessage-deflate; client_max_window_bits';\n\n  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to\n  //     request’s header list.\n  request.headersList.append('sec-websocket-extensions', permessageDeflate);\n\n  // 11. Fetch request with useParallelQueue set to true, and\n  //     processResponse given response being these steps:\n  const controller = fetching({\n    request,\n    useParallelQueue: true,\n    dispatcher: options.dispatcher,\n    processResponse(response) {\n      // 1. If response is a network error or its status is not 101,\n      //    fail the WebSocket connection.\n      if (response.type === 'error' || response.status !== 101) {\n        failWebsocketConnection(ws, 'Received network error or non-101 status code.');\n        return;\n      }\n\n      // 2. If protocols is not the empty list and extracting header\n      //    list values given `Sec-WebSocket-Protocol` and response’s\n      //    header list results in null, failure, or the empty byte\n      //    sequence, then fail the WebSocket connection.\n      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {\n        failWebsocketConnection(ws, 'Server did not respond with sent protocols.');\n        return;\n      }\n\n      // 3. Follow the requirements stated step 2 to step 6, inclusive,\n      //    of the last set of steps in section 4.1 of The WebSocket\n      //    Protocol to validate response. This either results in fail\n      //    the WebSocket connection or the WebSocket connection is\n      //    established.\n\n      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|\n      //    header field contains a value that is not an ASCII case-\n      //    insensitive match for the value \"websocket\", the client MUST\n      //    _Fail the WebSocket Connection_.\n      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {\n        failWebsocketConnection(ws, 'Server did not set Upgrade header to \"websocket\".');\n        return;\n      }\n\n      // 3. If the response lacks a |Connection| header field or the\n      //    |Connection| header field doesn't contain a token that is an\n      //    ASCII case-insensitive match for the value \"Upgrade\", the client\n      //    MUST _Fail the WebSocket Connection_.\n      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {\n        failWebsocketConnection(ws, 'Server did not set Connection header to \"upgrade\".');\n        return;\n      }\n\n      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or\n      //    the |Sec-WebSocket-Accept| contains a value other than the\n      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-\n      //    Key| (as a string, not base64-decoded) with the string \"258EAFA5-\n      //    E914-47DA-95CA-C5AB0DC85B11\" but ignoring any leading and\n      //    trailing whitespace, the client MUST _Fail the WebSocket\n      //    Connection_.\n      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept');\n      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64');\n      if (secWSAccept !== digest) {\n        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.');\n        return;\n      }\n\n      // 5. If the response includes a |Sec-WebSocket-Extensions| header\n      //    field and this header field indicates the use of an extension\n      //    that was not present in the client's handshake (the server has\n      //    indicated an extension not requested by the client), the client\n      //    MUST _Fail the WebSocket Connection_.  (The parsing of this\n      //    header field to determine which extensions are requested is\n      //    discussed in Section 9.1.)\n      const secExtension = response.headersList.get('Sec-WebSocket-Extensions');\n      let extensions;\n      if (secExtension !== null) {\n        extensions = parseExtensions(secExtension);\n        if (!extensions.has('permessage-deflate')) {\n          failWebsocketConnection(ws, 'Sec-WebSocket-Extensions header does not match.');\n          return;\n        }\n      }\n\n      // 6. If the response includes a |Sec-WebSocket-Protocol| header field\n      //    and this header field indicates the use of a subprotocol that was\n      //    not present in the client's handshake (the server has indicated a\n      //    subprotocol not requested by the client), the client MUST _Fail\n      //    the WebSocket Connection_.\n      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol');\n      if (secProtocol !== null) {\n        const requestProtocols = getDecodeSplit('sec-websocket-protocol', request.headersList);\n\n        // The client can request that the server use a specific subprotocol by\n        // including the |Sec-WebSocket-Protocol| field in its handshake.  If it\n        // is specified, the server needs to include the same field and one of\n        // the selected subprotocol values in its response for the connection to\n        // be established.\n        if (!requestProtocols.includes(secProtocol)) {\n          failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.');\n          return;\n        }\n      }\n      response.socket.on('data', onSocketData);\n      response.socket.on('close', onSocketClose);\n      response.socket.on('error', onSocketError);\n      if (channels.open.hasSubscribers) {\n        channels.open.publish({\n          address: response.socket.address(),\n          protocol: secProtocol,\n          extensions: secExtension\n        });\n      }\n      onEstablish(response, extensions);\n    }\n  });\n  return controller;\n}\nfunction closeWebSocketConnection(ws, code, reason, reasonByteLength) {\n  if (isClosing(ws) || isClosed(ws)) {\n    // If this's ready state is CLOSING (2) or CLOSED (3)\n    // Do nothing.\n  } else if (!isEstablished(ws)) {\n    // If the WebSocket connection is not yet established\n    // Fail the WebSocket connection and set this's ready state\n    // to CLOSING (2).\n    failWebsocketConnection(ws, 'Connection was closed before it was established.');\n    ws[kReadyState] = states.CLOSING;\n  } else if (ws[kSentClose] === sentCloseFrameState.NOT_SENT) {\n    // If the WebSocket closing handshake has not yet been started\n    // Start the WebSocket closing handshake and set this's ready\n    // state to CLOSING (2).\n    // - If neither code nor reason is present, the WebSocket Close\n    //   message must not have a body.\n    // - If code is present, then the status code to use in the\n    //   WebSocket Close message must be the integer given by code.\n    // - If reason is also present, then reasonBytes must be\n    //   provided in the Close message after the status code.\n\n    ws[kSentClose] = sentCloseFrameState.PROCESSING;\n    const frame = new WebsocketFrameSend();\n\n    // If neither code nor reason is present, the WebSocket Close\n    // message must not have a body.\n\n    // If code is present, then the status code to use in the\n    // WebSocket Close message must be the integer given by code.\n    if (code !== undefined && reason === undefined) {\n      frame.frameData = Buffer.allocUnsafe(2);\n      frame.frameData.writeUInt16BE(code, 0);\n    } else if (code !== undefined && reason !== undefined) {\n      // If reason is also present, then reasonBytes must be\n      // provided in the Close message after the status code.\n      frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);\n      frame.frameData.writeUInt16BE(code, 0);\n      // the body MAY contain UTF-8-encoded data with value /reason/\n      frame.frameData.write(reason, 2, 'utf-8');\n    } else {\n      frame.frameData = emptyBuffer;\n    }\n\n    /** @type {import('stream').Duplex} */\n    const socket = ws[kResponse].socket;\n    socket.write(frame.createFrame(opcodes.CLOSE));\n    ws[kSentClose] = sentCloseFrameState.SENT;\n\n    // Upon either sending or receiving a Close control frame, it is said\n    // that _The WebSocket Closing Handshake is Started_ and that the\n    // WebSocket connection is in the CLOSING state.\n    ws[kReadyState] = states.CLOSING;\n  } else {\n    // Otherwise\n    // Set this's ready state to CLOSING (2).\n    ws[kReadyState] = states.CLOSING;\n  }\n}\n\n/**\n * @param {Buffer} chunk\n */\nfunction onSocketData(chunk) {\n  if (!this.ws[kByteParser].write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4\n */\nfunction onSocketClose() {\n  const {\n    ws\n  } = this;\n  const {\n    [kResponse]: response\n  } = ws;\n  response.socket.off('data', onSocketData);\n  response.socket.off('close', onSocketClose);\n  response.socket.off('error', onSocketError);\n\n  // If the TCP connection was closed after the\n  // WebSocket closing handshake was completed, the WebSocket connection\n  // is said to have been closed _cleanly_.\n  const wasClean = ws[kSentClose] === sentCloseFrameState.SENT && ws[kReceivedClose];\n  let code = 1005;\n  let reason = '';\n  const result = ws[kByteParser].closingInfo;\n  if (result && !result.error) {\n    code = result.code ?? 1005;\n    reason = result.reason;\n  } else if (!ws[kReceivedClose]) {\n    // If _The WebSocket\n    // Connection is Closed_ and no Close control frame was received by the\n    // endpoint (such as could occur if the underlying transport connection\n    // is lost), _The WebSocket Connection Close Code_ is considered to be\n    // 1006.\n    code = 1006;\n  }\n\n  // 1. Change the ready state to CLOSED (3).\n  ws[kReadyState] = states.CLOSED;\n\n  // 2. If the user agent was required to fail the WebSocket\n  //    connection, or if the WebSocket connection was closed\n  //    after being flagged as full, fire an event named error\n  //    at the WebSocket object.\n  // TODO\n\n  // 3. Fire an event named close at the WebSocket object,\n  //    using CloseEvent, with the wasClean attribute\n  //    initialized to true if the connection closed cleanly\n  //    and false otherwise, the code attribute initialized to\n  //    the WebSocket connection close code, and the reason\n  //    attribute initialized to the result of applying UTF-8\n  //    decode without BOM to the WebSocket connection close\n  //    reason.\n  // TODO: process.nextTick\n  fireEvent('close', ws, (type, init) => new CloseEvent(type, init), {\n    wasClean,\n    code,\n    reason\n  });\n  if (channels.close.hasSubscribers) {\n    channels.close.publish({\n      websocket: ws,\n      code,\n      reason\n    });\n  }\n}\nfunction onSocketError(error) {\n  const {\n    ws\n  } = this;\n  ws[kReadyState] = states.CLOSING;\n  if (channels.socketError.hasSubscribers) {\n    channels.socketError.publish(error);\n  }\n  this.destroy();\n}\nmodule.exports = {\n  establishWebSocketConnection,\n  closeWebSocketConnection\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/constants.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// This is a Globally Unique Identifier unique used\n// to validate that the endpoint accepts websocket\n// connections.\n// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3\nconst uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n\n/** @type {PropertyDescriptor} */\nconst staticPropertyDescriptors = {\n  enumerable: true,\n  writable: false,\n  configurable: false\n};\nconst states = {\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3\n};\nconst sentCloseFrameState = {\n  NOT_SENT: 0,\n  PROCESSING: 1,\n  SENT: 2\n};\nconst opcodes = {\n  CONTINUATION: 0x0,\n  TEXT: 0x1,\n  BINARY: 0x2,\n  CLOSE: 0x8,\n  PING: 0x9,\n  PONG: 0xA\n};\nconst maxUnsigned16Bit = 2 ** 16 - 1; // 65535\n\nconst parserStates = {\n  INFO: 0,\n  PAYLOADLENGTH_16: 2,\n  PAYLOADLENGTH_64: 3,\n  READ_DATA: 4\n};\nconst emptyBuffer = Buffer.allocUnsafe(0);\nconst sendHints = {\n  string: 1,\n  typedArray: 2,\n  arrayBuffer: 3,\n  blob: 4\n};\nmodule.exports = {\n  uid,\n  sentCloseFrameState,\n  staticPropertyDescriptors,\n  states,\n  opcodes,\n  maxUnsigned16Bit,\n  parserStates,\n  emptyBuffer,\n  sendHints\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLEdBQUcsR0FBRyxzQ0FBc0M7O0FBRWxEO0FBQ0EsTUFBTUMseUJBQXlCLEdBQUc7RUFDaENDLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxRQUFRLEVBQUUsS0FBSztFQUNmQyxZQUFZLEVBQUU7QUFDaEIsQ0FBQztBQUVELE1BQU1DLE1BQU0sR0FBRztFQUNiQyxVQUFVLEVBQUUsQ0FBQztFQUNiQyxJQUFJLEVBQUUsQ0FBQztFQUNQQyxPQUFPLEVBQUUsQ0FBQztFQUNWQyxNQUFNLEVBQUU7QUFDVixDQUFDO0FBRUQsTUFBTUMsbUJBQW1CLEdBQUc7RUFDMUJDLFFBQVEsRUFBRSxDQUFDO0VBQ1hDLFVBQVUsRUFBRSxDQUFDO0VBQ2JDLElBQUksRUFBRTtBQUNSLENBQUM7QUFFRCxNQUFNQyxPQUFPLEdBQUc7RUFDZEMsWUFBWSxFQUFFLEdBQUc7RUFDakJDLElBQUksRUFBRSxHQUFHO0VBQ1RDLE1BQU0sRUFBRSxHQUFHO0VBQ1hDLEtBQUssRUFBRSxHQUFHO0VBQ1ZDLElBQUksRUFBRSxHQUFHO0VBQ1RDLElBQUksRUFBRTtBQUNSLENBQUM7QUFFRCxNQUFNQyxnQkFBZ0IsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBQzs7QUFFckMsTUFBTUMsWUFBWSxHQUFHO0VBQ25CQyxJQUFJLEVBQUUsQ0FBQztFQUNQQyxnQkFBZ0IsRUFBRSxDQUFDO0VBQ25CQyxnQkFBZ0IsRUFBRSxDQUFDO0VBQ25CQyxTQUFTLEVBQUU7QUFDYixDQUFDO0FBRUQsTUFBTUMsV0FBVyxHQUFHQyxNQUFNLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFFekMsTUFBTUMsU0FBUyxHQUFHO0VBQ2hCQyxNQUFNLEVBQUUsQ0FBQztFQUNUQyxVQUFVLEVBQUUsQ0FBQztFQUNiQyxXQUFXLEVBQUUsQ0FBQztFQUNkQyxJQUFJLEVBQUU7QUFDUixDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZwQyxHQUFHO0VBQ0hVLG1CQUFtQjtFQUNuQlQseUJBQXlCO0VBQ3pCSSxNQUFNO0VBQ05TLE9BQU87RUFDUE8sZ0JBQWdCO0VBQ2hCQyxZQUFZO0VBQ1pLLFdBQVc7RUFDWEc7QUFDRixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvd2ViL3dlYnNvY2tldC9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8vIFRoaXMgaXMgYSBHbG9iYWxseSBVbmlxdWUgSWRlbnRpZmllciB1bmlxdWUgdXNlZFxuLy8gdG8gdmFsaWRhdGUgdGhhdCB0aGUgZW5kcG9pbnQgYWNjZXB0cyB3ZWJzb2NrZXRcbi8vIGNvbm5lY3Rpb25zLlxuLy8gU2VlIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM2NDU1Lmh0bWwjc2VjdGlvbi0xLjNcbmNvbnN0IHVpZCA9ICcyNThFQUZBNS1FOTE0LTQ3REEtOTVDQS1DNUFCMERDODVCMTEnXG5cbi8qKiBAdHlwZSB7UHJvcGVydHlEZXNjcmlwdG9yfSAqL1xuY29uc3Qgc3RhdGljUHJvcGVydHlEZXNjcmlwdG9ycyA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgd3JpdGFibGU6IGZhbHNlLFxuICBjb25maWd1cmFibGU6IGZhbHNlXG59XG5cbmNvbnN0IHN0YXRlcyA9IHtcbiAgQ09OTkVDVElORzogMCxcbiAgT1BFTjogMSxcbiAgQ0xPU0lORzogMixcbiAgQ0xPU0VEOiAzXG59XG5cbmNvbnN0IHNlbnRDbG9zZUZyYW1lU3RhdGUgPSB7XG4gIE5PVF9TRU5UOiAwLFxuICBQUk9DRVNTSU5HOiAxLFxuICBTRU5UOiAyXG59XG5cbmNvbnN0IG9wY29kZXMgPSB7XG4gIENPTlRJTlVBVElPTjogMHgwLFxuICBURVhUOiAweDEsXG4gIEJJTkFSWTogMHgyLFxuICBDTE9TRTogMHg4LFxuICBQSU5HOiAweDksXG4gIFBPTkc6IDB4QVxufVxuXG5jb25zdCBtYXhVbnNpZ25lZDE2Qml0ID0gMiAqKiAxNiAtIDEgLy8gNjU1MzVcblxuY29uc3QgcGFyc2VyU3RhdGVzID0ge1xuICBJTkZPOiAwLFxuICBQQVlMT0FETEVOR1RIXzE2OiAyLFxuICBQQVlMT0FETEVOR1RIXzY0OiAzLFxuICBSRUFEX0RBVEE6IDRcbn1cblxuY29uc3QgZW1wdHlCdWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcblxuY29uc3Qgc2VuZEhpbnRzID0ge1xuICBzdHJpbmc6IDEsXG4gIHR5cGVkQXJyYXk6IDIsXG4gIGFycmF5QnVmZmVyOiAzLFxuICBibG9iOiA0XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1aWQsXG4gIHNlbnRDbG9zZUZyYW1lU3RhdGUsXG4gIHN0YXRpY1Byb3BlcnR5RGVzY3JpcHRvcnMsXG4gIHN0YXRlcyxcbiAgb3Bjb2RlcyxcbiAgbWF4VW5zaWduZWQxNkJpdCxcbiAgcGFyc2VyU3RhdGVzLFxuICBlbXB0eUJ1ZmZlcixcbiAgc2VuZEhpbnRzXG59XG4iXSwibmFtZXMiOlsidWlkIiwic3RhdGljUHJvcGVydHlEZXNjcmlwdG9ycyIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInN0YXRlcyIsIkNPTk5FQ1RJTkciLCJPUEVOIiwiQ0xPU0lORyIsIkNMT1NFRCIsInNlbnRDbG9zZUZyYW1lU3RhdGUiLCJOT1RfU0VOVCIsIlBST0NFU1NJTkciLCJTRU5UIiwib3Bjb2RlcyIsIkNPTlRJTlVBVElPTiIsIlRFWFQiLCJCSU5BUlkiLCJDTE9TRSIsIlBJTkciLCJQT05HIiwibWF4VW5zaWduZWQxNkJpdCIsInBhcnNlclN0YXRlcyIsIklORk8iLCJQQVlMT0FETEVOR1RIXzE2IiwiUEFZTE9BRExFTkdUSF82NCIsIlJFQURfREFUQSIsImVtcHR5QnVmZmVyIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJzZW5kSGludHMiLCJzdHJpbmciLCJ0eXBlZEFycmF5IiwiYXJyYXlCdWZmZXIiLCJibG9iIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/events.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/events.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  webidl\n} = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  kEnumerableProperty\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  kConstruct\n} = __webpack_require__(/*! ../../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst {\n  MessagePort\n} = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\n\n/**\n * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent\n */\nvar _eventInit = /*#__PURE__*/new WeakMap();\nclass MessageEvent extends Event {\n  constructor(type) {\n    let eventInitDict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (type === kConstruct) {\n      super(arguments[1], arguments[2]);\n      _classPrivateFieldInitSpec(this, _eventInit, void 0);\n      return;\n    }\n    const prefix = 'MessageEvent constructor';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    type = webidl.converters.DOMString(type, prefix, 'type');\n    eventInitDict = webidl.converters.MessageEventInit(eventInitDict, prefix, 'eventInitDict');\n    super(type, eventInitDict);\n    _classPrivateFieldInitSpec(this, _eventInit, void 0);\n    _classPrivateFieldSet(_eventInit, this, eventInitDict);\n  }\n  get data() {\n    webidl.brandCheck(this, MessageEvent);\n    return _classPrivateFieldGet(_eventInit, this).data;\n  }\n  get origin() {\n    webidl.brandCheck(this, MessageEvent);\n    return _classPrivateFieldGet(_eventInit, this).origin;\n  }\n  get lastEventId() {\n    webidl.brandCheck(this, MessageEvent);\n    return _classPrivateFieldGet(_eventInit, this).lastEventId;\n  }\n  get source() {\n    webidl.brandCheck(this, MessageEvent);\n    return _classPrivateFieldGet(_eventInit, this).source;\n  }\n  get ports() {\n    webidl.brandCheck(this, MessageEvent);\n    if (!Object.isFrozen(_classPrivateFieldGet(_eventInit, this).ports)) {\n      Object.freeze(_classPrivateFieldGet(_eventInit, this).ports);\n    }\n    return _classPrivateFieldGet(_eventInit, this).ports;\n  }\n  initMessageEvent(type) {\n    let bubbles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let origin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    let lastEventId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    let source = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    let ports = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n    webidl.brandCheck(this, MessageEvent);\n    webidl.argumentLengthCheck(arguments, 1, 'MessageEvent.initMessageEvent');\n    return new MessageEvent(type, {\n      bubbles,\n      cancelable,\n      data,\n      origin,\n      lastEventId,\n      source,\n      ports\n    });\n  }\n  static createFastMessageEvent(type, init) {\n    const messageEvent = new MessageEvent(kConstruct, type, init);\n    _classPrivateFieldSet(_eventInit, messageEvent, init);\n    _classPrivateFieldGet(_eventInit, messageEvent).data ??= null;\n    _classPrivateFieldGet(_eventInit, messageEvent).origin ??= '';\n    _classPrivateFieldGet(_eventInit, messageEvent).lastEventId ??= '';\n    _classPrivateFieldGet(_eventInit, messageEvent).source ??= null;\n    _classPrivateFieldGet(_eventInit, messageEvent).ports ??= [];\n    return messageEvent;\n  }\n}\nconst {\n  createFastMessageEvent\n} = MessageEvent;\ndelete MessageEvent.createFastMessageEvent;\n\n/**\n * @see https://websockets.spec.whatwg.org/#the-closeevent-interface\n */\nvar _eventInit2 = /*#__PURE__*/new WeakMap();\nclass CloseEvent extends Event {\n  constructor(type) {\n    let eventInitDict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const prefix = 'CloseEvent constructor';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    type = webidl.converters.DOMString(type, prefix, 'type');\n    eventInitDict = webidl.converters.CloseEventInit(eventInitDict);\n    super(type, eventInitDict);\n    _classPrivateFieldInitSpec(this, _eventInit2, void 0);\n    _classPrivateFieldSet(_eventInit2, this, eventInitDict);\n  }\n  get wasClean() {\n    webidl.brandCheck(this, CloseEvent);\n    return _classPrivateFieldGet(_eventInit2, this).wasClean;\n  }\n  get code() {\n    webidl.brandCheck(this, CloseEvent);\n    return _classPrivateFieldGet(_eventInit2, this).code;\n  }\n  get reason() {\n    webidl.brandCheck(this, CloseEvent);\n    return _classPrivateFieldGet(_eventInit2, this).reason;\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface\nvar _eventInit3 = /*#__PURE__*/new WeakMap();\nclass ErrorEvent extends Event {\n  constructor(type, eventInitDict) {\n    const prefix = 'ErrorEvent constructor';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    super(type, eventInitDict);\n    _classPrivateFieldInitSpec(this, _eventInit3, void 0);\n    type = webidl.converters.DOMString(type, prefix, 'type');\n    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});\n    _classPrivateFieldSet(_eventInit3, this, eventInitDict);\n  }\n  get message() {\n    webidl.brandCheck(this, ErrorEvent);\n    return _classPrivateFieldGet(_eventInit3, this).message;\n  }\n  get filename() {\n    webidl.brandCheck(this, ErrorEvent);\n    return _classPrivateFieldGet(_eventInit3, this).filename;\n  }\n  get lineno() {\n    webidl.brandCheck(this, ErrorEvent);\n    return _classPrivateFieldGet(_eventInit3, this).lineno;\n  }\n  get colno() {\n    webidl.brandCheck(this, ErrorEvent);\n    return _classPrivateFieldGet(_eventInit3, this).colno;\n  }\n  get error() {\n    webidl.brandCheck(this, ErrorEvent);\n    return _classPrivateFieldGet(_eventInit3, this).error;\n  }\n}\nObject.defineProperties(MessageEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'MessageEvent',\n    configurable: true\n  },\n  data: kEnumerableProperty,\n  origin: kEnumerableProperty,\n  lastEventId: kEnumerableProperty,\n  source: kEnumerableProperty,\n  ports: kEnumerableProperty,\n  initMessageEvent: kEnumerableProperty\n});\nObject.defineProperties(CloseEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'CloseEvent',\n    configurable: true\n  },\n  reason: kEnumerableProperty,\n  code: kEnumerableProperty,\n  wasClean: kEnumerableProperty\n});\nObject.defineProperties(ErrorEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'ErrorEvent',\n    configurable: true\n  },\n  message: kEnumerableProperty,\n  filename: kEnumerableProperty,\n  lineno: kEnumerableProperty,\n  colno: kEnumerableProperty,\n  error: kEnumerableProperty\n});\nwebidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);\nwebidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(webidl.converters.MessagePort);\nconst eventInit = [{\n  key: 'bubbles',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'cancelable',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'composed',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}];\nwebidl.converters.MessageEventInit = webidl.dictionaryConverter([...eventInit, {\n  key: 'data',\n  converter: webidl.converters.any,\n  defaultValue: () => null\n}, {\n  key: 'origin',\n  converter: webidl.converters.USVString,\n  defaultValue: () => ''\n}, {\n  key: 'lastEventId',\n  converter: webidl.converters.DOMString,\n  defaultValue: () => ''\n}, {\n  key: 'source',\n  // Node doesn't implement WindowProxy or ServiceWorker, so the only\n  // valid value for source is a MessagePort.\n  converter: webidl.nullableConverter(webidl.converters.MessagePort),\n  defaultValue: () => null\n}, {\n  key: 'ports',\n  converter: webidl.converters['sequence<MessagePort>'],\n  defaultValue: () => new Array(0)\n}]);\nwebidl.converters.CloseEventInit = webidl.dictionaryConverter([...eventInit, {\n  key: 'wasClean',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'code',\n  converter: webidl.converters['unsigned short'],\n  defaultValue: () => 0\n}, {\n  key: 'reason',\n  converter: webidl.converters.USVString,\n  defaultValue: () => ''\n}]);\nwebidl.converters.ErrorEventInit = webidl.dictionaryConverter([...eventInit, {\n  key: 'message',\n  converter: webidl.converters.DOMString,\n  defaultValue: () => ''\n}, {\n  key: 'filename',\n  converter: webidl.converters.USVString,\n  defaultValue: () => ''\n}, {\n  key: 'lineno',\n  converter: webidl.converters['unsigned long'],\n  defaultValue: () => 0\n}, {\n  key: 'colno',\n  converter: webidl.converters['unsigned long'],\n  defaultValue: () => 0\n}, {\n  key: 'error',\n  converter: webidl.converters.any\n}]);\nmodule.exports = {\n  MessageEvent,\n  CloseEvent,\n  ErrorEvent,\n  createFastMessageEvent\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFBQSxTQUFBQSwyQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsSUFBQUMsMEJBQUEsQ0FBQUgsQ0FBQSxFQUFBQyxDQUFBLEdBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBSixDQUFBLEVBQUFFLENBQUE7QUFBQSxTQUFBQywyQkFBQUgsQ0FBQSxFQUFBQyxDQUFBLFFBQUFBLENBQUEsQ0FBQUksR0FBQSxDQUFBTCxDQUFBLGFBQUFNLFNBQUE7QUFBQSxTQUFBQyxzQkFBQUMsQ0FBQSxFQUFBTixDQUFBLFdBQUFNLENBQUEsQ0FBQUMsR0FBQSxDQUFBQyxpQkFBQSxDQUFBRixDQUFBLEVBQUFOLENBQUE7QUFBQSxTQUFBUyxzQkFBQUgsQ0FBQSxFQUFBTixDQUFBLEVBQUFVLENBQUEsV0FBQUosQ0FBQSxDQUFBSixHQUFBLENBQUFNLGlCQUFBLENBQUFGLENBQUEsRUFBQU4sQ0FBQSxHQUFBVSxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBRixrQkFBQVYsQ0FBQSxFQUFBQyxDQUFBLEVBQUFZLENBQUEsNkJBQUFiLENBQUEsR0FBQUEsQ0FBQSxLQUFBQyxDQUFBLEdBQUFELENBQUEsQ0FBQUssR0FBQSxDQUFBSixDQUFBLFVBQUFhLFNBQUEsQ0FBQUMsTUFBQSxPQUFBZCxDQUFBLEdBQUFZLENBQUEsWUFBQVAsU0FBQTtBQUVaLE1BQU07RUFBRVU7QUFBTyxDQUFDLEdBQUdDLG1CQUFPLENBQUMsNEVBQWlCLENBQUM7QUFDN0MsTUFBTTtFQUFFQztBQUFvQixDQUFDLEdBQUdELG1CQUFPLENBQUMscUVBQWlCLENBQUM7QUFDMUQsTUFBTTtFQUFFRTtBQUFXLENBQUMsR0FBR0YsbUJBQU8sQ0FBQywyRUFBb0IsQ0FBQztBQUNwRCxNQUFNO0VBQUVHO0FBQVksQ0FBQyxHQUFHSCxtQkFBTyxDQUFDLGdEQUFxQixDQUFD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QUFDO0VBQzdDNEMsWUFBWSxFQUFFQSxDQUFBLEtBQU07QUFDdEIsQ0FBQyxFQUNEO0VBQ0VILEdBQUcsRUFBRSxPQUFPO0VBQ1pDLFNBQVMsRUFBRXpELE1BQU0sQ0FBQ2UsVUFBVSxDQUFDLGVBQWUsQ0FBQztFQUM3QzRDLFlBQVksRUFBRUEsQ0FBQSxLQUFNO0FBQ3RCLENBQUMsRUFDRDtFQUNFSCxHQUFHLEVBQUUsT0FBTztFQUNaQyxTQUFTLEVBQUV6RCxNQUFNLENBQUNlLFVBQVUsQ0FBQzhDO0FBQy9CLENBQUMsQ0FDRixDQUFDO0FBRUZJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2YzRCxZQUFZO0VBQ1oyQixVQUFVO0VBQ1ZNLFVBQVU7RUFDVlY7QUFDRixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvYmF5L0Rlc2t0b3AvcHJvamVjdC9LUjEvbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvd2ViL3dlYnNvY2tldC9ldmVudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgd2ViaWRsIH0gPSByZXF1aXJlKCcuLi9mZXRjaC93ZWJpZGwnKVxuY29uc3QgeyBrRW51bWVyYWJsZVByb3BlcnR5IH0gPSByZXF1aXJlKCcuLi8uLi9jb3JlL3V0aWwnKVxuY29uc3QgeyBrQ29uc3RydWN0IH0gPSByZXF1aXJlKCcuLi8uLi9jb3JlL3N5bWJvbHMnKVxuY29uc3QgeyBNZXNzYWdlUG9ydCB9ID0gcmVxdWlyZSgnbm9kZTp3b3JrZXJfdGhyZWFkcycpXG5cbi8qKlxuICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9jb21tcy5odG1sI21lc3NhZ2VldmVudFxuICovXG5jbGFzcyBNZXNzYWdlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICNldmVudEluaXRcblxuICBjb25zdHJ1Y3RvciAodHlwZSwgZXZlbnRJbml0RGljdCA9IHt9KSB7XG4gICAgaWYgKHR5cGUgPT09IGtDb25zdHJ1Y3QpIHtcbiAgICAgIHN1cGVyKGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcHJlZml4ID0gJ01lc3NhZ2VFdmVudCBjb25zdHJ1Y3RvcidcbiAgICB3ZWJpZGwuYXJndW1lbnRMZW5ndGhDaGVjayhhcmd1bWVudHMsIDEsIHByZWZpeClcblxuICAgIHR5cGUgPSB3ZWJpZGwuY29udmVydGVycy5ET01TdHJpbmcodHlwZSwgcHJlZml4LCAndHlwZScpXG4gICAgZXZlbnRJbml0RGljdCA9IHdlYmlkbC5jb252ZXJ0ZXJzLk1lc3NhZ2VFdmVudEluaXQoZXZlbnRJbml0RGljdCwgcHJlZml4LCAnZXZlbnRJbml0RGljdCcpXG5cbiAgICBzdXBlcih0eXBlLCBldmVudEluaXREaWN0KVxuXG4gICAgdGhpcy4jZXZlbnRJbml0ID0gZXZlbnRJbml0RGljdFxuICB9XG5cbiAgZ2V0IGRhdGEgKCkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIE1lc3NhZ2VFdmVudClcblxuICAgIHJldHVybiB0aGlzLiNldmVudEluaXQuZGF0YVxuICB9XG5cbiAgZ2V0IG9yaWdpbiAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgTWVzc2FnZUV2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXMuI2V2ZW50SW5pdC5vcmlnaW5cbiAgfVxuXG4gIGdldCBsYXN0RXZlbnRJZCAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgTWVzc2FnZUV2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXMuI2V2ZW50SW5pdC5sYXN0RXZlbnRJZFxuICB9XG5cbiAgZ2V0IHNvdXJjZSAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgTWVzc2FnZUV2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXMuI2V2ZW50SW5pdC5zb3VyY2VcbiAgfVxuXG4gIGdldCBwb3J0cyAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgTWVzc2FnZUV2ZW50KVxuXG4gICAgaWYgKCFPYmplY3QuaXNGcm96ZW4odGhpcy4jZXZlbnRJbml0LnBvcnRzKSkge1xuICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzLiNldmVudEluaXQucG9ydHMpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuI2V2ZW50SW5pdC5wb3J0c1xuICB9XG5cbiAgaW5pdE1lc3NhZ2VFdmVudCAoXG4gICAgdHlwZSxcbiAgICBidWJibGVzID0gZmFsc2UsXG4gICAgY2FuY2VsYWJsZSA9IGZhbHNlLFxuICAgIGRhdGEgPSBudWxsLFxuICAgIG9yaWdpbiA9ICcnLFxuICAgIGxhc3RFdmVudElkID0gJycsXG4gICAgc291cmNlID0gbnVsbCxcbiAgICBwb3J0cyA9IFtdXG4gICkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIE1lc3NhZ2VFdmVudClcblxuICAgIHdlYmlkbC5hcmd1bWVudExlbmd0aENoZWNrKGFyZ3VtZW50cywgMSwgJ01lc3NhZ2VFdmVudC5pbml0TWVzc2FnZUV2ZW50JylcblxuICAgIHJldHVybiBuZXcgTWVzc2FnZUV2ZW50KHR5cGUsIHtcbiAgICAgIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRhdGEsIG9yaWdpbiwgbGFzdEV2ZW50SWQsIHNvdXJjZSwgcG9ydHNcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUZhc3RNZXNzYWdlRXZlbnQgKHR5cGUsIGluaXQpIHtcbiAgICBjb25zdCBtZXNzYWdlRXZlbnQgPSBuZXcgTWVzc2FnZUV2ZW50KGtDb25zdHJ1Y3QsIHR5cGUsIGluaXQpXG4gICAgbWVzc2FnZUV2ZW50LiNldmVudEluaXQgPSBpbml0XG4gICAgbWVzc2FnZUV2ZW50LiNldmVudEluaXQuZGF0YSA/Pz0gbnVsbFxuICAgIG1lc3NhZ2VFdmVudC4jZXZlbnRJbml0Lm9yaWdpbiA/Pz0gJydcbiAgICBtZXNzYWdlRXZlbnQuI2V2ZW50SW5pdC5sYXN0RXZlbnRJZCA/Pz0gJydcbiAgICBtZXNzYWdlRXZlbnQuI2V2ZW50SW5pdC5zb3VyY2UgPz89IG51bGxcbiAgICBtZXNzYWdlRXZlbnQuI2V2ZW50SW5pdC5wb3J0cyA/Pz0gW11cbiAgICByZXR1cm4gbWVzc2FnZUV2ZW50XG4gIH1cbn1cblxuY29uc3QgeyBjcmVhdGVGYXN0TWVzc2FnZUV2ZW50IH0gPSBNZXNzYWdlRXZlbnRcbmRlbGV0ZSBNZXNzYWdlRXZlbnQuY3JlYXRlRmFzdE1lc3NhZ2VFdmVudFxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly93ZWJzb2NrZXRzLnNwZWMud2hhdHdnLm9yZy8jdGhlLWNsb3NlZXZlbnQtaW50ZXJmYWNlXG4gKi9cbmNsYXNzIENsb3NlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICNldmVudEluaXRcblxuICBjb25zdHJ1Y3RvciAodHlwZSwgZXZlbnRJbml0RGljdCA9IHt9KSB7XG4gICAgY29uc3QgcHJlZml4ID0gJ0Nsb3NlRXZlbnQgY29uc3RydWN0b3InXG4gICAgd2ViaWRsLmFyZ3VtZW50TGVuZ3RoQ2hlY2soYXJndW1lbnRzLCAxLCBwcmVmaXgpXG5cbiAgICB0eXBlID0gd2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nKHR5cGUsIHByZWZpeCwgJ3R5cGUnKVxuICAgIGV2ZW50SW5pdERpY3QgPSB3ZWJpZGwuY29udmVydGVycy5DbG9zZUV2ZW50SW5pdChldmVudEluaXREaWN0KVxuXG4gICAgc3VwZXIodHlwZSwgZXZlbnRJbml0RGljdClcblxuICAgIHRoaXMuI2V2ZW50SW5pdCA9IGV2ZW50SW5pdERpY3RcbiAgfVxuXG4gIGdldCB3YXNDbGVhbiAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgQ2xvc2VFdmVudClcblxuICAgIHJldHVybiB0aGlzLiNldmVudEluaXQud2FzQ2xlYW5cbiAgfVxuXG4gIGdldCBjb2RlICgpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBDbG9zZUV2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXMuI2V2ZW50SW5pdC5jb2RlXG4gIH1cblxuICBnZXQgcmVhc29uICgpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBDbG9zZUV2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXMuI2V2ZW50SW5pdC5yZWFzb25cbiAgfVxufVxuXG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjdGhlLWVycm9yZXZlbnQtaW50ZXJmYWNlXG5jbGFzcyBFcnJvckV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAjZXZlbnRJbml0XG5cbiAgY29uc3RydWN0b3IgKHR5cGUsIGV2ZW50SW5pdERpY3QpIHtcbiAgICBjb25zdCBwcmVmaXggPSAnRXJyb3JFdmVudCBjb25zdHJ1Y3RvcidcbiAgICB3ZWJpZGwuYXJndW1lbnRMZW5ndGhDaGVjayhhcmd1bWVudHMsIDEsIHByZWZpeClcblxuICAgIHN1cGVyKHR5cGUsIGV2ZW50SW5pdERpY3QpXG5cbiAgICB0eXBlID0gd2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nKHR5cGUsIHByZWZpeCwgJ3R5cGUnKVxuICAgIGV2ZW50SW5pdERpY3QgPSB3ZWJpZGwuY29udmVydGVycy5FcnJvckV2ZW50SW5pdChldmVudEluaXREaWN0ID8/IHt9KVxuXG4gICAgdGhpcy4jZXZlbnRJbml0ID0gZXZlbnRJbml0RGljdFxuICB9XG5cbiAgZ2V0IG1lc3NhZ2UgKCkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIEVycm9yRXZlbnQpXG5cbiAgICByZXR1cm4gdGhpcy4jZXZlbnRJbml0Lm1lc3NhZ2VcbiAgfVxuXG4gIGdldCBmaWxlbmFtZSAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgRXJyb3JFdmVudClcblxuICAgIHJldHVybiB0aGlzLiNldmVudEluaXQuZmlsZW5hbWVcbiAgfVxuXG4gIGdldCBsaW5lbm8gKCkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIEVycm9yRXZlbnQpXG5cbiAgICByZXR1cm4gdGhpcy4jZXZlbnRJbml0LmxpbmVub1xuICB9XG5cbiAgZ2V0IGNvbG5vICgpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBFcnJvckV2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXMuI2V2ZW50SW5pdC5jb2xub1xuICB9XG5cbiAgZ2V0IGVycm9yICgpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBFcnJvckV2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXMuI2V2ZW50SW5pdC5lcnJvclxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE1lc3NhZ2VFdmVudC5wcm90b3R5cGUsIHtcbiAgW1N5bWJvbC50b1N0cmluZ1RhZ106IHtcbiAgICB2YWx1ZTogJ01lc3NhZ2VFdmVudCcsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0sXG4gIGRhdGE6IGtFbnVtZXJhYmxlUHJvcGVydHksXG4gIG9yaWdpbjoga0VudW1lcmFibGVQcm9wZXJ0eSxcbiAgbGFzdEV2ZW50SWQ6IGtFbnVtZXJhYmxlUHJvcGVydHksXG4gIHNvdXJjZToga0VudW1lcmFibGVQcm9wZXJ0eSxcbiAgcG9ydHM6IGtFbnVtZXJhYmxlUHJvcGVydHksXG4gIGluaXRNZXNzYWdlRXZlbnQ6IGtFbnVtZXJhYmxlUHJvcGVydHlcbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENsb3NlRXZlbnQucHJvdG90eXBlLCB7XG4gIFtTeW1ib2wudG9TdHJpbmdUYWddOiB7XG4gICAgdmFsdWU6ICdDbG9zZUV2ZW50JyxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSxcbiAgcmVhc29uOiBrRW51bWVyYWJsZVByb3BlcnR5LFxuICBjb2RlOiBrRW51bWVyYWJsZVByb3BlcnR5LFxuICB3YXNDbGVhbjoga0VudW1lcmFibGVQcm9wZXJ0eVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRXJyb3JFdmVudC5wcm90b3R5cGUsIHtcbiAgW1N5bWJvbC50b1N0cmluZ1RhZ106IHtcbiAgICB2YWx1ZTogJ0Vycm9yRXZlbnQnLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9LFxuICBtZXNzYWdlOiBrRW51bWVyYWJsZVByb3BlcnR5LFxuICBmaWxlbmFtZToga0VudW1lcmFibGVQcm9wZXJ0eSxcbiAgbGluZW5vOiBrRW51bWVyYWJsZVByb3BlcnR5LFxuICBjb2xubzoga0VudW1lcmFibGVQcm9wZXJ0eSxcbiAgZXJyb3I6IGtFbnVtZXJhYmxlUHJvcGVydHlcbn0pXG5cbndlYmlkbC5jb252ZXJ0ZXJzLk1lc3NhZ2VQb3J0ID0gd2ViaWRsLmludGVyZmFjZUNvbnZlcnRlcihNZXNzYWdlUG9ydClcblxud2ViaWRsLmNvbnZlcnRlcnNbJ3NlcXVlbmNlPE1lc3NhZ2VQb3J0PiddID0gd2ViaWRsLnNlcXVlbmNlQ29udmVydGVyKFxuICB3ZWJpZGwuY29udmVydGVycy5NZXNzYWdlUG9ydFxuKVxuXG5jb25zdCBldmVudEluaXQgPSBbXG4gIHtcbiAgICBrZXk6ICdidWJibGVzJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLmJvb2xlYW4sXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiBmYWxzZVxuICB9LFxuICB7XG4gICAga2V5OiAnY2FuY2VsYWJsZScsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVycy5ib29sZWFuLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gZmFsc2VcbiAgfSxcbiAge1xuICAgIGtleTogJ2NvbXBvc2VkJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLmJvb2xlYW4sXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiBmYWxzZVxuICB9XG5dXG5cbndlYmlkbC5jb252ZXJ0ZXJzLk1lc3NhZ2VFdmVudEluaXQgPSB3ZWJpZGwuZGljdGlvbmFyeUNvbnZlcnRlcihbXG4gIC4uLmV2ZW50SW5pdCxcbiAge1xuICAgIGtleTogJ2RhdGEnLFxuICAgIGNvbnZlcnRlcjogd2ViaWRsLmNvbnZlcnRlcnMuYW55LFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gbnVsbFxuICB9LFxuICB7XG4gICAga2V5OiAnb3JpZ2luJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLlVTVlN0cmluZyxcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+ICcnXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdsYXN0RXZlbnRJZCcsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVycy5ET01TdHJpbmcsXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiAnJ1xuICB9LFxuICB7XG4gICAga2V5OiAnc291cmNlJyxcbiAgICAvLyBOb2RlIGRvZXNuJ3QgaW1wbGVtZW50IFdpbmRvd1Byb3h5IG9yIFNlcnZpY2VXb3JrZXIsIHNvIHRoZSBvbmx5XG4gICAgLy8gdmFsaWQgdmFsdWUgZm9yIHNvdXJjZSBpcyBhIE1lc3NhZ2VQb3J0LlxuICAgIGNvbnZlcnRlcjogd2ViaWRsLm51bGxhYmxlQ29udmVydGVyKHdlYmlkbC5jb252ZXJ0ZXJzLk1lc3NhZ2VQb3J0KSxcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+IG51bGxcbiAgfSxcbiAge1xuICAgIGtleTogJ3BvcnRzJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzWydzZXF1ZW5jZTxNZXNzYWdlUG9ydD4nXSxcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+IG5ldyBBcnJheSgwKVxuICB9XG5dKVxuXG53ZWJpZGwuY29udmVydGVycy5DbG9zZUV2ZW50SW5pdCA9IHdlYmlkbC5kaWN0aW9uYXJ5Q29udmVydGVyKFtcbiAgLi4uZXZlbnRJbml0LFxuICB7XG4gICAga2V5OiAnd2FzQ2xlYW4nLFxuICAgIGNvbnZlcnRlcjogd2ViaWRsLmNvbnZlcnRlcnMuYm9vbGVhbixcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+IGZhbHNlXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdjb2RlJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzWyd1bnNpZ25lZCBzaG9ydCddLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gMFxuICB9LFxuICB7XG4gICAga2V5OiAncmVhc29uJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLlVTVlN0cmluZyxcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+ICcnXG4gIH1cbl0pXG5cbndlYmlkbC5jb252ZXJ0ZXJzLkVycm9yRXZlbnRJbml0ID0gd2ViaWRsLmRpY3Rpb25hcnlDb252ZXJ0ZXIoW1xuICAuLi5ldmVudEluaXQsXG4gIHtcbiAgICBrZXk6ICdtZXNzYWdlJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLkRPTVN0cmluZyxcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+ICcnXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdmaWxlbmFtZScsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVycy5VU1ZTdHJpbmcsXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiAnJ1xuICB9LFxuICB7XG4gICAga2V5OiAnbGluZW5vJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzWyd1bnNpZ25lZCBsb25nJ10sXG4gICAgZGVmYXVsdFZhbHVlOiAoKSA9PiAwXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdjb2xubycsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVyc1sndW5zaWduZWQgbG9uZyddLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gMFxuICB9LFxuICB7XG4gICAga2V5OiAnZXJyb3InLFxuICAgIGNvbnZlcnRlcjogd2ViaWRsLmNvbnZlcnRlcnMuYW55XG4gIH1cbl0pXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBNZXNzYWdlRXZlbnQsXG4gIENsb3NlRXZlbnQsXG4gIEVycm9yRXZlbnQsXG4gIGNyZWF0ZUZhc3RNZXNzYWdlRXZlbnRcbn1cbiJdLCJuYW1lcyI6WyJfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyIsImUiLCJ0IiwiYSIsIl9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uIiwic2V0IiwiaGFzIiwiVHlwZUVycm9yIiwiX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwicyIsImdldCIsIl9hc3NlcnRDbGFzc0JyYW5kIiwiX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiciIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ3ZWJpZGwiLCJyZXF1aXJlIiwia0VudW1lcmFibGVQcm9wZXJ0eSIsImtDb25zdHJ1Y3QiLCJNZXNzYWdlUG9ydCIsIl9ldmVudEluaXQiLCJXZWFrTWFwIiwiTWVzc2FnZUV2ZW50IiwiRXZlbnQiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJldmVudEluaXREaWN0IiwidW5kZWZpbmVkIiwicHJlZml4IiwiYXJndW1lbnRMZW5ndGhDaGVjayIsImNvbnZlcnRlcnMiLCJET01TdHJpbmciLCJNZXNzYWdlRXZlbnRJbml0IiwiZGF0YSIsImJyYW5kQ2hlY2siLCJvcmlnaW4iLCJsYXN0RXZlbnRJZCIsInNvdXJjZSIsInBvcnRzIiwiT2JqZWN0IiwiaXNGcm96ZW4iLCJmcmVlemUiLCJpbml0TWVzc2FnZUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjcmVhdGVGYXN0TWVzc2FnZUV2ZW50IiwiaW5pdCIsIm1lc3NhZ2VFdmVudCIsIl9ldmVudEluaXQyIiwiQ2xvc2VFdmVudCIsIkNsb3NlRXZlbnRJbml0Iiwid2FzQ2xlYW4iLCJjb2RlIiwicmVhc29uIiwiX2V2ZW50SW5pdDMiLCJFcnJvckV2ZW50IiwiRXJyb3JFdmVudEluaXQiLCJtZXNzYWdlIiwiZmlsZW5hbWUiLCJsaW5lbm8iLCJjb2xubyIsImVycm9yIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3RvdHlwZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJpbnRlcmZhY2VDb252ZXJ0ZXIiLCJzZXF1ZW5jZUNvbnZlcnRlciIsImV2ZW50SW5pdCIsImtleSIsImNvbnZlcnRlciIsImJvb2xlYW4iLCJkZWZhdWx0VmFsdWUiLCJkaWN0aW9uYXJ5Q29udmVydGVyIiwiYW55IiwiVVNWU3RyaW5nIiwibnVsbGFibGVDb252ZXJ0ZXIiLCJBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/frame.js":
/*!********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/frame.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  maxUnsigned16Bit\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst BUFFER_SIZE = 16386;\n\n/** @type {import('crypto')} */\nlet crypto;\nlet buffer = null;\nlet bufIdx = BUFFER_SIZE;\ntry {\n  crypto = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n  /* c8 ignore next 3 */\n} catch {\n  crypto = {\n    // not full compatibility, but minimum.\n    randomFillSync: function randomFillSync(buffer, _offset, _size) {\n      for (let i = 0; i < buffer.length; ++i) {\n        buffer[i] = Math.random() * 255 | 0;\n      }\n      return buffer;\n    }\n  };\n}\nfunction generateMask() {\n  if (bufIdx === BUFFER_SIZE) {\n    bufIdx = 0;\n    crypto.randomFillSync(buffer ??= Buffer.allocUnsafe(BUFFER_SIZE), 0, BUFFER_SIZE);\n  }\n  return [buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++]];\n}\nclass WebsocketFrameSend {\n  /**\n   * @param {Buffer|undefined} data\n   */\n  constructor(data) {\n    this.frameData = data;\n  }\n  createFrame(opcode) {\n    const frameData = this.frameData;\n    const maskKey = generateMask();\n    const bodyLength = frameData?.byteLength ?? 0;\n\n    /** @type {number} */\n    let payloadLength = bodyLength; // 0-125\n    let offset = 6;\n    if (bodyLength > maxUnsigned16Bit) {\n      offset += 8; // payload length is next 8 bytes\n      payloadLength = 127;\n    } else if (bodyLength > 125) {\n      offset += 2; // payload length is next 2 bytes\n      payloadLength = 126;\n    }\n    const buffer = Buffer.allocUnsafe(bodyLength + offset);\n\n    // Clear first 2 bytes, everything else is overwritten\n    buffer[0] = buffer[1] = 0;\n    buffer[0] |= 0x80; // FIN\n    buffer[0] = (buffer[0] & 0xF0) + opcode; // opcode\n\n    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */\n    buffer[offset - 4] = maskKey[0];\n    buffer[offset - 3] = maskKey[1];\n    buffer[offset - 2] = maskKey[2];\n    buffer[offset - 1] = maskKey[3];\n    buffer[1] = payloadLength;\n    if (payloadLength === 126) {\n      buffer.writeUInt16BE(bodyLength, 2);\n    } else if (payloadLength === 127) {\n      // Clear extended payload length\n      buffer[2] = buffer[3] = 0;\n      buffer.writeUIntBE(bodyLength, 4, 6);\n    }\n    buffer[1] |= 0x80; // MASK\n\n    // mask body\n    for (let i = 0; i < bodyLength; ++i) {\n      buffer[offset + i] = frameData[i] ^ maskKey[i & 3];\n    }\n    return buffer;\n  }\n}\nmodule.exports = {\n  WebsocketFrameSend\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L2ZyYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLE1BQU07RUFBRUE7QUFBaUIsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLCtFQUFhLENBQUM7QUFFbkQsTUFBTUMsV0FBVyxHQUFHLEtBQUs7O0FBRXpCO0FBQ0EsSUFBSUMsTUFBTTtBQUNWLElBQUlDLE1BQU0sR0FBRyxJQUFJO0FBQ2pCLElBQUlDLE1BQU0sR0FBR0gsV0FBVztBQUV4QixJQUFJO0VBQ0ZDLE1BQU0sR0FBR0YsbUJBQU8sQ0FBQyxnQ0FBYSxDQUFDO0VBQ2pDO0FBQ0EsQ0FBQyxDQUFDLE1BQU07RUFDTkUsTUFBTSxHQUFHO0lBQ1A7SUFDQUcsY0FBYyxFQUFFLFNBQVNBLGNBQWNBLENBQUVGLE1BQU0sRUFBRUcsT0FBTyxFQUFFQyxLQUFLLEVBQUU7TUFDL0QsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdMLE1BQU0sQ0FBQ00sTUFBTSxFQUFFLEVBQUVELENBQUMsRUFBRTtRQUN0Q0wsTUFBTSxDQUFDSyxDQUFDLENBQUMsR0FBR0UsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO01BQ3JDO01BQ0EsT0FBT1IsTUFBTTtJQUNmO0VBQ0YsQ0FBQztBQUNIO0FBRUEsU0FBU1MsWUFBWUEsQ0FBQSxFQUFJO0VBQ3ZCLElBQUlSLE1BQU0sS0FBS0gsV0FBVyxFQUFFO0lBQzFCRyxNQUFNLEdBQUcsQ0FBQztJQUNWRixNQUFNLENBQUNHLGNBQWMsQ0FBRUYsTUFBTSxLQUFLVSxNQUFNLENBQUNDLFdBQVcsQ0FBQ2IsV0FBVyxDQUFDLEVBQUcsQ0FBQyxFQUFFQSxXQUFXLENBQUM7RUFDckY7RUFDQSxPQUFPLENBQUNFLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFLENBQUMsRUFBRUQsTUFBTSxDQUFDQyxNQUFNLEVBQUUsQ0FBQyxFQUFFRCxNQUFNLENBQUNDLE1BQU0sRUFBRSxDQUFDLEVBQUVELE1BQU0sQ0FBQ0MsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUNqRjtBQUVBLE1BQU1XLGtCQUFrQixDQUFDO0VBQ3ZCO0FBQ0Y7QUFDQTtFQUNFQyxXQUFXQSxDQUFFQyxJQUFJLEVBQUU7SUFDakIsSUFBSSxDQUFDQyxTQUFTLEdBQUdELElBQUk7RUFDdkI7RUFFQUUsV0FBV0EsQ0FBRUMsTUFBTSxFQUFFO0lBQ25CLE1BQU1GLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVM7SUFDaEMsTUFBTUcsT0FBTyxHQUFHVCxZQUFZLENBQUMsQ0FBQztJQUM5QixNQUFNVSxVQUFVLEdBQUdKLFNBQVMsRUFBRUssVUFBVSxJQUFJLENBQUM7O0lBRTdDO0lBQ0EsSUFBSUMsYUFBYSxHQUFHRixVQUFVLEVBQUM7SUFDL0IsSUFBSUcsTUFBTSxHQUFHLENBQUM7SUFFZCxJQUFJSCxVQUFVLEdBQUd2QixnQkFBZ0IsRUFBRTtNQUNqQzBCLE1BQU0sSUFBSSxDQUFDLEVBQUM7TUFDWkQsYUFBYSxHQUFHLEdBQUc7SUFDckIsQ0FBQyxNQUFNLElBQUlGLFVBQVUsR0FBRyxHQUFHLEVBQUU7TUFDM0JHLE1BQU0sSUFBSSxDQUFDLEVBQUM7TUFDWkQsYUFBYSxHQUFHLEdBQUc7SUFDckI7SUFFQSxNQUFNckIsTUFBTSxHQUFHVSxNQUFNLENBQUNDLFdBQVcsQ0FBQ1EsVUFBVSxHQUFHRyxNQUFNLENBQUM7O0lBRXREO0lBQ0F0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUdBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ3pCQSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFDO0lBQ2xCQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQ0EsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSWlCLE1BQU0sRUFBQzs7SUFFeEM7SUFDQWpCLE1BQU0sQ0FBQ3NCLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBR0osT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMvQmxCLE1BQU0sQ0FBQ3NCLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBR0osT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMvQmxCLE1BQU0sQ0FBQ3NCLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBR0osT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMvQmxCLE1BQU0sQ0FBQ3NCLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBR0osT0FBTyxDQUFDLENBQUMsQ0FBQztJQUUvQmxCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBR3FCLGFBQWE7SUFFekIsSUFBSUEsYUFBYSxLQUFLLEdBQUcsRUFBRTtNQUN6QnJCLE1BQU0sQ0FBQ3VCLGFBQWEsQ0FBQ0osVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDLE1BQU0sSUFBSUUsYUFBYSxLQUFLLEdBQUcsRUFBRTtNQUNoQztNQUNBckIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztNQUN6QkEsTUFBTSxDQUFDd0IsV0FBVyxDQUFDTCxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QztJQUVBbkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBQzs7SUFFbEI7SUFDQSxLQUFLLElBQUlLLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR2MsVUFBVSxFQUFFLEVBQUVkLENBQUMsRUFBRTtNQUNuQ0wsTUFBTSxDQUFDc0IsTUFBTSxHQUFHakIsQ0FBQyxDQUFDLEdBQUdVLFNBQVMsQ0FBQ1YsQ0FBQyxDQUFDLEdBQUdhLE9BQU8sQ0FBQ2IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRDtJQUVBLE9BQU9MLE1BQU07RUFDZjtBQUNGO0FBRUF5QixNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmZDtBQUNGLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L2ZyYW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IG1heFVuc2lnbmVkMTZCaXQgfSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJylcblxuY29uc3QgQlVGRkVSX1NJWkUgPSAxNjM4NlxuXG4vKiogQHR5cGUge2ltcG9ydCgnY3J5cHRvJyl9ICovXG5sZXQgY3J5cHRvXG5sZXQgYnVmZmVyID0gbnVsbFxubGV0IGJ1ZklkeCA9IEJVRkZFUl9TSVpFXG5cbnRyeSB7XG4gIGNyeXB0byA9IHJlcXVpcmUoJ25vZGU6Y3J5cHRvJylcbi8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbn0gY2F0Y2gge1xuICBjcnlwdG8gPSB7XG4gICAgLy8gbm90IGZ1bGwgY29tcGF0aWJpbGl0eSwgYnV0IG1pbmltdW0uXG4gICAgcmFuZG9tRmlsbFN5bmM6IGZ1bmN0aW9uIHJhbmRvbUZpbGxTeW5jIChidWZmZXIsIF9vZmZzZXQsIF9zaXplKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7ICsraSkge1xuICAgICAgICBidWZmZXJbaV0gPSBNYXRoLnJhbmRvbSgpICogMjU1IHwgMFxuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1ZmZlclxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU1hc2sgKCkge1xuICBpZiAoYnVmSWR4ID09PSBCVUZGRVJfU0laRSkge1xuICAgIGJ1ZklkeCA9IDBcbiAgICBjcnlwdG8ucmFuZG9tRmlsbFN5bmMoKGJ1ZmZlciA/Pz0gQnVmZmVyLmFsbG9jVW5zYWZlKEJVRkZFUl9TSVpFKSksIDAsIEJVRkZFUl9TSVpFKVxuICB9XG4gIHJldHVybiBbYnVmZmVyW2J1ZklkeCsrXSwgYnVmZmVyW2J1ZklkeCsrXSwgYnVmZmVyW2J1ZklkeCsrXSwgYnVmZmVyW2J1ZklkeCsrXV1cbn1cblxuY2xhc3MgV2Vic29ja2V0RnJhbWVTZW5kIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QnVmZmVyfHVuZGVmaW5lZH0gZGF0YVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRhdGEpIHtcbiAgICB0aGlzLmZyYW1lRGF0YSA9IGRhdGFcbiAgfVxuXG4gIGNyZWF0ZUZyYW1lIChvcGNvZGUpIHtcbiAgICBjb25zdCBmcmFtZURhdGEgPSB0aGlzLmZyYW1lRGF0YVxuICAgIGNvbnN0IG1hc2tLZXkgPSBnZW5lcmF0ZU1hc2soKVxuICAgIGNvbnN0IGJvZHlMZW5ndGggPSBmcmFtZURhdGE/LmJ5dGVMZW5ndGggPz8gMFxuXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgbGV0IHBheWxvYWRMZW5ndGggPSBib2R5TGVuZ3RoIC8vIDAtMTI1XG4gICAgbGV0IG9mZnNldCA9IDZcblxuICAgIGlmIChib2R5TGVuZ3RoID4gbWF4VW5zaWduZWQxNkJpdCkge1xuICAgICAgb2Zmc2V0ICs9IDggLy8gcGF5bG9hZCBsZW5ndGggaXMgbmV4dCA4IGJ5dGVzXG4gICAgICBwYXlsb2FkTGVuZ3RoID0gMTI3XG4gICAgfSBlbHNlIGlmIChib2R5TGVuZ3RoID4gMTI1KSB7XG4gICAgICBvZmZzZXQgKz0gMiAvLyBwYXlsb2FkIGxlbmd0aCBpcyBuZXh0IDIgYnl0ZXNcbiAgICAgIHBheWxvYWRMZW5ndGggPSAxMjZcbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYm9keUxlbmd0aCArIG9mZnNldClcblxuICAgIC8vIENsZWFyIGZpcnN0IDIgYnl0ZXMsIGV2ZXJ5dGhpbmcgZWxzZSBpcyBvdmVyd3JpdHRlblxuICAgIGJ1ZmZlclswXSA9IGJ1ZmZlclsxXSA9IDBcbiAgICBidWZmZXJbMF0gfD0gMHg4MCAvLyBGSU5cbiAgICBidWZmZXJbMF0gPSAoYnVmZmVyWzBdICYgMHhGMCkgKyBvcGNvZGUgLy8gb3Bjb2RlXG5cbiAgICAvKiEgd3MuIE1JVCBMaWNlbnNlLiBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT4gKi9cbiAgICBidWZmZXJbb2Zmc2V0IC0gNF0gPSBtYXNrS2V5WzBdXG4gICAgYnVmZmVyW29mZnNldCAtIDNdID0gbWFza0tleVsxXVxuICAgIGJ1ZmZlcltvZmZzZXQgLSAyXSA9IG1hc2tLZXlbMl1cbiAgICBidWZmZXJbb2Zmc2V0IC0gMV0gPSBtYXNrS2V5WzNdXG5cbiAgICBidWZmZXJbMV0gPSBwYXlsb2FkTGVuZ3RoXG5cbiAgICBpZiAocGF5bG9hZExlbmd0aCA9PT0gMTI2KSB7XG4gICAgICBidWZmZXIud3JpdGVVSW50MTZCRShib2R5TGVuZ3RoLCAyKVxuICAgIH0gZWxzZSBpZiAocGF5bG9hZExlbmd0aCA9PT0gMTI3KSB7XG4gICAgICAvLyBDbGVhciBleHRlbmRlZCBwYXlsb2FkIGxlbmd0aFxuICAgICAgYnVmZmVyWzJdID0gYnVmZmVyWzNdID0gMFxuICAgICAgYnVmZmVyLndyaXRlVUludEJFKGJvZHlMZW5ndGgsIDQsIDYpXG4gICAgfVxuXG4gICAgYnVmZmVyWzFdIHw9IDB4ODAgLy8gTUFTS1xuXG4gICAgLy8gbWFzayBib2R5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5TGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGZyYW1lRGF0YVtpXSBeIG1hc2tLZXlbaSAmIDNdXG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlclxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBXZWJzb2NrZXRGcmFtZVNlbmRcbn1cbiJdLCJuYW1lcyI6WyJtYXhVbnNpZ25lZDE2Qml0IiwicmVxdWlyZSIsIkJVRkZFUl9TSVpFIiwiY3J5cHRvIiwiYnVmZmVyIiwiYnVmSWR4IiwicmFuZG9tRmlsbFN5bmMiLCJfb2Zmc2V0IiwiX3NpemUiLCJpIiwibGVuZ3RoIiwiTWF0aCIsInJhbmRvbSIsImdlbmVyYXRlTWFzayIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwiV2Vic29ja2V0RnJhbWVTZW5kIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiZnJhbWVEYXRhIiwiY3JlYXRlRnJhbWUiLCJvcGNvZGUiLCJtYXNrS2V5IiwiYm9keUxlbmd0aCIsImJ5dGVMZW5ndGgiLCJwYXlsb2FkTGVuZ3RoIiwib2Zmc2V0Iiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludEJFIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/frame.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/permessage-deflate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/permessage-deflate.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  createInflateRaw,\n  Z_DEFAULT_WINDOWBITS\n} = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst {\n  isValidClientWindowBits\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/websocket/util.js\");\nconst tail = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kBuffer = Symbol('kBuffer');\nconst kLength = Symbol('kLength');\nvar _inflate = /*#__PURE__*/new WeakMap();\nvar _options = /*#__PURE__*/new WeakMap();\nclass PerMessageDeflate {\n  constructor(extensions) {\n    /** @type {import('node:zlib').InflateRaw} */\n    _classPrivateFieldInitSpec(this, _inflate, void 0);\n    _classPrivateFieldInitSpec(this, _options, {});\n    _classPrivateFieldGet(_options, this).serverNoContextTakeover = extensions.has('server_no_context_takeover');\n    _classPrivateFieldGet(_options, this).serverMaxWindowBits = extensions.get('server_max_window_bits');\n  }\n  decompress(chunk, fin, callback) {\n    // An endpoint uses the following algorithm to decompress a message.\n    // 1.  Append 4 octets of 0x00 0x00 0xff 0xff to the tail end of the\n    //     payload of the message.\n    // 2.  Decompress the resulting data using DEFLATE.\n\n    if (!_classPrivateFieldGet(_inflate, this)) {\n      let windowBits = Z_DEFAULT_WINDOWBITS;\n      if (_classPrivateFieldGet(_options, this).serverMaxWindowBits) {\n        // empty values default to Z_DEFAULT_WINDOWBITS\n        if (!isValidClientWindowBits(_classPrivateFieldGet(_options, this).serverMaxWindowBits)) {\n          callback(new Error('Invalid server_max_window_bits'));\n          return;\n        }\n        windowBits = Number.parseInt(_classPrivateFieldGet(_options, this).serverMaxWindowBits);\n      }\n      _classPrivateFieldSet(_inflate, this, createInflateRaw({\n        windowBits\n      }));\n      _classPrivateFieldGet(_inflate, this)[kBuffer] = [];\n      _classPrivateFieldGet(_inflate, this)[kLength] = 0;\n      _classPrivateFieldGet(_inflate, this).on('data', data => {\n        _classPrivateFieldGet(_inflate, this)[kBuffer].push(data);\n        _classPrivateFieldGet(_inflate, this)[kLength] += data.length;\n      });\n      _classPrivateFieldGet(_inflate, this).on('error', err => {\n        _classPrivateFieldSet(_inflate, this, null);\n        callback(err);\n      });\n    }\n    _classPrivateFieldGet(_inflate, this).write(chunk);\n    if (fin) {\n      _classPrivateFieldGet(_inflate, this).write(tail);\n    }\n    _classPrivateFieldGet(_inflate, this).flush(() => {\n      const full = Buffer.concat(_classPrivateFieldGet(_inflate, this)[kBuffer], _classPrivateFieldGet(_inflate, this)[kLength]);\n      _classPrivateFieldGet(_inflate, this)[kBuffer].length = 0;\n      _classPrivateFieldGet(_inflate, this)[kLength] = 0;\n      callback(null, full);\n    });\n  }\n}\nmodule.exports = {\n  PerMessageDeflate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L3Blcm1lc3NhZ2UtZGVmbGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFBQSxTQUFBQSwyQkFBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsSUFBQUMsMEJBQUEsQ0FBQUgsQ0FBQSxFQUFBQyxDQUFBLEdBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBSixDQUFBLEVBQUFFLENBQUE7QUFBQSxTQUFBQywyQkFBQUgsQ0FBQSxFQUFBQyxDQUFBLFFBQUFBLENBQUEsQ0FBQUksR0FBQSxDQUFBTCxDQUFBLGFBQUFNLFNBQUE7QUFBQSxTQUFBQyxzQkFBQUMsQ0FBQSxFQUFBTixDQUFBLEVBQUFPLENBQUEsV0FBQUQsQ0FBQSxDQUFBSixHQUFBLENBQUFNLGlCQUFBLENBQUFGLENBQUEsRUFBQU4sQ0FBQSxHQUFBTyxDQUFBLEdBQUFBLENBQUE7QUFBQSxTQUFBRSxzQkFBQUgsQ0FBQSxFQUFBTixDQUFBLFdBQUFNLENBQUEsQ0FBQUksR0FBQSxDQUFBRixpQkFBQSxDQUFBRixDQUFBLEVBQUFOLENBQUE7QUFBQSxTQUFBUSxrQkFBQVYsQ0FBQSxFQUFBQyxDQUFBLEVBQUFZLENBQUEsNkJBQUFiLENBQUEsR0FBQUEsQ0FBQSxLQUFBQyxDQUFBLEdBQUFELENBQUEsQ0FBQUssR0FBQSxDQUFBSixDQUFBLFVBQUFhLFNBQUEsQ0FBQUMsTUFBQSxPQUFBZCxDQUFBLEdBQUFZLENBQUEsWUFBQVAsU0FBQTtBQUVaLE1BQU07RUFBRVUsZ0JBQWdCO0VBQUVDO0FBQXFCLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyw0QkFBVyxDQUFDO0FBQ3ZFLE1BQU07RUFBRUM7QUFBd0IsQ0FBQyxHQUFHRCxtQkFBTyxDQUFDLHFFQUFRLENBQUM7QUFFckQsTUFBTUUsSUFBSSxHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FB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TUFDeEIsTUFBTUMsSUFBSSxHQUFHM0IsTUFBTSxDQUFDNEIsTUFBTSxDQUFDdEMscUJBQUEsQ0FBS2UsUUFBUSxFQUFiLElBQVksQ0FBQyxDQUFDSCxPQUFPLENBQUMsRUFBRVoscUJBQUEsQ0FBS2UsUUFBUSxFQUFiLElBQVksQ0FBQyxDQUFDRCxPQUFPLENBQUMsQ0FBQztNQUUxRWQscUJBQUEsQ0FBS2UsUUFBUSxFQUFiLElBQVksQ0FBQyxDQUFDSCxPQUFPLENBQUMsQ0FBQ1IsTUFBTSxHQUFHLENBQUM7TUFDakNKLHFCQUFBLENBQUtlLFFBQVEsRUFBYixJQUFZLENBQUMsQ0FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQztNQUUxQlksUUFBUSxDQUFDLElBQUksRUFBRVcsSUFBSSxDQUFDO0lBQ3RCLENBQUMsQ0FBQztFQUNKO0FBQ0Y7QUFFQUUsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFBRXRCO0FBQWtCLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L3Blcm1lc3NhZ2UtZGVmbGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBjcmVhdGVJbmZsYXRlUmF3LCBaX0RFRkFVTFRfV0lORE9XQklUUyB9ID0gcmVxdWlyZSgnbm9kZTp6bGliJylcbmNvbnN0IHsgaXNWYWxpZENsaWVudFdpbmRvd0JpdHMgfSA9IHJlcXVpcmUoJy4vdXRpbCcpXG5cbmNvbnN0IHRhaWwgPSBCdWZmZXIuZnJvbShbMHgwMCwgMHgwMCwgMHhmZiwgMHhmZl0pXG5jb25zdCBrQnVmZmVyID0gU3ltYm9sKCdrQnVmZmVyJylcbmNvbnN0IGtMZW5ndGggPSBTeW1ib2woJ2tMZW5ndGgnKVxuXG5jbGFzcyBQZXJNZXNzYWdlRGVmbGF0ZSB7XG4gIC8qKiBAdHlwZSB7aW1wb3J0KCdub2RlOnpsaWInKS5JbmZsYXRlUmF3fSAqL1xuICAjaW5mbGF0ZVxuXG4gICNvcHRpb25zID0ge31cblxuICBjb25zdHJ1Y3RvciAoZXh0ZW5zaW9ucykge1xuICAgIHRoaXMuI29wdGlvbnMuc2VydmVyTm9Db250ZXh0VGFrZW92ZXIgPSBleHRlbnNpb25zLmhhcygnc2VydmVyX25vX2NvbnRleHRfdGFrZW92ZXInKVxuICAgIHRoaXMuI29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cyA9IGV4dGVuc2lvbnMuZ2V0KCdzZXJ2ZXJfbWF4X3dpbmRvd19iaXRzJylcbiAgfVxuXG4gIGRlY29tcHJlc3MgKGNodW5rLCBmaW4sIGNhbGxiYWNrKSB7XG4gICAgLy8gQW4gZW5kcG9pbnQgdXNlcyB0aGUgZm9sbG93aW5nIGFsZ29yaXRobSB0byBkZWNvbXByZXNzIGEgbWVzc2FnZS5cbiAgICAvLyAxLiAgQXBwZW5kIDQgb2N0ZXRzIG9mIDB4MDAgMHgwMCAweGZmIDB4ZmYgdG8gdGhlIHRhaWwgZW5kIG9mIHRoZVxuICAgIC8vICAgICBwYXlsb2FkIG9mIHRoZSBtZXNzYWdlLlxuICAgIC8vIDIuICBEZWNvbXByZXNzIHRoZSByZXN1bHRpbmcgZGF0YSB1c2luZyBERUZMQVRFLlxuXG4gICAgaWYgKCF0aGlzLiNpbmZsYXRlKSB7XG4gICAgICBsZXQgd2luZG93Qml0cyA9IFpfREVGQVVMVF9XSU5ET1dCSVRTXG5cbiAgICAgIGlmICh0aGlzLiNvcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHMpIHsgLy8gZW1wdHkgdmFsdWVzIGRlZmF1bHQgdG8gWl9ERUZBVUxUX1dJTkRPV0JJVFNcbiAgICAgICAgaWYgKCFpc1ZhbGlkQ2xpZW50V2luZG93Qml0cyh0aGlzLiNvcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHMpKSB7XG4gICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCdJbnZhbGlkIHNlcnZlcl9tYXhfd2luZG93X2JpdHMnKSlcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvd0JpdHMgPSBOdW1iZXIucGFyc2VJbnQodGhpcy4jb3B0aW9ucy5zZXJ2ZXJNYXhXaW5kb3dCaXRzKVxuICAgICAgfVxuXG4gICAgICB0aGlzLiNpbmZsYXRlID0gY3JlYXRlSW5mbGF0ZVJhdyh7IHdpbmRvd0JpdHMgfSlcbiAgICAgIHRoaXMuI2luZmxhdGVba0J1ZmZlcl0gPSBbXVxuICAgICAgdGhpcy4jaW5mbGF0ZVtrTGVuZ3RoXSA9IDBcblxuICAgICAgdGhpcy4jaW5mbGF0ZS5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgIHRoaXMuI2luZmxhdGVba0J1ZmZlcl0ucHVzaChkYXRhKVxuICAgICAgICB0aGlzLiNpbmZsYXRlW2tMZW5ndGhdICs9IGRhdGEubGVuZ3RoXG4gICAgICB9KVxuXG4gICAgICB0aGlzLiNpbmZsYXRlLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgdGhpcy4jaW5mbGF0ZSA9IG51bGxcbiAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLiNpbmZsYXRlLndyaXRlKGNodW5rKVxuICAgIGlmIChmaW4pIHtcbiAgICAgIHRoaXMuI2luZmxhdGUud3JpdGUodGFpbClcbiAgICB9XG5cbiAgICB0aGlzLiNpbmZsYXRlLmZsdXNoKCgpID0+IHtcbiAgICAgIGNvbnN0IGZ1bGwgPSBCdWZmZXIuY29uY2F0KHRoaXMuI2luZmxhdGVba0J1ZmZlcl0sIHRoaXMuI2luZmxhdGVba0xlbmd0aF0pXG5cbiAgICAgIHRoaXMuI2luZmxhdGVba0J1ZmZlcl0ubGVuZ3RoID0gMFxuICAgICAgdGhpcy4jaW5mbGF0ZVtrTGVuZ3RoXSA9IDBcblxuICAgICAgY2FsbGJhY2sobnVsbCwgZnVsbClcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBQZXJNZXNzYWdlRGVmbGF0ZSB9XG4iXSwibmFtZXMiOlsiX2NsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWMiLCJlIiwidCIsImEiLCJfY2hlY2tQcml2YXRlUmVkZWNsYXJhdGlvbiIsInNldCIsImhhcyIsIlR5cGVFcnJvciIsIl9jbGFzc1ByaXZhdGVGaWVsZFNldCIsInMiLCJyIiwiX2Fzc2VydENsYXNzQnJhbmQiLCJfY2xhc3NQcml2YXRlRmllbGRHZXQiLCJnZXQiLCJuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY3JlYXRlSW5mbGF0ZVJhdyIsIlpfREVGQVVMVF9XSU5ET1dCSVRTIiwicmVxdWlyZSIsImlzVmFsaWRDbGllbnRXaW5kb3dCaXRzIiwidGFpbCIsIkJ1ZmZlciIsImZyb20iLCJrQnVmZmVyIiwiU3ltYm9sIiwia0xlbmd0aCIsIl9pbmZsYXRlIiwiV2Vha01hcCIsIl9vcHRpb25zIiwiUGVyTWVzc2FnZURlZmxhdGUiLCJjb25zdHJ1Y3RvciIsImV4dGVuc2lvbnMiLCJzZXJ2ZXJOb0NvbnRleHRUYWtlb3ZlciIsInNlcnZlck1heFdpbmRvd0JpdHMiLCJkZWNvbXByZXNzIiwiY2h1bmsiLCJmaW4iLCJjYWxsYmFjayIsIndpbmRvd0JpdHMiLCJFcnJvciIsIk51bWJlciIsInBhcnNlSW50Iiwib24iLCJkYXRhIiwicHVzaCIsImVyciIsIndyaXRlIiwiZmx1c2giLCJmdWxsIiwiY29uY2F0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/permessage-deflate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/receiver.js":
/*!***********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/receiver.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  Writable\n} = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst assert = __webpack_require__(/*! node:assert */ \"node:assert\");\nconst {\n  parserStates,\n  opcodes,\n  states,\n  emptyBuffer,\n  sentCloseFrameState\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst {\n  kReadyState,\n  kSentClose,\n  kResponse,\n  kReceivedClose\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\");\nconst {\n  channels\n} = __webpack_require__(/*! ../../core/diagnostics */ \"(ssr)/./node_modules/undici/lib/core/diagnostics.js\");\nconst {\n  isValidStatusCode,\n  isValidOpcode,\n  failWebsocketConnection,\n  websocketMessageReceived,\n  utf8Decode,\n  isControlFrame,\n  isTextBinaryFrame,\n  isContinuationFrame\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/websocket/util.js\");\nconst {\n  WebsocketFrameSend\n} = __webpack_require__(/*! ./frame */ \"(ssr)/./node_modules/undici/lib/web/websocket/frame.js\");\nconst {\n  closeWebSocketConnection\n} = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/undici/lib/web/websocket/connection.js\");\nconst {\n  PerMessageDeflate\n} = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/undici/lib/web/websocket/permessage-deflate.js\");\n\n// This code was influenced by ws released under the MIT license.\n// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n// Copyright (c) 2013 Arnout Kazemier and contributors\n// Copyright (c) 2016 Luigi Pinca and contributors\nvar _buffers = /*#__PURE__*/new WeakMap();\nvar _byteOffset = /*#__PURE__*/new WeakMap();\nvar _loop = /*#__PURE__*/new WeakMap();\nvar _state = /*#__PURE__*/new WeakMap();\nvar _info = /*#__PURE__*/new WeakMap();\nvar _fragments = /*#__PURE__*/new WeakMap();\nvar _extensions = /*#__PURE__*/new WeakMap();\nclass ByteParser extends Writable {\n  constructor(ws, extensions) {\n    super();\n    _classPrivateFieldInitSpec(this, _buffers, []);\n    _classPrivateFieldInitSpec(this, _byteOffset, 0);\n    _classPrivateFieldInitSpec(this, _loop, false);\n    _classPrivateFieldInitSpec(this, _state, parserStates.INFO);\n    _classPrivateFieldInitSpec(this, _info, {});\n    _classPrivateFieldInitSpec(this, _fragments, []);\n    /** @type {Map<string, PerMessageDeflate>} */\n    _classPrivateFieldInitSpec(this, _extensions, void 0);\n    this.ws = ws;\n    _classPrivateFieldSet(_extensions, this, extensions == null ? new Map() : extensions);\n    if (_classPrivateFieldGet(_extensions, this).has('permessage-deflate')) {\n      _classPrivateFieldGet(_extensions, this).set('permessage-deflate', new PerMessageDeflate(extensions));\n    }\n  }\n\n  /**\n   * @param {Buffer} chunk\n   * @param {() => void} callback\n   */\n  _write(chunk, _, callback) {\n    _classPrivateFieldGet(_buffers, this).push(chunk);\n    _classPrivateFieldSet(_byteOffset, this, _classPrivateFieldGet(_byteOffset, this) + chunk.length);\n    _classPrivateFieldSet(_loop, this, true);\n    this.run(callback);\n  }\n\n  /**\n   * Runs whenever a new chunk is received.\n   * Callback is called whenever there are no more chunks buffering,\n   * or not enough bytes are buffered to parse.\n   */\n  run(callback) {\n    while (_classPrivateFieldGet(_loop, this)) {\n      if (_classPrivateFieldGet(_state, this) === parserStates.INFO) {\n        // If there aren't enough bytes to parse the payload length, etc.\n        if (_classPrivateFieldGet(_byteOffset, this) < 2) {\n          return callback();\n        }\n        const buffer = this.consume(2);\n        const fin = (buffer[0] & 0x80) !== 0;\n        const opcode = buffer[0] & 0x0F;\n        const masked = (buffer[1] & 0x80) === 0x80;\n        const fragmented = !fin && opcode !== opcodes.CONTINUATION;\n        const payloadLength = buffer[1] & 0x7F;\n        const rsv1 = buffer[0] & 0x40;\n        const rsv2 = buffer[0] & 0x20;\n        const rsv3 = buffer[0] & 0x10;\n        if (!isValidOpcode(opcode)) {\n          failWebsocketConnection(this.ws, 'Invalid opcode received');\n          return callback();\n        }\n        if (masked) {\n          failWebsocketConnection(this.ws, 'Frame cannot be masked');\n          return callback();\n        }\n\n        // MUST be 0 unless an extension is negotiated that defines meanings\n        // for non-zero values.  If a nonzero value is received and none of\n        // the negotiated extensions defines the meaning of such a nonzero\n        // value, the receiving endpoint MUST _Fail the WebSocket\n        // Connection_.\n        // This document allocates the RSV1 bit of the WebSocket header for\n        // PMCEs and calls the bit the \"Per-Message Compressed\" bit.  On a\n        // WebSocket connection where a PMCE is in use, this bit indicates\n        // whether a message is compressed or not.\n        if (rsv1 !== 0 && !_classPrivateFieldGet(_extensions, this).has('permessage-deflate')) {\n          failWebsocketConnection(this.ws, 'Expected RSV1 to be clear.');\n          return;\n        }\n        if (rsv2 !== 0 || rsv3 !== 0) {\n          failWebsocketConnection(this.ws, 'RSV1, RSV2, RSV3 must be clear');\n          return;\n        }\n        if (fragmented && !isTextBinaryFrame(opcode)) {\n          // Only text and binary frames can be fragmented\n          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.');\n          return;\n        }\n\n        // If we are already parsing a text/binary frame and do not receive either\n        // a continuation frame or close frame, fail the connection.\n        if (isTextBinaryFrame(opcode) && _classPrivateFieldGet(_fragments, this).length > 0) {\n          failWebsocketConnection(this.ws, 'Expected continuation frame');\n          return;\n        }\n        if (_classPrivateFieldGet(_info, this).fragmented && fragmented) {\n          // A fragmented frame can't be fragmented itself\n          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.');\n          return;\n        }\n\n        // \"All control frames MUST have a payload length of 125 bytes or less\n        // and MUST NOT be fragmented.\"\n        if ((payloadLength > 125 || fragmented) && isControlFrame(opcode)) {\n          failWebsocketConnection(this.ws, 'Control frame either too large or fragmented');\n          return;\n        }\n        if (isContinuationFrame(opcode) && _classPrivateFieldGet(_fragments, this).length === 0 && !_classPrivateFieldGet(_info, this).compressed) {\n          failWebsocketConnection(this.ws, 'Unexpected continuation frame');\n          return;\n        }\n        if (payloadLength <= 125) {\n          _classPrivateFieldGet(_info, this).payloadLength = payloadLength;\n          _classPrivateFieldSet(_state, this, parserStates.READ_DATA);\n        } else if (payloadLength === 126) {\n          _classPrivateFieldSet(_state, this, parserStates.PAYLOADLENGTH_16);\n        } else if (payloadLength === 127) {\n          _classPrivateFieldSet(_state, this, parserStates.PAYLOADLENGTH_64);\n        }\n        if (isTextBinaryFrame(opcode)) {\n          _classPrivateFieldGet(_info, this).binaryType = opcode;\n          _classPrivateFieldGet(_info, this).compressed = rsv1 !== 0;\n        }\n        _classPrivateFieldGet(_info, this).opcode = opcode;\n        _classPrivateFieldGet(_info, this).masked = masked;\n        _classPrivateFieldGet(_info, this).fin = fin;\n        _classPrivateFieldGet(_info, this).fragmented = fragmented;\n      } else if (_classPrivateFieldGet(_state, this) === parserStates.PAYLOADLENGTH_16) {\n        if (_classPrivateFieldGet(_byteOffset, this) < 2) {\n          return callback();\n        }\n        const buffer = this.consume(2);\n        _classPrivateFieldGet(_info, this).payloadLength = buffer.readUInt16BE(0);\n        _classPrivateFieldSet(_state, this, parserStates.READ_DATA);\n      } else if (_classPrivateFieldGet(_state, this) === parserStates.PAYLOADLENGTH_64) {\n        if (_classPrivateFieldGet(_byteOffset, this) < 8) {\n          return callback();\n        }\n        const buffer = this.consume(8);\n        const upper = buffer.readUInt32BE(0);\n\n        // 2^31 is the maximum bytes an arraybuffer can contain\n        // on 32-bit systems. Although, on 64-bit systems, this is\n        // 2^53-1 bytes.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\n        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275\n        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e\n        if (upper > 2 ** 31 - 1) {\n          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.');\n          return;\n        }\n        const lower = buffer.readUInt32BE(4);\n        _classPrivateFieldGet(_info, this).payloadLength = (upper << 8) + lower;\n        _classPrivateFieldSet(_state, this, parserStates.READ_DATA);\n      } else if (_classPrivateFieldGet(_state, this) === parserStates.READ_DATA) {\n        if (_classPrivateFieldGet(_byteOffset, this) < _classPrivateFieldGet(_info, this).payloadLength) {\n          return callback();\n        }\n        const body = this.consume(_classPrivateFieldGet(_info, this).payloadLength);\n        if (isControlFrame(_classPrivateFieldGet(_info, this).opcode)) {\n          _classPrivateFieldSet(_loop, this, this.parseControlFrame(body));\n          _classPrivateFieldSet(_state, this, parserStates.INFO);\n        } else {\n          if (!_classPrivateFieldGet(_info, this).compressed) {\n            _classPrivateFieldGet(_fragments, this).push(body);\n\n            // If the frame is not fragmented, a message has been received.\n            // If the frame is fragmented, it will terminate with a fin bit set\n            // and an opcode of 0 (continuation), therefore we handle that when\n            // parsing continuation frames, not here.\n            if (!_classPrivateFieldGet(_info, this).fragmented && _classPrivateFieldGet(_info, this).fin) {\n              const fullMessage = Buffer.concat(_classPrivateFieldGet(_fragments, this));\n              websocketMessageReceived(this.ws, _classPrivateFieldGet(_info, this).binaryType, fullMessage);\n              _classPrivateFieldGet(_fragments, this).length = 0;\n            }\n            _classPrivateFieldSet(_state, this, parserStates.INFO);\n          } else {\n            _classPrivateFieldGet(_extensions, this).get('permessage-deflate').decompress(body, _classPrivateFieldGet(_info, this).fin, (error, data) => {\n              if (error) {\n                closeWebSocketConnection(this.ws, 1007, error.message, error.message.length);\n                return;\n              }\n              _classPrivateFieldGet(_fragments, this).push(data);\n              if (!_classPrivateFieldGet(_info, this).fin) {\n                _classPrivateFieldSet(_state, this, parserStates.INFO);\n                _classPrivateFieldSet(_loop, this, true);\n                this.run(callback);\n                return;\n              }\n              websocketMessageReceived(this.ws, _classPrivateFieldGet(_info, this).binaryType, Buffer.concat(_classPrivateFieldGet(_fragments, this)));\n              _classPrivateFieldSet(_loop, this, true);\n              _classPrivateFieldSet(_state, this, parserStates.INFO);\n              _classPrivateFieldGet(_fragments, this).length = 0;\n              this.run(callback);\n            });\n            _classPrivateFieldSet(_loop, this, false);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Take n bytes from the buffered Buffers\n   * @param {number} n\n   * @returns {Buffer}\n   */\n  consume(n) {\n    if (n > _classPrivateFieldGet(_byteOffset, this)) {\n      throw new Error('Called consume() before buffers satiated.');\n    } else if (n === 0) {\n      return emptyBuffer;\n    }\n    if (_classPrivateFieldGet(_buffers, this)[0].length === n) {\n      _classPrivateFieldSet(_byteOffset, this, _classPrivateFieldGet(_byteOffset, this) - _classPrivateFieldGet(_buffers, this)[0].length);\n      return _classPrivateFieldGet(_buffers, this).shift();\n    }\n    const buffer = Buffer.allocUnsafe(n);\n    let offset = 0;\n    while (offset !== n) {\n      const next = _classPrivateFieldGet(_buffers, this)[0];\n      const {\n        length\n      } = next;\n      if (length + offset === n) {\n        buffer.set(_classPrivateFieldGet(_buffers, this).shift(), offset);\n        break;\n      } else if (length + offset > n) {\n        buffer.set(next.subarray(0, n - offset), offset);\n        _classPrivateFieldGet(_buffers, this)[0] = next.subarray(n - offset);\n        break;\n      } else {\n        buffer.set(_classPrivateFieldGet(_buffers, this).shift(), offset);\n        offset += next.length;\n      }\n    }\n    _classPrivateFieldSet(_byteOffset, this, _classPrivateFieldGet(_byteOffset, this) - n);\n    return buffer;\n  }\n  parseCloseBody(data) {\n    assert(data.length !== 1);\n\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5\n    /** @type {number|undefined} */\n    let code;\n    if (data.length >= 2) {\n      // _The WebSocket Connection Close Code_ is\n      // defined as the status code (Section 7.4) contained in the first Close\n      // control frame received by the application\n      code = data.readUInt16BE(0);\n    }\n    if (code !== undefined && !isValidStatusCode(code)) {\n      return {\n        code: 1002,\n        reason: 'Invalid status code',\n        error: true\n      };\n    }\n\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6\n    /** @type {Buffer} */\n    let reason = data.subarray(2);\n\n    // Remove BOM\n    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {\n      reason = reason.subarray(3);\n    }\n    try {\n      reason = utf8Decode(reason);\n    } catch {\n      return {\n        code: 1007,\n        reason: 'Invalid UTF-8',\n        error: true\n      };\n    }\n    return {\n      code,\n      reason,\n      error: false\n    };\n  }\n\n  /**\n   * Parses control frames.\n   * @param {Buffer} body\n   */\n  parseControlFrame(body) {\n    const {\n      opcode,\n      payloadLength\n    } = _classPrivateFieldGet(_info, this);\n    if (opcode === opcodes.CLOSE) {\n      if (payloadLength === 1) {\n        failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.');\n        return false;\n      }\n      _classPrivateFieldGet(_info, this).closeInfo = this.parseCloseBody(body);\n      if (_classPrivateFieldGet(_info, this).closeInfo.error) {\n        const {\n          code,\n          reason\n        } = _classPrivateFieldGet(_info, this).closeInfo;\n        closeWebSocketConnection(this.ws, code, reason, reason.length);\n        failWebsocketConnection(this.ws, reason);\n        return false;\n      }\n      if (this.ws[kSentClose] !== sentCloseFrameState.SENT) {\n        // If an endpoint receives a Close frame and did not previously send a\n        // Close frame, the endpoint MUST send a Close frame in response.  (When\n        // sending a Close frame in response, the endpoint typically echos the\n        // status code it received.)\n        let body = emptyBuffer;\n        if (_classPrivateFieldGet(_info, this).closeInfo.code) {\n          body = Buffer.allocUnsafe(2);\n          body.writeUInt16BE(_classPrivateFieldGet(_info, this).closeInfo.code, 0);\n        }\n        const closeFrame = new WebsocketFrameSend(body);\n        this.ws[kResponse].socket.write(closeFrame.createFrame(opcodes.CLOSE), err => {\n          if (!err) {\n            this.ws[kSentClose] = sentCloseFrameState.SENT;\n          }\n        });\n      }\n\n      // Upon either sending or receiving a Close control frame, it is said\n      // that _The WebSocket Closing Handshake is Started_ and that the\n      // WebSocket connection is in the CLOSING state.\n      this.ws[kReadyState] = states.CLOSING;\n      this.ws[kReceivedClose] = true;\n      return false;\n    } else if (opcode === opcodes.PING) {\n      // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in\n      // response, unless it already received a Close frame.\n      // A Pong frame sent in response to a Ping frame must have identical\n      // \"Application data\"\n\n      if (!this.ws[kReceivedClose]) {\n        const frame = new WebsocketFrameSend(body);\n        this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));\n        if (channels.ping.hasSubscribers) {\n          channels.ping.publish({\n            payload: body\n          });\n        }\n      }\n    } else if (opcode === opcodes.PONG) {\n      // A Pong frame MAY be sent unsolicited.  This serves as a\n      // unidirectional heartbeat.  A response to an unsolicited Pong frame is\n      // not expected.\n\n      if (channels.pong.hasSubscribers) {\n        channels.pong.publish({\n          payload: body\n        });\n      }\n    }\n    return true;\n  }\n  get closingInfo() {\n    return _classPrivateFieldGet(_info, this).closeInfo;\n  }\n}\nmodule.exports = {\n  ByteParser\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/receiver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/sender.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/sender.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  WebsocketFrameSend\n} = __webpack_require__(/*! ./frame */ \"(ssr)/./node_modules/undici/lib/web/websocket/frame.js\");\nconst {\n  opcodes,\n  sendHints\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst FixedQueue = __webpack_require__(/*! ../../dispatcher/fixed-queue */ \"(ssr)/./node_modules/undici/lib/dispatcher/fixed-queue.js\");\n\n/** @type {typeof Uint8Array} */\nconst FastBuffer = Buffer[Symbol.species];\n\n/**\n * @typedef {object} SendQueueNode\n * @property {Promise<void> | null} promise\n * @property {((...args: any[]) => any)} callback\n * @property {Buffer | null} frame\n */\nvar _queue = /*#__PURE__*/new WeakMap();\nvar _running = /*#__PURE__*/new WeakMap();\nvar _socket = /*#__PURE__*/new WeakMap();\nvar _SendQueue_brand = /*#__PURE__*/new WeakSet();\nclass SendQueue {\n  constructor(socket) {\n    _classPrivateMethodInitSpec(this, _SendQueue_brand);\n    /**\n     * @type {FixedQueue}\n     */\n    _classPrivateFieldInitSpec(this, _queue, new FixedQueue());\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _running, false);\n    /** @type {import('node:net').Socket} */\n    _classPrivateFieldInitSpec(this, _socket, void 0);\n    _classPrivateFieldSet(_socket, this, socket);\n  }\n  add(item, cb, hint) {\n    if (hint !== sendHints.blob) {\n      const frame = createFrame(item, hint);\n      if (!_classPrivateFieldGet(_running, this)) {\n        // fast-path\n        _classPrivateFieldGet(_socket, this).write(frame, cb);\n      } else {\n        /** @type {SendQueueNode} */\n        const node = {\n          promise: null,\n          callback: cb,\n          frame\n        };\n        _classPrivateFieldGet(_queue, this).push(node);\n      }\n      return;\n    }\n\n    /** @type {SendQueueNode} */\n    const node = {\n      promise: item.arrayBuffer().then(ab => {\n        node.promise = null;\n        node.frame = createFrame(ab, hint);\n      }),\n      callback: cb,\n      frame: null\n    };\n    _classPrivateFieldGet(_queue, this).push(node);\n    if (!_classPrivateFieldGet(_running, this)) {\n      _assertClassBrand(_SendQueue_brand, this, _run).call(this);\n    }\n  }\n}\nasync function _run() {\n  _classPrivateFieldSet(_running, this, true);\n  const queue = _classPrivateFieldGet(_queue, this);\n  while (!queue.isEmpty()) {\n    const node = queue.shift();\n    // wait pending promise\n    if (node.promise !== null) {\n      await node.promise;\n    }\n    // write\n    _classPrivateFieldGet(_socket, this).write(node.frame, node.callback);\n    // cleanup\n    node.callback = node.frame = null;\n  }\n  _classPrivateFieldSet(_running, this, false);\n}\nfunction createFrame(data, hint) {\n  return new WebsocketFrameSend(toBuffer(data, hint)).createFrame(hint === sendHints.string ? opcodes.TEXT : opcodes.BINARY);\n}\nfunction toBuffer(data, hint) {\n  switch (hint) {\n    case sendHints.string:\n      return Buffer.from(data);\n    case sendHints.arrayBuffer:\n    case sendHints.blob:\n      return new FastBuffer(data);\n    case sendHints.typedArray:\n      return new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n  }\n}\nmodule.exports = {\n  SendQueue\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/sender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/symbols.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/symbols.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n  kWebSocketURL: Symbol('url'),\n  kReadyState: Symbol('ready state'),\n  kController: Symbol('controller'),\n  kResponse: Symbol('response'),\n  kBinaryType: Symbol('binary type'),\n  kSentClose: Symbol('sent close'),\n  kReceivedClose: Symbol('received close'),\n  kByteParser: Symbol('byte parser')\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L3N5bWJvbHMuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLGFBQWEsRUFBRUMsTUFBTSxDQUFDLEtBQUssQ0FBQztFQUM1QkMsV0FBVyxFQUFFRCxNQUFNLENBQUMsYUFBYSxDQUFDO0VBQ2xDRSxXQUFXLEVBQUVGLE1BQU0sQ0FBQyxZQUFZLENBQUM7RUFDakNHLFNBQVMsRUFBRUgsTUFBTSxDQUFDLFVBQVUsQ0FBQztFQUM3QkksV0FBVyxFQUFFSixNQUFNLENBQUMsYUFBYSxDQUFDO0VBQ2xDSyxVQUFVLEVBQUVMLE1BQU0sQ0FBQyxZQUFZLENBQUM7RUFDaENNLGNBQWMsRUFBRU4sTUFBTSxDQUFDLGdCQUFnQixDQUFDO0VBQ3hDTyxXQUFXLEVBQUVQLE1BQU0sQ0FBQyxhQUFhO0FBQ25DLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYXkvRGVza3RvcC9wcm9qZWN0L0tSMS9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWIvd2Vic29ja2V0L3N5bWJvbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBrV2ViU29ja2V0VVJMOiBTeW1ib2woJ3VybCcpLFxuICBrUmVhZHlTdGF0ZTogU3ltYm9sKCdyZWFkeSBzdGF0ZScpLFxuICBrQ29udHJvbGxlcjogU3ltYm9sKCdjb250cm9sbGVyJyksXG4gIGtSZXNwb25zZTogU3ltYm9sKCdyZXNwb25zZScpLFxuICBrQmluYXJ5VHlwZTogU3ltYm9sKCdiaW5hcnkgdHlwZScpLFxuICBrU2VudENsb3NlOiBTeW1ib2woJ3NlbnQgY2xvc2UnKSxcbiAga1JlY2VpdmVkQ2xvc2U6IFN5bWJvbCgncmVjZWl2ZWQgY2xvc2UnKSxcbiAga0J5dGVQYXJzZXI6IFN5bWJvbCgnYnl0ZSBwYXJzZXInKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJrV2ViU29ja2V0VVJMIiwiU3ltYm9sIiwia1JlYWR5U3RhdGUiLCJrQ29udHJvbGxlciIsImtSZXNwb25zZSIsImtCaW5hcnlUeXBlIiwia1NlbnRDbG9zZSIsImtSZWNlaXZlZENsb3NlIiwia0J5dGVQYXJzZXIiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/util.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/util.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst {\n  kReadyState,\n  kController,\n  kResponse,\n  kBinaryType,\n  kWebSocketURL\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\");\nconst {\n  states,\n  opcodes\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst {\n  ErrorEvent,\n  createFastMessageEvent\n} = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nconst {\n  isUtf8\n} = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst {\n  collectASequenceOfCodePointsFast,\n  removeHTTPWhitespace\n} = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\n\n/* globals Blob */\n\n/**\n * @param {import('./websocket').WebSocket} ws\n * @returns {boolean}\n */\nfunction isConnecting(ws) {\n  // If the WebSocket connection is not yet established, and the connection\n  // is not yet closed, then the WebSocket connection is in the CONNECTING state.\n  return ws[kReadyState] === states.CONNECTING;\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n * @returns {boolean}\n */\nfunction isEstablished(ws) {\n  // If the server's response is validated as provided for above, it is\n  // said that _The WebSocket Connection is Established_ and that the\n  // WebSocket Connection is in the OPEN state.\n  return ws[kReadyState] === states.OPEN;\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n * @returns {boolean}\n */\nfunction isClosing(ws) {\n  // Upon either sending or receiving a Close control frame, it is said\n  // that _The WebSocket Closing Handshake is Started_ and that the\n  // WebSocket connection is in the CLOSING state.\n  return ws[kReadyState] === states.CLOSING;\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n * @returns {boolean}\n */\nfunction isClosed(ws) {\n  return ws[kReadyState] === states.CLOSED;\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e\n * @param {EventTarget} target\n * @param {(...args: ConstructorParameters<typeof Event>) => Event} eventFactory\n * @param {EventInit | undefined} eventInitDict\n */\nfunction fireEvent(e, target) {\n  let eventFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (type, init) => new Event(type, init);\n  let eventInitDict = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // 1. If eventConstructor is not given, then let eventConstructor be Event.\n\n  // 2. Let event be the result of creating an event given eventConstructor,\n  //    in the relevant realm of target.\n  // 3. Initialize event’s type attribute to e.\n  const event = eventFactory(e, eventInitDict);\n\n  // 4. Initialize any other IDL attributes of event as described in the\n  //    invocation of this algorithm.\n\n  // 5. Return the result of dispatching event at target, with legacy target\n  //    override flag set if set.\n  target.dispatchEvent(event);\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @param {import('./websocket').WebSocket} ws\n * @param {number} type Opcode\n * @param {Buffer} data application data\n */\nfunction websocketMessageReceived(ws, type, data) {\n  // 1. If ready state is not OPEN (1), then return.\n  if (ws[kReadyState] !== states.OPEN) {\n    return;\n  }\n\n  // 2. Let dataForEvent be determined by switching on type and binary type:\n  let dataForEvent;\n  if (type === opcodes.TEXT) {\n    // -> type indicates that the data is Text\n    //      a new DOMString containing data\n    try {\n      dataForEvent = utf8Decode(data);\n    } catch {\n      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.');\n      return;\n    }\n  } else if (type === opcodes.BINARY) {\n    if (ws[kBinaryType] === 'blob') {\n      // -> type indicates that the data is Binary and binary type is \"blob\"\n      //      a new Blob object, created in the relevant Realm of the WebSocket\n      //      object, that represents data as its raw data\n      dataForEvent = new Blob([data]);\n    } else {\n      // -> type indicates that the data is Binary and binary type is \"arraybuffer\"\n      //      a new ArrayBuffer object, created in the relevant Realm of the\n      //      WebSocket object, whose contents are data\n      dataForEvent = toArrayBuffer(data);\n    }\n  }\n\n  // 3. Fire an event named message at the WebSocket object, using MessageEvent,\n  //    with the origin attribute initialized to the serialization of the WebSocket\n  //    object’s url's origin, and the data attribute initialized to dataForEvent.\n  fireEvent('message', ws, createFastMessageEvent, {\n    origin: ws[kWebSocketURL].origin,\n    data: dataForEvent\n  });\n}\nfunction toArrayBuffer(buffer) {\n  if (buffer.byteLength === buffer.buffer.byteLength) {\n    return buffer.buffer;\n  }\n  return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455\n * @see https://datatracker.ietf.org/doc/html/rfc2616\n * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407\n * @param {string} protocol\n */\nfunction isValidSubprotocol(protocol) {\n  // If present, this value indicates one\n  // or more comma-separated subprotocol the client wishes to speak,\n  // ordered by preference.  The elements that comprise this value\n  // MUST be non-empty strings with characters in the range U+0021 to\n  // U+007E not including separator characters as defined in\n  // [RFC2616] and MUST all be unique strings.\n  if (protocol.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < protocol.length; ++i) {\n    const code = protocol.charCodeAt(i);\n    if (code < 0x21 ||\n    // CTL, contains SP (0x20) and HT (0x09)\n    code > 0x7E || code === 0x22 ||\n    // \"\n    code === 0x28 ||\n    // (\n    code === 0x29 ||\n    // )\n    code === 0x2C ||\n    // ,\n    code === 0x2F ||\n    // /\n    code === 0x3A ||\n    // :\n    code === 0x3B ||\n    // ;\n    code === 0x3C ||\n    // <\n    code === 0x3D ||\n    // =\n    code === 0x3E ||\n    // >\n    code === 0x3F ||\n    // ?\n    code === 0x40 ||\n    // @\n    code === 0x5B ||\n    // [\n    code === 0x5C ||\n    // \\\n    code === 0x5D ||\n    // ]\n    code === 0x7B ||\n    // {\n    code === 0x7D // }\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4\n * @param {number} code\n */\nfunction isValidStatusCode(code) {\n  if (code >= 1000 && code < 1015) {\n    return code !== 1004 &&\n    // reserved\n    code !== 1005 &&\n    // \"MUST NOT be set as a status code\"\n    code !== 1006 // \"MUST NOT be set as a status code\"\n    ;\n  }\n  return code >= 3000 && code <= 4999;\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n * @param {string|undefined} reason\n */\nfunction failWebsocketConnection(ws, reason) {\n  const {\n    [kController]: controller,\n    [kResponse]: response\n  } = ws;\n  controller.abort();\n  if (response?.socket && !response.socket.destroyed) {\n    response.socket.destroy();\n  }\n  if (reason) {\n    // TODO: process.nextTick\n    fireEvent('error', ws, (type, init) => new ErrorEvent(type, init), {\n      error: new Error(reason),\n      message: reason\n    });\n  }\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-5.5\n * @param {number} opcode\n */\nfunction isControlFrame(opcode) {\n  return opcode === opcodes.CLOSE || opcode === opcodes.PING || opcode === opcodes.PONG;\n}\nfunction isContinuationFrame(opcode) {\n  return opcode === opcodes.CONTINUATION;\n}\nfunction isTextBinaryFrame(opcode) {\n  return opcode === opcodes.TEXT || opcode === opcodes.BINARY;\n}\nfunction isValidOpcode(opcode) {\n  return isTextBinaryFrame(opcode) || isContinuationFrame(opcode) || isControlFrame(opcode);\n}\n\n/**\n * Parses a Sec-WebSocket-Extensions header value.\n * @param {string} extensions\n * @returns {Map<string, string>}\n */\n// TODO(@Uzlopak, @KhafraDev): make compliant https://datatracker.ietf.org/doc/html/rfc6455#section-9.1\nfunction parseExtensions(extensions) {\n  const position = {\n    position: 0\n  };\n  const extensionList = new Map();\n  while (position.position < extensions.length) {\n    const pair = collectASequenceOfCodePointsFast(';', extensions, position);\n    const [name, value = ''] = pair.split('=');\n    extensionList.set(removeHTTPWhitespace(name, true, false), removeHTTPWhitespace(value, false, true));\n    position.position++;\n  }\n  return extensionList;\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7692#section-7.1.2.2\n * @description \"client-max-window-bits = 1*DIGIT\"\n * @param {string} value\n */\nfunction isValidClientWindowBits(value) {\n  for (let i = 0; i < value.length; i++) {\n    const byte = value.charCodeAt(i);\n    if (byte < 0x30 || byte > 0x39) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// https://nodejs.org/api/intl.html#detecting-internationalization-support\nconst hasIntl = typeof process.versions.icu === 'string';\nconst fatalDecoder = hasIntl ? new TextDecoder('utf-8', {\n  fatal: true\n}) : undefined;\n\n/**\n * Converts a Buffer to utf-8, even on platforms without icu.\n * @param {Buffer} buffer\n */\nconst utf8Decode = hasIntl ? fatalDecoder.decode.bind(fatalDecoder) : function (buffer) {\n  if (isUtf8(buffer)) {\n    return buffer.toString('utf-8');\n  }\n  throw new TypeError('Invalid utf-8 received.');\n};\nmodule.exports = {\n  isConnecting,\n  isEstablished,\n  isClosing,\n  isClosed,\n  fireEvent,\n  isValidSubprotocol,\n  isValidStatusCode,\n  failWebsocketConnection,\n  websocketMessageReceived,\n  utf8Decode,\n  isControlFrame,\n  isContinuationFrame,\n  isTextBinaryFrame,\n  isValidOpcode,\n  parseExtensions,\n  isValidClientWindowBits\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/web/websocket/websocket.js":
/*!************************************************************!*\
  !*** ./node_modules/undici/lib/web/websocket/websocket.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nconst {\n  webidl\n} = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/web/fetch/webidl.js\");\nconst {\n  URLSerializer\n} = __webpack_require__(/*! ../fetch/data-url */ \"(ssr)/./node_modules/undici/lib/web/fetch/data-url.js\");\nconst {\n  environmentSettingsObject\n} = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/web/fetch/util.js\");\nconst {\n  staticPropertyDescriptors,\n  states,\n  sentCloseFrameState,\n  sendHints\n} = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/web/websocket/constants.js\");\nconst {\n  kWebSocketURL,\n  kReadyState,\n  kController,\n  kBinaryType,\n  kResponse,\n  kSentClose,\n  kByteParser\n} = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/web/websocket/symbols.js\");\nconst {\n  isConnecting,\n  isEstablished,\n  isClosing,\n  isValidSubprotocol,\n  fireEvent\n} = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/web/websocket/util.js\");\nconst {\n  establishWebSocketConnection,\n  closeWebSocketConnection\n} = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/undici/lib/web/websocket/connection.js\");\nconst {\n  ByteParser\n} = __webpack_require__(/*! ./receiver */ \"(ssr)/./node_modules/undici/lib/web/websocket/receiver.js\");\nconst {\n  kEnumerableProperty,\n  isBlobLike\n} = __webpack_require__(/*! ../../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst {\n  getGlobalDispatcher\n} = __webpack_require__(/*! ../../global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst {\n  types\n} = __webpack_require__(/*! node:util */ \"node:util\");\nconst {\n  ErrorEvent,\n  CloseEvent\n} = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/undici/lib/web/websocket/events.js\");\nconst {\n  SendQueue\n} = __webpack_require__(/*! ./sender */ \"(ssr)/./node_modules/undici/lib/web/websocket/sender.js\");\n\n// https://websockets.spec.whatwg.org/#interface-definition\nvar _events = /*#__PURE__*/new WeakMap();\nvar _bufferedAmount = /*#__PURE__*/new WeakMap();\nvar _protocol = /*#__PURE__*/new WeakMap();\nvar _extensions = /*#__PURE__*/new WeakMap();\nvar _sendQueue = /*#__PURE__*/new WeakMap();\nvar _WebSocket_brand = /*#__PURE__*/new WeakSet();\nclass WebSocket extends EventTarget {\n  /**\n   * @param {string} url\n   * @param {string|string[]} protocols\n   */\n  constructor(url) {\n    let protocols = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super();\n    /**\n     * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n     */\n    _classPrivateMethodInitSpec(this, _WebSocket_brand);\n    _classPrivateFieldInitSpec(this, _events, {\n      open: null,\n      error: null,\n      close: null,\n      message: null\n    });\n    _classPrivateFieldInitSpec(this, _bufferedAmount, 0);\n    _classPrivateFieldInitSpec(this, _protocol, '');\n    _classPrivateFieldInitSpec(this, _extensions, '');\n    /** @type {SendQueue} */\n    _classPrivateFieldInitSpec(this, _sendQueue, void 0);\n    const prefix = 'WebSocket constructor';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols, prefix, 'options');\n    url = webidl.converters.USVString(url, prefix, 'url');\n    protocols = options.protocols;\n\n    // 1. Let baseURL be this's relevant settings object's API base URL.\n    const baseURL = environmentSettingsObject.settingsObject.baseUrl;\n\n    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.\n    let urlRecord;\n    try {\n      urlRecord = new URL(url, baseURL);\n    } catch (e) {\n      // 3. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n      throw new DOMException(e, 'SyntaxError');\n    }\n\n    // 4. If urlRecord’s scheme is \"http\", then set urlRecord’s scheme to \"ws\".\n    if (urlRecord.protocol === 'http:') {\n      urlRecord.protocol = 'ws:';\n    } else if (urlRecord.protocol === 'https:') {\n      // 5. Otherwise, if urlRecord’s scheme is \"https\", set urlRecord’s scheme to \"wss\".\n      urlRecord.protocol = 'wss:';\n    }\n\n    // 6. If urlRecord’s scheme is not \"ws\" or \"wss\", then throw a \"SyntaxError\" DOMException.\n    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {\n      throw new DOMException(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, 'SyntaxError');\n    }\n\n    // 7. If urlRecord’s fragment is non-null, then throw a \"SyntaxError\"\n    //    DOMException.\n    if (urlRecord.hash || urlRecord.href.endsWith('#')) {\n      throw new DOMException('Got fragment', 'SyntaxError');\n    }\n\n    // 8. If protocols is a string, set protocols to a sequence consisting\n    //    of just that string.\n    if (typeof protocols === 'string') {\n      protocols = [protocols];\n    }\n\n    // 9. If any of the values in protocols occur more than once or otherwise\n    //    fail to match the requirements for elements that comprise the value\n    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket\n    //    protocol, then throw a \"SyntaxError\" DOMException.\n    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {\n      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');\n    }\n    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {\n      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');\n    }\n\n    // 10. Set this's url to urlRecord.\n    this[kWebSocketURL] = new URL(urlRecord.href);\n\n    // 11. Let client be this's relevant settings object.\n    const client = environmentSettingsObject.settingsObject;\n\n    // 12. Run this step in parallel:\n\n    //    1. Establish a WebSocket connection given urlRecord, protocols,\n    //       and client.\n    this[kController] = establishWebSocketConnection(urlRecord, protocols, client, this, (response, extensions) => _assertClassBrand(_WebSocket_brand, this, _onConnectionEstablished).call(this, response, extensions), options);\n\n    // Each WebSocket object has an associated ready state, which is a\n    // number representing the state of the connection. Initially it must\n    // be CONNECTING (0).\n    this[kReadyState] = WebSocket.CONNECTING;\n    this[kSentClose] = sentCloseFrameState.NOT_SENT;\n\n    // The extensions attribute must initially return the empty string.\n\n    // The protocol attribute must initially return the empty string.\n\n    // Each WebSocket object has an associated binary type, which is a\n    // BinaryType. Initially it must be \"blob\".\n    this[kBinaryType] = 'blob';\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-close\n   * @param {number|undefined} code\n   * @param {string|undefined} reason\n   */\n  close() {\n    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    let reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    webidl.brandCheck(this, WebSocket);\n    const prefix = 'WebSocket.close';\n    if (code !== undefined) {\n      code = webidl.converters['unsigned short'](code, prefix, 'code', {\n        clamp: true\n      });\n    }\n    if (reason !== undefined) {\n      reason = webidl.converters.USVString(reason, prefix, 'reason');\n    }\n\n    // 1. If code is present, but is neither an integer equal to 1000 nor an\n    //    integer in the range 3000 to 4999, inclusive, throw an\n    //    \"InvalidAccessError\" DOMException.\n    if (code !== undefined) {\n      if (code !== 1000 && (code < 3000 || code > 4999)) {\n        throw new DOMException('invalid code', 'InvalidAccessError');\n      }\n    }\n    let reasonByteLength = 0;\n\n    // 2. If reason is present, then run these substeps:\n    if (reason !== undefined) {\n      // 1. Let reasonBytes be the result of encoding reason.\n      // 2. If reasonBytes is longer than 123 bytes, then throw a\n      //    \"SyntaxError\" DOMException.\n      reasonByteLength = Buffer.byteLength(reason);\n      if (reasonByteLength > 123) {\n        throw new DOMException(`Reason must be less than 123 bytes; received ${reasonByteLength}`, 'SyntaxError');\n      }\n    }\n\n    // 3. Run the first matching steps from the following list:\n    closeWebSocketConnection(this, code, reason, reasonByteLength);\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-send\n   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data\n   */\n  send(data) {\n    webidl.brandCheck(this, WebSocket);\n    const prefix = 'WebSocket.send';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    data = webidl.converters.WebSocketSendData(data, prefix, 'data');\n\n    // 1. If this's ready state is CONNECTING, then throw an\n    //    \"InvalidStateError\" DOMException.\n    if (isConnecting(this)) {\n      throw new DOMException('Sent before connected.', 'InvalidStateError');\n    }\n\n    // 2. Run the appropriate set of steps from the following list:\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\n\n    if (!isEstablished(this) || isClosing(this)) {\n      return;\n    }\n\n    // If data is a string\n    if (typeof data === 'string') {\n      // If the WebSocket connection is established and the WebSocket\n      // closing handshake has not yet started, then the user agent\n      // must send a WebSocket Message comprised of the data argument\n      // using a text frame opcode; if the data cannot be sent, e.g.\n      // because it would need to be buffered but the buffer is full,\n      // the user agent must flag the WebSocket as full and then close\n      // the WebSocket connection. Any invocation of this method with a\n      // string argument that does not throw an exception must increase\n      // the bufferedAmount attribute by the number of bytes needed to\n      // express the argument as UTF-8.\n\n      const length = Buffer.byteLength(data);\n      _classPrivateFieldSet(_bufferedAmount, this, _classPrivateFieldGet(_bufferedAmount, this) + length);\n      _classPrivateFieldGet(_sendQueue, this).add(data, () => {\n        _classPrivateFieldSet(_bufferedAmount, this, _classPrivateFieldGet(_bufferedAmount, this) - length);\n      }, sendHints.string);\n    } else if (types.isArrayBuffer(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need\n      // to be buffered but the buffer is full, the user agent must flag\n      // the WebSocket as full and then close the WebSocket connection.\n      // The data to be sent is the data stored in the buffer described\n      // by the ArrayBuffer object. Any invocation of this method with an\n      // ArrayBuffer argument that does not throw an exception must\n      // increase the bufferedAmount attribute by the length of the\n      // ArrayBuffer in bytes.\n\n      _classPrivateFieldSet(_bufferedAmount, this, _classPrivateFieldGet(_bufferedAmount, this) + data.byteLength);\n      _classPrivateFieldGet(_sendQueue, this).add(data, () => {\n        _classPrivateFieldSet(_bufferedAmount, this, _classPrivateFieldGet(_bufferedAmount, this) - data.byteLength);\n      }, sendHints.arrayBuffer);\n    } else if (ArrayBuffer.isView(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need to\n      // be buffered but the buffer is full, the user agent must flag the\n      // WebSocket as full and then close the WebSocket connection. The\n      // data to be sent is the data stored in the section of the buffer\n      // described by the ArrayBuffer object that data references. Any\n      // invocation of this method with this kind of argument that does\n      // not throw an exception must increase the bufferedAmount attribute\n      // by the length of data’s buffer in bytes.\n\n      _classPrivateFieldSet(_bufferedAmount, this, _classPrivateFieldGet(_bufferedAmount, this) + data.byteLength);\n      _classPrivateFieldGet(_sendQueue, this).add(data, () => {\n        _classPrivateFieldSet(_bufferedAmount, this, _classPrivateFieldGet(_bufferedAmount, this) - data.byteLength);\n      }, sendHints.typedArray);\n    } else if (isBlobLike(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need to\n      // be buffered but the buffer is full, the user agent must flag the\n      // WebSocket as full and then close the WebSocket connection. The data\n      // to be sent is the raw data represented by the Blob object. Any\n      // invocation of this method with a Blob argument that does not throw\n      // an exception must increase the bufferedAmount attribute by the size\n      // of the Blob object’s raw data, in bytes.\n\n      _classPrivateFieldSet(_bufferedAmount, this, _classPrivateFieldGet(_bufferedAmount, this) + data.size);\n      _classPrivateFieldGet(_sendQueue, this).add(data, () => {\n        _classPrivateFieldSet(_bufferedAmount, this, _classPrivateFieldGet(_bufferedAmount, this) - data.size);\n      }, sendHints.blob);\n    }\n  }\n  get readyState() {\n    webidl.brandCheck(this, WebSocket);\n\n    // The readyState getter steps are to return this's ready state.\n    return this[kReadyState];\n  }\n  get bufferedAmount() {\n    webidl.brandCheck(this, WebSocket);\n    return _classPrivateFieldGet(_bufferedAmount, this);\n  }\n  get url() {\n    webidl.brandCheck(this, WebSocket);\n\n    // The url getter steps are to return this's url, serialized.\n    return URLSerializer(this[kWebSocketURL]);\n  }\n  get extensions() {\n    webidl.brandCheck(this, WebSocket);\n    return _classPrivateFieldGet(_extensions, this);\n  }\n  get protocol() {\n    webidl.brandCheck(this, WebSocket);\n    return _classPrivateFieldGet(_protocol, this);\n  }\n  get onopen() {\n    webidl.brandCheck(this, WebSocket);\n    return _classPrivateFieldGet(_events, this).open;\n  }\n  set onopen(fn) {\n    webidl.brandCheck(this, WebSocket);\n    if (_classPrivateFieldGet(_events, this).open) {\n      this.removeEventListener('open', _classPrivateFieldGet(_events, this).open);\n    }\n    if (typeof fn === 'function') {\n      _classPrivateFieldGet(_events, this).open = fn;\n      this.addEventListener('open', fn);\n    } else {\n      _classPrivateFieldGet(_events, this).open = null;\n    }\n  }\n  get onerror() {\n    webidl.brandCheck(this, WebSocket);\n    return _classPrivateFieldGet(_events, this).error;\n  }\n  set onerror(fn) {\n    webidl.brandCheck(this, WebSocket);\n    if (_classPrivateFieldGet(_events, this).error) {\n      this.removeEventListener('error', _classPrivateFieldGet(_events, this).error);\n    }\n    if (typeof fn === 'function') {\n      _classPrivateFieldGet(_events, this).error = fn;\n      this.addEventListener('error', fn);\n    } else {\n      _classPrivateFieldGet(_events, this).error = null;\n    }\n  }\n  get onclose() {\n    webidl.brandCheck(this, WebSocket);\n    return _classPrivateFieldGet(_events, this).close;\n  }\n  set onclose(fn) {\n    webidl.brandCheck(this, WebSocket);\n    if (_classPrivateFieldGet(_events, this).close) {\n      this.removeEventListener('close', _classPrivateFieldGet(_events, this).close);\n    }\n    if (typeof fn === 'function') {\n      _classPrivateFieldGet(_events, this).close = fn;\n      this.addEventListener('close', fn);\n    } else {\n      _classPrivateFieldGet(_events, this).close = null;\n    }\n  }\n  get onmessage() {\n    webidl.brandCheck(this, WebSocket);\n    return _classPrivateFieldGet(_events, this).message;\n  }\n  set onmessage(fn) {\n    webidl.brandCheck(this, WebSocket);\n    if (_classPrivateFieldGet(_events, this).message) {\n      this.removeEventListener('message', _classPrivateFieldGet(_events, this).message);\n    }\n    if (typeof fn === 'function') {\n      _classPrivateFieldGet(_events, this).message = fn;\n      this.addEventListener('message', fn);\n    } else {\n      _classPrivateFieldGet(_events, this).message = null;\n    }\n  }\n  get binaryType() {\n    webidl.brandCheck(this, WebSocket);\n    return this[kBinaryType];\n  }\n  set binaryType(type) {\n    webidl.brandCheck(this, WebSocket);\n    if (type !== 'blob' && type !== 'arraybuffer') {\n      this[kBinaryType] = 'blob';\n    } else {\n      this[kBinaryType] = type;\n    }\n  }\n}\n\n// https://websockets.spec.whatwg.org/#dom-websocket-connecting\nfunction _onConnectionEstablished(response, parsedExtensions) {\n  // processResponse is called when the \"response’s header list has been received and initialized.\"\n  // once this happens, the connection is open\n  this[kResponse] = response;\n  const parser = new ByteParser(this, parsedExtensions);\n  parser.on('drain', onParserDrain);\n  parser.on('error', onParserError.bind(this));\n  response.socket.ws = this;\n  this[kByteParser] = parser;\n  _classPrivateFieldSet(_sendQueue, this, new SendQueue(response.socket));\n\n  // 1. Change the ready state to OPEN (1).\n  this[kReadyState] = states.OPEN;\n\n  // 2. Change the extensions attribute’s value to the extensions in use, if\n  //    it is not the null value.\n  // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1\n  const extensions = response.headersList.get('sec-websocket-extensions');\n  if (extensions !== null) {\n    _classPrivateFieldSet(_extensions, this, extensions);\n  }\n\n  // 3. Change the protocol attribute’s value to the subprotocol in use, if\n  //    it is not the null value.\n  // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9\n  const protocol = response.headersList.get('sec-websocket-protocol');\n  if (protocol !== null) {\n    _classPrivateFieldSet(_protocol, this, protocol);\n  }\n\n  // 4. Fire an event named open at the WebSocket object.\n  fireEvent('open', this);\n}\nWebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;\n// https://websockets.spec.whatwg.org/#dom-websocket-open\nWebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;\n// https://websockets.spec.whatwg.org/#dom-websocket-closing\nWebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;\n// https://websockets.spec.whatwg.org/#dom-websocket-closed\nWebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;\nObject.defineProperties(WebSocket.prototype, {\n  CONNECTING: staticPropertyDescriptors,\n  OPEN: staticPropertyDescriptors,\n  CLOSING: staticPropertyDescriptors,\n  CLOSED: staticPropertyDescriptors,\n  url: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  bufferedAmount: kEnumerableProperty,\n  onopen: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onclose: kEnumerableProperty,\n  close: kEnumerableProperty,\n  onmessage: kEnumerableProperty,\n  binaryType: kEnumerableProperty,\n  send: kEnumerableProperty,\n  extensions: kEnumerableProperty,\n  protocol: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'WebSocket',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n});\nObject.defineProperties(WebSocket, {\n  CONNECTING: staticPropertyDescriptors,\n  OPEN: staticPropertyDescriptors,\n  CLOSING: staticPropertyDescriptors,\n  CLOSED: staticPropertyDescriptors\n});\nwebidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(webidl.converters.DOMString);\nwebidl.converters['DOMString or sequence<DOMString>'] = function (V, prefix, argument) {\n  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {\n    return webidl.converters['sequence<DOMString>'](V);\n  }\n  return webidl.converters.DOMString(V, prefix, argument);\n};\n\n// This implements the proposal made in https://github.com/whatwg/websockets/issues/42\nwebidl.converters.WebSocketInit = webidl.dictionaryConverter([{\n  key: 'protocols',\n  converter: webidl.converters['DOMString or sequence<DOMString>'],\n  defaultValue: () => new Array(0)\n}, {\n  key: 'dispatcher',\n  converter: webidl.converters.any,\n  defaultValue: () => getGlobalDispatcher()\n}, {\n  key: 'headers',\n  converter: webidl.nullableConverter(webidl.converters.HeadersInit)\n}]);\nwebidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {\n  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {\n    return webidl.converters.WebSocketInit(V);\n  }\n  return {\n    protocols: webidl.converters['DOMString or sequence<DOMString>'](V)\n  };\n};\nwebidl.converters.WebSocketSendData = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, {\n        strict: false\n      });\n    }\n    if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {\n      return webidl.converters.BufferSource(V);\n    }\n  }\n  return webidl.converters.USVString(V);\n};\nfunction onParserDrain() {\n  this.ws[kResponse].socket.resume();\n}\nfunction onParserError(err) {\n  let message;\n  let code;\n  if (err instanceof CloseEvent) {\n    message = err.reason;\n    code = err.code;\n  } else {\n    message = err.message;\n  }\n  fireEvent('error', this, () => new ErrorEvent('error', {\n    error: err,\n    message\n  }));\n  closeWebSocketConnection(this, code);\n}\nmodule.exports = {\n  WebSocket\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/web/websocket/websocket.js\n");

/***/ })

};
;